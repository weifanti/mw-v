; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\rtc.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\rtc.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\lib\CMSIS\Include -I..\lib\Device\Nuvoton\NUC029xGE\Include -I..\lib\StdDriver\inc -I..\src\core\include -I..\src\driver\include -I..\src\io\include -I..\src\global -I..\src\server\include -I..\src\driver\audio -D__UVISION_VERSION=522 --omf_browse=.\obj\rtc.crf ..\lib\StdDriver\src\rtc.c]
                          THUMB

                          AREA ||i.RTC_32KCalibration||, CODE, READONLY, ALIGN=2

                  RTC_32KCalibration PROC
;;;103      */
;;;104    void RTC_32KCalibration(uint32_t u32FrequencyX100)
000000  b510              PUSH     {r4,lr}
;;;105    {
;;;106        uint32_t u32Freqadj;
;;;107        float fFactor;
;;;108    
;;;109        /*
;;;110            Formula for 32K compensation is
;;;111                FREQADJ = 0x200000 * (32768 / LXT_freq)
;;;112        */
;;;113        fFactor = (float)3276800 / u32FrequencyX100;
000002  f7fffffe          BL       __aeabi_ui2f
000006  4601              MOV      r1,r0
000008  4806              LDR      r0,|L1.36|
00000a  f7fffffe          BL       __aeabi_fdiv
;;;114        u32Freqadj = (uint32_t)(0x200000 * fFactor);
00000e  2115              MOVS     r1,#0x15
000010  f7fffffe          BL       __ARM_scalbnf
000014  f7fffffe          BL       __aeabi_f2uiz
000018  4604              MOV      r4,r0
;;;115    
;;;116        RTC_WaitAccessEnable();
00001a  f7fffffe          BL       RTC_WaitAccessEnable
;;;117        RTC->FREQADJ = u32Freqadj;
00001e  4802              LDR      r0,|L1.40|
000020  6084              STR      r4,[r0,#8]
;;;118    }
000022  bd10              POP      {r4,pc}
;;;119    
                          ENDP

                  |L1.36|
                          DCD      0x4a480000
                  |L1.40|
                          DCD      0x40008000

                          AREA ||i.RTC_Close||, CODE, READONLY, ALIGN=2

                  RTC_Close PROC
;;;89       */
;;;90     void RTC_Close(void)
000000  4802              LDR      r0,|L2.12|
;;;91     {
;;;92         CLK->APBCLK0 &= ~CLK_APBCLK0_RTCCKEN_Msk;
000002  6881              LDR      r1,[r0,#8]
000004  2202              MOVS     r2,#2
000006  4391              BICS     r1,r1,r2
000008  6081              STR      r1,[r0,#8]
;;;93     }
00000a  4770              BX       lr
;;;94     
                          ENDP

                  |L2.12|
                          DCD      0x50000200

                          AREA ||i.RTC_DisableInt||, CODE, READONLY, ALIGN=2

                  RTC_DisableInt PROC
;;;729      */
;;;730    void RTC_DisableInt(uint32_t u32IntFlagMask)
000000  4908              LDR      r1,|L3.36|
;;;731    {
;;;732        if(u32IntFlagMask & RTC_INTEN_ALMIEN_Msk)
000002  07c2              LSLS     r2,r0,#31
000004  d005              BEQ      |L3.18|
;;;733        {
;;;734            RTC->INTEN  &= ~RTC_INTEN_ALMIEN_Msk;
000006  6a8a              LDR      r2,[r1,#0x28]
000008  0852              LSRS     r2,r2,#1
00000a  0052              LSLS     r2,r2,#1
00000c  628a              STR      r2,[r1,#0x28]
;;;735            RTC->INTSTS = RTC_INTSTS_ALMIF_Msk;
00000e  2201              MOVS     r2,#1
000010  62ca              STR      r2,[r1,#0x2c]
                  |L3.18|
;;;736        }
;;;737    
;;;738        if(u32IntFlagMask & RTC_INTEN_TICKIEN_Msk)
000012  0780              LSLS     r0,r0,#30
000014  d504              BPL      |L3.32|
;;;739        {
;;;740            RTC->INTEN  &= ~RTC_INTEN_TICKIEN_Msk;
000016  6a8a              LDR      r2,[r1,#0x28]
000018  2002              MOVS     r0,#2
00001a  4382              BICS     r2,r2,r0
00001c  628a              STR      r2,[r1,#0x28]
;;;741            RTC->INTSTS = RTC_INTSTS_TICKIF_Msk;
00001e  62c8              STR      r0,[r1,#0x2c]
                  |L3.32|
;;;742        }
;;;743    }
000020  4770              BX       lr
;;;744    
                          ENDP

000022  0000              DCW      0x0000
                  |L3.36|
                          DCD      0x40008000

                          AREA ||i.RTC_EnableInt||, CODE, READONLY, ALIGN=2

                  RTC_EnableInt PROC
;;;713      */
;;;714    void RTC_EnableInt(uint32_t u32IntFlagMask)
000000  4902              LDR      r1,|L4.12|
;;;715    {
;;;716        RTC->INTEN |= u32IntFlagMask;
000002  6a8a              LDR      r2,[r1,#0x28]
000004  4302              ORRS     r2,r2,r0
000006  628a              STR      r2,[r1,#0x28]
;;;717    }
000008  4770              BX       lr
;;;718    
                          ENDP

00000a  0000              DCW      0x0000
                  |L4.12|
                          DCD      0x40008000

                          AREA ||i.RTC_GetAlarmDateAndTime||, CODE, READONLY, ALIGN=2

                  RTC_GetAlarmDateAndTime PROC
;;;232      */
;;;233    void RTC_GetAlarmDateAndTime(S_RTC_TIME_DATA_T *sPt)
000000  b5f8              PUSH     {r3-r7,lr}
;;;234    {
;;;235        uint32_t u32Tmp;
;;;236    
;;;237        sPt->u32TimeScale = RTC->CLKFMT & RTC_CLKFMT_24HEN_Msk;     /* 12/24-hour */
000002  4e3c              LDR      r6,|L5.244|
000004  4604              MOV      r4,r0                 ;234
000006  6970              LDR      r0,[r6,#0x14]
000008  07c0              LSLS     r0,r0,#31
00000a  0fc0              LSRS     r0,r0,#31
;;;238        sPt->u32DayOfWeek = RTC->WEEKDAY & RTC_WEEKDAY_WEEKDAY_Msk; /* Day of the week */
00000c  61e0              STR      r0,[r4,#0x1c]
00000e  69b0              LDR      r0,[r6,#0x18]
000010  0740              LSLS     r0,r0,#29
000012  0f40              LSRS     r0,r0,#29
;;;239    
;;;240        /* Get alarm [Date digit] data */
;;;241        RTC_WaitAccessEnable();
000014  60e0              STR      r0,[r4,#0xc]
000016  f7fffffe          BL       RTC_WaitAccessEnable
;;;242        g_u32hiYear  = (RTC->CALM & RTC_CALM_TENYEAR_Msk) >> RTC_CALM_TENYEAR_Pos;
00001a  6a30              LDR      r0,[r6,#0x20]
00001c  4d36              LDR      r5,|L5.248|
;;;243        g_u32loYear  = (RTC->CALM & RTC_CALM_YEAR_Msk) >> RTC_CALM_YEAR_Pos;
;;;244        g_u32hiMonth = (RTC->CALM & RTC_CALM_TENMON_Msk) >> RTC_CALM_TENMON_Pos;
;;;245        g_u32loMonth = (RTC->CALM & RTC_CALM_MON_Msk) >> RTC_CALM_MON_Pos;
;;;246        g_u32hiDay   = (RTC->CALM & RTC_CALM_TENDAY_Msk) >> RTC_CALM_TENDAY_Pos;
;;;247        g_u32loDay   = (RTC->CALM & RTC_CALM_DAY_Msk) >> RTC_CALM_DAY_Pos;
;;;248    
;;;249        /* Get alarm [Time digit] data */
;;;250        RTC_WaitAccessEnable();
;;;251        g_u32hiHour = (RTC->TALM & RTC_TALM_TENHR_Msk) >> RTC_TALM_TENHR_Pos;
;;;252        g_u32loHour = (RTC->TALM & RTC_TALM_HR_Msk) >> RTC_TALM_HR_Pos;
;;;253        g_u32hiMin  = (RTC->TALM & RTC_TALM_TENMIN_Msk) >> RTC_TALM_TENMIN_Pos;
;;;254        g_u32loMin  = (RTC->TALM & RTC_TALM_MIN_Msk) >> RTC_TALM_MIN_Pos;
;;;255        g_u32hiSec  = (RTC->TALM & RTC_TALM_TENSEC_Msk) >> RTC_TALM_TENSEC_Pos;
;;;256        g_u32loSec  = (RTC->TALM & RTC_TALM_SEC_Msk) >> RTC_TALM_SEC_Pos;
;;;257    
;;;258        /* Compute to 20XX year */
;;;259        u32Tmp  = (g_u32hiYear * 10);
;;;260        u32Tmp += g_u32loYear;
;;;261        sPt->u32Year = u32Tmp + RTC_YEAR2000;
;;;262    
;;;263        /* Compute 0~12 month */
;;;264        u32Tmp = (g_u32hiMonth * 10);
;;;265        sPt->u32Month = u32Tmp + g_u32loMonth;
;;;266    
;;;267        /* Compute 0~31 day */
;;;268        u32Tmp = (g_u32hiDay * 10);
;;;269        sPt->u32Day = u32Tmp + g_u32loDay;
;;;270    
;;;271        /* Compute 12/24 hour */
;;;272        if(sPt->u32TimeScale == RTC_CLOCK_12)
;;;273        {
;;;274            u32Tmp  = (g_u32hiHour * 10);
;;;275            u32Tmp += g_u32loHour;
;;;276            sPt->u32Hour = u32Tmp;          /* AM: 1~12. PM: 21~32. */
;;;277    
;;;278            if(sPt->u32Hour >= 21)
;;;279            {
;;;280                sPt->u32AmPm  = RTC_PM;
;;;281                sPt->u32Hour -= 20;
;;;282            }
;;;283            else
;;;284            {
;;;285                sPt->u32AmPm = RTC_AM;
;;;286            }
;;;287    
;;;288            u32Tmp  = (g_u32hiMin * 10);
;;;289            u32Tmp += g_u32loMin;
;;;290            sPt->u32Minute = u32Tmp;
;;;291    
;;;292            u32Tmp  = (g_u32hiSec * 10);
;;;293            u32Tmp += g_u32loSec;
;;;294            sPt->u32Second = u32Tmp;
;;;295        }
;;;296        else
;;;297        {
;;;298            u32Tmp  = (g_u32hiHour * 10);
;;;299            u32Tmp +=  g_u32loHour;
;;;300            sPt->u32Hour = u32Tmp;
;;;301    
;;;302            u32Tmp  = (g_u32hiMin * 10);
;;;303            u32Tmp += g_u32loMin;
;;;304            sPt->u32Minute = u32Tmp;
;;;305    
;;;306            u32Tmp  = (g_u32hiSec * 10);
;;;307            u32Tmp += g_u32loSec;
;;;308            sPt->u32Second = u32Tmp;
;;;309        }
;;;310    }
00001e  0200              LSLS     r0,r0,#8
000020  0f00              LSRS     r0,r0,#28
000022  6028              STR      r0,[r5,#0]            ;242  ; g_u32hiYear
000024  6a30              LDR      r0,[r6,#0x20]         ;243
000026  0300              LSLS     r0,r0,#12
000028  0f00              LSRS     r0,r0,#28
00002a  6068              STR      r0,[r5,#4]            ;243  ; g_u32loYear
00002c  6a30              LDR      r0,[r6,#0x20]         ;244
00002e  2701              MOVS     r7,#1
000030  04c0              LSLS     r0,r0,#19
000032  0fc0              LSRS     r0,r0,#31
000034  60a8              STR      r0,[r5,#8]            ;244  ; g_u32hiMonth
000036  6a30              LDR      r0,[r6,#0x20]         ;245
000038  0500              LSLS     r0,r0,#20
00003a  0f00              LSRS     r0,r0,#28
00003c  60e8              STR      r0,[r5,#0xc]          ;245  ; g_u32loMonth
00003e  6a30              LDR      r0,[r6,#0x20]         ;246
000040  0680              LSLS     r0,r0,#26
000042  0f80              LSRS     r0,r0,#30
000044  6128              STR      r0,[r5,#0x10]         ;246  ; g_u32hiDay
000046  6a30              LDR      r0,[r6,#0x20]         ;247
000048  0700              LSLS     r0,r0,#28             ;247
00004a  0f00              LSRS     r0,r0,#28             ;247
00004c  6168              STR      r0,[r5,#0x14]         ;247  ; g_u32loDay
00004e  f7fffffe          BL       RTC_WaitAccessEnable
000052  69f0              LDR      r0,[r6,#0x1c]         ;251
000054  0280              LSLS     r0,r0,#10
000056  0f80              LSRS     r0,r0,#30
000058  61a8              STR      r0,[r5,#0x18]         ;251  ; g_u32hiHour
00005a  69f0              LDR      r0,[r6,#0x1c]         ;252
00005c  0300              LSLS     r0,r0,#12
00005e  0f00              LSRS     r0,r0,#28
000060  61e8              STR      r0,[r5,#0x1c]         ;252  ; g_u32loHour
000062  69f0              LDR      r0,[r6,#0x1c]         ;253
000064  0440              LSLS     r0,r0,#17
000066  0f40              LSRS     r0,r0,#29
000068  6228              STR      r0,[r5,#0x20]         ;253  ; g_u32hiMin
00006a  69f0              LDR      r0,[r6,#0x1c]         ;254
00006c  0500              LSLS     r0,r0,#20
00006e  0f00              LSRS     r0,r0,#28
000070  6268              STR      r0,[r5,#0x24]         ;254  ; g_u32loMin
000072  69f0              LDR      r0,[r6,#0x1c]         ;255
000074  0640              LSLS     r0,r0,#25
000076  0f40              LSRS     r0,r0,#29
000078  62a8              STR      r0,[r5,#0x28]         ;255  ; g_u32hiSec
00007a  69f0              LDR      r0,[r6,#0x1c]         ;256
00007c  0700              LSLS     r0,r0,#28             ;256
00007e  0f00              LSRS     r0,r0,#28             ;256
000080  62e8              STR      r0,[r5,#0x2c]         ;256  ; g_u32loSec
000082  6828              LDR      r0,[r5,#0]            ;259  ; g_u32hiYear
000084  210a              MOVS     r1,#0xa               ;259
000086  4348              MULS     r0,r1,r0              ;259
000088  6869              LDR      r1,[r5,#4]            ;260  ; g_u32loYear
00008a  1840              ADDS     r0,r0,r1              ;260
00008c  217d              MOVS     r1,#0x7d              ;261
00008e  0109              LSLS     r1,r1,#4              ;261
000090  1840              ADDS     r0,r0,r1              ;261
000092  6020              STR      r0,[r4,#0]            ;264
000094  68a8              LDR      r0,[r5,#8]            ;264  ; g_u32hiMonth
000096  210a              MOVS     r1,#0xa               ;264
000098  4348              MULS     r0,r1,r0              ;264
00009a  68e9              LDR      r1,[r5,#0xc]          ;265  ; g_u32loMonth
00009c  1840              ADDS     r0,r0,r1              ;265
00009e  6060              STR      r0,[r4,#4]            ;268
0000a0  6928              LDR      r0,[r5,#0x10]         ;268  ; g_u32hiDay
0000a2  210a              MOVS     r1,#0xa               ;268
0000a4  4348              MULS     r0,r1,r0              ;268
0000a6  6969              LDR      r1,[r5,#0x14]         ;269  ; g_u32loDay
0000a8  1840              ADDS     r0,r0,r1              ;269
0000aa  60a0              STR      r0,[r4,#8]            ;272
0000ac  69e0              LDR      r0,[r4,#0x1c]         ;272
0000ae  2800              CMP      r0,#0                 ;272
0000b0  69a8              LDR      r0,[r5,#0x18]         ;298  ; g_u32hiHour
0000b2  d004              BEQ      |L5.190|
0000b4  210a              MOVS     r1,#0xa               ;298
0000b6  4348              MULS     r0,r1,r0              ;298
0000b8  69e9              LDR      r1,[r5,#0x1c]         ;299  ; g_u32loHour
0000ba  1840              ADDS     r0,r0,r1              ;299
0000bc  e009              B        |L5.210|
                  |L5.190|
0000be  210a              MOVS     r1,#0xa               ;274
0000c0  4348              MULS     r0,r1,r0              ;274
0000c2  69e9              LDR      r1,[r5,#0x1c]         ;275  ; g_u32loHour
0000c4  1840              ADDS     r0,r0,r1              ;275
0000c6  6120              STR      r0,[r4,#0x10]         ;278
0000c8  2815              CMP      r0,#0x15              ;278
0000ca  d304              BCC      |L5.214|
0000cc  2102              MOVS     r1,#2                 ;280
0000ce  3814              SUBS     r0,r0,#0x14           ;280
0000d0  6221              STR      r1,[r4,#0x20]         ;280
                  |L5.210|
0000d2  6120              STR      r0,[r4,#0x10]         ;300
0000d4  e000              B        |L5.216|
                  |L5.214|
0000d6  6227              STR      r7,[r4,#0x20]         ;285
                  |L5.216|
0000d8  6a28              LDR      r0,[r5,#0x20]         ;288  ; g_u32hiMin
0000da  210a              MOVS     r1,#0xa               ;288
0000dc  4348              MULS     r0,r1,r0              ;288
0000de  6a69              LDR      r1,[r5,#0x24]         ;289  ; g_u32loMin
0000e0  1840              ADDS     r0,r0,r1              ;289
0000e2  6160              STR      r0,[r4,#0x14]         ;292
0000e4  6aa8              LDR      r0,[r5,#0x28]         ;292  ; g_u32hiSec
0000e6  210a              MOVS     r1,#0xa               ;292
0000e8  4348              MULS     r0,r1,r0              ;292
0000ea  6ae9              LDR      r1,[r5,#0x2c]         ;293  ; g_u32loSec
0000ec  1840              ADDS     r0,r0,r1              ;293
0000ee  61a0              STR      r0,[r4,#0x18]         ;294
0000f0  bdf8              POP      {r3-r7,pc}
;;;311    
                          ENDP

0000f2  0000              DCW      0x0000
                  |L5.244|
                          DCD      0x40008000
                  |L5.248|
                          DCD      ||.data||

                          AREA ||i.RTC_GetDateAndTime||, CODE, READONLY, ALIGN=2

                  RTC_GetDateAndTime PROC
;;;137      */
;;;138    void RTC_GetDateAndTime(S_RTC_TIME_DATA_T *sPt)
000000  b530              PUSH     {r4,r5,lr}
;;;139    {
;;;140        uint32_t u32Tmp;
;;;141    
;;;142        sPt->u32TimeScale = RTC->CLKFMT & RTC_CLKFMT_24HEN_Msk;     /* 12/24-hour */
000002  4a39              LDR      r2,|L6.232|
000004  6951              LDR      r1,[r2,#0x14]
000006  07cb              LSLS     r3,r1,#31
000008  0fdb              LSRS     r3,r3,#31
;;;143        sPt->u32DayOfWeek = RTC->WEEKDAY & RTC_WEEKDAY_WEEKDAY_Msk; /* Day of the week */
00000a  61c3              STR      r3,[r0,#0x1c]
00000c  6991              LDR      r1,[r2,#0x18]
00000e  0749              LSLS     r1,r1,#29
000010  0f49              LSRS     r1,r1,#29
;;;144    
;;;145        /* Get [Date digit] data */
;;;146        g_u32hiYear  = (RTC->CAL & RTC_CAL_TENYEAR_Msk) >> RTC_CAL_TENYEAR_Pos;
000012  60c1              STR      r1,[r0,#0xc]
000014  6911              LDR      r1,[r2,#0x10]
;;;147        g_u32loYear  = (RTC->CAL & RTC_CAL_YEAR_Msk) >> RTC_CAL_YEAR_Pos;
;;;148        g_u32hiMonth = (RTC->CAL & RTC_CAL_TENMON_Msk) >> RTC_CAL_TENMON_Pos;
;;;149        g_u32loMonth = (RTC->CAL & RTC_CAL_MON_Msk) >> RTC_CAL_MON_Pos;
;;;150        g_u32hiDay   = (RTC->CAL & RTC_CAL_TENDAY_Msk) >> RTC_CAL_TENDAY_Pos;
;;;151        g_u32loDay   = (RTC->CAL & RTC_CAL_DAY_Msk) >> RTC_CAL_DAY_Pos;
;;;152    
;;;153        /* Get [Time digit] data */
;;;154        g_u32hiHour = (RTC->TIME & RTC_TIME_TENHR_Msk) >> RTC_TIME_TENHR_Pos;
;;;155        g_u32loHour = (RTC->TIME & RTC_TIME_HR_Msk) >> RTC_TIME_HR_Pos;
;;;156        g_u32hiMin  = (RTC->TIME & RTC_TIME_TENMIN_Msk) >> RTC_TIME_TENMIN_Pos;
;;;157        g_u32loMin  = (RTC->TIME & RTC_TIME_MIN_Msk) >> RTC_TIME_MIN_Pos;
;;;158        g_u32hiSec  = (RTC->TIME & RTC_TIME_TENSEC_Msk) >> RTC_TIME_TENSEC_Pos;
;;;159        g_u32loSec  = (RTC->TIME & RTC_TIME_SEC_Msk) >> RTC_TIME_SEC_Pos;
;;;160    
;;;161        /* Compute to 20XX year */
;;;162        u32Tmp  = (g_u32hiYear * 10);
;;;163        u32Tmp += g_u32loYear;
;;;164        sPt->u32Year = u32Tmp + RTC_YEAR2000;
;;;165    
;;;166        /* Compute 0~12 month */
;;;167        u32Tmp = (g_u32hiMonth * 10);
;;;168        sPt->u32Month = u32Tmp + g_u32loMonth;
;;;169    
;;;170        /* Compute 0~31 day */
;;;171        u32Tmp = (g_u32hiDay * 10);
;;;172        sPt->u32Day =  u32Tmp  + g_u32loDay;
;;;173    
;;;174        /* Compute 12/24 hour */
;;;175        if(sPt->u32TimeScale == RTC_CLOCK_12)
;;;176        {
;;;177            u32Tmp = (g_u32hiHour * 10);
;;;178            u32Tmp += g_u32loHour;
;;;179            sPt->u32Hour = u32Tmp;          /* AM: 1~12. PM: 21~32. */
;;;180    
;;;181            if(sPt->u32Hour >= 21)
;;;182            {
;;;183                sPt->u32AmPm  = RTC_PM;
;;;184                sPt->u32Hour -= 20;
;;;185            }
;;;186            else
;;;187            {
;;;188                sPt->u32AmPm = RTC_AM;
;;;189            }
;;;190    
;;;191            u32Tmp  = (g_u32hiMin  * 10);
;;;192            u32Tmp += g_u32loMin;
;;;193            sPt->u32Minute = u32Tmp;
;;;194    
;;;195            u32Tmp  = (g_u32hiSec  * 10);
;;;196            u32Tmp += g_u32loSec;
;;;197            sPt->u32Second = u32Tmp;
;;;198        }
;;;199        else
;;;200        {
;;;201            u32Tmp  = (g_u32hiHour * 10);
;;;202            u32Tmp += g_u32loHour;
;;;203            sPt->u32Hour = u32Tmp;
;;;204    
;;;205            u32Tmp  = (g_u32hiMin * 10);
;;;206            u32Tmp +=  g_u32loMin;
;;;207            sPt->u32Minute = u32Tmp;
;;;208    
;;;209            u32Tmp  = (g_u32hiSec * 10);
;;;210            u32Tmp += g_u32loSec;
;;;211            sPt->u32Second = u32Tmp;
;;;212        }
;;;213    }
000016  0209              LSLS     r1,r1,#8
000018  0f0c              LSRS     r4,r1,#28
00001a  4934              LDR      r1,|L6.236|
00001c  600c              STR      r4,[r1,#0]            ;146  ; g_u32hiYear
00001e  6914              LDR      r4,[r2,#0x10]         ;147
000020  0324              LSLS     r4,r4,#12
000022  0f24              LSRS     r4,r4,#28
000024  604c              STR      r4,[r1,#4]            ;147  ; g_u32loYear
000026  6914              LDR      r4,[r2,#0x10]         ;148
000028  04e5              LSLS     r5,r4,#19
00002a  2401              MOVS     r4,#1
00002c  0fed              LSRS     r5,r5,#31
00002e  608d              STR      r5,[r1,#8]            ;148  ; g_u32hiMonth
000030  6915              LDR      r5,[r2,#0x10]         ;149
000032  052d              LSLS     r5,r5,#20
000034  0f2d              LSRS     r5,r5,#28
000036  60cd              STR      r5,[r1,#0xc]          ;149  ; g_u32loMonth
000038  6915              LDR      r5,[r2,#0x10]         ;150
00003a  06ad              LSLS     r5,r5,#26
00003c  0fad              LSRS     r5,r5,#30
00003e  610d              STR      r5,[r1,#0x10]         ;150  ; g_u32hiDay
000040  6915              LDR      r5,[r2,#0x10]         ;151
000042  072d              LSLS     r5,r5,#28             ;151
000044  0f2d              LSRS     r5,r5,#28             ;151
000046  614d              STR      r5,[r1,#0x14]         ;151  ; g_u32loDay
000048  68d5              LDR      r5,[r2,#0xc]          ;154
00004a  02ad              LSLS     r5,r5,#10
00004c  0fad              LSRS     r5,r5,#30
00004e  618d              STR      r5,[r1,#0x18]         ;154  ; g_u32hiHour
000050  68d5              LDR      r5,[r2,#0xc]          ;155
000052  032d              LSLS     r5,r5,#12
000054  0f2d              LSRS     r5,r5,#28
000056  61cd              STR      r5,[r1,#0x1c]         ;155  ; g_u32loHour
000058  68d5              LDR      r5,[r2,#0xc]          ;156
00005a  046d              LSLS     r5,r5,#17
00005c  0f6d              LSRS     r5,r5,#29
00005e  620d              STR      r5,[r1,#0x20]         ;156  ; g_u32hiMin
000060  68d5              LDR      r5,[r2,#0xc]          ;157
000062  052d              LSLS     r5,r5,#20
000064  0f2d              LSRS     r5,r5,#28
000066  624d              STR      r5,[r1,#0x24]         ;157  ; g_u32loMin
000068  68d5              LDR      r5,[r2,#0xc]          ;158
00006a  066d              LSLS     r5,r5,#25
00006c  0f6d              LSRS     r5,r5,#29
00006e  628d              STR      r5,[r1,#0x28]         ;158  ; g_u32hiSec
000070  68d2              LDR      r2,[r2,#0xc]          ;159
000072  0712              LSLS     r2,r2,#28             ;159
000074  0f12              LSRS     r2,r2,#28             ;159
000076  62ca              STR      r2,[r1,#0x2c]         ;159  ; g_u32loSec
000078  680a              LDR      r2,[r1,#0]            ;162  ; g_u32hiYear
00007a  250a              MOVS     r5,#0xa               ;162
00007c  436a              MULS     r2,r5,r2              ;162
00007e  684d              LDR      r5,[r1,#4]            ;163  ; g_u32loYear
000080  1952              ADDS     r2,r2,r5              ;163
000082  257d              MOVS     r5,#0x7d              ;164
000084  012d              LSLS     r5,r5,#4              ;164
000086  1952              ADDS     r2,r2,r5              ;164
000088  6002              STR      r2,[r0,#0]            ;167
00008a  688a              LDR      r2,[r1,#8]            ;167  ; g_u32hiMonth
00008c  250a              MOVS     r5,#0xa               ;167
00008e  436a              MULS     r2,r5,r2              ;167
000090  68cd              LDR      r5,[r1,#0xc]          ;168  ; g_u32loMonth
000092  1952              ADDS     r2,r2,r5              ;168
000094  6042              STR      r2,[r0,#4]            ;171
000096  690a              LDR      r2,[r1,#0x10]         ;171  ; g_u32hiDay
000098  250a              MOVS     r5,#0xa               ;171
00009a  436a              MULS     r2,r5,r2              ;171
00009c  694d              LDR      r5,[r1,#0x14]         ;172  ; g_u32loDay
00009e  1952              ADDS     r2,r2,r5              ;172
0000a0  6082              STR      r2,[r0,#8]            ;175
0000a2  698a              LDR      r2,[r1,#0x18]         ;201  ; g_u32hiHour
0000a4  2b00              CMP      r3,#0                 ;175
0000a6  d004              BEQ      |L6.178|
0000a8  230a              MOVS     r3,#0xa               ;201
0000aa  435a              MULS     r2,r3,r2              ;201
0000ac  69cb              LDR      r3,[r1,#0x1c]         ;202  ; g_u32loHour
0000ae  18d2              ADDS     r2,r2,r3              ;202
0000b0  e009              B        |L6.198|
                  |L6.178|
0000b2  230a              MOVS     r3,#0xa               ;177
0000b4  435a              MULS     r2,r3,r2              ;177
0000b6  69cb              LDR      r3,[r1,#0x1c]         ;178  ; g_u32loHour
0000b8  18d2              ADDS     r2,r2,r3              ;178
0000ba  6102              STR      r2,[r0,#0x10]         ;181
0000bc  2a15              CMP      r2,#0x15              ;181
0000be  d304              BCC      |L6.202|
0000c0  2302              MOVS     r3,#2                 ;183
0000c2  3a14              SUBS     r2,r2,#0x14           ;183
0000c4  6203              STR      r3,[r0,#0x20]         ;183
                  |L6.198|
0000c6  6102              STR      r2,[r0,#0x10]         ;203
0000c8  e000              B        |L6.204|
                  |L6.202|
0000ca  6204              STR      r4,[r0,#0x20]         ;188
                  |L6.204|
0000cc  6a0a              LDR      r2,[r1,#0x20]         ;191  ; g_u32hiMin
0000ce  230a              MOVS     r3,#0xa               ;191
0000d0  435a              MULS     r2,r3,r2              ;191
0000d2  6a4b              LDR      r3,[r1,#0x24]         ;192  ; g_u32loMin
0000d4  18d2              ADDS     r2,r2,r3              ;192
0000d6  6142              STR      r2,[r0,#0x14]         ;195
0000d8  6a8a              LDR      r2,[r1,#0x28]         ;195  ; g_u32hiSec
0000da  230a              MOVS     r3,#0xa               ;195
0000dc  6ac9              LDR      r1,[r1,#0x2c]         ;196  ; g_u32loSec
0000de  435a              MULS     r2,r3,r2              ;195
0000e0  1851              ADDS     r1,r2,r1              ;196
0000e2  6181              STR      r1,[r0,#0x18]         ;197
0000e4  bd30              POP      {r4,r5,pc}
;;;214    
                          ENDP

0000e6  0000              DCW      0x0000
                  |L6.232|
                          DCD      0x40008000
                  |L6.236|
                          DCD      ||.data||

                          AREA ||i.RTC_GetDayOfWeek||, CODE, READONLY, ALIGN=2

                  RTC_GetDayOfWeek PROC
;;;672      */
;;;673    uint32_t RTC_GetDayOfWeek(void)
000000  4802              LDR      r0,|L7.12|
;;;674    {
;;;675        return (RTC->WEEKDAY & RTC_WEEKDAY_WEEKDAY_Msk);
000002  6980              LDR      r0,[r0,#0x18]
000004  0740              LSLS     r0,r0,#29
000006  0f40              LSRS     r0,r0,#29
;;;676    }
000008  4770              BX       lr
;;;677    
                          ENDP

00000a  0000              DCW      0x0000
                  |L7.12|
                          DCD      0x40008000

                          AREA ||i.RTC_Open||, CODE, READONLY, ALIGN=2

                  RTC_Open PROC
;;;60       */
;;;61     void RTC_Open(S_RTC_TIME_DATA_T *sPt)
000000  b510              PUSH     {r4,lr}
;;;62     {
;;;63         RTC->INIT = RTC_INIT_KEY;
000002  4c0a              LDR      r4,|L8.44|
000004  4908              LDR      r1,|L8.40|
000006  6021              STR      r1,[r4,#0]
;;;64     
;;;65         if(RTC->INIT != RTC_INIT_ACTIVE_Msk)
000008  6822              LDR      r2,[r4,#0]
00000a  2a01              CMP      r2,#1
00000c  d003              BEQ      |L8.22|
;;;66         {
;;;67             RTC->INIT = RTC_INIT_KEY;
00000e  6021              STR      r1,[r4,#0]
                  |L8.16|
;;;68             while(RTC->INIT != RTC_INIT_ACTIVE_Msk);
000010  6821              LDR      r1,[r4,#0]
000012  2901              CMP      r1,#1
000014  d1fc              BNE      |L8.16|
                  |L8.22|
;;;69         }
;;;70     
;;;71         if(sPt == 0)
000016  2800              CMP      r0,#0
000018  d004              BEQ      |L8.36|
;;;72             return ;
;;;73     
;;;74         /* Set RTC date and time */
;;;75         RTC_SetDateAndTime(sPt);
00001a  f7fffffe          BL       RTC_SetDateAndTime
                  |L8.30|
;;;76     
;;;77         /* Waiting for RTC settings stable */
;;;78         while((RTC->RWEN & RTC_RWEN_RWENF_Msk) == RTC_RWEN_RWENF_Msk);
00001e  6860              LDR      r0,[r4,#4]
000020  03c0              LSLS     r0,r0,#15
000022  d4fc              BMI      |L8.30|
                  |L8.36|
;;;79     }
000024  bd10              POP      {r4,pc}
;;;80     
                          ENDP

000026  0000              DCW      0x0000
                  |L8.40|
                          DCD      0xa5eb1357
                  |L8.44|
                          DCD      0x40008000

                          AREA ||i.RTC_SetAlarmDate||, CODE, READONLY, ALIGN=2

                  RTC_SetAlarmDate PROC
;;;545      */
;;;546    void RTC_SetAlarmDate(uint32_t u32Year, uint32_t u32Month, uint32_t u32Day)
000000  b570              PUSH     {r4-r6,lr}
;;;547    {
000002  4615              MOV      r5,r2
;;;548        uint32_t u32RegCALM;
;;;549    
;;;550        u32RegCALM  = ((u32Year - RTC_YEAR2000) / 10) << 20;
000004  227d              MOVS     r2,#0x7d
000006  460e              MOV      r6,r1                 ;547
000008  0112              LSLS     r2,r2,#4
00000a  210a              MOVS     r1,#0xa
00000c  1a80              SUBS     r0,r0,r2
00000e  f7fffffe          BL       __aeabi_uidivmod
;;;551        u32RegCALM |= (((u32Year - RTC_YEAR2000) % 10) << 16);
000012  040c              LSLS     r4,r1,#16
000014  0500              LSLS     r0,r0,#20             ;550
000016  4304              ORRS     r4,r4,r0
;;;552        u32RegCALM |= ((u32Month / 10) << 12);
000018  210a              MOVS     r1,#0xa
00001a  4630              MOV      r0,r6
00001c  f7fffffe          BL       __aeabi_uidivmod
000020  0300              LSLS     r0,r0,#12
000022  4320              ORRS     r0,r0,r4
;;;553        u32RegCALM |= ((u32Month % 10) << 8);
000024  020c              LSLS     r4,r1,#8
000026  4304              ORRS     r4,r4,r0
;;;554        u32RegCALM |= ((u32Day   / 10) << 4);
000028  210a              MOVS     r1,#0xa
00002a  4628              MOV      r0,r5
00002c  f7fffffe          BL       __aeabi_uidivmod
000030  0100              LSLS     r0,r0,#4
000032  4320              ORRS     r0,r0,r4
000034  460c              MOV      r4,r1
;;;555        u32RegCALM |= (u32Day   % 10);
000036  4304              ORRS     r4,r4,r0
;;;556    
;;;557        RTC_WaitAccessEnable();
000038  f7fffffe          BL       RTC_WaitAccessEnable
;;;558    
;;;559        /* Set RTC Alarm Date */
;;;560        RTC->CALM = (uint32_t)u32RegCALM;
00003c  4801              LDR      r0,|L9.68|
00003e  6204              STR      r4,[r0,#0x20]
;;;561    }
000040  bd70              POP      {r4-r6,pc}
;;;562    
                          ENDP

000042  0000              DCW      0x0000
                  |L9.68|
                          DCD      0x40008000

                          AREA ||i.RTC_SetAlarmDateAndTime||, CODE, READONLY, ALIGN=2

                  RTC_SetAlarmDateAndTime PROC
;;;405      */
;;;406    void RTC_SetAlarmDateAndTime(S_RTC_TIME_DATA_T *sPt)
000000  b5f8              PUSH     {r3-r7,lr}
;;;407    {
000002  0004              MOVS     r4,r0
000004  d040              BEQ      |L10.136|
;;;408        uint32_t u32RegCALM, u32RegTALM;
;;;409    
;;;410        if(sPt == 0)
;;;411            return ;
;;;412    
;;;413        /*-----------------------------------------------------------------------------------------------------*/
;;;414        /* Set RTC 24/12 hour setting and Day of the Week                                                      */
;;;415        /*-----------------------------------------------------------------------------------------------------*/
;;;416        RTC_WaitAccessEnable();
000006  f7fffffe          BL       RTC_WaitAccessEnable
;;;417        if(sPt->u32TimeScale == RTC_CLOCK_12)
00000a  69e0              LDR      r0,[r4,#0x1c]
;;;418        {
;;;419            RTC->CLKFMT &= ~RTC_CLKFMT_24HEN_Msk;
00000c  4d24              LDR      r5,|L10.160|
00000e  2800              CMP      r0,#0                 ;417
;;;420    
;;;421            /*-------------------------------------------------------------------------------------------------*/
;;;422            /* Important, range of 12-hour PM mode is 21 up to 32                                               */
;;;423            /*-------------------------------------------------------------------------------------------------*/
;;;424            if(sPt->u32AmPm == RTC_PM)
;;;425                sPt->u32Hour += 20;
;;;426        }
;;;427        else
;;;428        {
;;;429            RTC->CLKFMT |= RTC_CLKFMT_24HEN_Msk;
000010  6968              LDR      r0,[r5,#0x14]
000012  d03a              BEQ      |L10.138|
000014  2101              MOVS     r1,#1
000016  4308              ORRS     r0,r0,r1
000018  6168              STR      r0,[r5,#0x14]
                  |L10.26|
;;;430        }
;;;431    
;;;432        /* Set Day of the Week */
;;;433        RTC->WEEKDAY = sPt->u32DayOfWeek;
00001a  68e0              LDR      r0,[r4,#0xc]
00001c  61a8              STR      r0,[r5,#0x18]
;;;434    
;;;435        /*-----------------------------------------------------------------------------------------------------*/
;;;436        /* Set RTC Alarm Date and Time                                                                         */
;;;437        /*-----------------------------------------------------------------------------------------------------*/
;;;438        u32RegCALM  = ((sPt->u32Year - RTC_YEAR2000) / 10) << 20;
00001e  207d              MOVS     r0,#0x7d
000020  6821              LDR      r1,[r4,#0]
000022  0100              LSLS     r0,r0,#4
000024  1a08              SUBS     r0,r1,r0
000026  210a              MOVS     r1,#0xa
000028  f7fffffe          BL       __aeabi_uidivmod
;;;439        u32RegCALM |= (((sPt->u32Year - RTC_YEAR2000) % 10) << 16);
00002c  040e              LSLS     r6,r1,#16
00002e  0500              LSLS     r0,r0,#20             ;438
000030  4306              ORRS     r6,r6,r0
;;;440        u32RegCALM |= ((sPt->u32Month  / 10) << 12);
000032  210a              MOVS     r1,#0xa
000034  6860              LDR      r0,[r4,#4]
000036  f7fffffe          BL       __aeabi_uidivmod
00003a  0300              LSLS     r0,r0,#12
00003c  4330              ORRS     r0,r0,r6
;;;441        u32RegCALM |= ((sPt->u32Month  % 10) << 8);
00003e  020e              LSLS     r6,r1,#8
000040  4306              ORRS     r6,r6,r0
;;;442        u32RegCALM |= ((sPt->u32Day    / 10) << 4);
000042  210a              MOVS     r1,#0xa
000044  68a0              LDR      r0,[r4,#8]
000046  f7fffffe          BL       __aeabi_uidivmod
00004a  0100              LSLS     r0,r0,#4
00004c  4330              ORRS     r0,r0,r6
00004e  460e              MOV      r6,r1
;;;443        u32RegCALM |= (sPt->u32Day    % 10);
000050  4306              ORRS     r6,r6,r0
;;;444    
;;;445        u32RegTALM  = ((sPt->u32Hour   / 10) << 20);
000052  210a              MOVS     r1,#0xa
000054  6920              LDR      r0,[r4,#0x10]
000056  f7fffffe          BL       __aeabi_uidivmod
;;;446        u32RegTALM |= ((sPt->u32Hour   % 10) << 16);
00005a  040f              LSLS     r7,r1,#16
00005c  0500              LSLS     r0,r0,#20             ;445
00005e  4307              ORRS     r7,r7,r0
;;;447        u32RegTALM |= ((sPt->u32Minute / 10) << 12);
000060  210a              MOVS     r1,#0xa
000062  6960              LDR      r0,[r4,#0x14]
000064  f7fffffe          BL       __aeabi_uidivmod
000068  0300              LSLS     r0,r0,#12
00006a  4338              ORRS     r0,r0,r7
;;;448        u32RegTALM |= ((sPt->u32Minute % 10) << 8);
00006c  020f              LSLS     r7,r1,#8
00006e  4307              ORRS     r7,r7,r0
;;;449        u32RegTALM |= ((sPt->u32Second / 10) << 4);
000070  210a              MOVS     r1,#0xa
000072  69a0              LDR      r0,[r4,#0x18]
000074  f7fffffe          BL       __aeabi_uidivmod
000078  0100              LSLS     r0,r0,#4
00007a  4338              ORRS     r0,r0,r7
00007c  460c              MOV      r4,r1
;;;450        u32RegTALM |= (sPt->u32Second % 10);
00007e  4304              ORRS     r4,r4,r0
;;;451    
;;;452        RTC_WaitAccessEnable();
000080  f7fffffe          BL       RTC_WaitAccessEnable
;;;453        RTC->CALM = (uint32_t)u32RegCALM;
000084  622e              STR      r6,[r5,#0x20]
;;;454        RTC->TALM = (uint32_t)u32RegTALM;
000086  61ec              STR      r4,[r5,#0x1c]
                  |L10.136|
;;;455    }
000088  bdf8              POP      {r3-r7,pc}
                  |L10.138|
00008a  0840              LSRS     r0,r0,#1              ;419
00008c  0040              LSLS     r0,r0,#1              ;419
00008e  6168              STR      r0,[r5,#0x14]         ;419
000090  6a20              LDR      r0,[r4,#0x20]         ;424
000092  2802              CMP      r0,#2                 ;424
000094  d1c1              BNE      |L10.26|
000096  6920              LDR      r0,[r4,#0x10]         ;425
000098  3014              ADDS     r0,r0,#0x14           ;425
00009a  6120              STR      r0,[r4,#0x10]         ;425
00009c  e7bd              B        |L10.26|
;;;456    
                          ENDP

00009e  0000              DCW      0x0000
                  |L10.160|
                          DCD      0x40008000

                          AREA ||i.RTC_SetAlarmDateMask||, CODE, READONLY, ALIGN=2

                  RTC_SetAlarmDateMask PROC
;;;621      */
;;;622    void RTC_SetAlarmDateMask(uint8_t u8IsTenYMsk, uint8_t u8IsYMsk, uint8_t u8IsTenMMsk, uint8_t u8IsMMsk, uint8_t u8IsTenDMsk, uint8_t u8IsDMsk)
000000  b5f8              PUSH     {r3-r7,lr}
;;;623    {
000002  461d              MOV      r5,r3
000004  4616              MOV      r6,r2
000006  460f              MOV      r7,r1
000008  4604              MOV      r4,r0
;;;624        RTC_WaitAccessEnable();
00000a  f7fffffe          BL       RTC_WaitAccessEnable
;;;625        RTC->CAMSK = (u8IsTenYMsk << RTC_CAMSK_MTENYEAR_Pos) |
00000e  0160              LSLS     r0,r4,#5
000010  0139              LSLS     r1,r7,#4
000012  4308              ORRS     r0,r0,r1
000014  00f1              LSLS     r1,r6,#3
000016  4308              ORRS     r0,r0,r1
000018  00a9              LSLS     r1,r5,#2
00001a  4308              ORRS     r0,r0,r1
00001c  9906              LDR      r1,[sp,#0x18]
00001e  0049              LSLS     r1,r1,#1
000020  4308              ORRS     r0,r0,r1
000022  9907              LDR      r1,[sp,#0x1c]
000024  4308              ORRS     r0,r0,r1
000026  4901              LDR      r1,|L11.44|
000028  6388              STR      r0,[r1,#0x38]
;;;626                     (u8IsYMsk    << RTC_CAMSK_MYEAR_Pos) |
;;;627                     (u8IsTenMMsk << RTC_CAMSK_MTENMON_Pos) |
;;;628                     (u8IsMMsk    << RTC_CAMSK_MMON_Pos) |
;;;629                     (u8IsTenDMsk << RTC_CAMSK_MTENDAY_Pos) |
;;;630                     (u8IsDMsk    << RTC_CAMSK_MDAY_Pos);
;;;631    }
00002a  bdf8              POP      {r3-r7,pc}
;;;632    
                          ENDP

                  |L11.44|
                          DCD      0x40008000

                          AREA ||i.RTC_SetAlarmTime||, CODE, READONLY, ALIGN=2

                  RTC_SetAlarmTime PROC
;;;575      */
;;;576    void RTC_SetAlarmTime(uint32_t u32Hour, uint32_t u32Minute, uint32_t u32Second, uint32_t u32TimeMode, uint32_t u32AmPm)
000000  b5f8              PUSH     {r3-r7,lr}
;;;577    {
000002  460e              MOV      r6,r1
000004  9906              LDR      r1,[sp,#0x18]
000006  001d              MOVS     r5,r3
000008  4614              MOV      r4,r2
00000a  d102              BNE      |L12.18|
;;;578        uint32_t u32RegTALM;
;;;579    
;;;580        /* Important, range of 12-hour PM mode is 21 up to 32 */
;;;581        if((u32TimeMode == RTC_CLOCK_12) && (u32AmPm == RTC_PM))
00000c  2902              CMP      r1,#2
00000e  d100              BNE      |L12.18|
000010  3014              ADDS     r0,r0,#0x14
                  |L12.18|
;;;582            u32Hour += 20;
;;;583    
;;;584        u32RegTALM  = ((u32Hour   / 10) << 20);
000012  210a              MOVS     r1,#0xa
000014  f7fffffe          BL       __aeabi_uidivmod
;;;585        u32RegTALM |= ((u32Hour   % 10) << 16);
000018  040f              LSLS     r7,r1,#16
00001a  0500              LSLS     r0,r0,#20             ;584
00001c  4307              ORRS     r7,r7,r0
;;;586        u32RegTALM |= ((u32Minute / 10) << 12);
00001e  210a              MOVS     r1,#0xa
000020  4630              MOV      r0,r6
000022  f7fffffe          BL       __aeabi_uidivmod
000026  0300              LSLS     r0,r0,#12
;;;587        u32RegTALM |= ((u32Minute % 10) << 8);
000028  020e              LSLS     r6,r1,#8
00002a  4338              ORRS     r0,r0,r7              ;586
00002c  4306              ORRS     r6,r6,r0
;;;588        u32RegTALM |= ((u32Second / 10) << 4);
00002e  210a              MOVS     r1,#0xa
000030  4620              MOV      r0,r4
000032  f7fffffe          BL       __aeabi_uidivmod
000036  0100              LSLS     r0,r0,#4
000038  4330              ORRS     r0,r0,r6
;;;589        u32RegTALM |= (u32Second % 10);
00003a  4301              ORRS     r1,r1,r0
00003c  460c              MOV      r4,r1
;;;590    
;;;591        /*-----------------------------------------------------------------------------------------------------*/
;;;592        /* Set RTC 24/12 hour setting and Day of the Week                                                      */
;;;593        /*-----------------------------------------------------------------------------------------------------*/
;;;594        RTC_WaitAccessEnable();
00003e  f7fffffe          BL       RTC_WaitAccessEnable
;;;595        if(u32TimeMode == RTC_CLOCK_12)
;;;596        {
;;;597            RTC->CLKFMT &= ~RTC_CLKFMT_24HEN_Msk;
000042  4806              LDR      r0,|L12.92|
000044  2d00              CMP      r5,#0                 ;595
;;;598        }
;;;599        else
;;;600        {
;;;601            RTC->CLKFMT |= RTC_CLKFMT_24HEN_Msk;
000046  6941              LDR      r1,[r0,#0x14]
000048  d004              BEQ      |L12.84|
00004a  2201              MOVS     r2,#1
00004c  4311              ORRS     r1,r1,r2
                  |L12.78|
00004e  6141              STR      r1,[r0,#0x14]
;;;602        }
;;;603    
;;;604        /* Set RTC Alarm Time */
;;;605        RTC->TALM = (uint32_t)u32RegTALM;
000050  61c4              STR      r4,[r0,#0x1c]
;;;606    }
000052  bdf8              POP      {r3-r7,pc}
                  |L12.84|
000054  0849              LSRS     r1,r1,#1              ;597
000056  0049              LSLS     r1,r1,#1              ;597
000058  e7f9              B        |L12.78|
;;;607    
                          ENDP

00005a  0000              DCW      0x0000
                  |L12.92|
                          DCD      0x40008000

                          AREA ||i.RTC_SetAlarmTimeMask||, CODE, READONLY, ALIGN=2

                  RTC_SetAlarmTimeMask PROC
;;;646      */
;;;647    void RTC_SetAlarmTimeMask(uint8_t u8IsTenHMsk, uint8_t u8IsHMsk, uint8_t u8IsTenMMsk, uint8_t u8IsMMsk, uint8_t u8IsTenSMsk, uint8_t u8IsSMsk)
000000  b5f8              PUSH     {r3-r7,lr}
;;;648    {
000002  461d              MOV      r5,r3
000004  4616              MOV      r6,r2
000006  460f              MOV      r7,r1
000008  4604              MOV      r4,r0
;;;649        RTC_WaitAccessEnable();
00000a  f7fffffe          BL       RTC_WaitAccessEnable
;;;650        RTC->TAMSK = (u8IsTenHMsk << RTC_TAMSK_MTENHR_Pos) |
00000e  0160              LSLS     r0,r4,#5
000010  0139              LSLS     r1,r7,#4
000012  4308              ORRS     r0,r0,r1
000014  00f1              LSLS     r1,r6,#3
000016  4308              ORRS     r0,r0,r1
000018  00a9              LSLS     r1,r5,#2
00001a  4308              ORRS     r0,r0,r1
00001c  9906              LDR      r1,[sp,#0x18]
00001e  0049              LSLS     r1,r1,#1
000020  4308              ORRS     r0,r0,r1
000022  9907              LDR      r1,[sp,#0x1c]
000024  4308              ORRS     r0,r0,r1
000026  4901              LDR      r1,|L13.44|
000028  6348              STR      r0,[r1,#0x34]
;;;651                     (u8IsHMsk    << RTC_TAMSK_MHR_Pos) |
;;;652                     (u8IsTenMMsk << RTC_TAMSK_MTENMIN_Pos) |
;;;653                     (u8IsMMsk    << RTC_TAMSK_MMIN_Pos) |
;;;654                     (u8IsTenSMsk << RTC_TAMSK_MTENSEC_Pos) |
;;;655                     (u8IsSMsk    << RTC_TAMSK_MSEC_Pos);
;;;656    }
00002a  bdf8              POP      {r3-r7,pc}
;;;657    
                          ENDP

                  |L13.44|
                          DCD      0x40008000

                          AREA ||i.RTC_SetDate||, CODE, READONLY, ALIGN=2

                  RTC_SetDate PROC
;;;470      */
;;;471    void RTC_SetDate(uint32_t u32Year, uint32_t u32Month, uint32_t u32Day, uint32_t u32DayOfWeek)
000000  b5f8              PUSH     {r3-r7,lr}
;;;472    {
000002  4616              MOV      r6,r2
;;;473        uint32_t u32RegCAL;
;;;474    
;;;475        u32RegCAL  = ((u32Year - RTC_YEAR2000) / 10) << 20;
000004  227d              MOVS     r2,#0x7d
000006  460f              MOV      r7,r1                 ;472
000008  0112              LSLS     r2,r2,#4
00000a  461d              MOV      r5,r3                 ;472
00000c  210a              MOVS     r1,#0xa
00000e  1a80              SUBS     r0,r0,r2
000010  f7fffffe          BL       __aeabi_uidivmod
;;;476        u32RegCAL |= (((u32Year - RTC_YEAR2000) % 10) << 16);
000014  040c              LSLS     r4,r1,#16
000016  0500              LSLS     r0,r0,#20             ;475
000018  4304              ORRS     r4,r4,r0
;;;477        u32RegCAL |= ((u32Month / 10) << 12);
00001a  210a              MOVS     r1,#0xa
00001c  4638              MOV      r0,r7
00001e  f7fffffe          BL       __aeabi_uidivmod
000022  0300              LSLS     r0,r0,#12
000024  4320              ORRS     r0,r0,r4
;;;478        u32RegCAL |= ((u32Month % 10) << 8);
000026  020c              LSLS     r4,r1,#8
000028  4304              ORRS     r4,r4,r0
;;;479        u32RegCAL |= ((u32Day   / 10) << 4);
00002a  210a              MOVS     r1,#0xa
00002c  4630              MOV      r0,r6
00002e  f7fffffe          BL       __aeabi_uidivmod
000032  0100              LSLS     r0,r0,#4
000034  4320              ORRS     r0,r0,r4
000036  460c              MOV      r4,r1
;;;480        u32RegCAL |= (u32Day   % 10);
000038  4304              ORRS     r4,r4,r0
;;;481    
;;;482        RTC_WaitAccessEnable();
00003a  f7fffffe          BL       RTC_WaitAccessEnable
;;;483    
;;;484        /* Set Day of the Week */
;;;485        RTC->WEEKDAY = u32DayOfWeek & RTC_WEEKDAY_WEEKDAY_Msk;
00003e  0769              LSLS     r1,r5,#29
000040  4802              LDR      r0,|L14.76|
000042  0f49              LSRS     r1,r1,#29
000044  6181              STR      r1,[r0,#0x18]
;;;486    
;;;487        /* Set RTC Calender Loading */
;;;488        RTC->CAL = (uint32_t)u32RegCAL;
000046  6104              STR      r4,[r0,#0x10]
;;;489    }
000048  bdf8              POP      {r3-r7,pc}
;;;490    
                          ENDP

00004a  0000              DCW      0x0000
                  |L14.76|
                          DCD      0x40008000

                          AREA ||i.RTC_SetDateAndTime||, CODE, READONLY, ALIGN=2

                  RTC_SetDateAndTime PROC
;;;331      */
;;;332    void RTC_SetDateAndTime(S_RTC_TIME_DATA_T *sPt)
000000  b5f8              PUSH     {r3-r7,lr}
;;;333    {
000002  0004              MOVS     r4,r0
000004  d040              BEQ      |L15.136|
;;;334        uint32_t u32RegCAL, u32RegTIME;
;;;335    
;;;336        if(sPt == 0)
;;;337            return ;
;;;338    
;;;339        /*-----------------------------------------------------------------------------------------------------*/
;;;340        /* Set RTC 24/12 hour setting and Day of the Week                                                      */
;;;341        /*-----------------------------------------------------------------------------------------------------*/
;;;342        RTC_WaitAccessEnable();
000006  f7fffffe          BL       RTC_WaitAccessEnable
;;;343        if(sPt->u32TimeScale == RTC_CLOCK_12)
00000a  69e0              LDR      r0,[r4,#0x1c]
;;;344        {
;;;345            RTC->CLKFMT &= ~RTC_CLKFMT_24HEN_Msk;
00000c  4d24              LDR      r5,|L15.160|
00000e  2800              CMP      r0,#0                 ;343
;;;346    
;;;347            /*-------------------------------------------------------------------------------------------------*/
;;;348            /* Important, range of 12-hour PM mode is 21 up to 32                                               */
;;;349            /*-------------------------------------------------------------------------------------------------*/
;;;350            if(sPt->u32AmPm == RTC_PM)
;;;351                sPt->u32Hour += 20;
;;;352        }
;;;353        else
;;;354        {
;;;355            RTC->CLKFMT |= RTC_CLKFMT_24HEN_Msk;
000010  6968              LDR      r0,[r5,#0x14]
000012  d03a              BEQ      |L15.138|
000014  2101              MOVS     r1,#1
000016  4308              ORRS     r0,r0,r1
000018  6168              STR      r0,[r5,#0x14]
                  |L15.26|
;;;356        }
;;;357    
;;;358        /* Set Day of the Week */
;;;359        RTC->WEEKDAY = sPt->u32DayOfWeek;
00001a  68e0              LDR      r0,[r4,#0xc]
00001c  61a8              STR      r0,[r5,#0x18]
;;;360    
;;;361        /*-----------------------------------------------------------------------------------------------------*/
;;;362        /* Set RTC Current Date and Time                                                                       */
;;;363        /*-----------------------------------------------------------------------------------------------------*/
;;;364        u32RegCAL  = ((sPt->u32Year - RTC_YEAR2000) / 10) << 20;
00001e  207d              MOVS     r0,#0x7d
000020  6821              LDR      r1,[r4,#0]
000022  0100              LSLS     r0,r0,#4
000024  1a08              SUBS     r0,r1,r0
000026  210a              MOVS     r1,#0xa
000028  f7fffffe          BL       __aeabi_uidivmod
;;;365        u32RegCAL |= (((sPt->u32Year - RTC_YEAR2000) % 10) << 16);
00002c  040e              LSLS     r6,r1,#16
00002e  0500              LSLS     r0,r0,#20             ;364
000030  4306              ORRS     r6,r6,r0
;;;366        u32RegCAL |= ((sPt->u32Month  / 10) << 12);
000032  210a              MOVS     r1,#0xa
000034  6860              LDR      r0,[r4,#4]
000036  f7fffffe          BL       __aeabi_uidivmod
00003a  0300              LSLS     r0,r0,#12
00003c  4330              ORRS     r0,r0,r6
;;;367        u32RegCAL |= ((sPt->u32Month  % 10) << 8);
00003e  020e              LSLS     r6,r1,#8
000040  4306              ORRS     r6,r6,r0
;;;368        u32RegCAL |= ((sPt->u32Day    / 10) << 4);
000042  210a              MOVS     r1,#0xa
000044  68a0              LDR      r0,[r4,#8]
000046  f7fffffe          BL       __aeabi_uidivmod
00004a  0100              LSLS     r0,r0,#4
00004c  4330              ORRS     r0,r0,r6
00004e  460e              MOV      r6,r1
;;;369        u32RegCAL |= (sPt->u32Day     % 10);
000050  4306              ORRS     r6,r6,r0
;;;370    
;;;371        u32RegTIME  = ((sPt->u32Hour   / 10) << 20);
000052  210a              MOVS     r1,#0xa
000054  6920              LDR      r0,[r4,#0x10]
000056  f7fffffe          BL       __aeabi_uidivmod
;;;372        u32RegTIME |= ((sPt->u32Hour   % 10) << 16);
00005a  040f              LSLS     r7,r1,#16
00005c  0500              LSLS     r0,r0,#20             ;371
00005e  4307              ORRS     r7,r7,r0
;;;373        u32RegTIME |= ((sPt->u32Minute / 10) << 12);
000060  210a              MOVS     r1,#0xa
000062  6960              LDR      r0,[r4,#0x14]
000064  f7fffffe          BL       __aeabi_uidivmod
000068  0300              LSLS     r0,r0,#12
00006a  4338              ORRS     r0,r0,r7
;;;374        u32RegTIME |= ((sPt->u32Minute % 10) << 8);
00006c  020f              LSLS     r7,r1,#8
00006e  4307              ORRS     r7,r7,r0
;;;375        u32RegTIME |= ((sPt->u32Second / 10) << 4);
000070  210a              MOVS     r1,#0xa
000072  69a0              LDR      r0,[r4,#0x18]
000074  f7fffffe          BL       __aeabi_uidivmod
000078  0100              LSLS     r0,r0,#4
00007a  4338              ORRS     r0,r0,r7
00007c  460c              MOV      r4,r1
;;;376        u32RegTIME |= (sPt->u32Second % 10);
00007e  4304              ORRS     r4,r4,r0
;;;377    
;;;378        /*-----------------------------------------------------------------------------------------------------*/
;;;379        /* Set RTC Calender and Time Loading                                                                   */
;;;380        /*-----------------------------------------------------------------------------------------------------*/
;;;381        RTC_WaitAccessEnable();
000080  f7fffffe          BL       RTC_WaitAccessEnable
;;;382        RTC->CAL  = (uint32_t)u32RegCAL;
000084  612e              STR      r6,[r5,#0x10]
;;;383        RTC->TIME = (uint32_t)u32RegTIME;
000086  60ec              STR      r4,[r5,#0xc]
                  |L15.136|
;;;384    }
000088  bdf8              POP      {r3-r7,pc}
                  |L15.138|
00008a  0840              LSRS     r0,r0,#1              ;345
00008c  0040              LSLS     r0,r0,#1              ;345
00008e  6168              STR      r0,[r5,#0x14]         ;345
000090  6a20              LDR      r0,[r4,#0x20]         ;350
000092  2802              CMP      r0,#2                 ;350
000094  d1c1              BNE      |L15.26|
000096  6920              LDR      r0,[r4,#0x10]         ;351
000098  3014              ADDS     r0,r0,#0x14           ;351
00009a  6120              STR      r0,[r4,#0x10]         ;351
00009c  e7bd              B        |L15.26|
;;;385    
                          ENDP

00009e  0000              DCW      0x0000
                  |L15.160|
                          DCD      0x40008000

                          AREA ||i.RTC_SetTickPeriod||, CODE, READONLY, ALIGN=2

                  RTC_SetTickPeriod PROC
;;;695      */
;;;696    void RTC_SetTickPeriod(uint32_t u32TickSelection)
000000  b510              PUSH     {r4,lr}
;;;697    {
000002  4604              MOV      r4,r0
;;;698        RTC_WaitAccessEnable();
000004  f7fffffe          BL       RTC_WaitAccessEnable
;;;699    
;;;700        RTC->TICK = (RTC->TICK & ~RTC_TICK_TICK_Msk) | u32TickSelection;
000008  4903              LDR      r1,|L16.24|
00000a  6b08              LDR      r0,[r1,#0x30]
00000c  08c2              LSRS     r2,r0,#3
00000e  00d2              LSLS     r2,r2,#3
000010  4322              ORRS     r2,r2,r4
000012  630a              STR      r2,[r1,#0x30]
;;;701    }
000014  bd10              POP      {r4,pc}
;;;702    
                          ENDP

000016  0000              DCW      0x0000
                  |L16.24|
                          DCD      0x40008000

                          AREA ||i.RTC_SetTime||, CODE, READONLY, ALIGN=2

                  RTC_SetTime PROC
;;;503      */
;;;504    void RTC_SetTime(uint32_t u32Hour, uint32_t u32Minute, uint32_t u32Second, uint32_t u32TimeMode, uint32_t u32AmPm)
000000  b5f8              PUSH     {r3-r7,lr}
;;;505    {
000002  460e              MOV      r6,r1
000004  9906              LDR      r1,[sp,#0x18]
000006  001d              MOVS     r5,r3
000008  4614              MOV      r4,r2
00000a  d102              BNE      |L17.18|
;;;506        uint32_t u32RegTIME;
;;;507    
;;;508        /* Important, range of 12-hour PM mode is 21 up to 32 */
;;;509        if((u32TimeMode == RTC_CLOCK_12) && (u32AmPm == RTC_PM))
00000c  2902              CMP      r1,#2
00000e  d100              BNE      |L17.18|
000010  3014              ADDS     r0,r0,#0x14
                  |L17.18|
;;;510            u32Hour += 20;
;;;511    
;;;512        u32RegTIME  = ((u32Hour   / 10) << 20);
000012  210a              MOVS     r1,#0xa
000014  f7fffffe          BL       __aeabi_uidivmod
;;;513        u32RegTIME |= ((u32Hour   % 10) << 16);
000018  040f              LSLS     r7,r1,#16
00001a  0500              LSLS     r0,r0,#20             ;512
00001c  4307              ORRS     r7,r7,r0
;;;514        u32RegTIME |= ((u32Minute / 10) << 12);
00001e  210a              MOVS     r1,#0xa
000020  4630              MOV      r0,r6
000022  f7fffffe          BL       __aeabi_uidivmod
000026  0300              LSLS     r0,r0,#12
;;;515        u32RegTIME |= ((u32Minute % 10) << 8);
000028  020e              LSLS     r6,r1,#8
00002a  4338              ORRS     r0,r0,r7              ;514
00002c  4306              ORRS     r6,r6,r0
;;;516        u32RegTIME |= ((u32Second / 10) << 4);
00002e  210a              MOVS     r1,#0xa
000030  4620              MOV      r0,r4
000032  f7fffffe          BL       __aeabi_uidivmod
000036  0100              LSLS     r0,r0,#4
000038  4330              ORRS     r0,r0,r6
;;;517        u32RegTIME |= (u32Second % 10);
00003a  4301              ORRS     r1,r1,r0
00003c  460c              MOV      r4,r1
;;;518    
;;;519        /*-----------------------------------------------------------------------------------------------------*/
;;;520        /* Set RTC 24/12 hour setting and Day of the Week                                                      */
;;;521        /*-----------------------------------------------------------------------------------------------------*/
;;;522        RTC_WaitAccessEnable();
00003e  f7fffffe          BL       RTC_WaitAccessEnable
;;;523        if(u32TimeMode == RTC_CLOCK_12)
;;;524        {
;;;525            RTC->CLKFMT &= ~RTC_CLKFMT_24HEN_Msk;
000042  4806              LDR      r0,|L17.92|
000044  2d00              CMP      r5,#0                 ;523
;;;526        }
;;;527        else
;;;528        {
;;;529            RTC->CLKFMT |= RTC_CLKFMT_24HEN_Msk;
000046  6941              LDR      r1,[r0,#0x14]
000048  d004              BEQ      |L17.84|
00004a  2201              MOVS     r2,#1
00004c  4311              ORRS     r1,r1,r2
                  |L17.78|
00004e  6141              STR      r1,[r0,#0x14]
;;;530        }
;;;531    
;;;532        RTC->TIME = (uint32_t)u32RegTIME;
000050  60c4              STR      r4,[r0,#0xc]
;;;533    }
000052  bdf8              POP      {r3-r7,pc}
                  |L17.84|
000054  0849              LSRS     r1,r1,#1              ;525
000056  0049              LSLS     r1,r1,#1              ;525
000058  e7f9              B        |L17.78|
;;;534    
                          ENDP

00005a  0000              DCW      0x0000
                  |L17.92|
                          DCD      0x40008000

                          AREA ||i.RTC_WaitAccessEnable||, CODE, READONLY, ALIGN=2

                  RTC_WaitAccessEnable PROC
;;;190      */
;;;191    static __INLINE void RTC_WaitAccessEnable(void)
000000  4805              LDR      r0,|L18.24|
;;;192    {
;;;193        /* To wait RWENF bit is cleared and enable RWENF bit (Access Enable bit) again */
;;;194        RTC->RWEN = 0x0; // clear RWENF immediately
000002  2100              MOVS     r1,#0
000004  6041              STR      r1,[r0,#4]
                  |L18.6|
;;;195        while(RTC->RWEN & RTC_RWEN_RWENF_Msk);
000006  6841              LDR      r1,[r0,#4]
000008  03c9              LSLS     r1,r1,#15
00000a  d4fc              BMI      |L18.6|
;;;196    
;;;197        /* To wait RWENF bit is set and user can access the protected-register of RTC from now on */
;;;198        RTC->RWEN = RTC_WRITE_KEY;
00000c  4903              LDR      r1,|L18.28|
00000e  6041              STR      r1,[r0,#4]
                  |L18.16|
;;;199        while((RTC->RWEN & RTC_RWEN_RWENF_Msk) == 0x0);
000010  6841              LDR      r1,[r0,#4]
000012  03c9              LSLS     r1,r1,#15
000014  d5fc              BPL      |L18.16|
;;;200    }
000016  4770              BX       lr
;;;201    
                          ENDP

                  |L18.24|
                          DCD      0x40008000
                  |L18.28|
                          DCD      0x0000a965

                          AREA ||.data||, DATA, ALIGN=2

                  g_u32hiYear
                          DCD      0x00000000
                  g_u32loYear
                          DCD      0x00000000
                  g_u32hiMonth
                          DCD      0x00000000
                  g_u32loMonth
                          DCD      0x00000000
                  g_u32hiDay
                          DCD      0x00000000
                  g_u32loDay
                          DCD      0x00000000
                  g_u32hiHour
                          DCD      0x00000000
                  g_u32loHour
                          DCD      0x00000000
                  g_u32hiMin
                          DCD      0x00000000
                  g_u32loMin
                          DCD      0x00000000
                  g_u32hiSec
                          DCD      0x00000000
                  g_u32loSec
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\lib\\StdDriver\\src\\rtc.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___5_rtc_c_RTC_Open____REV16|
#line 388 "..\\lib\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___5_rtc_c_RTC_Open____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___5_rtc_c_RTC_Open____REVSH|
#line 402
|__asm___5_rtc_c_RTC_Open____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
