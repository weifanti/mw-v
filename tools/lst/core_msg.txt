; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\core_msg.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\core_msg.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\lib\CMSIS\Include -I..\lib\Device\Nuvoton\NUC029xGE\Include -I..\lib\StdDriver\inc -I..\src\core\include -I..\src\driver\include -I..\src\io\include -I..\src\global -I..\src\server\include -I..\src\driver\audio -D__UVISION_VERSION=522 --omf_browse=.\obj\core_msg.crf ..\src\core\core_msg.c]
                          THUMB

                          AREA ||i.Core_Msg_Chk||, CODE, READONLY, ALIGN=2

                  Core_Msg_Chk PROC
;;;84     
;;;85     int Core_Msg_Chk(uint32_t msg, uint32_t param0, uint32_t param1, uint32_t param2)
000000  b5ff              PUSH     {r0-r7,lr}
;;;86     {
000002  b081              SUB      sp,sp,#4
000004  4614              MOV      r4,r2
000006  460d              MOV      r5,r1
000008  4606              MOV      r6,r0
;;;87         uint8_t temp0, temp1;
;;;88         bool ret;
;;;89     
;;;90         Core_Int_Store();
00000a  f7fffffe          BL       Core_Int_Store
;;;91         temp0 = curr_pos;
00000e  4812              LDR      r0,|L1.88|
000010  7803              LDRB     r3,[r0,#0]  ; curr_pos
;;;92         temp1 = 0;
;;;93     
;;;94         while(1)
;;;95         {
;;;96             if((msg_arr[temp0].msg == msg)
000012  4f12              LDR      r7,|L1.92|
000014  2000              MOVS     r0,#0                 ;92
                  |L1.22|
000016  0119              LSLS     r1,r3,#4
000018  587a              LDR      r2,[r7,r1]
00001a  42b2              CMP      r2,r6
00001c  d10c              BNE      |L1.56|
;;;97                     && (msg_arr[temp0].param0 == param0)
00001e  19c9              ADDS     r1,r1,r7
000020  684a              LDR      r2,[r1,#4]
000022  42aa              CMP      r2,r5
000024  d108              BNE      |L1.56|
;;;98                     && (msg_arr[temp0].param1 == param1)
000026  688a              LDR      r2,[r1,#8]
000028  42a2              CMP      r2,r4
00002a  d105              BNE      |L1.56|
;;;99                     && (msg_arr[temp0].param2 == param2))
00002c  68ca              LDR      r2,[r1,#0xc]
00002e  9904              LDR      r1,[sp,#0x10]
000030  428a              CMP      r2,r1
000032  d101              BNE      |L1.56|
;;;100            {
;;;101                ret = TRUE;
000034  2401              MOVS     r4,#1
;;;102    
;;;103                goto end;
000036  e009              B        |L1.76|
                  |L1.56|
000038  1c5b              ADDS     r3,r3,#1
;;;104            }
;;;105            else
;;;106            {
;;;107                temp0++;
00003a  1c40              ADDS     r0,r0,#1
00003c  b2db              UXTB     r3,r3
;;;108                temp1++;
00003e  b2c0              UXTB     r0,r0
;;;109    
;;;110                if(temp0 >= CORE_MSG_CNT)
000040  2b20              CMP      r3,#0x20
000042  d300              BCC      |L1.70|
;;;111                {
;;;112                    temp0 = 0;
000044  2300              MOVS     r3,#0
                  |L1.70|
;;;113                }
;;;114    
;;;115                if(temp1 >= CORE_MSG_CNT)
000046  2820              CMP      r0,#0x20
000048  d3e5              BCC      |L1.22|
;;;116                {
;;;117                    ret = FALSE;
00004a  2400              MOVS     r4,#0
                  |L1.76|
;;;118    
;;;119                    goto end;
;;;120                }
;;;121            }
;;;122        }
;;;123    
;;;124    end:
;;;125        Core_Int_Restore();
00004c  f7fffffe          BL       Core_Int_Restore
;;;126    
;;;127        return ret;
000050  4620              MOV      r0,r4
;;;128    }
000052  b005              ADD      sp,sp,#0x14
000054  bdf0              POP      {r4-r7,pc}
;;;129    
                          ENDP

000056  0000              DCW      0x0000
                  |L1.88|
                          DCD      ||.data||
                  |L1.92|
                          DCD      ||.bss||

                          AREA ||i.Core_Msg_Get||, CODE, READONLY, ALIGN=2

                  Core_Msg_Get PROC
;;;129    
;;;130    int Core_Msg_Get(sCoreMsg* ptr)   // get one msg from mbx, then del this message
000000  b5f8              PUSH     {r3-r7,lr}
;;;131    {
000002  4604              MOV      r4,r0
;;;132        uint8_t temp0, temp1;
;;;133        uint32_t msg, temp2, temp3, temp4;
;;;134        bool ret = FALSE;
000004  2000              MOVS     r0,#0
;;;135    
;;;136        Core_Int_Store();
000006  9000              STR      r0,[sp,#0]
000008  f7fffffe          BL       Core_Int_Store
;;;137        temp0 = curr_pos;
00000c  4813              LDR      r0,|L2.92|
00000e  7801              LDRB     r1,[r0,#0]  ; curr_pos
;;;138        temp1 = 0;
;;;139    
;;;140        while(1)
;;;141        {
;;;142            msg = msg_arr[temp0].msg;
000010  4f13              LDR      r7,|L2.96|
000012  2200              MOVS     r2,#0                 ;138
                  |L2.20|
000014  010b              LSLS     r3,r1,#4
000016  58f8              LDR      r0,[r7,r3]
;;;143            temp2 = msg_arr[temp0].param0;
000018  19db              ADDS     r3,r3,r7
00001a  685e              LDR      r6,[r3,#4]
;;;144            temp3 = msg_arr[temp0].param1;
00001c  689d              LDR      r5,[r3,#8]
;;;145            temp4 = msg_arr[temp0].param2;
00001e  68db              LDR      r3,[r3,#0xc]
;;;146    
;;;147            if(msg)
000020  2800              CMP      r0,#0
000022  d00c              BEQ      |L2.62|
;;;148            {
;;;149                ptr->msg = msg;
;;;150                ptr->param0 = temp2;
;;;151                ptr->param1 = temp3;
;;;152                ptr->param2 = temp4;
000024  60a5              STR      r5,[r4,#8]
000026  60e3              STR      r3,[r4,#0xc]
000028  c441              STM      r4!,{r0,r6}
;;;153                ret = TRUE;
00002a  2001              MOVS     r0,#1
;;;154    
;;;155                // del this message from mbx
;;;156                msg_arr[temp0].msg = 0;
00002c  2200              MOVS     r2,#0
00002e  9000              STR      r0,[sp,#0]
000030  0108              LSLS     r0,r1,#4
000032  503a              STR      r2,[r7,r0]
;;;157                msg_arr[temp0].param0 = 0;
000034  19c0              ADDS     r0,r0,r7
000036  6042              STR      r2,[r0,#4]
;;;158                msg_arr[temp0].param1 = 0;
000038  6082              STR      r2,[r0,#8]
;;;159                msg_arr[temp0].param2 = 0;
00003a  60c2              STR      r2,[r0,#0xc]
;;;160    
;;;161                goto end;
00003c  e008              B        |L2.80|
                  |L2.62|
00003e  1c49              ADDS     r1,r1,#1
;;;162            }
;;;163    
;;;164            temp0++;
000040  1c52              ADDS     r2,r2,#1
000042  b2c9              UXTB     r1,r1
;;;165            temp1++;
000044  b2d2              UXTB     r2,r2
;;;166    
;;;167            if(temp0 >= CORE_MSG_CNT)
000046  2920              CMP      r1,#0x20
000048  d300              BCC      |L2.76|
;;;168            {
;;;169                temp0 = 0;
00004a  2100              MOVS     r1,#0
                  |L2.76|
;;;170            }
;;;171    
;;;172            if(temp1 >= CORE_MSG_CNT)
00004c  2a20              CMP      r2,#0x20
00004e  d3e1              BCC      |L2.20|
                  |L2.80|
;;;173            {
;;;174                temp1 = 0;
;;;175    
;;;176                goto end;
;;;177            }
;;;178        }
;;;179    
;;;180    end:
;;;181        curr_pos = temp0;
000050  4802              LDR      r0,|L2.92|
000052  7001              STRB     r1,[r0,#0]
;;;182        Core_Int_Restore();
000054  f7fffffe          BL       Core_Int_Restore
;;;183    
;;;184        return ret;
000058  9800              LDR      r0,[sp,#0]
;;;185    }
00005a  bdf8              POP      {r3-r7,pc}
;;;186    
                          ENDP

                  |L2.92|
                          DCD      ||.data||
                  |L2.96|
                          DCD      ||.bss||

                          AREA ||i.Core_Msg_Init||, CODE, READONLY, ALIGN=2

                  Core_Msg_Init PROC
;;;20     
;;;21     void Core_Msg_Init(void)
000000  b510              PUSH     {r4,lr}
;;;22     {
;;;23         uint8_t     cnt;
;;;24     
;;;25         Core_Int_Store();
000002  f7fffffe          BL       Core_Int_Store
;;;26     
;;;27         for(cnt = 0; cnt < CORE_MSG_CNT; cnt++)
000006  2000              MOVS     r0,#0
;;;28         {
;;;29             msg_arr[cnt].msg = NULL;
000008  4b08              LDR      r3,|L3.44|
00000a  4602              MOV      r2,r0                 ;27
                  |L3.12|
00000c  0101              LSLS     r1,r0,#4
00000e  505a              STR      r2,[r3,r1]
;;;30             msg_arr[cnt].param0 = 0;
000010  18c9              ADDS     r1,r1,r3
000012  604a              STR      r2,[r1,#4]
;;;31             msg_arr[cnt].param1 = 0;
000014  608a              STR      r2,[r1,#8]
;;;32             msg_arr[cnt].param2 = 0;
000016  60ca              STR      r2,[r1,#0xc]
000018  1c40              ADDS     r0,r0,#1
00001a  b2c0              UXTB     r0,r0                 ;27
00001c  2820              CMP      r0,#0x20              ;27
00001e  d3f5              BCC      |L3.12|
;;;33         }
;;;34     
;;;35         curr_pos = 0;
000020  4803              LDR      r0,|L3.48|
000022  7002              STRB     r2,[r0,#0]
;;;36         Core_Int_Restore();
000024  f7fffffe          BL       Core_Int_Restore
;;;37     }
000028  bd10              POP      {r4,pc}
;;;38     
                          ENDP

00002a  0000              DCW      0x0000
                  |L3.44|
                          DCD      ||.bss||
                  |L3.48|
                          DCD      ||.data||

                          AREA ||i.Core_Msg_Send||, CODE, READONLY, ALIGN=2

                  Core_Msg_Send PROC
;;;38     
;;;39     int Core_Msg_Send(uint32_t msg, uint32_t param0, uint32_t param1, uint32_t param2)
000000  b5f8              PUSH     {r3-r7,lr}
;;;40     {
000002  461c              MOV      r4,r3
000004  4615              MOV      r5,r2
000006  460e              MOV      r6,r1
000008  4607              MOV      r7,r0
;;;41         uint8_t temp0, temp1;
;;;42         bool ret;
;;;43     
;;;44         Core_Int_Store();
00000a  f7fffffe          BL       Core_Int_Store
;;;45         temp0 = curr_pos;
00000e  480f              LDR      r0,|L4.76|
000010  7800              LDRB     r0,[r0,#0]  ; curr_pos
;;;46         temp1 = 0;
;;;47     
;;;48         while(1)
;;;49         {
;;;50             if(msg_arr[temp0].msg)
000012  4a0f              LDR      r2,|L4.80|
000014  2100              MOVS     r1,#0                 ;46
                  |L4.22|
000016  0103              LSLS     r3,r0,#4
000018  58d3              LDR      r3,[r2,r3]
00001a  2b00              CMP      r3,#0
00001c  d00a              BEQ      |L4.52|
00001e  1c40              ADDS     r0,r0,#1
;;;51             {
;;;52                 temp0++;
000020  1c49              ADDS     r1,r1,#1
000022  b2c0              UXTB     r0,r0
;;;53                 temp1++;
000024  b2c9              UXTB     r1,r1
;;;54     
;;;55                 if(temp0 >= CORE_MSG_CNT)
000026  2820              CMP      r0,#0x20
000028  d300              BCC      |L4.44|
;;;56                 {
;;;57                     temp0 = 0;
00002a  2000              MOVS     r0,#0
                  |L4.44|
;;;58                 }
;;;59     
;;;60                 if(temp1 >= CORE_MSG_CNT)
00002c  2920              CMP      r1,#0x20
00002e  d3f2              BCC      |L4.22|
;;;61                 {
;;;62                     ret = FALSE;
000030  2400              MOVS     r4,#0
;;;63                     goto end;
000032  e006              B        |L4.66|
                  |L4.52|
;;;64                 }
;;;65             }
;;;66             else
;;;67             {
;;;68                 msg_arr[temp0].msg = msg;
000034  0100              LSLS     r0,r0,#4
000036  5017              STR      r7,[r2,r0]
;;;69                 msg_arr[temp0].param0 = param0;
000038  1880              ADDS     r0,r0,r2
00003a  6046              STR      r6,[r0,#4]
;;;70                 msg_arr[temp0].param1 = param1;
00003c  6085              STR      r5,[r0,#8]
;;;71                 msg_arr[temp0].param2 = param2;
00003e  60c4              STR      r4,[r0,#0xc]
;;;72     
;;;73                 ret = TRUE;
000040  2401              MOVS     r4,#1
                  |L4.66|
;;;74     
;;;75                 goto end;
;;;76             }
;;;77         }
;;;78     
;;;79     end:
;;;80         Core_Int_Restore();
000042  f7fffffe          BL       Core_Int_Restore
;;;81     
;;;82         return ret;
000046  4620              MOV      r0,r4
;;;83     }
000048  bdf8              POP      {r3-r7,pc}
;;;84     
                          ENDP

00004a  0000              DCW      0x0000
                  |L4.76|
                          DCD      ||.data||
                  |L4.80|
                          DCD      ||.bss||

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  msg_arr
                          %        512

                          AREA ||.data||, DATA, ALIGN=0

                  curr_pos
000000  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "..\\src\\core\\core_msg.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___10_core_msg_c_ee360c1b____REV16|
#line 388 "..\\lib\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___10_core_msg_c_ee360c1b____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___10_core_msg_c_ee360c1b____REVSH|
#line 402
|__asm___10_core_msg_c_ee360c1b____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
