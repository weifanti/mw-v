; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\drv_dsp_1761.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\drv_dsp_1761.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\lib\CMSIS\Include -I..\lib\Device\Nuvoton\NUC029xGE\Include -I..\lib\StdDriver\inc -I..\src\core\include -I..\src\driver\include -I..\src\io\include -I..\src\global -I..\src\server\include -D__UVISION_VERSION=522 --omf_browse=.\obj\drv_dsp_1761.crf ..\src\driver\drv_dsp_1761.c]
                          THUMB

                          AREA ||i.Hal_Dsp_Audio_Stream_Sw||, CODE, READONLY, ALIGN=2

                  Hal_Dsp_Audio_Stream_Sw PROC
;;;680     */
;;;681    void Hal_Dsp_Audio_Stream_Sw(dsp_audio_stream_e audio_stream)
000000  b510              PUSH     {r4,lr}
;;;682    {
;;;683        if(audio_stream > DSP_AUDIO_STREAM_DIG)
000002  2801              CMP      r0,#1
000004  d806              BHI      |L1.20|
;;;684        {
;;;685            return;
;;;686        }
;;;687    
;;;688        /* safeload */
;;;689        Hal_Dsp_Safeload((uint8_t*)&(stream_table[audio_stream]), 1, AUDIO_SW_ADDR);
000006  4904              LDR      r1,|L1.24|
000008  0080              LSLS     r0,r0,#2
00000a  1840              ADDS     r0,r0,r1
00000c  2208              MOVS     r2,#8
00000e  2101              MOVS     r1,#1
000010  f7fffffe          BL       Hal_Dsp_Safeload
                  |L1.20|
;;;690    }
000014  bd10              POP      {r4,pc}
;;;691    
                          ENDP

000016  0000              DCW      0x0000
                  |L1.24|
                          DCD      ||area_number.42||

                          AREA ||i.Hal_Dsp_Init||, CODE, READONLY, ALIGN=2

                  Hal_Dsp_Init PROC
;;;545     */
;;;546    void Hal_Dsp_Init(void)
000000  b5f8              PUSH     {r3-r7,lr}
;;;547    {
;;;548    	volatile uint32_t i;
;;;549    printf("Hal_Dsp_Init**********\n");
000002  a01b              ADR      r0,|L2.112|
000004  f7fffffe          BL       __2printf
000008  2159              MOVS     r1,#0x59
00000a  481f              LDR      r0,|L2.136|
00000c  2216              MOVS     r2,#0x16
00000e  2388              MOVS     r3,#0x88
                  |L2.16|
000010  6001              STR      r1,[r0,#0]
000012  6002              STR      r2,[r0,#0]
000014  6003              STR      r3,[r0,#0]
000016  6804              LDR      r4,[r0,#0]
000018  2c00              CMP      r4,#0
00001a  d0f9              BEQ      |L2.16|
00001c  2500              MOVS     r5,#0
00001e  6005              STR      r5,[r0,#0]
000020  4e1a              LDR      r6,|L2.140|
000022  462c              MOV      r4,r5
                  |L2.36|
000024  00e0              LSLS     r0,r4,#3
000026  1981              ADDS     r1,r0,r6
000028  9500              STR      r5,[sp,#0]
00002a  684a              LDR      r2,[r1,#4]
00002c  5831              LDR      r1,[r6,r0]
00002e  2300              MOVS     r3,#0
000030  2070              MOVS     r0,#0x70
000032  f7fffffe          BL       Hal_I2c1_Transfer
000036  1c64              ADDS     r4,r4,#1
000038  b2e4              UXTB     r4,r4
00003a  2c04              CMP      r4,#4
00003c  d3f2              BCC      |L2.36|
;;;550        /* Unlock protected registers */
;;;551        SYS_UnlockReg();
;;;552    
;;;553        /* DSP Reset MFP */
;;;554        //GPIO_SetMode(DSP_RST_PORT, DSP_RST_PIN_MASK, DSP_RST_MODE);
;;;555        //Hal_Sys_Mfp_Set(DSP_RST_MFP_REG, DSP_RST_MFP_MASK, DSP_RST_MFP_CFG);
;;;556    
;;;557    	//GPIO_SetMode(PF, BIT2, GPIO_MODE_OUTPUT);
;;;558    	
;;;559        SYS_LockReg();
;;;560    
;;;561        /* load data */
;;;562        /* the first part */
;;;563        Hal_Dsp_Load_Part_0();
;;;564    
;;;565    	for(i = 0UL; i < 100 ; ++i)  //10000000
00003e  9500              STR      r5,[sp,#0]
                  |L2.64|
;;;566    	{
;;;567    	   __NOP();
000040  bf00              NOP      
000042  9800              LDR      r0,[sp,#0]            ;565
000044  1c40              ADDS     r0,r0,#1              ;565
000046  9000              STR      r0,[sp,#0]            ;565
000048  2864              CMP      r0,#0x64              ;565
00004a  d3f9              BCC      |L2.64|
00004c  4e0f              LDR      r6,|L2.140|
00004e  2400              MOVS     r4,#0                 ;565
000050  3620              ADDS     r6,r6,#0x20           ;565
                  |L2.82|
000052  00e0              LSLS     r0,r4,#3              ;565
000054  1981              ADDS     r1,r0,r6              ;565
000056  9500              STR      r5,[sp,#0]            ;565
000058  684a              LDR      r2,[r1,#4]            ;565
00005a  5831              LDR      r1,[r6,r0]            ;565
00005c  2300              MOVS     r3,#0                 ;565
00005e  2070              MOVS     r0,#0x70              ;565
000060  f7fffffe          BL       Hal_I2c1_Transfer
000064  1c64              ADDS     r4,r4,#1              ;565
000066  b2e4              UXTB     r4,r4                 ;565
000068  2c1e              CMP      r4,#0x1e              ;565
00006a  d3f2              BCC      |L2.82|
;;;568    	}
;;;569    
;;;570       Hal_Dsp_Load_Part_1();
;;;571    }
00006c  bdf8              POP      {r3-r7,pc}
;;;572    
                          ENDP

00006e  0000              DCW      0x0000
                  |L2.112|
000070  48616c5f          DCB      "Hal_Dsp_Init**********\n",0
000074  4473705f
000078  496e6974
00007c  2a2a2a2a
000080  2a2a2a2a
000084  2a2a0a00
                  |L2.136|
                          DCD      0x50000100
                  |L2.140|
                          DCD      ||area_number.42||+0x8

                          AREA ||i.Hal_Dsp_Safeload||, CODE, READONLY, ALIGN=2

                  Hal_Dsp_Safeload PROC
;;;581     */
;;;582    static void Hal_Dsp_Safeload(uint8_t* word_arr, uint8_t word_num, uint16_t target_addr)
000000  b5f0              PUSH     {r4-r7,lr}
;;;583    {
000002  b089              SUB      sp,sp,#0x24
;;;584        uint8_t temp_arr[SAFELOAD_REG_NUM * PARAM_WORD_BYTE_LEN + 2];
;;;585        int cnt;
;;;586    
;;;587        if(word_num > SAFELOAD_WORD_NUM_MAX)
000004  2905              CMP      r1,#5
000006  d827              BHI      |L3.88|
;;;588        {
;;;589            return;
;;;590        }
;;;591    
;;;592        if(word_arr == NULL)
000008  2800              CMP      r0,#0
00000a  d025              BEQ      |L3.88|
;;;593        {
;;;594            return;
;;;595        }
;;;596    
;;;597        if(target_addr > PARAM_RAM_TOP_ADDR)
00000c  4b13              LDR      r3,|L3.92|
00000e  429a              CMP      r2,r3
000010  d822              BHI      |L3.88|
;;;598        {
;;;599            return;
;;;600        }
;;;601    
;;;602        for(cnt = 0; cnt < sizeof(temp_arr); cnt++)
000012  2300              MOVS     r3,#0
000014  461d              MOV      r5,r3
000016  ac01              ADD      r4,sp,#4              ;584
                  |L3.24|
;;;603        {
;;;604            temp_arr[cnt] = 0;
000018  54e5              STRB     r5,[r4,r3]
00001a  1c5b              ADDS     r3,r3,#1
00001c  2b1e              CMP      r3,#0x1e              ;602
00001e  d3fb              BCC      |L3.24|
;;;605        }
;;;606    
;;;607        /* safeload register */
;;;608        temp_arr[0] = (uint8_t)((SAFELOAD_DATA_START_REG >> 8) & 0xFF);
000020  466e              MOV      r6,sp
000022  7135              STRB     r5,[r6,#4]
;;;609        temp_arr[1] = (uint8_t)(SAFELOAD_DATA_START_REG & 0xFF);
000024  2301              MOVS     r3,#1
000026  7173              STRB     r3,[r6,#5]
;;;610    
;;;611        /* fill with data */
;;;612        for(cnt = 0; cnt < word_num * 4; cnt++)
000028  2300              MOVS     r3,#0
00002a  008c              LSLS     r4,r1,#2
00002c  e004              B        |L3.56|
                  |L3.46|
;;;613        {
;;;614            temp_arr[cnt + 2] = word_arr[cnt];
00002e  ae01              ADD      r6,sp,#4
000030  5cc7              LDRB     r7,[r0,r3]
000032  18f6              ADDS     r6,r6,r3
000034  70b7              STRB     r7,[r6,#2]
000036  1c5b              ADDS     r3,r3,#1
                  |L3.56|
000038  429c              CMP      r4,r3                 ;612
00003a  dcf8              BGT      |L3.46|
00003c  1e52              SUBS     r2,r2,#1              ;612
;;;615        }
;;;616    
;;;617        /* target addr */
;;;618        cnt = (SAFELOAD_TARGET_ADDR_REG - SAFELOAD_DATA_START_REG) * PARAM_WORD_BYTE_LEN + 4;
;;;619        target_addr = target_addr - 1;
;;;620        temp_arr[cnt]= (uint8_t)((target_addr >> 8) & 0xFF);
00003e  0a10              LSRS     r0,r2,#8
000040  466b              MOV      r3,sp
000042  7718              STRB     r0,[r3,#0x1c]
;;;621        cnt++;
;;;622        temp_arr[cnt] = (uint8_t)(target_addr & 0xFF);
000044  775a              STRB     r2,[r3,#0x1d]
;;;623    
;;;624        /* word number */
;;;625        cnt = (SAFELOAD_WORD_NUM_REG - SAFELOAD_DATA_START_REG) * PARAM_WORD_BYTE_LEN + 5;
;;;626        temp_arr[cnt] = (uint8_t)(word_num & 0xFF);
000046  ab08              ADD      r3,sp,#0x20
000048  7059              STRB     r1,[r3,#1]
;;;627    
;;;628        /* burst transfer */
;;;629        cnt = sizeof(temp_arr);
00004a  221e              MOVS     r2,#0x1e
;;;630        Hal_I2c1_Transfer(DSP_I2C_ADDR, temp_arr, cnt, (uint8_t*)NULL, 0);
00004c  2300              MOVS     r3,#0
00004e  a901              ADD      r1,sp,#4
000050  2070              MOVS     r0,#0x70
000052  9500              STR      r5,[sp,#0]
000054  f7fffffe          BL       Hal_I2c1_Transfer
                  |L3.88|
;;;631    }
000058  b009              ADD      sp,sp,#0x24
00005a  bdf0              POP      {r4-r7,pc}
;;;632    
                          ENDP

                  |L3.92|
                          DCD      0x000003ff

                          AREA ||i.Hal_Dsp_Vol_Set||, CODE, READONLY, ALIGN=2

                  Hal_Dsp_Vol_Set PROC
;;;639     */
;;;640    void Hal_Dsp_Vol_Set(uint8_t vol_step)
000000  b510              PUSH     {r4,lr}
;;;641    {
;;;642        if(vol_step > MAX_VOL_STEP)
000002  2814              CMP      r0,#0x14
000004  d806              BHI      |L4.20|
;;;643        {
;;;644            return;
;;;645        }
;;;646    
;;;647        /* safeload */
;;;648        Hal_Dsp_Safeload((uint8_t*)&(vol_table[vol_step]), 1, VOL_CTRL_ADDR);
000006  4904              LDR      r1,|L4.24|
000008  0080              LSLS     r0,r0,#2
00000a  1840              ADDS     r0,r0,r1
00000c  2209              MOVS     r2,#9
00000e  2101              MOVS     r1,#1
000010  f7fffffe          BL       Hal_Dsp_Safeload
                  |L4.20|
;;;649    }
000014  bd10              POP      {r4,pc}
;;;650    
                          ENDP

000016  0000              DCW      0x0000
                  |L4.24|
                          DCD      ||area_number.42||+0x118

                          AREA ||i.Hal_Dsp_channel_Set||, CODE, READONLY, ALIGN=2

                  Hal_Dsp_channel_Set PROC
;;;657     */
;;;658    void Hal_Dsp_channel_Set(uint8_t channel)
000000  b510              PUSH     {r4,lr}
;;;659    {
000002  2200              MOVS     r2,#0
;;;660        if(channel)
;;;661        {
;;;662    		arr_aux_channel[1] = 0x80;
000004  2380              MOVS     r3,#0x80
000006  4907              LDR      r1,|L5.36|
000008  2800              CMP      r0,#0                 ;660
00000a  d002              BEQ      |L5.18|
00000c  704b              STRB     r3,[r1,#1]
;;;663    		arr_aux_channel[3] = 0x00;
00000e  70ca              STRB     r2,[r1,#3]
000010  e001              B        |L5.22|
                  |L5.18|
;;;664        }
;;;665    	else
;;;666    	{
;;;667    		arr_aux_channel[1] = 0x00;
000012  704a              STRB     r2,[r1,#1]
;;;668    		arr_aux_channel[3] = 0x80;
000014  70cb              STRB     r3,[r1,#3]
                  |L5.22|
;;;669    	}
;;;670        /* safeload */
;;;671        Hal_Dsp_Safeload((uint8_t*)arr_aux_channel, 1, AUX_CHANNEL_ADDR);
000016  2208              MOVS     r2,#8
000018  2101              MOVS     r1,#1
00001a  4802              LDR      r0,|L5.36|
00001c  f7fffffe          BL       Hal_Dsp_Safeload
;;;672    }
000020  bd10              POP      {r4,pc}
;;;673    
                          ENDP

000022  0000              DCW      0x0000
                  |L5.36|
                          DCD      ||.data||

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  init_arr_00
000000  40eb7f            DCB      0x40,0xeb,0x7f

                          AREA ||area_number.9||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.9||, ||.constdata||
                  init_arr_01
000000  40f600            DCB      0x40,0xf6,0x00

                          AREA ||area_number.10||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.10||, ||.constdata||
                  init_arr_02
000000  40000f            DCB      0x40,0x00,0x0f

                          AREA ||area_number.11||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.11||, ||.constdata||
                  init_arr_03
000000  40020001          DCB      0x40,0x02,0x00,0x01
000004  00002003          DCB      0x00,0x00,0x20,0x03

                          AREA ||area_number.12||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.12||, ||.constdata||
                  init_arr_05
000000  40150000          DCB      0x40,0x15,0x00,0x00

                          AREA ||area_number.13||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.13||, ||.constdata||
                  init_arr_06
000000  40110000          DCB      0x40,0x11,0x00,0x00
000004  0000              DCB      0x00,0x00

                          AREA ||area_number.14||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.14||, ||.constdata||
                  init_arr_07
000000  400800            DCB      0x40,0x08,0x00

                          AREA ||area_number.15||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.15||, ||.constdata||
                  init_arr_08
000000  40090001          DCB      0x40,0x09,0x00,0x01
000004  05010500          DCB      0x05,0x01,0x05,0x00
000008  0000              DCB      0x00,0x00

                          AREA ||area_number.16||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.16||, ||.constdata||
                  init_arr_09
000000  40191300          DCB      0x40,0x19,0x13,0x00
000004  00                DCB      0x00

                          AREA ||area_number.17||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.17||, ||.constdata||
                  init_arr_10
000000  401c2100          DCB      0x40,0x1c,0x21,0x00
000004  41000309          DCB      0x41,0x00,0x03,0x09
000008  01e7e7e6          DCB      0x01,0xe7,0xe7,0xe6
00000c  e6e50003          DCB      0xe6,0xe5,0x00,0x03

                          AREA ||area_number.18||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.18||, ||.constdata||
                  init_arr_11
000000  40170000          DCB      0x40,0x17,0x00,0x00

                          AREA ||area_number.19||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.19||, ||.constdata||
                  init_arr_12
000000  402a0300          DCB      0x40,0x2a,0x03,0x00
000004  00                DCB      0x00

                          AREA ||area_number.20||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.20||, ||.constdata||
                  init_arr_13
000000  402d00            DCB      0x40,0x2d,0x00

                          AREA ||area_number.21||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.21||, ||.constdata||
                  init_arr_14
000000  402f0001          DCB      0x40,0x2f,0x00,0x01

                          AREA ||area_number.22||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.22||, ||.constdata||
                  init_arr_15
000000  403108            DCB      0x40,0x31,0x08

                          AREA ||area_number.23||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.23||, ||.constdata||
                  init_arr_21
000000  40f501            DCB      0x40,0xf5,0x01

                          AREA ||area_number.24||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.24||, ||.constdata||
                  init_arr_22
000000  40c00a7f          DCB      0x40,0xc0,0x0a,0x7f
000004  451d01            DCB      0x45,0x1d,0x01

                          AREA ||area_number.25||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.25||, ||.constdata||
                  init_arr_23
000000  40c60000          DCB      0x40,0xc6,0x00,0x00
000004  0000              DCB      0x00,0x00

                          AREA ||area_number.26||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.26||, ||.constdata||
                  init_arr_24
000000  40e90ffa          DCB      0x40,0xe9,0x0f,0xfa

                          AREA ||area_number.27||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.27||, ||.constdata||
                  init_arr_25
000000  40d00004          DCB      0x40,0xd0,0x00,0x04
000004  000000            DCB      0x00,0x00,0x00

                          AREA ||area_number.28||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.28||, ||.constdata||
                  init_arr_26
000000  40eb7f            DCB      0x40,0xeb,0x7f

                          AREA ||area_number.29||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.29||, ||.constdata||
                  init_arr_27
000000  40f200            DCB      0x40,0xf2,0x00

                          AREA ||area_number.30||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.30||, ||.constdata||
                  init_arr_28
000000  40f300            DCB      0x40,0xf3,0x00

                          AREA ||area_number.31||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.31||, ||.constdata||
                  init_arr_29
000000  40f400            DCB      0x40,0xf4,0x00

                          AREA ||area_number.32||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.32||, ||.constdata||
                  init_arr_30
000000  40f700            DCB      0x40,0xf7,0x00

                          AREA ||area_number.33||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.33||, ||.constdata||
                  init_arr_31
000000  40f800            DCB      0x40,0xf8,0x00

                          AREA ||area_number.34||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.34||, ||.constdata||
                  init_arr_32
000000  40f97f03          DCB      0x40,0xf9,0x7f,0x03

                          AREA ||area_number.35||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.35||, ||.constdata||
                  init_arr_33
000000  08000000          DCB      0x08,0x00,0x00,0x00
000004  000000fe          DCB      0x00,0x00,0x00,0xfe
000008  e0000000          DCB      0xe0,0x00,0x00,0x00
00000c  ff340000          DCB      0xff,0x34,0x00,0x00
000010  00ff2c00          DCB      0x00,0xff,0x2c,0x00
000014  0000ff54          DCB      0x00,0x00,0xff,0x54
000018  000000ff          DCB      0x00,0x00,0x00,0xff
00001c  5c000000          DCB      0x5c,0x00,0x00,0x00
000020  fff50820          DCB      0xff,0xf5,0x08,0x20
000024  00ff3800          DCB      0x00,0xff,0x38,0x00
000028  0000ff80          DCB      0x00,0x00,0xff,0x80
00002c  00000000          DCB      0x00,0x00,0x00,0x00
000030  00000000          DCB      0x00,0x00,0x00,0x00
000034  00000000          DCB      0x00,0x00,0x00,0x00
000038  00fee80c          DCB      0x00,0xfe,0xe8,0x0c
00003c  0000fe30          DCB      0x00,0x00,0xfe,0x30
000040  00e20000          DCB      0x00,0xe2,0x00,0x00
000044  00000000          DCB      0x00,0x00,0x00,0x00
000048  00000000          DCB      0x00,0x00,0x00,0x00
00004c  00000000          DCB      0x00,0x00,0x00,0x00
000050  00000000          DCB      0x00,0x00,0x00,0x00
000054  00000000          DCB      0x00,0x00,0x00,0x00
000058  00000000          DCB      0x00,0x00,0x00,0x00
00005c  00000000          DCB      0x00,0x00,0x00,0x00
000060  00ffe807          DCB      0x00,0xff,0xe8,0x07
000064  20080000          DCB      0x20,0x08,0x00,0x00
000068  06a000ff          DCB      0x06,0xa0,0x00,0xff
00006c  e000c000          DCB      0xe0,0x00,0xc0,0x00
000070  ff800700          DCB      0xff,0x80,0x07,0x00
000074  00000000          DCB      0x00,0x00,0x00,0x00
000078  0000ff00          DCB      0x00,0x00,0xff,0x00
00007c  000000fe          DCB      0x00,0x00,0x00,0xfe
000080  c0220027          DCB      0xc0,0x22,0x00,0x27
000084  00000000          DCB      0x00,0x00,0x00,0x00
000088  00fee81e          DCB      0x00,0xfe,0xe8,0x1e
00008c  0000ffe8          DCB      0x00,0x00,0xff,0xe8
000090  012000ff          DCB      0x01,0x20,0x00,0xff
000094  d8010300          DCB      0xd8,0x01,0x03,0x00
000098  0007c600          DCB      0x00,0x07,0xc6,0x00
00009c  00ff0800          DCB      0x00,0xff,0x08,0x00
0000a0  0000fff4          DCB      0x00,0x00,0xff,0xf4
0000a4  002000ff          DCB      0x00,0x20,0x00,0xff
0000a8  d8070200          DCB      0xd8,0x07,0x02,0x00
0000ac  fda50820          DCB      0xfd,0xa5,0x08,0x20
0000b0  00000000          DCB      0x00,0x00,0x00,0x00
0000b4  e200fdad          DCB      0xe2,0x00,0xfd,0xad
0000b8  08200000          DCB      0x08,0x20,0x00,0x00
0000bc  0800e200          DCB      0x08,0x00,0xe2,0x00
0000c0  fd250820          DCB      0xfd,0x25,0x08,0x20
0000c4  00001000          DCB      0x00,0x00,0x10,0x00
0000c8  e200fd2d          DCB      0xe2,0x00,0xfd,0x2d
0000cc  08200000          DCB      0x08,0x20,0x00,0x00
0000d0  1800e200          DCB      0x18,0x00,0xe2,0x00
0000d4  7fd00a20          DCB      0x7f,0xd0,0x0a,0x20
0000d8  007fd009          DCB      0x00,0x7f,0xd0,0x09
0000dc  34007fd8          DCB      0x34,0x00,0x7f,0xd8
0000e0  082200ff          DCB      0x08,0x22,0x00,0xff
0000e4  d8090200          DCB      0xd8,0x09,0x02,0x00
0000e8  ffd80a12          DCB      0xff,0xd8,0x0a,0x12
0000ec  00000009          DCB      0x00,0x00,0x00,0x09
0000f0  20000020          DCB      0x20,0x00,0x00,0x20
0000f4  00e20000          DCB      0x00,0xe2,0x00,0x00
0000f8  08092000          DCB      0x08,0x09,0x20,0x00
0000fc  002800e2          DCB      0x00,0x28,0x00,0xe2
000100  007fe00d          DCB      0x00,0x7f,0xe0,0x0d
000104  20007fe0          DCB      0x20,0x00,0x7f,0xe0
000108  0c34007f          DCB      0x0c,0x34,0x00,0x7f
00010c  e80b2200          DCB      0xe8,0x0b,0x22,0x00
000110  ffd80c02          DCB      0xff,0xd8,0x0c,0x02
000114  00ffd80d          DCB      0x00,0xff,0xd8,0x0d
000118  12000010          DCB      0x12,0x00,0x00,0x10
00011c  0c200000          DCB      0x0c,0x20,0x00,0x00
000120  3000e200          DCB      0x30,0x00,0xe2,0x00
000124  00180c20          DCB      0x00,0x18,0x0c,0x20
000128  00003800          DCB      0x00,0x00,0x38,0x00
00012c  e200ffe8          DCB      0xe2,0x00,0xff,0xe8
000130  0e200000          DCB      0x0e,0x20,0x00,0x00
000134  45082240          DCB      0x45,0x08,0x22,0x40
000138  008000e2          DCB      0x00,0x80,0x00,0xe2
00013c  00005508          DCB      0x00,0x00,0x55,0x08
000140  20000045          DCB      0x20,0x00,0x00,0x45
000144  08340000          DCB      0x08,0x34,0x00,0x00
000148  85142200          DCB      0x85,0x14,0x22,0x00
00014c  004800e2          DCB      0x00,0x48,0x00,0xe2
000150  00004800          DCB      0x00,0x00,0x48,0x00
000154  c0000058          DCB      0xc0,0x00,0x00,0x58
000158  00f20000          DCB      0x00,0xf2,0x00,0x00
00015c  27ff6000          DCB      0x27,0xff,0x60,0x00
000160  002fff40          DCB      0x00,0x2f,0xff,0x40
000164  00ffe80f          DCB      0x00,0xff,0xe8,0x0f
000168  20000065          DCB      0x20,0x00,0x00,0x65
00016c  08224000          DCB      0x08,0x22,0x40,0x00
000170  8000e200          DCB      0x80,0x00,0xe2,0x00
000174  00750820          DCB      0x00,0x75,0x08,0x20
000178  00006508          DCB      0x00,0x00,0x65,0x08
00017c  34000085          DCB      0x34,0x00,0x00,0x85
000180  14220000          DCB      0x14,0x22,0x00,0x00
000184  6800e200          DCB      0x68,0x00,0xe2,0x00
000188  006800c0          DCB      0x00,0x68,0x00,0xc0
00018c  00007800          DCB      0x00,0x00,0x78,0x00
000190  f2000037          DCB      0xf2,0x00,0x00,0x37
000194  ff660000          DCB      0xff,0x66,0x00,0x00
000198  3fff4400          DCB      0x3f,0xff,0x44,0x00
00019c  008800e6          DCB      0x00,0x88,0x00,0xe6
0001a0  00009000          DCB      0x00,0x00,0x90,0x00
0001a4  e4007ff0          DCB      0xe4,0x00,0x7f,0xf0
0001a8  1220007f          DCB      0x12,0x20,0x00,0x7f
0001ac  f0113400          DCB      0xf0,0x11,0x34,0x00
0001b0  7ff81022          DCB      0x7f,0xf8,0x10,0x22
0001b4  00ffd811          DCB      0x00,0xff,0xd8,0x11
0001b8  0200ffd8          DCB      0x02,0x00,0xff,0xd8
0001bc  12120000          DCB      0x12,0x12,0x00,0x00
0001c0  88112000          DCB      0x88,0x11,0x20,0x00
0001c4  009800e2          DCB      0x00,0x98,0x00,0xe2
0001c8  00009011          DCB      0x00,0x00,0x90,0x11
0001cc  200000a0          DCB      0x20,0x00,0x00,0xa0
0001d0  00e20000          DCB      0x00,0xe2,0x00,0x00
0001d4  9d082000          DCB      0x9d,0x08,0x20,0x00
0001d8  fd6000e2          DCB      0xfd,0x60,0x00,0xe2
0001dc  00009d08          DCB      0x00,0x00,0x9d,0x08
0001e0  2000fdb0          DCB      0x20,0x00,0xfd,0xb0
0001e4  00e20000          DCB      0x00,0xe2,0x00,0x00
0001e8  a5082000          DCB      0xa5,0x08,0x20,0x00
0001ec  fd6800e2          DCB      0xfd,0x68,0x00,0xe2
0001f0  0000a508          DCB      0x00,0x00,0xa5,0x08
0001f4  2000fdb8          DCB      0x20,0x00,0xfd,0xb8
0001f8  00e20000          DCB      0x00,0xe2,0x00,0x00
0001fc  00000000          DCB      0x00,0x00,0x00,0x00
000200  fe300000          DCB      0xfe,0x30,0x00,0x00
000204  00000000          DCB      0x00,0x00,0x00,0x00
000208  0000fec0          DCB      0x00,0x00,0xfe,0xc0
00020c  0f000000          DCB      0x0f,0x00,0x00,0x00
000210  00000000          DCB      0x00,0x00,0x00,0x00

                          AREA ||area_number.36||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.36||, ||.constdata||
                  init_arr_34
000000  00000000          DCB      0x00,0x00,0x00,0x00
000004  0ffa0000          DCB      0x0f,0xfa,0x00,0x00
000008  00000000          DCB      0x00,0x00,0x00,0x00
00000c  00000000          DCB      0x00,0x00,0x00,0x00
000010  00000000          DCB      0x00,0x00,0x00,0x00
000014  00000000          DCB      0x00,0x00,0x00,0x00
000018  00000000          DCB      0x00,0x00,0x00,0x00
00001c  00000000          DCB      0x00,0x00,0x00,0x00
000020  00000080          DCB      0x00,0x00,0x00,0x80
000024  00000000          DCB      0x00,0x00,0x00,0x00
000028  00000000          DCB      0x00,0x00,0x00,0x00
00002c  00000080          DCB      0x00,0x00,0x00,0x80
000030  00000000          DCB      0x00,0x00,0x00,0x00
000034  00000000          DCB      0x00,0x00,0x00,0x00
000038  00000039          DCB      0x00,0x00,0x00,0x39
00003c  2ced0040          DCB      0x2c,0xed,0x00,0x40
000040  26e70100          DCB      0x26,0xe7,0x01,0x00
000044  00000000          DCB      0x00,0x00,0x00,0x00
000048  00000000          DCB      0x00,0x00,0x00,0x00
00004c  0000              DCB      0x00,0x00

                          AREA ||area_number.37||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.37||, ||.constdata||
                  init_arr_35
000000  1ffa007f          DCB      0x1f,0xfa,0x00,0x7f
000004  f2590000          DCB      0xf2,0x59,0x00,0x00
000008  0da7007f          DCB      0x0d,0xa7,0x00,0x7f
00000c  f2590000          DCB      0xf2,0x59,0x00,0x00
000010  0da7007f          DCB      0x0d,0xa7,0x00,0x7f
000014  f2590000          DCB      0xf2,0x59,0x00,0x00
000018  0da7              DCB      0x0d,0xa7

                          AREA ||area_number.38||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.38||, ||.constdata||
                  init_arr_36
000000  40eb01            DCB      0x40,0xeb,0x01

                          AREA ||area_number.39||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.39||, ||.constdata||
                  init_arr_37
000000  40f601            DCB      0x40,0xf6,0x01

                          AREA ||area_number.40||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.40||, ||.constdata||
                  init_arr_38
000000  403600            DCB      0x40,0x36,0x00

                          AREA ||area_number.41||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.41||, ||.constdata||
                  init_arr_39
000000  403603            DCB      0x40,0x36,0x03

                          AREA ||area_number.42||, DATA, READONLY, ALIGN=2

                          EXPORTAS ||area_number.42||, ||.constdata||
                  stream_table
000000  00000000          DCB      0x00,0x00,0x00,0x00
000004  00000001          DCB      0x00,0x00,0x00,0x01
                  mt0
                          DCD      init_arr_00
                          DCD      0x00000003
                          DCD      init_arr_01
                          DCD      0x00000003
                          DCD      init_arr_02
                          DCD      0x00000003
                          DCD      init_arr_03
                          DCD      0x00000008
                  mt1
                          DCD      init_arr_05
                          DCD      0x00000004
                          DCD      init_arr_06
                          DCD      0x00000006
                          DCD      init_arr_07
                          DCD      0x00000003
                          DCD      init_arr_08
                          DCD      0x0000000a
                          DCD      init_arr_09
                          DCD      0x00000005
                          DCD      init_arr_10
                          DCD      0x00000010
                          DCD      init_arr_11
                          DCD      0x00000004
                          DCD      init_arr_12
                          DCD      0x00000005
                          DCD      init_arr_13
                          DCD      0x00000003
                          DCD      init_arr_14
                          DCD      0x00000004
                          DCD      init_arr_15
                          DCD      0x00000003
                          DCD      init_arr_21
                          DCD      0x00000003
                          DCD      init_arr_22
                          DCD      0x00000007
                          DCD      init_arr_23
                          DCD      0x00000006
                          DCD      init_arr_24
                          DCD      0x00000004
                          DCD      init_arr_25
                          DCD      0x00000007
                          DCD      init_arr_26
                          DCD      0x00000003
                          DCD      init_arr_27
                          DCD      0x00000003
                          DCD      init_arr_28
                          DCD      0x00000003
                          DCD      init_arr_29
                          DCD      0x00000003
                          DCD      init_arr_30
                          DCD      0x00000003
                          DCD      init_arr_31
                          DCD      0x00000003
                          DCD      init_arr_32
                          DCD      0x00000004
                          DCD      init_arr_33
                          DCD      0x00000214
                          DCD      init_arr_34
                          DCD      0x0000004e
                          DCD      init_arr_35
                          DCD      0x0000001a
                          DCD      init_arr_36
                          DCD      0x00000003
                          DCD      init_arr_37
                          DCD      0x00000003
                          DCD      init_arr_38
                          DCD      0x00000003
                          DCD      init_arr_39
                          DCD      0x00000003
                  vol_table
000118  00000347          DCB      0x00,0x00,0x03,0x47
00011c  000020c5          DCB      0x00,0x00,0x20,0xc5
000120  0000524f          DCB      0x00,0x00,0x52,0x4f
000124  0000cec1          DCB      0x00,0x00,0xce,0xc1
000128  000147ae          DCB      0x00,0x01,0x47,0xae
00012c  00020756          DCB      0x00,0x02,0x07,0x56
000130  00033718          DCB      0x00,0x03,0x37,0x18
000134  00055e7f          DCB      0x00,0x05,0x5e,0x7f
000138  00081385          DCB      0x00,0x08,0x13,0x85
00013c  000ccccd          DCB      0x00,0x0c,0xcc,0xcd
000140  00144961          DCB      0x00,0x14,0x49,0x61
000144  00198a13          DCB      0x00,0x19,0x8a,0x13
000148  002026f3          DCB      0x00,0x20,0x26,0xf3
00014c  00287a27          DCB      0x00,0x28,0x7a,0x27
000150  0032f52d          DCB      0x00,0x32,0xf5,0x2d
000154  004026e7          DCB      0x00,0x40,0x26,0xe7
000158  0050c336          DCB      0x00,0x50,0xc3,0x36
00015c  005a9df8          DCB      0x00,0x5a,0x9d,0xf8
000160  0065ac8c          DCB      0x00,0x65,0xac,0x8c
000164  0072147b          DCB      0x00,0x72,0x14,0x7b
000168  00800000          DCB      0x00,0x80,0x00,0x00

                          AREA ||.data||, DATA, ALIGN=0

                  arr_aux_channel
000000  00000000          DCB      0x00,0x00,0x00,0x00

;*** Start embedded assembler ***

#line 1 "..\\src\\driver\\drv_dsp_1761.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___14_drv_dsp_1761_c_ca82300c____REV16|
#line 388 "..\\lib\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___14_drv_dsp_1761_c_ca82300c____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___14_drv_dsp_1761_c_ca82300c____REVSH|
#line 402
|__asm___14_drv_dsp_1761_c_ca82300c____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
