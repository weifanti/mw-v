; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\drv_gpio_key.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\drv_gpio_key.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\lib\CMSIS\Include -I..\lib\Device\Nuvoton\NUC029xGE\Include -I..\lib\StdDriver\inc -I..\src\core\include -I..\src\driver\include -I..\src\io\include -I..\src\global -I..\src\server\include -I..\src\driver\audio -D__UVISION_VERSION=522 --omf_browse=.\obj\drv_gpio_key.crf ..\src\driver\drv_gpio_key.c]
                          THUMB

                          AREA ||i.GetKeyEvent||, CODE, READONLY, ALIGN=2

                  GetKeyEvent PROC
;;;92     
;;;93     void GetKeyEvent(void)							
000000  b5f8              PUSH     {r3-r7,lr}
;;;94     {
;;;95     	static 	uint8_t 	PreKeyIndex = 0;
;;;96     	uint8_t			KeyIndex = 0;
000002  2400              MOVS     r4,#0
;;;97     
;;;98     
;;;99     	if (!IsTimeOut(&SoftwareKeyScanTimer))
000004  4840              LDR      r0,|L1.264|
000006  f7fffffe          BL       IsTimeOut
00000a  2800              CMP      r0,#0
00000c  d036              BEQ      |L1.124|
;;;100    	{
;;;101    	    
;;;102    		return;
;;;103    	}
;;;104    
;;;105    	
;;;106    	TimeOutSet(&SoftwareKeyScanTimer, SOFTWARE_KEY_SCAN_TIME);
00000e  210a              MOVS     r1,#0xa
000010  483d              LDR      r0,|L1.264|
000012  f7fffffe          BL       TimeOutSet
;;;107    
;;;108    	if(!POWER_KEY)
000016  483d              LDR      r0,|L1.268|
000018  68c1              LDR      r1,[r0,#0xc]
00001a  2900              CMP      r1,#0
00001c  d003              BEQ      |L1.38|
;;;109    	{
;;;110    		KeyIndex = 1;
;;;111    	}
;;;112    	else if(!PAIR_KEY)
00001e  6980              LDR      r0,[r0,#0x18]
000020  2800              CMP      r0,#0
000022  d002              BEQ      |L1.42|
000024  e002              B        |L1.44|
                  |L1.38|
000026  2401              MOVS     r4,#1                 ;110
000028  e000              B        |L1.44|
                  |L1.42|
;;;113    	{	
;;;114    		KeyIndex = 2;
00002a  2402              MOVS     r4,#2
                  |L1.44|
;;;115    		
;;;116    	}
;;;117    
;;;118    
;;;119    
;;;120    
;;;121    	switch(SoftwareKeyState)
00002c  4e36              LDR      r6,|L1.264|
00002e  2700              MOVS     r7,#0
000030  3e0c              SUBS     r6,r6,#0xc
000032  7870              LDRB     r0,[r6,#1]  ; SoftwareKeyState
000034  2800              CMP      r0,#0
000036  d007              BEQ      |L1.72|
000038  2801              CMP      r0,#1
00003a  d00f              BEQ      |L1.92|
;;;122    	{
;;;123    		case SOFTWARE_KEY_STATE_IDLE:
;;;124    			if(KeyIndex == 0)
;;;125    			{
;;;126    				return;
;;;127    			}
;;;128    
;;;129    			PreKeyIndex = KeyIndex;
;;;130    			TimeOutSet(&SoftwareKeyWaitTimer, SOFTWARE_KEY_JTTER_TIME);
;;;131    			//DBG(("GOTO JITTER!\n"));
;;;132    			SoftwareKeyState = SOFTWARE_KEY_STATE_JITTER;
;;;133    				
;;;134    		case SOFTWARE_KEY_STATE_JITTER:
;;;135    			
;;;136    			if(PreKeyIndex != KeyIndex)
;;;137    			{
;;;138    				//DBG(("GOTO IDLE Because jitter!\n"));
;;;139    				SoftwareKeyState = SOFTWARE_KEY_STATE_IDLE;
;;;140    			}
;;;141    			else if(IsTimeOut(&SoftwareKeyWaitTimer))
;;;142    			{
;;;143    				//DBG(("GOTO PRESS_DOWN!\n"));
;;;144    				TimeOutSet(&SoftwareKeyWaitTimer, SOFTWARE_KEY_CP_TIME);
;;;145    				SoftwareKeyState = SOFTWARE_KEY_STATE_PRESS_DOWN;
;;;146    			}
;;;147    			break;
;;;148    
;;;149    		case SOFTWARE_KEY_STATE_PRESS_DOWN:
;;;150    			if(PreKeyIndex != KeyIndex)
;;;151    			{
;;;152    
;;;153    				Global_datas.inputmessage = SoftwareKeyEvent[PreKeyIndex][SoftwareKeyState - SOFTWARE_KEY_STATE_PRESS_DOWN];
00003c  4d34              LDR      r5,|L1.272|
00003e  2802              CMP      r0,#2                 ;121
000040  d01d              BEQ      |L1.126|
000042  2804              CMP      r0,#4                 ;121
000044  d124              BNE      |L1.144|
000046  e039              B        |L1.188|
                  |L1.72|
000048  2c00              CMP      r4,#0                 ;124
00004a  d017              BEQ      |L1.124|
00004c  482e              LDR      r0,|L1.264|
00004e  7034              STRB     r4,[r6,#0]            ;129
000050  2114              MOVS     r1,#0x14              ;130
000052  3808              SUBS     r0,r0,#8              ;130
000054  f7fffffe          BL       TimeOutSet
000058  2001              MOVS     r0,#1                 ;132
00005a  7070              STRB     r0,[r6,#1]            ;132
                  |L1.92|
00005c  7830              LDRB     r0,[r6,#0]            ;136  ; PreKeyIndex
00005e  42a0              CMP      r0,r4                 ;136
000060  d116              BNE      |L1.144|
000062  4829              LDR      r0,|L1.264|
000064  3808              SUBS     r0,r0,#8              ;141
000066  f7fffffe          BL       IsTimeOut
00006a  2800              CMP      r0,#0                 ;141
00006c  d006              BEQ      |L1.124|
00006e  4826              LDR      r0,|L1.264|
000070  4928              LDR      r1,|L1.276|
000072  3808              SUBS     r0,r0,#8              ;144
000074  f7fffffe          BL       TimeOutSet
000078  2002              MOVS     r0,#2                 ;145
00007a  7070              STRB     r0,[r6,#1]            ;145
                  |L1.124|
;;;154    				
;;;155    				SoftwareKeyState = SOFTWARE_KEY_STATE_IDLE;
;;;156    				return;
;;;157    			}
;;;158    			else if(IsTimeOut(&SoftwareKeyWaitTimer))
;;;159    			{
;;;160    				//return key cp value
;;;161    				//DBG(("KEY CP!******\n"));
;;;162    				TimeOutSet(&SoftwareKeyWaitTimer, SOFTWARE_KEY_CP_TIME);
;;;163    				
;;;164    				SoftwareKeyState = SOFTWARE_KEY_STATE_CP;
;;;165    				
;;;166    				Global_datas.inputmessage = SoftwareKeyEvent[PreKeyIndex][1];
;;;167    				Global_datas.key_led_blink = 1;	
;;;168    				return;
;;;169    			}
;;;170    			break;
;;;171    
;;;172    		case SOFTWARE_KEY_STATE_CP:
;;;173    			if(PreKeyIndex != KeyIndex)
;;;174    			{
;;;175    				//return key cp value
;;;176    				SoftwareKeyState = SOFTWARE_KEY_STATE_IDLE;
;;;177    				Global_datas.inputmessage = SoftwareKeyEvent[PreKeyIndex][2];
;;;178    				Global_datas.key_led_blink = 1;
;;;179    				return;
;;;180    			}
;;;181    			else if(IsTimeOut(&SoftwareKeyWaitTimer))
;;;182    			{
;;;183    				//return key cp value
;;;184    
;;;185    				TimeOutSet(&SoftwareKeyWaitTimer, SOFTWARE_KEY_CP_TIME);
;;;186    				SoftwareKeyState = SOFTWARE_KEY_STATE_CP;
;;;187    				if((KeyIndex == 4) || (KeyIndex ==5))
;;;188    				{
;;;189    					Global_datas.inputmessage = SoftwareKeyEvent[PreKeyIndex][1];
;;;190    				}
;;;191    				
;;;192    				return;
;;;193    			}
;;;194    			break;
;;;195    
;;;196    		default:
;;;197    			SoftwareKeyState = SOFTWARE_KEY_STATE_IDLE;
;;;198    			break;
;;;199    	}
;;;200    }
00007c  bdf8              POP      {r3-r7,pc}
                  |L1.126|
00007e  7830              LDRB     r0,[r6,#0]            ;150  ; PreKeyIndex
000080  42a0              CMP      r0,r4                 ;150
000082  d007              BEQ      |L1.148|
000084  0041              LSLS     r1,r0,#1              ;153
000086  1841              ADDS     r1,r0,r1              ;153
000088  4823              LDR      r0,|L1.280|
00008a  1808              ADDS     r0,r1,r0              ;153
00008c  7800              LDRB     r0,[r0,#0]            ;153
00008e  74e8              STRB     r0,[r5,#0x13]         ;153
                  |L1.144|
000090  7077              STRB     r7,[r6,#1]            ;197
                  |L1.146|
000092  bdf8              POP      {r3-r7,pc}
                  |L1.148|
000094  481c              LDR      r0,|L1.264|
000096  3808              SUBS     r0,r0,#8              ;158
000098  f7fffffe          BL       IsTimeOut
00009c  2800              CMP      r0,#0                 ;158
00009e  d0f8              BEQ      |L1.146|
0000a0  4819              LDR      r0,|L1.264|
0000a2  491c              LDR      r1,|L1.276|
0000a4  3808              SUBS     r0,r0,#8              ;162
0000a6  f7fffffe          BL       TimeOutSet
0000aa  2004              MOVS     r0,#4                 ;164
0000ac  7070              STRB     r0,[r6,#1]            ;164
0000ae  7830              LDRB     r0,[r6,#0]            ;166  ; PreKeyIndex
0000b0  0041              LSLS     r1,r0,#1              ;166
0000b2  1841              ADDS     r1,r0,r1              ;166
0000b4  4818              LDR      r0,|L1.280|
0000b6  1808              ADDS     r0,r1,r0              ;166
0000b8  7840              LDRB     r0,[r0,#1]            ;166
0000ba  e008              B        |L1.206|
                  |L1.188|
0000bc  7830              LDRB     r0,[r6,#0]            ;173  ; PreKeyIndex
0000be  42a0              CMP      r0,r4                 ;173
0000c0  d009              BEQ      |L1.214|
0000c2  0041              LSLS     r1,r0,#1              ;177
0000c4  1841              ADDS     r1,r0,r1              ;177
0000c6  4814              LDR      r0,|L1.280|
0000c8  7077              STRB     r7,[r6,#1]            ;176
0000ca  1808              ADDS     r0,r1,r0              ;177
0000cc  7880              LDRB     r0,[r0,#2]            ;177
                  |L1.206|
0000ce  74e8              STRB     r0,[r5,#0x13]         ;177
0000d0  2001              MOVS     r0,#1                 ;178
0000d2  7328              STRB     r0,[r5,#0xc]          ;178
                  |L1.212|
0000d4  bdf8              POP      {r3-r7,pc}
                  |L1.214|
0000d6  480c              LDR      r0,|L1.264|
0000d8  3808              SUBS     r0,r0,#8              ;181
0000da  f7fffffe          BL       IsTimeOut
0000de  2800              CMP      r0,#0                 ;181
0000e0  d0f8              BEQ      |L1.212|
0000e2  4809              LDR      r0,|L1.264|
0000e4  490b              LDR      r1,|L1.276|
0000e6  3808              SUBS     r0,r0,#8              ;185
0000e8  f7fffffe          BL       TimeOutSet
0000ec  2004              MOVS     r0,#4                 ;186
0000ee  7070              STRB     r0,[r6,#1]            ;186
0000f0  2c04              CMP      r4,#4                 ;187
0000f2  d001              BEQ      |L1.248|
0000f4  2c05              CMP      r4,#5                 ;187
0000f6  d1ed              BNE      |L1.212|
                  |L1.248|
0000f8  7830              LDRB     r0,[r6,#0]            ;189  ; PreKeyIndex
0000fa  0041              LSLS     r1,r0,#1              ;189
0000fc  1841              ADDS     r1,r0,r1              ;189
0000fe  4806              LDR      r0,|L1.280|
000100  1808              ADDS     r0,r1,r0              ;189
000102  7840              LDRB     r0,[r0,#1]            ;189
000104  74e8              STRB     r0,[r5,#0x13]         ;189
000106  bdf8              POP      {r3-r7,pc}
;;;201    
                          ENDP

                  |L1.264|
                          DCD      ||area_number.8||+0xc
                  |L1.268|
                          DCD      0x50004280
                  |L1.272|
                          DCD      Global_datas+0x20
                  |L1.276|
                          DCD      0x000005dc
                  |L1.280|
                          DCD      ||.constdata||

                          AREA ||i.HwKeyScanInit||, CODE, READONLY, ALIGN=2

                  HwKeyScanInit PROC
;;;81     
;;;82      void HwKeyScanInit(void)
000000  b510              PUSH     {r4,lr}
;;;83     {
;;;84     
;;;85     	SoftwareKeyState = SOFTWARE_KEY_STATE_IDLE;
000002  4904              LDR      r1,|L2.20|
000004  2000              MOVS     r0,#0
000006  7048              STRB     r0,[r1,#1]
;;;86     	TimeOutSet(&SoftwareKeyScanTimer, 10);
000008  4802              LDR      r0,|L2.20|
00000a  210a              MOVS     r1,#0xa
00000c  300c              ADDS     r0,r0,#0xc
00000e  f7fffffe          BL       TimeOutSet
;;;87     
;;;88     }
000012  bd10              POP      {r4,pc}
;;;89     
                          ENDP

                  |L2.20|
                          DCD      ||area_number.8||

                          AREA ||i.drv_gipo_key_init||, CODE, READONLY, ALIGN=2

                  drv_gipo_key_init PROC
;;;25     
;;;26     void drv_gipo_key_init(void)
000000  b510              PUSH     {r4,lr}
;;;27     {
;;;28     
;;;29     	GPIO_SetMode(PC, BIT3,  GPIO_MODE_INPUT); //power key
000002  4c07              LDR      r4,|L3.32|
000004  2200              MOVS     r2,#0
000006  2108              MOVS     r1,#8
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       GPIO_SetMode
;;;30     	GPIO_SetMode(PC, BIT6,  GPIO_MODE_INPUT); //pair key
00000e  2200              MOVS     r2,#0
000010  2140              MOVS     r1,#0x40
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       GPIO_SetMode
;;;31     	HwKeyScanInit();
000018  f7fffffe          BL       HwKeyScanInit
;;;32     	
;;;33     }
00001c  bd10              POP      {r4,pc}
;;;34     
                          ENDP

00001e  0000              DCW      0x0000
                  |L3.32|
                          DCD      0x50004080

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  SoftwareKeyEvent
000000  00000001          DCB      0x00,0x00,0x00,0x01
000004  02030405          DCB      0x02,0x03,0x04,0x05
000008  06000000          DCB      0x06,0x00,0x00,0x00

                          AREA ||.data||, DATA, ALIGN=0

                  IoKeyInputmessage
000000  00                DCB      0x00

                          AREA ||area_number.8||, DATA, ALIGN=2

                          EXPORTAS ||area_number.8||, ||.data||
                  PreKeyIndex
000000  00                DCB      0x00
                  SoftwareKeyState
000001  000000            DCB      0x00,0x00,0x00
                  SoftwareKeyWaitTimer
                          %        8
                  SoftwareKeyScanTimer
                          %        8

;*** Start embedded assembler ***

#line 1 "..\\src\\driver\\drv_gpio_key.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___14_drv_gpio_key_c_837af3b4____REV16|
#line 388 "..\\lib\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___14_drv_gpio_key_c_837af3b4____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___14_drv_gpio_key_c_837af3b4____REVSH|
#line 402
|__asm___14_drv_gpio_key_c_837af3b4____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
