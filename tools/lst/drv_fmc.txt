; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\drv_fmc.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\drv_fmc.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\lib\CMSIS\Include -I..\lib\Device\Nuvoton\NUC029xGE\Include -I..\lib\StdDriver\inc -I..\src\core\include -I..\src\driver\include -I..\src\io\include -I..\src\global -I..\src\server\include -I..\src\driver\audio -D__UVISION_VERSION=522 --omf_browse=.\obj\drv_fmc.crf ..\src\driver\drv_fmc.c]
                          THUMB

                          AREA ||i.DataRead||, CODE, READONLY, ALIGN=2

                  DataRead PROC
;;;124    
;;;125    void DataRead(void)
000000  b5f8              PUSH     {r3-r7,lr}
;;;126    {
;;;127    	uint32_t i;
;;;128    	uint32_t temp_data;
;;;129    	uint32_t add;
;;;130    	
;;;131        SYS_UnlockReg();
000002  f7fffffe          BL       SYS_UnlockReg
;;;132    
;;;133    	temp_data = FMC_Read(STATION_NUM_ADDR);
000006  207f              MOVS     r0,#0x7f
000008  02c0              LSLS     r0,r0,#11
00000a  f7fffffe          BL       FMC_Read
;;;134    	Global_datas.FmData.station_num = (temp_data & 0xff);
00000e  4c22              LDR      r4,|L1.152|
000010  7120              STRB     r0,[r4,#4]
;;;135    
;;;136    	temp_data = FMC_Read(CURRENT_STATION_ADDR);
000012  4822              LDR      r0,|L1.156|
000014  f7fffffe          BL       FMC_Read
;;;137    	Global_datas.FmData.current_station = (temp_data & 0xff);		
000018  71a0              STRB     r0,[r4,#6]
;;;138    
;;;139    	temp_data = FMC_Read(FREQUENCY_ADDR);
00001a  4820              LDR      r0,|L1.156|
00001c  1d00              ADDS     r0,r0,#4
00001e  f7fffffe          BL       FMC_Read
;;;140    	Global_datas.FmData.Frequency = (temp_data & 0xffff);	
000022  4627              MOV      r7,r4
000024  b280              UXTH     r0,r0
000026  3f80              SUBS     r7,r7,#0x80
;;;141    
;;;142    	add = STATION_TABLE_BASE_ADDR;
000028  4e1c              LDR      r6,|L1.156|
;;;143    	
;;;144    	if(Global_datas.FmData.station_num < FM_MAX_STATION_NUM)
00002a  6438              STR      r0,[r7,#0x40]  ; Global_datas
00002c  7920              LDRB     r0,[r4,#4]  ; Global_datas
00002e  361c              ADDS     r6,r6,#0x1c           ;142
000030  280f              CMP      r0,#0xf
000032  d20c              BCS      |L1.78|
;;;145    	{
;;;146    		for(i=0;i<Global_datas.FmData.station_num;i++)
000034  2500              MOVS     r5,#0
000036  e007              B        |L1.72|
                  |L1.56|
;;;147    		{
;;;148    
;;;149    			Global_datas.FmData.station_table[i] = FMC_Read(add);
000038  4630              MOV      r0,r6
00003a  f7fffffe          BL       FMC_Read
00003e  00a9              LSLS     r1,r5,#2
000040  19c9              ADDS     r1,r1,r7
000042  1c6d              ADDS     r5,r5,#1
000044  1d36              ADDS     r6,r6,#4
000046  6488              STR      r0,[r1,#0x48]
                  |L1.72|
000048  7920              LDRB     r0,[r4,#4]            ;146  ; Global_datas
00004a  42a8              CMP      r0,r5                 ;146
00004c  d8f4              BHI      |L1.56|
                  |L1.78|
;;;150    			add += 4;
;;;151    		}
;;;152    	}
;;;153    
;;;154    	if( (!IsFreqValid())|| (!IsStationNumValid()) || (!IsCurrentStationNunValid()))
00004e  f7fffffe          BL       IsFreqValid
000052  2500              MOVS     r5,#0
000054  2800              CMP      r0,#0
000056  d007              BEQ      |L1.104|
000058  f7fffffe          BL       IsStationNumValid
00005c  2800              CMP      r0,#0
00005e  d003              BEQ      |L1.104|
000060  f7fffffe          BL       IsCurrentStationNunValid
000064  2800              CMP      r0,#0
000066  d113              BNE      |L1.144|
                  |L1.104|
;;;155    	{
;;;156    		
;;;157    		printf("Init FM param!\n");
000068  a00d              ADR      r0,|L1.160|
00006a  f7fffffe          BL       __2printf
;;;158    
;;;159    		Global_datas.FmData.Frequency = 8750;
00006e  4910              LDR      r1,|L1.176|
;;;160    		Global_datas.FmData.station_num = 0;
000070  6439              STR      r1,[r7,#0x40]  ; Global_datas
;;;161    		Global_datas.FmData.current_station = 0;
;;;162    		FMC_Write(FREQUENCY_ADDR, Global_datas.FmData.Frequency);
000072  480a              LDR      r0,|L1.156|
000074  7125              STRB     r5,[r4,#4]            ;160
000076  71a5              STRB     r5,[r4,#6]            ;161
000078  1d00              ADDS     r0,r0,#4
00007a  f7fffffe          BL       FMC_Write
;;;163    		FMC_Write(STATION_NUM_ADDR, Global_datas.FmData.station_num);
00007e  207f              MOVS     r0,#0x7f
000080  7921              LDRB     r1,[r4,#4]  ; Global_datas
000082  02c0              LSLS     r0,r0,#11
000084  f7fffffe          BL       FMC_Write
;;;164    		FMC_Write(CURRENT_STATION_ADDR, Global_datas.FmData.current_station);			
000088  79a1              LDRB     r1,[r4,#6]  ; Global_datas
00008a  4804              LDR      r0,|L1.156|
00008c  f7fffffe          BL       FMC_Write
                  |L1.144|
000090  4808              LDR      r0,|L1.180|
000092  6005              STR      r5,[r0,#0]
;;;165    	}
;;;166    
;;;167        SYS_LockReg();
;;;168    
;;;169    
;;;170    }
000094  bdf8              POP      {r3-r7,pc}
;;;171    
                          ENDP

000096  0000              DCW      0x0000
                  |L1.152|
                          DCD      Global_datas+0x80
                  |L1.156|
                          DCD      0x0003f804
                  |L1.160|
0000a0  496e6974          DCB      "Init FM param!\n",0
0000a4  20464d20
0000a8  70617261
0000ac  6d210a00
                  |L1.176|
                          DCD      0x0000222e
                  |L1.180|
                          DCD      0x50000100

                          AREA ||i.DataStore||, CODE, READONLY, ALIGN=2

                  DataStore PROC
;;;83     
;;;84     void DataStore(void)
000000  b5f8              PUSH     {r3-r7,lr}
;;;85     {
;;;86     	uint32_t i;
;;;87     	uint32_t add;
;;;88     	
;;;89         SYS_UnlockReg();
000002  f7fffffe          BL       SYS_UnlockReg
;;;90     
;;;91     	add = STATION_TABLE_BASE_ADDR;
;;;92     	
;;;93     	FMC_Erase(DATA_FLASH_TEST_BASE);
000006  217f              MOVS     r1,#0x7f
000008  02c9              LSLS     r1,r1,#11
00000a  4824              LDR      r0,|L2.156|
00000c  4e22              LDR      r6,|L2.152|
00000e  2222              MOVS     r2,#0x22              ;91
000010  60c2              STR      r2,[r0,#0xc]          ;91
000012  6041              STR      r1,[r0,#4]            ;91
000014  2101              MOVS     r1,#1                 ;91
000016  6101              STR      r1,[r0,#0x10]         ;91
                  |L2.24|
000018  6901              LDR      r1,[r0,#0x10]         ;91
00001a  2900              CMP      r1,#0                 ;91
00001c  d1fc              BNE      |L2.24|
00001e  6801              LDR      r1,[r0,#0]            ;91
000020  0649              LSLS     r1,r1,#25             ;91
000022  d503              BPL      |L2.44|
000024  6801              LDR      r1,[r0,#0]            ;91
000026  2240              MOVS     r2,#0x40              ;91
000028  4311              ORRS     r1,r1,r2              ;91
00002a  6001              STR      r1,[r0,#0]            ;91
                  |L2.44|
;;;94     
;;;95     	for(i=0;i<Global_datas.FmData.station_num;i++)
;;;96     	{
;;;97     		FMC_Write(add, Global_datas.FmData.station_table[i]);
00002c  4f1c              LDR      r7,|L2.160|
00002e  2500              MOVS     r5,#0                 ;95
000030  463c              MOV      r4,r7                 ;95
000032  3480              ADDS     r4,r4,#0x80           ;95
000034  e007              B        |L2.70|
                  |L2.54|
000036  00a8              LSLS     r0,r5,#2
000038  19c0              ADDS     r0,r0,r7
00003a  6c81              LDR      r1,[r0,#0x48]
00003c  4630              MOV      r0,r6
00003e  f7fffffe          BL       FMC_Write
000042  1c6d              ADDS     r5,r5,#1
000044  1d36              ADDS     r6,r6,#4
                  |L2.70|
000046  7920              LDRB     r0,[r4,#4]            ;95  ; Global_datas
000048  42a8              CMP      r0,r5                 ;95
00004a  d8f4              BHI      |L2.54|
;;;98     		add += 4;
;;;99     	}
;;;100    
;;;101    
;;;102    	if(IsFreqValid() && IsStationNumValid() && IsCurrentStationNunValid())
00004c  f7fffffe          BL       IsFreqValid
;;;103    	{
;;;104    		FMC_Write(FREQUENCY_ADDR, Global_datas.FmData.Frequency);
000050  4e11              LDR      r6,|L2.152|
000052  2500              MOVS     r5,#0
000054  3e18              SUBS     r6,r6,#0x18
000056  2800              CMP      r0,#0                 ;102
000058  d009              BEQ      |L2.110|
00005a  f7fffffe          BL       IsStationNumValid
00005e  2800              CMP      r0,#0                 ;102
000060  d005              BEQ      |L2.110|
000062  f7fffffe          BL       IsCurrentStationNunValid
000066  2800              CMP      r0,#0                 ;102
000068  d001              BEQ      |L2.110|
;;;105    		FMC_Write(STATION_NUM_ADDR, Global_datas.FmData.station_num);
;;;106    		FMC_Write(CURRENT_STATION_ADDR, Global_datas.FmData.current_station);
00006a  6c39              LDR      r1,[r7,#0x40]  ; Global_datas
00006c  e003              B        |L2.118|
                  |L2.110|
;;;107    	}
;;;108    	else
;;;109    	{
;;;110    		Global_datas.FmData.Frequency = 8750;
00006e  490d              LDR      r1,|L2.164|
;;;111    		Global_datas.FmData.station_num =0;
000070  6439              STR      r1,[r7,#0x40]  ; Global_datas
000072  7125              STRB     r5,[r4,#4]
;;;112    		Global_datas.FmData.current_station = 0;
000074  71a5              STRB     r5,[r4,#6]
                  |L2.118|
;;;113    		
;;;114    		FMC_Write(FREQUENCY_ADDR, Global_datas.FmData.Frequency);
000076  4630              MOV      r0,r6
000078  f7fffffe          BL       FMC_Write
;;;115    		FMC_Write(STATION_NUM_ADDR, Global_datas.FmData.station_num);
00007c  207f              MOVS     r0,#0x7f
00007e  7921              LDRB     r1,[r4,#4]  ; Global_datas
000080  02c0              LSLS     r0,r0,#11
000082  f7fffffe          BL       FMC_Write
;;;116    		FMC_Write(CURRENT_STATION_ADDR, Global_datas.FmData.current_station);		
000086  4804              LDR      r0,|L2.152|
000088  79a1              LDRB     r1,[r4,#6]  ; Global_datas
00008a  381c              SUBS     r0,r0,#0x1c
00008c  f7fffffe          BL       FMC_Write
000090  4805              LDR      r0,|L2.168|
000092  6005              STR      r5,[r0,#0]
;;;117    	}
;;;118    
;;;119        SYS_LockReg();
;;;120    
;;;121    
;;;122    }
000094  bdf8              POP      {r3-r7,pc}
;;;123    
                          ENDP

000096  0000              DCW      0x0000
                  |L2.152|
                          DCD      0x0003f820
                  |L2.156|
                          DCD      0x5000c000
                  |L2.160|
                          DCD      Global_datas
                  |L2.164|
                          DCD      0x0000222e
                  |L2.168|
                          DCD      0x50000100

                          AREA ||i.FMC_Read||, CODE, READONLY, ALIGN=2

                  FMC_Read PROC
;;;283     */
;;;284    static __INLINE uint32_t FMC_Read(uint32_t u32Addr)
000000  4905              LDR      r1,|L3.24|
;;;285    {
;;;286        FMC->ISPCMD = FMC_ISPCMD_READ;
000002  2200              MOVS     r2,#0
000004  60ca              STR      r2,[r1,#0xc]
;;;287        FMC->ISPADDR = u32Addr;
000006  6048              STR      r0,[r1,#4]
;;;288        FMC->ISPDAT = 0;
000008  608a              STR      r2,[r1,#8]
;;;289        FMC->ISPTRG = 0x1;
00000a  2001              MOVS     r0,#1
00000c  6108              STR      r0,[r1,#0x10]
                  |L3.14|
;;;290    #if ISBEN
;;;291        __ISB();
;;;292    #endif
;;;293        while(FMC->ISPTRG);
00000e  6908              LDR      r0,[r1,#0x10]
000010  2800              CMP      r0,#0
000012  d1fc              BNE      |L3.14|
;;;294    
;;;295        return FMC->ISPDAT;
000014  6888              LDR      r0,[r1,#8]
;;;296    }
000016  4770              BX       lr
;;;297    
                          ENDP

                  |L3.24|
                          DCD      0x5000c000

                          AREA ||i.FMC_Write||, CODE, READONLY, ALIGN=2

                  FMC_Write PROC
;;;234     */
;;;235    static __INLINE void FMC_Write(uint32_t u32Addr, uint32_t u32Data)
000000  4a05              LDR      r2,|L4.24|
;;;236    {
;;;237        FMC->ISPCMD = FMC_ISPCMD_PROGRAM;
000002  2321              MOVS     r3,#0x21
000004  60d3              STR      r3,[r2,#0xc]
;;;238        FMC->ISPADDR = u32Addr;
000006  6050              STR      r0,[r2,#4]
;;;239        FMC->ISPDAT = u32Data;
000008  6091              STR      r1,[r2,#8]
;;;240        FMC->ISPTRG = 0x1;
00000a  2001              MOVS     r0,#1
00000c  6110              STR      r0,[r2,#0x10]
                  |L4.14|
;;;241    #if ISBEN
;;;242        __ISB();
;;;243    #endif
;;;244        while(FMC->ISPTRG);
00000e  6910              LDR      r0,[r2,#0x10]
000010  2800              CMP      r0,#0
000012  d1fc              BNE      |L4.14|
;;;245    }
000014  4770              BX       lr
;;;246    
                          ENDP

000016  0000              DCW      0x0000
                  |L4.24|
                          DCD      0x5000c000

                          AREA ||i.SYS_UnlockReg||, CODE, READONLY, ALIGN=2

                  SYS_UnlockReg PROC
;;;1786     */
;;;1787   __STATIC_INLINE void SYS_UnlockReg(void)
000000  b510              PUSH     {r4,lr}
;;;1788   {
;;;1789       do
;;;1790       {
;;;1791           SYS->REGLCTL = 0x59;
000002  2159              MOVS     r1,#0x59
000004  4804              LDR      r0,|L5.24|
;;;1792           SYS->REGLCTL = 0x16;
000006  2216              MOVS     r2,#0x16
;;;1793           SYS->REGLCTL = 0x88;
000008  2388              MOVS     r3,#0x88
                  |L5.10|
00000a  6001              STR      r1,[r0,#0]            ;1791
00000c  6002              STR      r2,[r0,#0]            ;1792
00000e  6003              STR      r3,[r0,#0]
;;;1794       }
;;;1795       while(SYS->REGLCTL == 0);
000010  6804              LDR      r4,[r0,#0]
000012  2c00              CMP      r4,#0
000014  d0f9              BEQ      |L5.10|
;;;1796   }
000016  bd10              POP      {r4,pc}
;;;1797   
                          ENDP

                  |L5.24|
                          DCD      0x50000100

                          AREA ||i.hal_fmc_init||, CODE, READONLY, ALIGN=2

                  hal_fmc_init PROC
;;;63     
;;;64     void hal_fmc_init(void)
000000  b510              PUSH     {r4,lr}
;;;65     {
;;;66         SYS_UnlockReg();
000002  f7fffffe          BL       SYS_UnlockReg
;;;67     
;;;68         /* Enable FMC ISP function */
;;;69         FMC_Open();
000006  f7fffffe          BL       FMC_Open
;;;70     
;;;71         /* Enable Data Flash and set base address. */
;;;72         if (set_data_flash_base(DATA_FLASH_TEST_BASE) < 0)
00000a  207f              MOVS     r0,#0x7f
00000c  02c0              LSLS     r0,r0,#11
00000e  f7fffffe          BL       set_data_flash_base
000012  2800              CMP      r0,#0
000014  da02              BGE      |L6.28|
;;;73         {
;;;74             printf("Failed to set Data Flash base address!\n");
000016  a003              ADR      r0,|L6.36|
000018  f7fffffe          BL       __2printf
                  |L6.28|
00001c  490b              LDR      r1,|L6.76|
00001e  2000              MOVS     r0,#0
000020  6008              STR      r0,[r1,#0]
;;;75         }
;;;76     
;;;77         /* Lock protected registers */
;;;78         SYS_LockReg();
;;;79     
;;;80     }
000022  bd10              POP      {r4,pc}
;;;81     
                          ENDP

                  |L6.36|
000024  4661696c          DCB      "Failed to set Data Flash base address!\n",0
000028  65642074
00002c  6f207365
000030  74204461
000034  74612046
000038  6c617368
00003c  20626173
000040  65206164
000044  64726573
000048  73210a00
                  |L6.76|
                          DCD      0x50000100

                          AREA ||i.set_data_flash_base||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                  set_data_flash_base PROC
;;;26     
;;;27      int  set_data_flash_base(uint32_t u32DFBA)
000000  b57c              PUSH     {r2-r6,lr}
;;;28     {
000002  4604              MOV      r4,r0
;;;29         uint32_t   au32Config[2];
;;;30     
;;;31         /* Read User Configuration 0 & 1 */
;;;32         if (FMC_ReadConfig(au32Config, 2) < 0)
000004  2102              MOVS     r1,#2
000006  4668              MOV      r0,sp
000008  f7fffffe          BL       FMC_ReadConfig
;;;33         {
;;;34             printf("\nRead User Config failed!\n");
;;;35             return -1;
00000c  2500              MOVS     r5,#0
00000e  43ed              MVNS     r5,r5
000010  2800              CMP      r0,#0                 ;32
000012  da03              BGE      |L7.28|
000014  a015              ADR      r0,|L7.108|
000016  f7fffffe          BL       __2printf
00001a  e017              B        |L7.76|
                  |L7.28|
;;;36         }
;;;37     
;;;38         /* Check if Data Flash is enabled (CONFIG0[0]) and is expected address (CONFIG1) */
;;;39         if ((!(au32Config[0] & 0x1)) && (au32Config[1] == u32DFBA))
00001c  9800              LDR      r0,[sp,#0]
00001e  07c0              LSLS     r0,r0,#31
000020  d104              BNE      |L7.44|
000022  9801              LDR      r0,[sp,#4]
000024  42a0              CMP      r0,r4
000026  d101              BNE      |L7.44|
                  |L7.40|
;;;40             return 0;
000028  2000              MOVS     r0,#0
;;;41     
;;;42         FMC_ENABLE_CFG_UPDATE();
;;;43     
;;;44         au32Config[0] &= ~0x1;         /* CONFIG0[0] = 0 (Enabled) / 1 (Disabled) */
;;;45         au32Config[1] = u32DFBA;
;;;46     
;;;47         /* Update User Configuration settings. */
;;;48         if (FMC_WriteConfig(au32Config, 2) < 0)
;;;49             return -1;
;;;50     
;;;51         printf("\nSet Data Flash base as 0x%x.\n", DATA_FLASH_TEST_BASE);
;;;52     
;;;53         /* To check if all the debug messages are finished */
;;;54         while(!IsDebugFifoEmpty());
;;;55     
;;;56         /* Perform chip reset to make new User Config take effect */
;;;57         SYS->IPRST0 = SYS_IPRST0_CHIPRST_Msk;
;;;58         return 0;
;;;59     }
00002a  bd7c              POP      {r2-r6,pc}
                  |L7.44|
00002c  4816              LDR      r0,|L7.136|
00002e  6801              LDR      r1,[r0,#0]            ;42
000030  2210              MOVS     r2,#0x10              ;42
000032  4311              ORRS     r1,r1,r2              ;42
000034  6001              STR      r1,[r0,#0]            ;42
000036  9800              LDR      r0,[sp,#0]            ;44
000038  2102              MOVS     r1,#2                 ;48
00003a  0840              LSRS     r0,r0,#1              ;44
00003c  0040              LSLS     r0,r0,#1              ;44
00003e  9000              STR      r0,[sp,#0]            ;48
000040  9401              STR      r4,[sp,#4]            ;48
000042  4668              MOV      r0,sp                 ;48
000044  f7fffffe          BL       FMC_WriteConfig
000048  2800              CMP      r0,#0                 ;48
00004a  da01              BGE      |L7.80|
                  |L7.76|
00004c  4628              MOV      r0,r5                 ;49
00004e  bd7c              POP      {r2-r6,pc}
                  |L7.80|
000050  217f              MOVS     r1,#0x7f              ;51
000052  02c9              LSLS     r1,r1,#11             ;51
000054  a00d              ADR      r0,|L7.140|
000056  f7fffffe          BL       __2printf
                  |L7.90|
00005a  f7fffffe          BL       IsDebugFifoEmpty
00005e  2800              CMP      r0,#0                 ;54
000060  d0fb              BEQ      |L7.90|
000062  2001              MOVS     r0,#1                 ;57
000064  2105              MOVS     r1,#5                 ;57
000066  0709              LSLS     r1,r1,#28             ;57
000068  6088              STR      r0,[r1,#8]            ;57
00006a  e7dd              B        |L7.40|
;;;60     
                          ENDP

                  |L7.108|
00006c  0a526561          DCB      "\nRead User Config failed!\n",0
000070  64205573
000074  65722043
000078  6f6e6669
00007c  67206661
000080  696c6564
000084  210a00  
000087  00                DCB      0
                  |L7.136|
                          DCD      0x5000c000
                  |L7.140|
00008c  0a536574          DCB      "\nSet Data Flash base as 0x%x.\n",0
000090  20446174
000094  6120466c
000098  61736820
00009c  62617365
0000a0  20617320
0000a4  30782578
0000a8  2e0a00  
0000ab  00                DCB      0

;*** Start embedded assembler ***

#line 1 "..\\src\\driver\\drv_fmc.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___9_drv_fmc_c_b0b9c8a9____REV16|
#line 388 "..\\lib\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___9_drv_fmc_c_b0b9c8a9____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___9_drv_fmc_c_b0b9c8a9____REVSH|
#line 402
|__asm___9_drv_fmc_c_b0b9c8a9____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
