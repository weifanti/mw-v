; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\srv_rtc.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\srv_rtc.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\lib\CMSIS\Include -I..\lib\Device\Nuvoton\NUC029xGE\Include -I..\lib\StdDriver\inc -I..\src\core\include -I..\src\driver\include -I..\src\io\include -I..\src\global -I..\src\server\include -I..\src\driver\audio -D__UVISION_VERSION=522 --omf_browse=.\obj\srv_rtc.crf ..\src\server\rtc\srv_rtc.c]
                          THUMB

                          AREA ||i.RTC_IRQHandler||, CODE, READONLY, ALIGN=2

                  RTC_IRQHandler PROC
;;;23      */
;;;24     void RTC_IRQHandler(void)
000000  4803              LDR      r0,|L1.16|
;;;25     {
;;;26         /* To check if RTC tick interrupt occurred */
;;;27         if(RTC_GET_TICK_INT_FLAG() == 1)
000002  6ac1              LDR      r1,[r0,#0x2c]
000004  0789              LSLS     r1,r1,#30
000006  d501              BPL      |L1.12|
;;;28         {
;;;29             /* Clear RTC tick interrupt flag */
;;;30             RTC_CLEAR_TICK_INT_FLAG();
000008  2102              MOVS     r1,#2
00000a  62c1              STR      r1,[r0,#0x2c]
                  |L1.12|
;;;31     
;;;32     //        g_u32RTCTickINT++;
;;;33     
;;;34     //        PB8 ^= 1;
;;;35         }
;;;36     }
00000c  4770              BX       lr
;;;37     
                          ENDP

00000e  0000              DCW      0x0000
                  |L1.16|
                          DCD      0x40008000

                          AREA ||i.srv_rtc_alarm_get||, CODE, READONLY, ALIGN=1

                  srv_rtc_alarm_get PROC
;;;300    */
;;;301    void srv_rtc_alarm_get(void)
000000  b500              PUSH     {lr}
;;;302    {
000002  b089              SUB      sp,sp,#0x24
;;;303        S_RTC_TIME_DATA_T sReadRTC;
;;;304        RTC_GetAlarmDateAndTime(&sReadRTC);
000004  4668              MOV      r0,sp
000006  f7fffffe          BL       RTC_GetAlarmDateAndTime
;;;305    	Cmd_Send2FourG(0x15,(sReadRTC.u32Year-2000), sReadRTC.u32Month);
00000a  9801              LDR      r0,[sp,#4]
00000c  217d              MOVS     r1,#0x7d
00000e  b2c2              UXTB     r2,r0
000010  9800              LDR      r0,[sp,#0]
000012  0109              LSLS     r1,r1,#4
000014  1a40              SUBS     r0,r0,r1
000016  b2c1              UXTB     r1,r0
000018  2015              MOVS     r0,#0x15
00001a  f7fffffe          BL       Cmd_Send2FourG
;;;306    	Cmd_Send2FourG(0x16,sReadRTC.u32Day, sReadRTC.u32DayOfWeek);
00001e  9803              LDR      r0,[sp,#0xc]
000020  b2c2              UXTB     r2,r0
000022  9802              LDR      r0,[sp,#8]
000024  b2c1              UXTB     r1,r0
000026  2016              MOVS     r0,#0x16
000028  f7fffffe          BL       Cmd_Send2FourG
;;;307    	Cmd_Send2FourG(0x17,sReadRTC.u32Hour, sReadRTC.u32Minute);
00002c  9805              LDR      r0,[sp,#0x14]
00002e  b2c2              UXTB     r2,r0
000030  9804              LDR      r0,[sp,#0x10]
000032  b2c1              UXTB     r1,r0
000034  2017              MOVS     r0,#0x17
000036  f7fffffe          BL       Cmd_Send2FourG
;;;308    	Cmd_Send2FourG(0x18,sReadRTC.u32Second, sReadRTC.u32TimeScale);
00003a  9807              LDR      r0,[sp,#0x1c]
00003c  b2c2              UXTB     r2,r0
00003e  9806              LDR      r0,[sp,#0x18]
000040  b2c1              UXTB     r1,r0
000042  2018              MOVS     r0,#0x18
000044  f7fffffe          BL       Cmd_Send2FourG
;;;309    }
000048  b009              ADD      sp,sp,#0x24
00004a  bd00              POP      {pc}
;;;310    
                          ENDP


                          AREA ||i.srv_rtc_alarm_set_dw||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  srv_rtc_alarm_set_dw PROC
;;;207    */
;;;208    void srv_rtc_alarm_set_dw(uint8_t data0, uint8_t data1)
000000  b570              PUSH     {r4-r6,lr}
;;;209    {
000002  b08c              SUB      sp,sp,#0x30
000004  4604              MOV      r4,r0
;;;210        S_RTC_TIME_DATA_T sWriteRTC,sReadRTC;
;;;211        RTC_GetAlarmDateAndTime(&sReadRTC);
000006  a803              ADD      r0,sp,#0xc
000008  f7fffffe          BL       RTC_GetAlarmDateAndTime
;;;212    	
;;;213        sWriteRTC.u32Year       = sReadRTC.u32Year;
;;;214        sWriteRTC.u32Month      = sReadRTC.u32Month ;
;;;215        sWriteRTC.u32Day        = data0;
;;;216        sWriteRTC.u32DayOfWeek  = data1;
;;;217    	printf("	%d/%02d/%02d %02d:%02d:%02d\n",
00000c  9e04              LDR      r6,[sp,#0x10]
00000e  9d03              LDR      r5,[sp,#0xc]
000010  9700              STR      r7,[sp,#0]
000012  9701              STR      r7,[sp,#4]
000014  4623              MOV      r3,r4
000016  4632              MOV      r2,r6
000018  4629              MOV      r1,r5
00001a  a005              ADR      r0,|L3.48|
00001c  9702              STR      r7,[sp,#8]
00001e  f7fffffe          BL       __2printf
;;;218    		   sWriteRTC.u32Year, sWriteRTC.u32Month, 
;;;219    		   sWriteRTC.u32Day, sWriteRTC.u32Hour, 
;;;220    		   sWriteRTC.u32Minute, sWriteRTC.u32Second);
;;;221    
;;;222        RTC_SetAlarmDate(sWriteRTC.u32Year, sWriteRTC.u32Month,sWriteRTC.u32Day);
000022  4622              MOV      r2,r4
000024  4631              MOV      r1,r6
000026  4628              MOV      r0,r5
000028  f7fffffe          BL       RTC_SetAlarmDate
;;;223    	
;;;224    }
00002c  b00c              ADD      sp,sp,#0x30
00002e  bd70              POP      {r4-r6,pc}
;;;225    
                          ENDP

                  |L3.48|
000030  0925642f          DCB      "\t%d/%02d/%02d %02d:%02d:%02d\n",0
000034  25303264
000038  2f253032
00003c  64202530
000040  32643a25
000044  3032643a
000048  25303264
00004c  0a00    
00004e  00                DCB      0
00004f  00                DCB      0

                          AREA ||i.srv_rtc_alarm_set_hm||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  srv_rtc_alarm_set_hm PROC
;;;231    */
;;;232    void srv_rtc_alarm_set_hm(uint8_t data0, uint8_t data1)
000000  b5f0              PUSH     {r4-r7,lr}
;;;233    {
000002  b091              SUB      sp,sp,#0x44
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;234        S_RTC_TIME_DATA_T sWriteRTC,sReadRTC;
;;;235        RTC_GetAlarmDateAndTime(&sReadRTC);
000008  a803              ADD      r0,sp,#0xc
00000a  f7fffffe          BL       RTC_GetAlarmDateAndTime
;;;236    	
;;;237        sWriteRTC.u32Hour       = data0;
;;;238        sWriteRTC.u32Minute     = data1;
;;;239        sWriteRTC.u32Second     = sReadRTC.u32Second;
;;;240        sWriteRTC.u32TimeScale  = sReadRTC.u32TimeScale;
;;;241        sWriteRTC.u32AmPm  = sReadRTC.u32AmPm;
00000e  980b              LDR      r0,[sp,#0x2c]
000010  900c              STR      r0,[sp,#0x30]
000012  9f0a              LDR      r7,[sp,#0x28]
000014  9e09              LDR      r6,[sp,#0x24]
000016  4668              MOV      r0,sp
000018  c070              STM      r0!,{r4-r6}
;;;242    	printf("	%d/%02d/%02d %02d:%02d:%02d\n",
00001a  a90d              ADD      r1,sp,#0x34
00001c  c90e              LDM      r1,{r1-r3}
00001e  a006              ADR      r0,|L4.56|
000020  f7fffffe          BL       __2printf
;;;243    		   sWriteRTC.u32Year, sWriteRTC.u32Month, 
;;;244    		   sWriteRTC.u32Day, sWriteRTC.u32Hour, 
;;;245    		   sWriteRTC.u32Minute, sWriteRTC.u32Second);
;;;246    
;;;247        RTC_SetAlarmTime(sWriteRTC.u32Hour, sWriteRTC.u32Minute,
000024  980c              LDR      r0,[sp,#0x30]
000026  9000              STR      r0,[sp,#0]
000028  463b              MOV      r3,r7
00002a  4632              MOV      r2,r6
00002c  4629              MOV      r1,r5
00002e  4620              MOV      r0,r4
000030  f7fffffe          BL       RTC_SetAlarmTime
;;;248    		sWriteRTC.u32Second, sWriteRTC.u32TimeScale, sWriteRTC.u32AmPm);
;;;249    	
;;;250    }
000034  b011              ADD      sp,sp,#0x44
000036  bdf0              POP      {r4-r7,pc}
;;;251    
                          ENDP

                  |L4.56|
000038  0925642f          DCB      "\t%d/%02d/%02d %02d:%02d:%02d\n",0
00003c  25303264
000040  2f253032
000044  64202530
000048  32643a25
00004c  3032643a
000050  25303264
000054  0a00    
000056  00                DCB      0
000057  00                DCB      0

                          AREA ||i.srv_rtc_alarm_set_st||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  srv_rtc_alarm_set_st PROC
;;;257    */
;;;258    void srv_rtc_alarm_set_st(uint8_t data0, uint8_t data1)
000000  b5f0              PUSH     {r4-r7,lr}
;;;259    {
000002  b091              SUB      sp,sp,#0x44
000004  4604              MOV      r4,r0
000006  460f              MOV      r7,r1
;;;260        S_RTC_TIME_DATA_T sWriteRTC,sReadRTC;
;;;261        RTC_GetAlarmDateAndTime(&sReadRTC);
000008  a803              ADD      r0,sp,#0xc
00000a  f7fffffe          BL       RTC_GetAlarmDateAndTime
;;;262    	
;;;263        sWriteRTC.u32Hour       = sReadRTC.u32Hour;
;;;264        sWriteRTC.u32Minute     = sReadRTC.u32Minute;
;;;265        sWriteRTC.u32Second     = data0;
;;;266        sWriteRTC.u32TimeScale  = data1 & 0x1;
00000e  07f8              LSLS     r0,r7,#31
000010  9d07              LDR      r5,[sp,#0x1c]
000012  0fc0              LSRS     r0,r0,#31
;;;267        sWriteRTC.u32AmPm  = data1 >> 1;
;;;268    	printf("	%d/%02d/%02d %02d:%02d:%02d\n",
000014  9402              STR      r4,[sp,#8]
000016  9e08              LDR      r6,[sp,#0x20]         ;266
000018  900c              STR      r0,[sp,#0x30]
00001a  9601              STR      r6,[sp,#4]
00001c  9500              STR      r5,[sp,#0]
00001e  a90d              ADD      r1,sp,#0x34
000020  c90e              LDM      r1,{r1-r3}
000022  087f              LSRS     r7,r7,#1              ;267
000024  a005              ADR      r0,|L5.60|
000026  f7fffffe          BL       __2printf
;;;269    		   sWriteRTC.u32Year, sWriteRTC.u32Month, 
;;;270    		   sWriteRTC.u32Day, sWriteRTC.u32Hour, 
;;;271    		   sWriteRTC.u32Minute, sWriteRTC.u32Second);
;;;272    
;;;273        RTC_SetAlarmTime(sWriteRTC.u32Hour, sWriteRTC.u32Minute,
00002a  4622              MOV      r2,r4
00002c  4631              MOV      r1,r6
00002e  4628              MOV      r0,r5
000030  9700              STR      r7,[sp,#0]
000032  9b0c              LDR      r3,[sp,#0x30]
000034  f7fffffe          BL       RTC_SetAlarmTime
;;;274    		sWriteRTC.u32Second, sWriteRTC.u32TimeScale, sWriteRTC.u32AmPm);
;;;275    	
;;;276    }
000038  b011              ADD      sp,sp,#0x44
00003a  bdf0              POP      {r4-r7,pc}
;;;277    
                          ENDP

                  |L5.60|
00003c  0925642f          DCB      "\t%d/%02d/%02d %02d:%02d:%02d\n",0
000040  25303264
000044  2f253032
000048  64202530
00004c  32643a25
000050  3032643a
000054  25303264
000058  0a00    
00005a  00                DCB      0
00005b  00                DCB      0

                          AREA ||i.srv_rtc_alarm_set_ym||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  srv_rtc_alarm_set_ym PROC
;;;185    */
;;;186    void srv_rtc_alarm_set_ym(uint8_t data0, uint8_t data1)
000000  b570              PUSH     {r4-r6,lr}
;;;187    {
000002  b08c              SUB      sp,sp,#0x30
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
;;;188        S_RTC_TIME_DATA_T sWriteRTC,sReadRTC;
;;;189        RTC_GetAlarmDateAndTime(&sReadRTC);
000008  a803              ADD      r0,sp,#0xc
00000a  f7fffffe          BL       RTC_GetAlarmDateAndTime
;;;190    
;;;191        sWriteRTC.u32Year       = 2000 + data0;
00000e  207d              MOVS     r0,#0x7d
000010  0100              LSLS     r0,r0,#4
000012  182d              ADDS     r5,r5,r0
;;;192        sWriteRTC.u32Month      = data1;
;;;193        sWriteRTC.u32Day        = sReadRTC.u32Day;
;;;194        sWriteRTC.u32DayOfWeek  = sReadRTC.u32DayOfWeek;
;;;195    	printf("	%d/%02d/%02d %02d:%02d:%02d\n",
000014  9e05              LDR      r6,[sp,#0x14]
000016  9700              STR      r7,[sp,#0]
000018  9701              STR      r7,[sp,#4]
00001a  4633              MOV      r3,r6
00001c  4629              MOV      r1,r5
00001e  4622              MOV      r2,r4
000020  a005              ADR      r0,|L6.56|
000022  9702              STR      r7,[sp,#8]
000024  f7fffffe          BL       __2printf
;;;196    		   sWriteRTC.u32Year, sWriteRTC.u32Month, 
;;;197    		   sWriteRTC.u32Day, sWriteRTC.u32Hour, 
;;;198    		   sWriteRTC.u32Minute, sWriteRTC.u32Second);
;;;199        RTC_SetAlarmDate(sWriteRTC.u32Year, sWriteRTC.u32Month,sWriteRTC.u32Day);
000028  4632              MOV      r2,r6
00002a  4628              MOV      r0,r5
00002c  4621              MOV      r1,r4
00002e  f7fffffe          BL       RTC_SetAlarmDate
;;;200    }
000032  b00c              ADD      sp,sp,#0x30
000034  bd70              POP      {r4-r6,pc}
;;;201    
                          ENDP

000036  0000              DCW      0x0000
                  |L6.56|
000038  0925642f          DCB      "\t%d/%02d/%02d %02d:%02d:%02d\n",0
00003c  25303264
000040  2f253032
000044  64202530
000048  32643a25
00004c  3032643a
000050  25303264
000054  0a00    
000056  00                DCB      0
000057  00                DCB      0

                          AREA ||i.srv_rtc_get||, CODE, READONLY, ALIGN=1

                  srv_rtc_get PROC
;;;283    */
;;;284    void srv_rtc_get(void)
000000  b500              PUSH     {lr}
;;;285    {
000002  b089              SUB      sp,sp,#0x24
;;;286        S_RTC_TIME_DATA_T sReadRTC;
;;;287        RTC_GetDateAndTime(&sReadRTC);
000004  4668              MOV      r0,sp
000006  f7fffffe          BL       RTC_GetDateAndTime
;;;288    	Cmd_Send2FourG(0x11,(sReadRTC.u32Year-2000), sReadRTC.u32Month);
00000a  9801              LDR      r0,[sp,#4]
00000c  217d              MOVS     r1,#0x7d
00000e  b2c2              UXTB     r2,r0
000010  9800              LDR      r0,[sp,#0]
000012  0109              LSLS     r1,r1,#4
000014  1a40              SUBS     r0,r0,r1
000016  b2c1              UXTB     r1,r0
000018  2011              MOVS     r0,#0x11
00001a  f7fffffe          BL       Cmd_Send2FourG
;;;289    	Cmd_Send2FourG(0x12,sReadRTC.u32Day, sReadRTC.u32DayOfWeek);
00001e  9803              LDR      r0,[sp,#0xc]
000020  b2c2              UXTB     r2,r0
000022  9802              LDR      r0,[sp,#8]
000024  b2c1              UXTB     r1,r0
000026  2012              MOVS     r0,#0x12
000028  f7fffffe          BL       Cmd_Send2FourG
;;;290    	Cmd_Send2FourG(0x13,sReadRTC.u32Hour, sReadRTC.u32Minute);
00002c  9805              LDR      r0,[sp,#0x14]
00002e  b2c2              UXTB     r2,r0
000030  9804              LDR      r0,[sp,#0x10]
000032  b2c1              UXTB     r1,r0
000034  2013              MOVS     r0,#0x13
000036  f7fffffe          BL       Cmd_Send2FourG
;;;291    	Cmd_Send2FourG(0x14,sReadRTC.u32Second, sReadRTC.u32TimeScale);
00003a  9807              LDR      r0,[sp,#0x1c]
00003c  b2c2              UXTB     r2,r0
00003e  9806              LDR      r0,[sp,#0x18]
000040  b2c1              UXTB     r1,r0
000042  2014              MOVS     r0,#0x14
000044  f7fffffe          BL       Cmd_Send2FourG
;;;292    	
;;;293    }
000048  b009              ADD      sp,sp,#0x24
00004a  bd00              POP      {pc}
;;;294    
                          ENDP


                          AREA ||i.srv_rtc_init||, CODE, READONLY, ALIGN=2

                  srv_rtc_init PROC
;;;41     /*---------------------------------------------------------------------------------------------------------*/
;;;42     void srv_rtc_init(void)
000000  b500              PUSH     {lr}
;;;43     {
000002  b089              SUB      sp,sp,#0x24
;;;44         S_RTC_TIME_DATA_T sWriteRTC;
;;;45     //    uint32_t u32Sec;
;;;46     //    uint8_t u8IsNewDateTime = 0;
;;;47     
;;;48         /* Unlock protected registers */
;;;49     
;;;50         printf("+-----------------------------------------+\n");
000004  a00f              ADR      r0,|L8.68|
000006  f7fffffe          BL       __2printf
;;;51         printf("|    srv_rtc_init!!!   |\n");
00000a  a01a              ADR      r0,|L8.116|
00000c  f7fffffe          BL       __2printf
;;;52         printf("+-----------------------------------------+\n\n");
000010  a01f              ADR      r0,|L8.144|
000012  f7fffffe          BL       __2printf
;;;53     
;;;54         /* Enable RTC NVIC */
;;;55        // NVIC_EnableIRQ(RTC_IRQn);
;;;56     
;;;57         /* Open RTC and start counting */
;;;58         sWriteRTC.u32Year       = 2016;
000016  203f              MOVS     r0,#0x3f
000018  0140              LSLS     r0,r0,#5
;;;59         sWriteRTC.u32Month      = 5;
00001a  9000              STR      r0,[sp,#0]
00001c  2005              MOVS     r0,#5
;;;60         sWriteRTC.u32Day        = 15;
;;;61         sWriteRTC.u32DayOfWeek  = RTC_SUNDAY;
00001e  9001              STR      r0,[sp,#4]
000020  2000              MOVS     r0,#0
;;;62         sWriteRTC.u32Hour       = 15;
;;;63         sWriteRTC.u32Minute     = 30;
000022  9003              STR      r0,[sp,#0xc]
000024  201e              MOVS     r0,#0x1e
000026  210f              MOVS     r1,#0xf               ;60
;;;64         sWriteRTC.u32Second     = 30;
000028  9005              STR      r0,[sp,#0x14]
;;;65         sWriteRTC.u32TimeScale  = RTC_CLOCK_24;
00002a  9006              STR      r0,[sp,#0x18]
00002c  9102              STR      r1,[sp,#8]            ;61
00002e  2001              MOVS     r0,#1
;;;66         RTC_Open(&sWriteRTC);
000030  9007              STR      r0,[sp,#0x1c]
000032  9104              STR      r1,[sp,#0x10]         ;63
000034  4668              MOV      r0,sp
000036  f7fffffe          BL       RTC_Open
;;;67     	RTC_SetAlarmDateAndTime(&sWriteRTC);
00003a  4668              MOV      r0,sp
00003c  f7fffffe          BL       RTC_SetAlarmDateAndTime
;;;68         /* Enable RTC tick interrupt, one RTC tick is 1/4 second
;;;69         //RTC_EnableInt(RTC_INTEN_TICKIEN_Msk);
;;;70         RTC_SetTickPeriod(RTC_TICK_1_4_SEC);
;;;71         RTC_GetDateAndTime(&sReadRTC);
;;;72     	printf("	%d/%02d/%02d %02d:%02d:%02d\n",
;;;73     		   sReadRTC.u32Year, sReadRTC.u32Month,
;;;74     		   sReadRTC.u32Day, sReadRTC.u32Hour, 
;;;75     		   sReadRTC.u32Minute, sReadRTC.u32Second);
;;;76         RTC_SetDate(2017, 5, 15, RTC_MONDAY);
;;;77         RTC_SetTime(11, 12, 13, RTC_CLOCK_24, RTC_AM); */
;;;78     }
000040  b009              ADD      sp,sp,#0x24
000042  bd00              POP      {pc}
;;;79     
                          ENDP

                  |L8.68|
000044  2b2d2d2d          DCB      "+-----------------------------------------+\n",0
000048  2d2d2d2d
00004c  2d2d2d2d
000050  2d2d2d2d
000054  2d2d2d2d
000058  2d2d2d2d
00005c  2d2d2d2d
000060  2d2d2d2d
000064  2d2d2d2d
000068  2d2d2d2d
00006c  2d2d2b0a
000070  00      
000071  00                DCB      0
000072  00                DCB      0
000073  00                DCB      0
                  |L8.116|
000074  7c202020          DCB      "|    srv_rtc_init!!!   |\n",0
000078  20737276
00007c  5f727463
000080  5f696e69
000084  74212121
000088  2020207c
00008c  0a00    
00008e  00                DCB      0
00008f  00                DCB      0
                  |L8.144|
000090  2b2d2d2d          DCB      "+-----------------------------------------+\n\n",0
000094  2d2d2d2d
000098  2d2d2d2d
00009c  2d2d2d2d
0000a0  2d2d2d2d
0000a4  2d2d2d2d
0000a8  2d2d2d2d
0000ac  2d2d2d2d
0000b0  2d2d2d2d
0000b4  2d2d2d2d
0000b8  2d2d2b0a
0000bc  0a00    
0000be  00                DCB      0
0000bf  00                DCB      0

                          AREA ||i.srv_rtc_set_dw||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  srv_rtc_set_dw PROC
;;;108    */
;;;109    void srv_rtc_set_dw(uint8_t data0, uint8_t data1)
000000  b5f0              PUSH     {r4-r7,lr}
;;;110    {
000002  b08f              SUB      sp,sp,#0x3c
000004  4604              MOV      r4,r0
000006  460f              MOV      r7,r1
;;;111        S_RTC_TIME_DATA_T sWriteRTC,sReadRTC;
;;;112        RTC_GetDateAndTime(&sReadRTC);
000008  a805              ADD      r0,sp,#0x14
00000a  f7fffffe          BL       RTC_GetDateAndTime
00000e  a803              ADD      r0,sp,#0xc
000010  c866              LDM      r0!,{r1,r2,r5,r6}
;;;113    	
;;;114        sWriteRTC.u32Year       = sReadRTC.u32Year;
;;;115        sWriteRTC.u32Month      = sReadRTC.u32Month ;
;;;116        sWriteRTC.u32Day        = data0;
;;;117        sWriteRTC.u32DayOfWeek  = data1;
;;;118    	printf("	%d/%02d/%02d %02d:%02d:%02d\n",
000012  9200              STR      r2,[sp,#0]
000014  9101              STR      r1,[sp,#4]
000016  4632              MOV      r2,r6
000018  4629              MOV      r1,r5
00001a  4623              MOV      r3,r4
00001c  a005              ADR      r0,|L9.52|
00001e  f7fffffe          BL       __2printf
;;;119    		   sWriteRTC.u32Year, sWriteRTC.u32Month, 
;;;120    		   sWriteRTC.u32Day, sWriteRTC.u32Hour, 
;;;121    		   sWriteRTC.u32Minute, sWriteRTC.u32Second);
;;;122    
;;;123        RTC_SetDate(sWriteRTC.u32Year, sWriteRTC.u32Month,
000022  463b              MOV      r3,r7
000024  4622              MOV      r2,r4
000026  4631              MOV      r1,r6
000028  4628              MOV      r0,r5
00002a  f7fffffe          BL       RTC_SetDate
;;;124    		sWriteRTC.u32Day, sWriteRTC.u32DayOfWeek);
;;;125    	
;;;126    }
00002e  b00f              ADD      sp,sp,#0x3c
000030  bdf0              POP      {r4-r7,pc}
;;;127    
                          ENDP

000032  0000              DCW      0x0000
                  |L9.52|
000034  0925642f          DCB      "\t%d/%02d/%02d %02d:%02d:%02d\n",0
000038  25303264
00003c  2f253032
000040  64202530
000044  32643a25
000048  3032643a
00004c  25303264
000050  0a00    
000052  00                DCB      0
000053  00                DCB      0

                          AREA ||i.srv_rtc_set_hm||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  srv_rtc_set_hm PROC
;;;133    */
;;;134    void srv_rtc_set_hm(uint8_t data0, uint8_t data1)
000000  b5f0              PUSH     {r4-r7,lr}
;;;135    {
000002  b091              SUB      sp,sp,#0x44
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;136        S_RTC_TIME_DATA_T sWriteRTC,sReadRTC;
;;;137        RTC_GetDateAndTime(&sReadRTC);
000008  a803              ADD      r0,sp,#0xc
00000a  f7fffffe          BL       RTC_GetDateAndTime
;;;138    	
;;;139        sWriteRTC.u32Hour       = data0;
;;;140        sWriteRTC.u32Minute     = data1;
;;;141        sWriteRTC.u32Second     = sReadRTC.u32Second;
;;;142        sWriteRTC.u32TimeScale  = sReadRTC.u32TimeScale;
;;;143        sWriteRTC.u32AmPm  = sReadRTC.u32AmPm;
00000e  980b              LDR      r0,[sp,#0x2c]
000010  900c              STR      r0,[sp,#0x30]
000012  9f0a              LDR      r7,[sp,#0x28]
000014  9e09              LDR      r6,[sp,#0x24]
000016  4668              MOV      r0,sp
000018  c070              STM      r0!,{r4-r6}
;;;144    	printf("	%d/%02d/%02d %02d:%02d:%02d\n",
00001a  a90d              ADD      r1,sp,#0x34
00001c  c90e              LDM      r1,{r1-r3}
00001e  a006              ADR      r0,|L10.56|
000020  f7fffffe          BL       __2printf
;;;145    		   sWriteRTC.u32Year, sWriteRTC.u32Month, 
;;;146    		   sWriteRTC.u32Day, sWriteRTC.u32Hour, 
;;;147    		   sWriteRTC.u32Minute, sWriteRTC.u32Second);
;;;148    
;;;149        RTC_SetTime(sWriteRTC.u32Hour, sWriteRTC.u32Minute,
000024  980c              LDR      r0,[sp,#0x30]
000026  9000              STR      r0,[sp,#0]
000028  463b              MOV      r3,r7
00002a  4632              MOV      r2,r6
00002c  4629              MOV      r1,r5
00002e  4620              MOV      r0,r4
000030  f7fffffe          BL       RTC_SetTime
;;;150    		sWriteRTC.u32Second, sWriteRTC.u32TimeScale, sWriteRTC.u32AmPm);
;;;151    	
;;;152    }
000034  b011              ADD      sp,sp,#0x44
000036  bdf0              POP      {r4-r7,pc}
;;;153    
                          ENDP

                  |L10.56|
000038  0925642f          DCB      "\t%d/%02d/%02d %02d:%02d:%02d\n",0
00003c  25303264
000040  2f253032
000044  64202530
000048  32643a25
00004c  3032643a
000050  25303264
000054  0a00    
000056  00                DCB      0
000057  00                DCB      0

                          AREA ||i.srv_rtc_set_st||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  srv_rtc_set_st PROC
;;;159    */
;;;160    void srv_rtc_set_st(uint8_t data0, uint8_t data1)
000000  b5f0              PUSH     {r4-r7,lr}
;;;161    {
000002  b091              SUB      sp,sp,#0x44
000004  4604              MOV      r4,r0
000006  460f              MOV      r7,r1
;;;162        S_RTC_TIME_DATA_T sWriteRTC,sReadRTC;
;;;163        RTC_GetDateAndTime(&sReadRTC);
000008  a803              ADD      r0,sp,#0xc
00000a  f7fffffe          BL       RTC_GetDateAndTime
;;;164    	
;;;165        sWriteRTC.u32Hour       = sReadRTC.u32Hour;
;;;166        sWriteRTC.u32Minute     = sReadRTC.u32Minute;
;;;167        sWriteRTC.u32Second     = data0;
;;;168        sWriteRTC.u32TimeScale  = data1 & 0x1;
00000e  07f8              LSLS     r0,r7,#31
000010  9d07              LDR      r5,[sp,#0x1c]
000012  0fc0              LSRS     r0,r0,#31
;;;169        sWriteRTC.u32AmPm  = data1 >> 1;
;;;170    	printf("	%d/%02d/%02d %02d:%02d:%02d\n",
000014  9402              STR      r4,[sp,#8]
000016  9e08              LDR      r6,[sp,#0x20]         ;168
000018  900c              STR      r0,[sp,#0x30]
00001a  9601              STR      r6,[sp,#4]
00001c  9500              STR      r5,[sp,#0]
00001e  a90d              ADD      r1,sp,#0x34
000020  c90e              LDM      r1,{r1-r3}
000022  087f              LSRS     r7,r7,#1              ;169
000024  a005              ADR      r0,|L11.60|
000026  f7fffffe          BL       __2printf
;;;171    		   sWriteRTC.u32Year, sWriteRTC.u32Month, 
;;;172    		   sWriteRTC.u32Day, sWriteRTC.u32Hour, 
;;;173    		   sWriteRTC.u32Minute, sWriteRTC.u32Second);
;;;174    
;;;175        RTC_SetTime(sWriteRTC.u32Hour, sWriteRTC.u32Minute,
00002a  4622              MOV      r2,r4
00002c  4631              MOV      r1,r6
00002e  4628              MOV      r0,r5
000030  9700              STR      r7,[sp,#0]
000032  9b0c              LDR      r3,[sp,#0x30]
000034  f7fffffe          BL       RTC_SetTime
;;;176    		sWriteRTC.u32Second, sWriteRTC.u32TimeScale, sWriteRTC.u32AmPm);
;;;177    	
;;;178    }
000038  b011              ADD      sp,sp,#0x44
00003a  bdf0              POP      {r4-r7,pc}
;;;179    
                          ENDP

                  |L11.60|
00003c  0925642f          DCB      "\t%d/%02d/%02d %02d:%02d:%02d\n",0
000040  25303264
000044  2f253032
000048  64202530
00004c  32643a25
000050  3032643a
000054  25303264
000058  0a00    
00005a  00                DCB      0
00005b  00                DCB      0

                          AREA ||i.srv_rtc_set_ym||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  srv_rtc_set_ym PROC
;;;85     */
;;;86     void srv_rtc_set_ym(uint8_t data0, uint8_t data1)
000000  b5f0              PUSH     {r4-r7,lr}
;;;87     {
000002  b08d              SUB      sp,sp,#0x34
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
;;;88         S_RTC_TIME_DATA_T sWriteRTC,sReadRTC;
;;;89         RTC_GetDateAndTime(&sReadRTC);
000008  a803              ADD      r0,sp,#0xc
00000a  f7fffffe          BL       RTC_GetDateAndTime
;;;90     
;;;91         sWriteRTC.u32Year       = 2000 + data0;
00000e  207d              MOVS     r0,#0x7d
000010  0100              LSLS     r0,r0,#4
000012  182d              ADDS     r5,r5,r0
;;;92         sWriteRTC.u32Month      = data1;
;;;93         sWriteRTC.u32Day        = sReadRTC.u32Day;
;;;94         sWriteRTC.u32DayOfWeek  = sReadRTC.u32DayOfWeek;
;;;95     	printf("	%d/%02d/%02d %02d:%02d:%02d\n",
000014  9902              LDR      r1,[sp,#8]
000016  9801              LDR      r0,[sp,#4]
000018  9f06              LDR      r7,[sp,#0x18]
00001a  9e05              LDR      r6,[sp,#0x14]
00001c  9101              STR      r1,[sp,#4]
00001e  9002              STR      r0,[sp,#8]
000020  4629              MOV      r1,r5
000022  4633              MOV      r3,r6
000024  4622              MOV      r2,r4
000026  a005              ADR      r0,|L12.60|
000028  f7fffffe          BL       __2printf
;;;96     		   sWriteRTC.u32Year, sWriteRTC.u32Month, 
;;;97     		   sWriteRTC.u32Day, sWriteRTC.u32Hour, 
;;;98     		   sWriteRTC.u32Minute, sWriteRTC.u32Second);
;;;99         RTC_SetDate(sWriteRTC.u32Year, sWriteRTC.u32Month,
00002c  463b              MOV      r3,r7
00002e  4632              MOV      r2,r6
000030  4628              MOV      r0,r5
000032  4621              MOV      r1,r4
000034  f7fffffe          BL       RTC_SetDate
;;;100    		sWriteRTC.u32Day, sWriteRTC.u32DayOfWeek);
;;;101    }
000038  b00d              ADD      sp,sp,#0x34
00003a  bdf0              POP      {r4-r7,pc}
;;;102    
                          ENDP

                  |L12.60|
00003c  0925642f          DCB      "\t%d/%02d/%02d %02d:%02d:%02d\n",0
000040  25303264
000044  2f253032
000048  64202530
00004c  32643a25
000050  3032643a
000054  25303264
000058  0a00    
00005a  00                DCB      0
00005b  00                DCB      0

;*** Start embedded assembler ***

#line 1 "..\\src\\server\\rtc\\srv_rtc.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___9_srv_rtc_c_1497221f____REV16|
#line 388 "..\\lib\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___9_srv_rtc_c_1497221f____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___9_srv_rtc_c_1497221f____REVSH|
#line 402
|__asm___9_srv_rtc_c_1497221f____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
