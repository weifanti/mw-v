; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\io_i2c.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\io_i2c.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\lib\CMSIS\Include -I..\lib\Device\Nuvoton\NUC029xGE\Include -I..\lib\StdDriver\inc -I..\src\core\include -I..\src\driver\include -I..\src\io\include -I..\src\global -I..\src\server\include -I..\src\driver\audio -D__UVISION_VERSION=522 --omf_browse=.\obj\io_i2c.crf ..\src\io\io_i2c.c]
                          THUMB

                          AREA ||i.Hal_I2c0_Stop||, CODE, READONLY, ALIGN=2

                  Hal_I2c0_Stop PROC
;;;73      */
;;;74     static void Hal_I2c0_Stop(void)
000000  b538              PUSH     {r3-r5,lr}
;;;75     {
;;;76     	/*--I2C0--*/
;;;77         I2C_ClearTimeoutFlag(I2C0);
000002  4d09              LDR      r5,|L1.40|
000004  4628              MOV      r0,r5
000006  f7fffffe          BL       I2C_ClearTimeoutFlag
;;;78         I2C_DisableInt(I2C0);
00000a  4628              MOV      r0,r5
00000c  f7fffffe          BL       I2C_DisableInt
;;;79         I2C_Trigger(I2C0, 0, 1, 1, 0);
000010  2400              MOVS     r4,#0
000012  2301              MOVS     r3,#1
000014  461a              MOV      r2,r3
000016  4621              MOV      r1,r4
000018  4628              MOV      r0,r5
00001a  9400              STR      r4,[sp,#0]
00001c  f7fffffe          BL       I2C_Trigger
;;;80         i2c_trans_data.wait_cnt    = 0;
000020  4802              LDR      r0,|L1.44|
000022  8204              STRH     r4,[r0,#0x10]
;;;81         i2c_trans_data.is_in_trans = FALSE;
000024  7504              STRB     r4,[r0,#0x14]
;;;82     }
000026  bd38              POP      {r3-r5,pc}
;;;83     
                          ENDP

                  |L1.40|
                          DCD      0x40020000
                  |L1.44|
                          DCD      ||.bss||

                          AREA ||i.Hal_I2c1_Stop||, CODE, READONLY, ALIGN=2

                  Hal_I2c1_Stop PROC
;;;91      */
;;;92     static void Hal_I2c1_Stop(void)
000000  b538              PUSH     {r3-r5,lr}
;;;93     {
;;;94     	/*--I2C1--*/
;;;95     
;;;96     	I2C_ClearTimeoutFlag(I2C1);
000002  4d09              LDR      r5,|L2.40|
000004  4628              MOV      r0,r5
000006  f7fffffe          BL       I2C_ClearTimeoutFlag
;;;97         I2C_DisableInt(I2C1);
00000a  4628              MOV      r0,r5
00000c  f7fffffe          BL       I2C_DisableInt
;;;98         I2C_Trigger(I2C1, 0, 1, 1, 0);
000010  2400              MOVS     r4,#0
000012  2301              MOVS     r3,#1
000014  461a              MOV      r2,r3
000016  4621              MOV      r1,r4
000018  4628              MOV      r0,r5
00001a  9400              STR      r4,[sp,#0]
00001c  f7fffffe          BL       I2C_Trigger
;;;99         i2c_trans_data.wait_cnt    = 0;
000020  4802              LDR      r0,|L2.44|
000022  8204              STRH     r4,[r0,#0x10]
;;;100        i2c_trans_data.is_in_trans = FALSE;
000024  7504              STRB     r4,[r0,#0x14]
;;;101    }
000026  bd38              POP      {r3-r5,pc}
;;;102    
                          ENDP

                  |L2.40|
                          DCD      0x40120000
                  |L2.44|
                          DCD      ||.bss||

                          AREA ||i.Hal_I2c1_Transfer||, CODE, READONLY, ALIGN=2

                  Hal_I2c1_Transfer PROC
;;;158    
;;;159    void Hal_I2c1_Transfer(uint8_t addr, uint8_t* tx_arr, uint32_t tx_len, uint8_t* rx_arr, uint32_t rx_len)
000000  b5ff              PUSH     {r0-r7,lr}
;;;160    {
;;;161    
;;;162    
;;;163        /* first check bus and wait */
;;;164        while(i2c_trans_data.is_in_trans)
000002  4c1c              LDR      r4,|L3.116|
000004  b081              SUB      sp,sp,#4              ;160
000006  4616              MOV      r6,r2                 ;160
000008  4607              MOV      r7,r0                 ;160
                  |L3.10|
00000a  7d20              LDRB     r0,[r4,#0x14]  ; i2c_trans_data
00000c  2800              CMP      r0,#0
00000e  d1fc              BNE      |L3.10|
;;;165        {
;;;166            ; /* wait */
;;;167        }
;;;168    
;;;169        /* leave when error */
;;;170        if(I2C_GetStatus(I2C1) == I2C_STATUS_ERROR)
000010  4d19              LDR      r5,|L3.120|
000012  4628              MOV      r0,r5
000014  f7fffffe          BL       I2C_GetStatus
000018  2800              CMP      r0,#0
00001a  d109              BNE      |L3.48|
;;;171        {
;;;172     //   printf("I2C_STATUS_ERROR\n");
;;;173            if((sys_err & SYS_ERR_I2C1) == 0)
00001c  4817              LDR      r0,|L3.124|
00001e  7801              LDRB     r1,[r0,#0]  ; sys_err
000020  0749              LSLS     r1,r1,#29
000022  d405              BMI      |L3.48|
;;;174            {
;;;175                sys_err |= SYS_ERR_I2C1;
000024  7801              LDRB     r1,[r0,#0]  ; sys_err
000026  2204              MOVS     r2,#4
000028  4311              ORRS     r1,r1,r2
00002a  7001              STRB     r1,[r0,#0]
                  |L3.44|
;;;176                return;
;;;177            }
;;;178        }
;;;179    
;;;180        /* set data */
;;;181        i2c_trans_data.slave_addr  = addr;
;;;182        i2c_trans_data.p_tx_buff   = tx_arr;
;;;183        i2c_trans_data.p_rx_buff   = rx_arr;
;;;184        i2c_trans_data.tx_buff_len = tx_len;
;;;185        i2c_trans_data.rx_buff_len = rx_len;
;;;186        i2c_trans_data.curr_tx_pos = 0;
;;;187        i2c_trans_data.curr_rx_pos = 0;
;;;188        i2c_trans_data.next_status = I2C_STATUS_START_OK;
;;;189        i2c_trans_data.wait_cnt    = 0;
;;;190        i2c_trans_data.is_in_trans = TRUE;
;;;191    
;;;192        /* start */
;;;193        I2C_ClearTimeoutFlag(I2C1);
;;;194        I2C_Trigger(I2C1, 1, 0, 1, 0);
;;;195        I2C_EnableInt(I2C1);
;;;196    //	printf("last check bus and wait\n");
;;;197    
;;;198        /* last check bus and wait */
;;;199    #if 1
;;;200        while(i2c_trans_data.is_in_trans)
;;;201        {
;;;202            ; /* wait */
;;;203        }
;;;204    	
;;;205    #endif
;;;206    
;;;207    
;;;208    }
00002c  b005              ADD      sp,sp,#0x14
00002e  bdf0              POP      {r4-r7,pc}
                  |L3.48|
000030  74a7              STRB     r7,[r4,#0x12]         ;181
000032  9802              LDR      r0,[sp,#8]            ;182
000034  6020              STR      r0,[r4,#0]            ;182  ; i2c_trans_data
000036  9804              LDR      r0,[sp,#0x10]         ;183
000038  6060              STR      r0,[r4,#4]            ;183  ; i2c_trans_data
00003a  8126              STRH     r6,[r4,#8]            ;184
00003c  980a              LDR      r0,[sp,#0x28]         ;185
00003e  8160              STRH     r0,[r4,#0xa]          ;185
000040  2600              MOVS     r6,#0                 ;186
000042  81a6              STRH     r6,[r4,#0xc]          ;186
000044  81e6              STRH     r6,[r4,#0xe]          ;187
000046  2008              MOVS     r0,#8                 ;188
000048  74e0              STRB     r0,[r4,#0x13]         ;188
00004a  8226              STRH     r6,[r4,#0x10]         ;189
00004c  2001              MOVS     r0,#1                 ;190
00004e  7520              STRB     r0,[r4,#0x14]         ;190
000050  4628              MOV      r0,r5                 ;193
000052  f7fffffe          BL       I2C_ClearTimeoutFlag
000056  2301              MOVS     r3,#1                 ;194
000058  2200              MOVS     r2,#0                 ;194
00005a  4619              MOV      r1,r3                 ;194
00005c  4628              MOV      r0,r5                 ;194
00005e  9600              STR      r6,[sp,#0]            ;194
000060  f7fffffe          BL       I2C_Trigger
000064  4628              MOV      r0,r5                 ;195
000066  f7fffffe          BL       I2C_EnableInt
                  |L3.106|
00006a  7d20              LDRB     r0,[r4,#0x14]         ;200  ; i2c_trans_data
00006c  2800              CMP      r0,#0                 ;200
00006e  d1fc              BNE      |L3.106|
000070  e7dc              B        |L3.44|
;;;209    
                          ENDP

000072  0000              DCW      0x0000
                  |L3.116|
                          DCD      ||.bss||
                  |L3.120|
                          DCD      0x40120000
                  |L3.124|
                          DCD      sys_err

                          AREA ||i.Hal_I2c_Init||, CODE, READONLY, ALIGN=2

                  Hal_I2c_Init PROC
;;;42      */
;;;43     void Hal_I2c_Init(void)
000000  b570              PUSH     {r4-r6,lr}
;;;44     {
;;;45     	/*--I2C0--*/
;;;46         CLK_EnableModuleClock(I2C0_MODULE);
000002  4819              LDR      r0,|L4.104|
000004  f7fffffe          BL       CLK_EnableModuleClock
;;;47         SYS_ResetModule(I2C0_RST);
000008  4818              LDR      r0,|L4.108|
00000a  f7fffffe          BL       SYS_ResetModule
;;;48         I2C_EnableTimeout(I2C0, 1);
00000e  4c18              LDR      r4,|L4.112|
000010  2101              MOVS     r1,#1
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       I2C_EnableTimeout
;;;49         I2C_Open(I2C0, I2C_FAST_BAUDRATE);
000018  4916              LDR      r1,|L4.116|
00001a  4620              MOV      r0,r4
00001c  f7fffffe          BL       I2C_Open
000020  2001              MOVS     r0,#1
000022  4c15              LDR      r4,|L4.120|
000024  0480              LSLS     r0,r0,#18
000026  6020              STR      r0,[r4,#0]
;;;50         NVIC_EnableIRQ(I2C0_IRQn);
;;;51         NVIC_SetPriority(I2C0_IRQn, 2UL);
000028  2102              MOVS     r1,#2
00002a  2012              MOVS     r0,#0x12
00002c  f7fffffe          BL       NVIC_SetPriority
;;;52     
;;;53     	
;;;54     	/*--I2C1--*/
;;;55     	
;;;56     	CLK_EnableModuleClock(I2C1_MODULE);
000030  480d              LDR      r0,|L4.104|
000032  1c40              ADDS     r0,r0,#1
000034  f7fffffe          BL       CLK_EnableModuleClock
;;;57         SYS_ResetModule(I2C1_RST);
000038  480c              LDR      r0,|L4.108|
00003a  1c40              ADDS     r0,r0,#1
00003c  f7fffffe          BL       SYS_ResetModule
;;;58         I2C_EnableTimeout(I2C1, 1);
000040  4d0e              LDR      r5,|L4.124|
000042  2101              MOVS     r1,#1
000044  4628              MOV      r0,r5
000046  f7fffffe          BL       I2C_EnableTimeout
;;;59         I2C_Open(I2C1, I2C_BAUDRATE);
00004a  490d              LDR      r1,|L4.128|
00004c  4628              MOV      r0,r5
00004e  f7fffffe          BL       I2C_Open
000052  2001              MOVS     r0,#1
000054  04c0              LSLS     r0,r0,#19
000056  6020              STR      r0,[r4,#0]
;;;60         NVIC_EnableIRQ(I2C1_IRQn);
;;;61         NVIC_SetPriority(I2C1_IRQn, 2UL);
000058  2102              MOVS     r1,#2
00005a  2013              MOVS     r0,#0x13
00005c  f7fffffe          BL       NVIC_SetPriority
;;;62     
;;;63     	// I2C3
;;;64     	FmIoConfig();
000060  f7fffffe          BL       FmIoConfig
;;;65     
;;;66     }
000064  bd70              POP      {r4-r6,pc}
;;;67     
                          ENDP

000066  0000              DCW      0x0000
                  |L4.104|
                          DCD      0x40000008
                  |L4.108|
                          DCD      0x04000008
                  |L4.112|
                          DCD      0x40020000
                  |L4.116|
                          DCD      0x00030d40
                  |L4.120|
                          DCD      0xe000e100
                  |L4.124|
                          DCD      0x40120000
                  |L4.128|
                          DCD      0x000186a0

                          AREA ||i.Hal_I2c_Transfer||, CODE, READONLY, ALIGN=2

                  Hal_I2c_Transfer PROC
;;;113     */
;;;114    void Hal_I2c_Transfer(uint8_t addr, uint8_t* tx_arr, uint32_t tx_len, uint8_t* rx_arr, uint32_t rx_len)
000000  b5ff              PUSH     {r0-r7,lr}
;;;115    {
;;;116        /* first check bus and wait */
;;;117        while(i2c_trans_data.is_in_trans)
000002  4c1c              LDR      r4,|L5.116|
000004  b081              SUB      sp,sp,#4              ;115
000006  4616              MOV      r6,r2                 ;115
000008  4607              MOV      r7,r0                 ;115
                  |L5.10|
00000a  7d20              LDRB     r0,[r4,#0x14]  ; i2c_trans_data
00000c  2800              CMP      r0,#0
00000e  d1fc              BNE      |L5.10|
;;;118        {
;;;119            ; /* wait */
;;;120        }
;;;121    
;;;122        /* leave when error */
;;;123        if(I2C_GetStatus(I2C0) == I2C_STATUS_ERROR)
000010  4d19              LDR      r5,|L5.120|
000012  4628              MOV      r0,r5
000014  f7fffffe          BL       I2C_GetStatus
000018  2800              CMP      r0,#0
00001a  d109              BNE      |L5.48|
;;;124        {
;;;125       // 	printf("I2C_STATUS_ERROR\n");
;;;126            if((sys_err & SYS_ERR_I2C0) == 0)
00001c  4817              LDR      r0,|L5.124|
00001e  7801              LDRB     r1,[r0,#0]  ; sys_err
000020  0789              LSLS     r1,r1,#30
000022  d405              BMI      |L5.48|
;;;127            {
;;;128                sys_err |= SYS_ERR_I2C0;
000024  7801              LDRB     r1,[r0,#0]  ; sys_err
000026  2202              MOVS     r2,#2
000028  4311              ORRS     r1,r1,r2
00002a  7001              STRB     r1,[r0,#0]
                  |L5.44|
;;;129                return;
;;;130            }
;;;131        }
;;;132    
;;;133        /* set data */
;;;134        i2c_trans_data.slave_addr  = addr;
;;;135        i2c_trans_data.p_tx_buff   = tx_arr;
;;;136        i2c_trans_data.p_rx_buff   = rx_arr;
;;;137        i2c_trans_data.tx_buff_len = tx_len;
;;;138        i2c_trans_data.rx_buff_len = rx_len;
;;;139        i2c_trans_data.curr_tx_pos = 0;
;;;140        i2c_trans_data.curr_rx_pos = 0;
;;;141        i2c_trans_data.next_status = I2C_STATUS_START_OK;
;;;142        i2c_trans_data.wait_cnt    = 0;
;;;143        i2c_trans_data.is_in_trans = TRUE;
;;;144    
;;;145        /* start */
;;;146        I2C_ClearTimeoutFlag(I2C0);
;;;147        I2C_Trigger(I2C0, 1, 0, 1, 0);
;;;148        I2C_EnableInt(I2C0);
;;;149    //	printf("last check bus and wait\n");
;;;150        /* last check bus and wait */
;;;151    #if 1
;;;152        while(i2c_trans_data.is_in_trans)
;;;153        {
;;;154            ; /* wait */
;;;155        }
;;;156    #endif
;;;157    }
00002c  b005              ADD      sp,sp,#0x14
00002e  bdf0              POP      {r4-r7,pc}
                  |L5.48|
000030  74a7              STRB     r7,[r4,#0x12]         ;134
000032  9802              LDR      r0,[sp,#8]            ;135
000034  6020              STR      r0,[r4,#0]            ;135  ; i2c_trans_data
000036  9804              LDR      r0,[sp,#0x10]         ;136
000038  6060              STR      r0,[r4,#4]            ;136  ; i2c_trans_data
00003a  8126              STRH     r6,[r4,#8]            ;137
00003c  980a              LDR      r0,[sp,#0x28]         ;138
00003e  8160              STRH     r0,[r4,#0xa]          ;138
000040  2600              MOVS     r6,#0                 ;139
000042  81a6              STRH     r6,[r4,#0xc]          ;139
000044  81e6              STRH     r6,[r4,#0xe]          ;140
000046  2008              MOVS     r0,#8                 ;141
000048  74e0              STRB     r0,[r4,#0x13]         ;141
00004a  8226              STRH     r6,[r4,#0x10]         ;142
00004c  2001              MOVS     r0,#1                 ;143
00004e  7520              STRB     r0,[r4,#0x14]         ;143
000050  4628              MOV      r0,r5                 ;146
000052  f7fffffe          BL       I2C_ClearTimeoutFlag
000056  2301              MOVS     r3,#1                 ;147
000058  2200              MOVS     r2,#0                 ;147
00005a  4619              MOV      r1,r3                 ;147
00005c  4628              MOV      r0,r5                 ;147
00005e  9600              STR      r6,[sp,#0]            ;147
000060  f7fffffe          BL       I2C_Trigger
000064  4628              MOV      r0,r5                 ;148
000066  f7fffffe          BL       I2C_EnableInt
                  |L5.106|
00006a  7d20              LDRB     r0,[r4,#0x14]         ;152  ; i2c_trans_data
00006c  2800              CMP      r0,#0                 ;152
00006e  d1fc              BNE      |L5.106|
000070  e7dc              B        |L5.44|
;;;158    
                          ENDP

000072  0000              DCW      0x0000
                  |L5.116|
                          DCD      ||.bss||
                  |L5.120|
                          DCD      0x40020000
                  |L5.124|
                          DCD      sys_err

                          AREA ||i.I2C0_IRQHandler||, CODE, READONLY, ALIGN=2

                  I2C0_IRQHandler PROC
;;;215     */
;;;216    void I2C0_IRQHandler(void)
000000  b5f8              PUSH     {r3-r7,lr}
;;;217    {
;;;218        uint16_t tmp;
;;;219        uint8_t*  tp;
;;;220        volatile uint32_t status;
;;;221    
;;;222    	status = I2C_GET_STATUS(I2C0);
000002  4e58              LDR      r6,|L6.356|
000004  68f0              LDR      r0,[r6,#0xc]
000006  2701              MOVS     r7,#1
000008  9000              STR      r0,[sp,#0]
00000a  4957              LDR      r1,|L6.360|
00000c  04b8              LSLS     r0,r7,#18
00000e  6008              STR      r0,[r1,#0]
;;;223    
;;;224        NVIC_ClearPendingIRQ(I2C0_IRQn);
;;;225    
;;;226        if(I2C_GET_TIMEOUT_FLAG(I2C0))
000010  6970              LDR      r0,[r6,#0x14]
000012  43c0              MVNS     r0,r0
000014  07c0              LSLS     r0,r0,#31
000016  d026              BEQ      |L6.102|
;;;227        {
;;;228            I2C_ClearTimeoutFlag(I2C0);
;;;229            Hal_I2c0_Stop();
;;;230            return;
;;;231        }
;;;232    
;;;233        if(i2c_trans_data.next_status != status)
000018  4c54              LDR      r4,|L6.364|
00001a  7ce1              LDRB     r1,[r4,#0x13]  ; i2c_trans_data
00001c  9800              LDR      r0,[sp,#0]
00001e  4281              CMP      r1,r0
000020  d010              BEQ      |L6.68|
;;;234        {
;;;235            i2c_trans_data.wait_cnt++;
000022  8a20              LDRH     r0,[r4,#0x10]  ; i2c_trans_data
000024  1c40              ADDS     r0,r0,#1
000026  8220              STRH     r0,[r4,#0x10]
;;;236    
;;;237            if(i2c_trans_data.wait_cnt > I2C_WAIT_CYCLE)
000028  8a20              LDRH     r0,[r4,#0x10]  ; i2c_trans_data
00002a  4951              LDR      r1,|L6.368|
00002c  4288              CMP      r0,r1
00002e  d909              BLS      |L6.68|
;;;238            {
;;;239                if((sys_err & SYS_ERR_I2C0) == 0)
000030  4850              LDR      r0,|L6.372|
000032  7801              LDRB     r1,[r0,#0]  ; sys_err
000034  0789              LSLS     r1,r1,#30
000036  d403              BMI      |L6.64|
;;;240                {
;;;241                    sys_err |= SYS_ERR_I2C0;
000038  7801              LDRB     r1,[r0,#0]  ; sys_err
00003a  2202              MOVS     r2,#2
00003c  4311              ORRS     r1,r1,r2
00003e  7001              STRB     r1,[r0,#0]
                  |L6.64|
;;;242                }
;;;243                Hal_I2c0_Stop();
000040  f7fffffe          BL       Hal_I2c0_Stop
                  |L6.68|
;;;244            }
;;;245        }
;;;246    //	printf("i2c0*****status= 0x%x\n",status);
;;;247        switch (status)
000044  9800              LDR      r0,[sp,#0]
000046  0741              LSLS     r1,r0,#29
000048  0f49              LSRS     r1,r1,#29
00004a  d133              BNE      |L6.180|
00004c  10c0              ASRS     r0,r0,#3
;;;248        {
;;;249            case I2C_STATUS_ERROR:
;;;250            case I2C_STATUS_TRANS_ADDR_NAK:
;;;251            case I2C_STATUS_TRANS_DATA_NAK:
;;;252            case I2C_STATUS_REC_ADDR_NAK:
;;;253                if((sys_err & SYS_ERR_I2C0) == 0)
;;;254                {
;;;255                    sys_err |= SYS_ERR_I2C0;
;;;256                }
;;;257    
;;;258                Hal_I2c0_Stop();
;;;259    
;;;260                break;
;;;261    
;;;262            /* 1st start */
;;;263            case I2C_STATUS_START_OK:
;;;264                i2c_trans_data.next_status = I2C_STATUS_TRANS_ADDR_ACK;
;;;265                i2c_trans_data.wait_cnt = 0;
;;;266                I2C_SetData(I2C0, i2c_trans_data.slave_addr | I2C_DIR_WRITE);
;;;267                I2C_Trigger(I2C0, 0, 0, 1, 0);
;;;268                break;
;;;269    
;;;270            /* tx transfer */
;;;271            case I2C_STATUS_TRANS_ADDR_ACK:
;;;272    			TIMER_Delay(TIMER0, 16);	//delay 3s
;;;273                if(i2c_trans_data.tx_buff_len)
;;;274                {
;;;275                    i2c_trans_data.next_status = I2C_STATUS_TRANS_DATA_ACK;
;;;276                    i2c_trans_data.wait_cnt = 0;
;;;277                    I2C_SetData(I2C0, i2c_trans_data.p_tx_buff[0]);
;;;278                    i2c_trans_data.curr_tx_pos = 1;
;;;279                    I2C_Trigger(I2C0, 0, 0, 1, 0);
;;;280                }
;;;281                else
;;;282                {
;;;283                    Hal_I2c0_Stop();
;;;284                }
;;;285                break;
;;;286    
;;;287            /* tx transfer */
;;;288            case I2C_STATUS_TRANS_DATA_ACK:
;;;289    			
;;;290                tmp = i2c_trans_data.curr_tx_pos;
;;;291    
;;;292                if(tmp < i2c_trans_data.tx_buff_len)
;;;293                {
;;;294                    i2c_trans_data.next_status = I2C_STATUS_TRANS_DATA_ACK;
;;;295                    i2c_trans_data.wait_cnt = 0;
;;;296                    I2C_SetData(I2C0, i2c_trans_data.p_tx_buff[tmp]);
;;;297                    i2c_trans_data.curr_tx_pos++;
;;;298                    I2C_Trigger(I2C0, 0, 0, 1, 0);
;;;299                }
;;;300                else if(i2c_trans_data.rx_buff_len)
;;;301                {
;;;302                    /* repeat start */
;;;303                    i2c_trans_data.next_status = I2C_STATUS_REPEAT_START_OK;
;;;304                    i2c_trans_data.wait_cnt = 0;
;;;305                    I2C_Trigger(I2C0, 1, 0, 1, 0);
;;;306                }
;;;307                else
;;;308                {
;;;309                    /* stop */
;;;310                    Hal_I2c0_Stop();
;;;311                }
;;;312                break;
;;;313    
;;;314            case I2C_STATUS_REPEAT_START_OK:
;;;315                if(i2c_trans_data.rx_buff_len)
;;;316                {
;;;317                    i2c_trans_data.next_status = I2C_STATUS_REC_ADDR_ACK;
;;;318                    i2c_trans_data.wait_cnt = 0;
;;;319                    I2C_SetData(I2C0, i2c_trans_data.slave_addr | I2C_DIR_READ);
;;;320                    I2C_Trigger(I2C0, 0, 0, 1, 0);
;;;321                }
;;;322                else
;;;323                {
;;;324                    Hal_I2c0_Stop();
;;;325                }
;;;326                break;
;;;327    
;;;328            case I2C_STATUS_REC_ADDR_ACK:
;;;329                if(i2c_trans_data.rx_buff_len)
;;;330                {
;;;331                    i2c_trans_data.next_status = I2C_STATUS_REC_DATA_ACK;
00004e  2150              MOVS     r1,#0x50
000050  2500              MOVS     r5,#0
000052  0003              MOVS     r3,r0                 ;247
000054  f7fffffe          BL       __ARM_common_switch8
000058  0c0b144a          DCB      0x0c,0x0b,0x14,0x4a
00005c  190b2f0b          DCB      0x19,0x0b,0x2f,0x0b
000060  2e560b60          DCB      0x2e,0x56,0x0b,0x60
000064  822e              DCB      0x82,0x2e
                  |L6.102|
000066  4630              MOV      r0,r6                 ;228
000068  f7fffffe          BL       I2C_ClearTimeoutFlag
00006c  e076              B        |L6.348|
00006e  4841              LDR      r0,|L6.372|
000070  7801              LDRB     r1,[r0,#0]            ;253  ; sys_err
000072  0789              LSLS     r1,r1,#30             ;253
000074  d472              BMI      |L6.348|
000076  7802              LDRB     r2,[r0,#0]            ;255  ; sys_err
000078  2102              MOVS     r1,#2                 ;255
00007a  430a              ORRS     r2,r2,r1              ;255
00007c  7002              STRB     r2,[r0,#0]            ;255
00007e  e06d              B        |L6.348|
000080  2018              MOVS     r0,#0x18              ;264
000082  74e0              STRB     r0,[r4,#0x13]         ;264
000084  8225              STRH     r5,[r4,#0x10]         ;265
000086  7ca1              LDRB     r1,[r4,#0x12]         ;266  ; i2c_trans_data
000088  e038              B        |L6.252|
00008a  2110              MOVS     r1,#0x10              ;272
00008c  483a              LDR      r0,|L6.376|
00008e  f7fffffe          BL       TIMER_Delay
000092  8920              LDRH     r0,[r4,#8]            ;273  ; i2c_trans_data
000094  2800              CMP      r0,#0                 ;273
000096  d061              BEQ      |L6.348|
000098  2028              MOVS     r0,#0x28              ;275
00009a  74e0              STRB     r0,[r4,#0x13]         ;275
00009c  8225              STRH     r5,[r4,#0x10]         ;276
00009e  6820              LDR      r0,[r4,#0]            ;277  ; i2c_trans_data
0000a0  7801              LDRB     r1,[r0,#0]            ;277
0000a2  4630              MOV      r0,r6                 ;277
0000a4  f7fffffe          BL       I2C_SetData
0000a8  81a7              STRH     r7,[r4,#0xc]          ;278
                  |L6.170|
0000aa  9500              STR      r5,[sp,#0]            ;267
0000ac  e052              B        |L6.340|
                  |L6.174|
0000ae  4630              MOV      r0,r6                 ;267
0000b0  f7fffffe          BL       I2C_Trigger
                  |L6.180|
;;;332                    i2c_trans_data.wait_cnt = 0;
;;;333                    /* this is the ack for the 1st rx byte */
;;;334                    if(i2c_trans_data.rx_buff_len == 1)
;;;335                    {
;;;336                        I2C_Trigger(I2C0, 0, 0, 1, 0);
;;;337                    }
;;;338                    else
;;;339                    {
;;;340                        I2C_Trigger(I2C0, 0, 0, 1, 1);
;;;341                    }
;;;342                }
;;;343                else
;;;344                {
;;;345                    Hal_I2c0_Stop();
;;;346                }
;;;347                break;
;;;348    
;;;349            case I2C_STATUS_REC_DATA_ACK:
;;;350                tmp = i2c_trans_data.curr_rx_pos;
;;;351                tp  = i2c_trans_data.p_rx_buff;
;;;352    
;;;353                if(tmp < i2c_trans_data.rx_buff_len)
;;;354                {
;;;355                    if(i2c_trans_data.rx_buff_len - tmp == 2)
;;;356                    {
;;;357                        /* should send nak for the last byte */
;;;358                        i2c_trans_data.next_status = I2C_STATUS_REC_DATA_NAK;
;;;359                    }
;;;360                    else
;;;361                    {
;;;362                        i2c_trans_data.next_status = I2C_STATUS_REC_DATA_ACK;
;;;363                    }
;;;364    
;;;365                    i2c_trans_data.wait_cnt = 0;
;;;366                    tp[tmp] = (uint8_t)(I2C_GetData(I2C0) & 0xFF);
;;;367                    i2c_trans_data.curr_rx_pos++;
;;;368    
;;;369                    if(i2c_trans_data.rx_buff_len - tmp == 2)
;;;370                    {
;;;371                        I2C_Trigger(I2C0, 0, 0, 1, 0);
;;;372                    }
;;;373                    else
;;;374                    {
;;;375                        I2C_Trigger(I2C0, 0, 0, 1, 1);
;;;376                    }
;;;377                }
;;;378                else
;;;379                {
;;;380                    Hal_I2c0_Stop();
;;;381                }
;;;382                break;
;;;383    
;;;384            case I2C_STATUS_REC_DATA_NAK:
;;;385                /* stop */
;;;386                Hal_I2c0_Stop();
;;;387                break;
;;;388    
;;;389            default:
;;;390                break;
;;;391        }
;;;392    }
0000b4  bdf8              POP      {r3-r7,pc}
0000b6  89a0              LDRH     r0,[r4,#0xc]          ;290  ; i2c_trans_data
0000b8  8921              LDRH     r1,[r4,#8]            ;292  ; i2c_trans_data
0000ba  4281              CMP      r1,r0                 ;292
0000bc  d90b              BLS      |L6.214|
0000be  2128              MOVS     r1,#0x28              ;294
0000c0  74e1              STRB     r1,[r4,#0x13]         ;294
0000c2  8225              STRH     r5,[r4,#0x10]         ;295
0000c4  6821              LDR      r1,[r4,#0]            ;296  ; i2c_trans_data
0000c6  5c09              LDRB     r1,[r1,r0]            ;296
0000c8  4630              MOV      r0,r6                 ;296
0000ca  f7fffffe          BL       I2C_SetData
0000ce  89a1              LDRH     r1,[r4,#0xc]          ;297  ; i2c_trans_data
0000d0  1c49              ADDS     r1,r1,#1              ;297
0000d2  81a1              STRH     r1,[r4,#0xc]          ;297
0000d4  e7e9              B        |L6.170|
                  |L6.214|
0000d6  8960              LDRH     r0,[r4,#0xa]          ;300  ; i2c_trans_data
0000d8  2800              CMP      r0,#0                 ;300
0000da  d03f              BEQ      |L6.348|
0000dc  2010              MOVS     r0,#0x10              ;303
0000de  74e0              STRB     r0,[r4,#0x13]         ;303
0000e0  8225              STRH     r5,[r4,#0x10]         ;304
0000e2  2301              MOVS     r3,#1                 ;305
0000e4  2200              MOVS     r2,#0                 ;305
0000e6  4619              MOV      r1,r3                 ;305
0000e8  9500              STR      r5,[sp,#0]            ;305
0000ea  e7e0              B        |L6.174|
0000ec  8960              LDRH     r0,[r4,#0xa]          ;315  ; i2c_trans_data
0000ee  2800              CMP      r0,#0                 ;315
0000f0  d034              BEQ      |L6.348|
0000f2  2040              MOVS     r0,#0x40              ;317
0000f4  74e0              STRB     r0,[r4,#0x13]         ;317
0000f6  8225              STRH     r5,[r4,#0x10]         ;318
0000f8  7ca1              LDRB     r1,[r4,#0x12]         ;319  ; i2c_trans_data
0000fa  4339              ORRS     r1,r1,r7              ;319
                  |L6.252|
0000fc  4630              MOV      r0,r6                 ;319
0000fe  f7fffffe          BL       I2C_SetData
000102  e7d2              B        |L6.170|
000104  8960              LDRH     r0,[r4,#0xa]          ;329  ; i2c_trans_data
000106  2800              CMP      r0,#0                 ;329
000108  d028              BEQ      |L6.348|
00010a  74e1              STRB     r1,[r4,#0x13]         ;331
00010c  8225              STRH     r5,[r4,#0x10]         ;332
00010e  8960              LDRH     r0,[r4,#0xa]          ;334  ; i2c_trans_data
000110  2801              CMP      r0,#1                 ;334
000112  d0ca              BEQ      |L6.170|
                  |L6.276|
000114  9700              STR      r7,[sp,#0]            ;340
000116  e01d              B        |L6.340|
000118  4620              MOV      r0,r4                 ;350
00011a  89e4              LDRH     r4,[r4,#0xe]          ;350  ; i2c_trans_data
00011c  6842              LDR      r2,[r0,#4]            ;351  ; i2c_trans_data
00011e  9200              STR      r2,[sp,#0]            ;353
000120  8943              LDRH     r3,[r0,#0xa]          ;353  ; i2c_trans_data
000122  42a3              CMP      r3,r4                 ;353
000124  d91a              BLS      |L6.348|
000126  8942              LDRH     r2,[r0,#0xa]          ;355  ; i2c_trans_data
000128  1b12              SUBS     r2,r2,r4              ;355
00012a  2a02              CMP      r2,#2                 ;355
00012c  d100              BNE      |L6.304|
00012e  2158              MOVS     r1,#0x58              ;358
                  |L6.304|
000130  74c1              STRB     r1,[r0,#0x13]         ;362
000132  2100              MOVS     r1,#0                 ;365
000134  4605              MOV      r5,r0                 ;365
000136  8201              STRH     r1,[r0,#0x10]         ;365
000138  4630              MOV      r0,r6                 ;366
00013a  f7fffffe          BL       I2C_GetData
00013e  9900              LDR      r1,[sp,#0]            ;366
000140  5508              STRB     r0,[r1,r4]            ;366
000142  89e8              LDRH     r0,[r5,#0xe]          ;367  ; i2c_trans_data
000144  1c40              ADDS     r0,r0,#1              ;367
000146  81e8              STRH     r0,[r5,#0xe]          ;367
000148  8968              LDRH     r0,[r5,#0xa]          ;369  ; i2c_trans_data
00014a  1b00              SUBS     r0,r0,r4              ;369
00014c  2802              CMP      r0,#2                 ;369
00014e  d1e1              BNE      |L6.276|
000150  2000              MOVS     r0,#0                 ;371
000152  9000              STR      r0,[sp,#0]            ;371
                  |L6.340|
000154  2301              MOVS     r3,#1                 ;375
000156  2200              MOVS     r2,#0                 ;375
000158  4611              MOV      r1,r2                 ;375
00015a  e7a8              B        |L6.174|
                  |L6.348|
00015c  f7fffffe          BL       Hal_I2c0_Stop
000160  bdf8              POP      {r3-r7,pc}
;;;393    
                          ENDP

000162  0000              DCW      0x0000
                  |L6.356|
                          DCD      0x40020000
                  |L6.360|
                          DCD      0xe000e280
                  |L6.364|
                          DCD      ||.bss||
                  |L6.368|
                          DCD      0x00001388
                  |L6.372|
                          DCD      sys_err
                  |L6.376|
                          DCD      0x40010000

                          AREA ||i.I2C1_IRQHandler||, CODE, READONLY, ALIGN=2

                  I2C1_IRQHandler PROC
;;;400     */
;;;401    void I2C1_IRQHandler(void)
000000  b5f8              PUSH     {r3-r7,lr}
;;;402    {
;;;403        uint16_t tmp;
;;;404        uint8_t*  tp;
;;;405        volatile uint32_t status;
;;;406    
;;;407        status = I2C_GET_STATUS(I2C1);
000002  4d59              LDR      r5,|L7.360|
000004  68e8              LDR      r0,[r5,#0xc]
000006  2601              MOVS     r6,#1
000008  9000              STR      r0,[sp,#0]
00000a  4958              LDR      r1,|L7.364|
00000c  04f0              LSLS     r0,r6,#19
00000e  6008              STR      r0,[r1,#0]
;;;408    
;;;409        NVIC_ClearPendingIRQ(I2C1_IRQn);
;;;410    
;;;411        if(I2C_GET_TIMEOUT_FLAG(I2C1))
000010  6968              LDR      r0,[r5,#0x14]
000012  43c0              MVNS     r0,r0
000014  07c0              LSLS     r0,r0,#31
000016  d026              BEQ      |L7.102|
;;;412        {
;;;413            I2C_ClearTimeoutFlag(I2C1);
;;;414            Hal_I2c1_Stop();
;;;415            return;
;;;416        }
;;;417    
;;;418        if(i2c_trans_data.next_status != status)
000018  4c55              LDR      r4,|L7.368|
00001a  7ce1              LDRB     r1,[r4,#0x13]  ; i2c_trans_data
00001c  9800              LDR      r0,[sp,#0]
;;;419        {
;;;420            i2c_trans_data.wait_cnt++;
;;;421    
;;;422            if(i2c_trans_data.wait_cnt > I2C_WAIT_CYCLE)
;;;423            {
;;;424                if((sys_err & SYS_ERR_I2C1) == 0)
00001e  4f55              LDR      r7,|L7.372|
000020  4281              CMP      r1,r0                 ;418
000022  d00f              BEQ      |L7.68|
000024  8a20              LDRH     r0,[r4,#0x10]         ;420  ; i2c_trans_data
000026  1c40              ADDS     r0,r0,#1              ;420
000028  8220              STRH     r0,[r4,#0x10]         ;420
00002a  8a20              LDRH     r0,[r4,#0x10]         ;422  ; i2c_trans_data
00002c  4952              LDR      r1,|L7.376|
00002e  4288              CMP      r0,r1                 ;422
000030  d908              BLS      |L7.68|
000032  7838              LDRB     r0,[r7,#0]  ; sys_err
000034  0740              LSLS     r0,r0,#29
000036  d403              BMI      |L7.64|
;;;425                {
;;;426                    sys_err |= SYS_ERR_I2C1;
000038  7838              LDRB     r0,[r7,#0]  ; sys_err
00003a  2104              MOVS     r1,#4
00003c  4308              ORRS     r0,r0,r1
00003e  7038              STRB     r0,[r7,#0]
                  |L7.64|
;;;427                }
;;;428    
;;;429                Hal_I2c1_Stop();
000040  f7fffffe          BL       Hal_I2c1_Stop
                  |L7.68|
;;;430            }
;;;431        }
;;;432    	//printf("i2c1*****status= 0x%x\n",status);
;;;433    
;;;434        switch (status)
000044  9800              LDR      r0,[sp,#0]
000046  0741              LSLS     r1,r0,#29
000048  0f49              LSRS     r1,r1,#29
00004a  d131              BNE      |L7.176|
00004c  10c2              ASRS     r2,r0,#3
;;;435        {
;;;436            case I2C_STATUS_ERROR:
;;;437            case I2C_STATUS_TRANS_ADDR_NAK:
;;;438            case I2C_STATUS_TRANS_DATA_NAK:
;;;439            case I2C_STATUS_REC_ADDR_NAK:
;;;440                if((sys_err & SYS_ERR_I2C1) == 0)
;;;441                {
;;;442                    sys_err |= SYS_ERR_I2C1;
;;;443                }
;;;444    
;;;445                Hal_I2c1_Stop();
;;;446    
;;;447                break;
;;;448    
;;;449            /* 1st start */
;;;450            case I2C_STATUS_START_OK:
;;;451                i2c_trans_data.next_status = I2C_STATUS_TRANS_ADDR_ACK;
;;;452                i2c_trans_data.wait_cnt = 0;
;;;453                I2C_SetData(I2C1, i2c_trans_data.slave_addr | I2C_DIR_WRITE);
;;;454                I2C_Trigger(I2C1, 0, 0, 1, 0);
;;;455                break;
;;;456    
;;;457            /* tx transfer */
;;;458            case I2C_STATUS_TRANS_ADDR_ACK:
;;;459                if(i2c_trans_data.tx_buff_len)
;;;460                {
;;;461                    i2c_trans_data.next_status = I2C_STATUS_TRANS_DATA_ACK;
00004e  2128              MOVS     r1,#0x28
000050  2000              MOVS     r0,#0
000052  0013              MOVS     r3,r2                 ;434
000054  f7fffffe          BL       __ARM_common_switch8
000058  0c0b1349          DCB      0x0c,0x0b,0x13,0x49
00005c  1c0b2d0b          DCB      0x1c,0x0b,0x2d,0x0b
000060  2c570b65          DCB      0x2c,0x57,0x0b,0x65
000064  842c              DCB      0x84,0x2c
                  |L7.102|
000066  4628              MOV      r0,r5                 ;413
000068  f7fffffe          BL       I2C_ClearTimeoutFlag
00006c  e078              B        |L7.352|
00006e  7838              LDRB     r0,[r7,#0]            ;440  ; sys_err
000070  0740              LSLS     r0,r0,#29             ;440
000072  d475              BMI      |L7.352|
000074  7838              LDRB     r0,[r7,#0]            ;442  ; sys_err
000076  2104              MOVS     r1,#4                 ;442
000078  4308              ORRS     r0,r0,r1              ;442
00007a  7038              STRB     r0,[r7,#0]            ;442
00007c  e070              B        |L7.352|
00007e  2118              MOVS     r1,#0x18              ;451
000080  74e1              STRB     r1,[r4,#0x13]         ;451
000082  4606              MOV      r6,r0                 ;452
000084  8220              STRH     r0,[r4,#0x10]         ;452
000086  7ca1              LDRB     r1,[r4,#0x12]         ;453  ; i2c_trans_data
000088  4628              MOV      r0,r5                 ;453
00008a  f7fffffe          BL       I2C_SetData
00008e  e01f              B        |L7.208|
000090  8922              LDRH     r2,[r4,#8]            ;459  ; i2c_trans_data
000092  2a00              CMP      r2,#0                 ;459
000094  d064              BEQ      |L7.352|
000096  74e1              STRB     r1,[r4,#0x13]
;;;462                    i2c_trans_data.wait_cnt = 0;
000098  4607              MOV      r7,r0
00009a  8220              STRH     r0,[r4,#0x10]
;;;463                    I2C_SetData(I2C1, i2c_trans_data.p_tx_buff[0]);
00009c  6820              LDR      r0,[r4,#0]  ; i2c_trans_data
00009e  7801              LDRB     r1,[r0,#0]
0000a0  4628              MOV      r0,r5
0000a2  f7fffffe          BL       I2C_SetData
;;;464                    i2c_trans_data.curr_tx_pos = 1;
0000a6  81a6              STRH     r6,[r4,#0xc]
;;;465                    I2C_Trigger(I2C1, 0, 0, 1, 0);
0000a8  e02b              B        |L7.258|
                  |L7.170|
0000aa  4628              MOV      r0,r5                 ;454
0000ac  f7fffffe          BL       I2C_Trigger
                  |L7.176|
;;;466                }
;;;467                else
;;;468                {
;;;469                    Hal_I2c1_Stop();
;;;470                }
;;;471                break;
;;;472    
;;;473            /* tx transfer */
;;;474            case I2C_STATUS_TRANS_DATA_ACK:
;;;475                tmp = i2c_trans_data.curr_tx_pos;
;;;476    
;;;477                if(tmp < i2c_trans_data.tx_buff_len)
;;;478                {
;;;479                    i2c_trans_data.next_status = I2C_STATUS_TRANS_DATA_ACK;
;;;480                    i2c_trans_data.wait_cnt = 0;
;;;481                    I2C_SetData(I2C1, i2c_trans_data.p_tx_buff[tmp]);
;;;482                    i2c_trans_data.curr_tx_pos++;
;;;483                    I2C_Trigger(I2C1, 0, 0, 1, 0);
;;;484                }
;;;485                else if(i2c_trans_data.rx_buff_len)
;;;486                {
;;;487                    /* repeat start */
;;;488                    i2c_trans_data.next_status = I2C_STATUS_REPEAT_START_OK;
;;;489                    i2c_trans_data.wait_cnt = 0;
;;;490                    I2C_Trigger(I2C1, 1, 0, 1, 0);
;;;491                }
;;;492                else
;;;493                {
;;;494                    /* stop */
;;;495                    Hal_I2c1_Stop();
;;;496                }
;;;497                break;
;;;498    
;;;499            case I2C_STATUS_REPEAT_START_OK:
;;;500                if(i2c_trans_data.rx_buff_len)
;;;501                {
;;;502                    i2c_trans_data.next_status = I2C_STATUS_REC_ADDR_ACK;
;;;503                    i2c_trans_data.wait_cnt = 0;
;;;504                    I2C_SetData(I2C1, i2c_trans_data.slave_addr | I2C_DIR_READ);
;;;505                    I2C_Trigger(I2C1, 0, 0, 1, 0);
;;;506                }
;;;507                else
;;;508                {
;;;509                    Hal_I2c1_Stop();
;;;510                }
;;;511                break;
;;;512    
;;;513            case I2C_STATUS_REC_ADDR_ACK:
;;;514                if(i2c_trans_data.rx_buff_len)
;;;515                {
;;;516                    i2c_trans_data.next_status = I2C_STATUS_REC_DATA_ACK;
;;;517                    i2c_trans_data.wait_cnt = 0;
;;;518                    /* this is the ack for the 1st rx byte */
;;;519                    if(i2c_trans_data.rx_buff_len == 1)
;;;520                    {
;;;521                        I2C_Trigger(I2C1, 0, 0, 1, 0);
;;;522                    }
;;;523                    else
;;;524                    {
;;;525                        I2C_Trigger(I2C1, 0, 0, 1, 1);
;;;526                    }
;;;527                }
;;;528                else
;;;529                {
;;;530                    Hal_I2c1_Stop();
;;;531                }
;;;532                break;
;;;533    
;;;534            case I2C_STATUS_REC_DATA_ACK:
;;;535                tmp = i2c_trans_data.curr_rx_pos;
;;;536                tp  = i2c_trans_data.p_rx_buff;
;;;537    
;;;538                if(tmp < i2c_trans_data.rx_buff_len)
;;;539                {
;;;540                    if(i2c_trans_data.rx_buff_len - tmp == 2)
;;;541                    {
;;;542                        /* should send nak for the last byte */
;;;543                        i2c_trans_data.next_status = I2C_STATUS_REC_DATA_NAK;
;;;544                    }
;;;545                    else
;;;546                    {
;;;547                        i2c_trans_data.next_status = I2C_STATUS_REC_DATA_ACK;
;;;548                    }
;;;549    
;;;550                    i2c_trans_data.wait_cnt = 0;
;;;551                    tp[tmp] = (uint8_t)(I2C_GetData(I2C1) & 0xFF);
;;;552                    i2c_trans_data.curr_rx_pos++;
;;;553    
;;;554                    if(i2c_trans_data.rx_buff_len - tmp == 2)
;;;555                    {
;;;556                        I2C_Trigger(I2C1, 0, 0, 1, 0);
;;;557                    }
;;;558                    else
;;;559                    {
;;;560                        I2C_Trigger(I2C1, 0, 0, 1, 1);
;;;561                    }
;;;562                }
;;;563                else
;;;564                {
;;;565                    Hal_I2c1_Stop();
;;;566                }
;;;567                break;
;;;568    
;;;569            case I2C_STATUS_REC_DATA_NAK:
;;;570                /* stop */
;;;571    		//I2C_GET_DATA
;;;572    
;;;573    	//	printf("(I2C_GetData(I2C1) & 0xFF) %x",I2C_GetData(I2C1));
;;;574                Hal_I2c1_Stop();
;;;575                break;
;;;576    
;;;577            default:
;;;578                break;
;;;579        }
;;;580    }
0000b0  bdf8              POP      {r3-r7,pc}
0000b2  89a2              LDRH     r2,[r4,#0xc]          ;475  ; i2c_trans_data
0000b4  8923              LDRH     r3,[r4,#8]            ;477  ; i2c_trans_data
0000b6  4293              CMP      r3,r2                 ;477
0000b8  d90c              BLS      |L7.212|
0000ba  74e1              STRB     r1,[r4,#0x13]         ;479
0000bc  4606              MOV      r6,r0                 ;480
0000be  8220              STRH     r0,[r4,#0x10]         ;480
0000c0  6820              LDR      r0,[r4,#0]            ;481  ; i2c_trans_data
0000c2  5c81              LDRB     r1,[r0,r2]            ;481
0000c4  4628              MOV      r0,r5                 ;481
0000c6  f7fffffe          BL       I2C_SetData
0000ca  89a1              LDRH     r1,[r4,#0xc]          ;482  ; i2c_trans_data
0000cc  1c49              ADDS     r1,r1,#1              ;482
0000ce  81a1              STRH     r1,[r4,#0xc]          ;482
                  |L7.208|
0000d0  9600              STR      r6,[sp,#0]            ;483
0000d2  e022              B        |L7.282|
                  |L7.212|
0000d4  8961              LDRH     r1,[r4,#0xa]          ;485  ; i2c_trans_data
0000d6  2900              CMP      r1,#0                 ;485
0000d8  d042              BEQ      |L7.352|
0000da  2110              MOVS     r1,#0x10              ;488
0000dc  74e1              STRB     r1,[r4,#0x13]         ;488
0000de  8220              STRH     r0,[r4,#0x10]         ;489
0000e0  2301              MOVS     r3,#1                 ;490
0000e2  2200              MOVS     r2,#0                 ;490
0000e4  4619              MOV      r1,r3                 ;490
0000e6  9000              STR      r0,[sp,#0]            ;490
0000e8  e7df              B        |L7.170|
0000ea  8961              LDRH     r1,[r4,#0xa]          ;500  ; i2c_trans_data
0000ec  2900              CMP      r1,#0                 ;500
0000ee  d037              BEQ      |L7.352|
0000f0  2140              MOVS     r1,#0x40              ;502
0000f2  74e1              STRB     r1,[r4,#0x13]         ;502
0000f4  4607              MOV      r7,r0                 ;503
0000f6  8220              STRH     r0,[r4,#0x10]         ;503
0000f8  7ca1              LDRB     r1,[r4,#0x12]         ;504  ; i2c_trans_data
0000fa  4628              MOV      r0,r5                 ;504
0000fc  4331              ORRS     r1,r1,r6              ;504
0000fe  f7fffffe          BL       I2C_SetData
                  |L7.258|
000102  9700              STR      r7,[sp,#0]            ;465
000104  e009              B        |L7.282|
000106  8961              LDRH     r1,[r4,#0xa]          ;514  ; i2c_trans_data
000108  2900              CMP      r1,#0                 ;514
00010a  d029              BEQ      |L7.352|
00010c  2150              MOVS     r1,#0x50              ;516
00010e  74e1              STRB     r1,[r4,#0x13]         ;516
000110  8220              STRH     r0,[r4,#0x10]         ;517
000112  8961              LDRH     r1,[r4,#0xa]          ;519  ; i2c_trans_data
000114  2901              CMP      r1,#1                 ;519
000116  d1db              BNE      |L7.208|
                  |L7.280|
000118  9000              STR      r0,[sp,#0]            ;521
                  |L7.282|
00011a  2301              MOVS     r3,#1                 ;560
00011c  2200              MOVS     r2,#0                 ;560
00011e  4611              MOV      r1,r2                 ;560
000120  e7c3              B        |L7.170|
000122  89e7              LDRH     r7,[r4,#0xe]          ;535  ; i2c_trans_data
000124  6861              LDR      r1,[r4,#4]            ;536  ; i2c_trans_data
000126  9100              STR      r1,[sp,#0]            ;538
000128  8961              LDRH     r1,[r4,#0xa]          ;538  ; i2c_trans_data
00012a  42b9              CMP      r1,r7                 ;538
00012c  d918              BLS      |L7.352|
00012e  8961              LDRH     r1,[r4,#0xa]          ;540  ; i2c_trans_data
000130  1bc9              SUBS     r1,r1,r7              ;540
000132  2902              CMP      r1,#2                 ;540
000134  d012              BEQ      |L7.348|
000136  2150              MOVS     r1,#0x50              ;547
                  |L7.312|
000138  74e1              STRB     r1,[r4,#0x13]         ;547
00013a  2000              MOVS     r0,#0                 ;550
00013c  8220              STRH     r0,[r4,#0x10]         ;550
00013e  4628              MOV      r0,r5                 ;551
000140  f7fffffe          BL       I2C_GetData
000144  4601              MOV      r1,r0                 ;551
000146  9800              LDR      r0,[sp,#0]            ;551
000148  55c1              STRB     r1,[r0,r7]            ;551
00014a  89e0              LDRH     r0,[r4,#0xe]          ;552  ; i2c_trans_data
00014c  1c40              ADDS     r0,r0,#1              ;552
00014e  81e0              STRH     r0,[r4,#0xe]          ;552
000150  8960              LDRH     r0,[r4,#0xa]          ;554  ; i2c_trans_data
000152  1bc0              SUBS     r0,r0,r7              ;554
000154  2802              CMP      r0,#2                 ;554
000156  d1bb              BNE      |L7.208|
000158  2000              MOVS     r0,#0                 ;556
00015a  e7dd              B        |L7.280|
                  |L7.348|
00015c  2158              MOVS     r1,#0x58              ;543
00015e  e7eb              B        |L7.312|
                  |L7.352|
000160  f7fffffe          BL       Hal_I2c1_Stop
000164  bdf8              POP      {r3-r7,pc}
;;;581    
                          ENDP

000166  0000              DCW      0x0000
                  |L7.360|
                          DCD      0x40120000
                  |L7.364|
                          DCD      0xe000e280
                  |L7.368|
                          DCD      ||.bss||
                  |L7.372|
                          DCD      sys_err
                  |L7.376|
                          DCD      0x00001388

                          AREA ||i.NVIC_SetPriority||, CODE, READONLY, ALIGN=2

                  NVIC_SetPriority PROC
;;;687     */
;;;688    __STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
000000  0783              LSLS     r3,r0,#30
;;;689    {
;;;690        if((int32_t)(IRQn) < 0)
;;;691        {
;;;692            SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
000002  22ff              MOVS     r2,#0xff
000004  0edb              LSRS     r3,r3,#27
000006  409a              LSLS     r2,r2,r3
000008  0789              LSLS     r1,r1,#30
00000a  0e09              LSRS     r1,r1,#24
00000c  4099              LSLS     r1,r1,r3
00000e  2800              CMP      r0,#0                 ;690
000010  da0b              BGE      |L8.42|
000012  0700              LSLS     r0,r0,#28
000014  0f00              LSRS     r0,r0,#28
000016  3808              SUBS     r0,r0,#8
000018  0883              LSRS     r3,r0,#2
00001a  4808              LDR      r0,|L8.60|
00001c  009b              LSLS     r3,r3,#2
00001e  1818              ADDS     r0,r3,r0
000020  69c3              LDR      r3,[r0,#0x1c]
000022  4393              BICS     r3,r3,r2
000024  430b              ORRS     r3,r3,r1
000026  61c3              STR      r3,[r0,#0x1c]
;;;693                                        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
;;;694        }
;;;695        else
;;;696        {
;;;697            NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
;;;698                                        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
;;;699        }
;;;700    }
000028  4770              BX       lr
                  |L8.42|
00002a  0883              LSRS     r3,r0,#2              ;697
00002c  4804              LDR      r0,|L8.64|
00002e  009b              LSLS     r3,r3,#2              ;697
000030  1818              ADDS     r0,r3,r0              ;697
000032  6803              LDR      r3,[r0,#0]            ;697
000034  4393              BICS     r3,r3,r2              ;697
000036  430b              ORRS     r3,r3,r1              ;697
000038  6003              STR      r3,[r0,#0]            ;697
00003a  4770              BX       lr
;;;701    
                          ENDP

                  |L8.60|
                          DCD      0xe000ed00
                  |L8.64|
                          DCD      0xe000e400

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  i2c_trans_data
                          %        24

                          AREA ||i.__ARM_common_switch8||, COMGROUP=__ARM_common_switch8, CODE, READONLY, ALIGN=1

                  __ARM_common_switch8 PROC
000000  b430              PUSH     {r4,r5}
000002  4674              MOV      r4,lr
000004  1e64              SUBS     r4,r4,#1
000006  7825              LDRB     r5,[r4,#0]
000008  1c64              ADDS     r4,r4,#1
00000a  42ab              CMP      r3,r5
00000c  d200              BCS      |L54.16|
00000e  461d              MOV      r5,r3
                  |L54.16|
000010  5d63              LDRB     r3,[r4,r5]
000012  005b              LSLS     r3,r3,#1
000014  18e3              ADDS     r3,r4,r3
000016  bc30              POP      {r4,r5}
000018  4718              BX       r3
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\src\\io\\io_i2c.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___8_io_i2c_c_c0dff8c5____REV16|
#line 388 "..\\lib\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___8_io_i2c_c_c0dff8c5____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___8_io_i2c_c_c0dff8c5____REVSH|
#line 402
|__asm___8_io_i2c_c_c0dff8c5____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
