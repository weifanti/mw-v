; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\io_i2c.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\io_i2c.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\lib\CMSIS\Include -I..\lib\Device\Nuvoton\NUC029xGE\Include -I..\lib\StdDriver\inc -I..\src\core\include -I..\src\driver\include -I..\src\io\include -I..\src\global -I..\src\server\include -I..\src\driver\audio -D__UVISION_VERSION=522 --omf_browse=.\obj\io_i2c.crf ..\src\io\io_i2c.c]
                          THUMB

                          AREA ||i.Hal_I2c0_Stop||, CODE, READONLY, ALIGN=2

                  Hal_I2c0_Stop PROC
;;;67      */
;;;68     static void Hal_I2c0_Stop(void)
000000  b538              PUSH     {r3-r5,lr}
;;;69     {
;;;70     	/*--I2C0--*/
;;;71         I2C_ClearTimeoutFlag(I2C0);
000002  4d09              LDR      r5,|L1.40|
000004  4628              MOV      r0,r5
000006  f7fffffe          BL       I2C_ClearTimeoutFlag
;;;72         I2C_DisableInt(I2C0);
00000a  4628              MOV      r0,r5
00000c  f7fffffe          BL       I2C_DisableInt
;;;73         I2C_Trigger(I2C0, 0, 1, 1, 0);
000010  2400              MOVS     r4,#0
000012  2301              MOVS     r3,#1
000014  461a              MOV      r2,r3
000016  4621              MOV      r1,r4
000018  4628              MOV      r0,r5
00001a  9400              STR      r4,[sp,#0]
00001c  f7fffffe          BL       I2C_Trigger
;;;74         i2c_trans_data.wait_cnt    = 0;
000020  4802              LDR      r0,|L1.44|
000022  8204              STRH     r4,[r0,#0x10]
;;;75         i2c_trans_data.is_in_trans = FALSE;
000024  7504              STRB     r4,[r0,#0x14]
;;;76     }
000026  bd38              POP      {r3-r5,pc}
;;;77     
                          ENDP

                  |L1.40|
                          DCD      0x40020000
                  |L1.44|
                          DCD      ||.bss||

                          AREA ||i.Hal_I2c1_Stop||, CODE, READONLY, ALIGN=2

                  Hal_I2c1_Stop PROC
;;;83      */
;;;84     static void Hal_I2c1_Stop(void)
000000  b538              PUSH     {r3-r5,lr}
;;;85     {
;;;86     	/*--I2C1--*/
;;;87     
;;;88     	I2C_ClearTimeoutFlag(I2C1);
000002  4d09              LDR      r5,|L2.40|
000004  4628              MOV      r0,r5
000006  f7fffffe          BL       I2C_ClearTimeoutFlag
;;;89         I2C_DisableInt(I2C1);
00000a  4628              MOV      r0,r5
00000c  f7fffffe          BL       I2C_DisableInt
;;;90         I2C_Trigger(I2C1, 0, 1, 1, 0);
000010  2400              MOVS     r4,#0
000012  2301              MOVS     r3,#1
000014  461a              MOV      r2,r3
000016  4621              MOV      r1,r4
000018  4628              MOV      r0,r5
00001a  9400              STR      r4,[sp,#0]
00001c  f7fffffe          BL       I2C_Trigger
;;;91         i2c_trans_data.wait_cnt    = 0;
000020  4802              LDR      r0,|L2.44|
000022  8204              STRH     r4,[r0,#0x10]
;;;92         i2c_trans_data.is_in_trans = FALSE;
000024  7504              STRB     r4,[r0,#0x14]
;;;93     }
000026  bd38              POP      {r3-r5,pc}
;;;94     
                          ENDP

                  |L2.40|
                          DCD      0x40120000
                  |L2.44|
                          DCD      ||.bss||

                          AREA ||i.Hal_I2c1_Transfer||, CODE, READONLY, ALIGN=2

                  Hal_I2c1_Transfer PROC
;;;149    
;;;150    void Hal_I2c1_Transfer(uint8_t addr, uint8_t* tx_arr, uint32_t tx_len, uint8_t* rx_arr, uint32_t rx_len)
000000  b5ff              PUSH     {r0-r7,lr}
;;;151    {
;;;152        /* first check bus and wait */
;;;153        while(i2c_trans_data.is_in_trans)
000002  4c1c              LDR      r4,|L3.116|
000004  b081              SUB      sp,sp,#4              ;151
000006  4616              MOV      r6,r2                 ;151
000008  4607              MOV      r7,r0                 ;151
                  |L3.10|
00000a  7d20              LDRB     r0,[r4,#0x14]  ; i2c_trans_data
00000c  2800              CMP      r0,#0
00000e  d1fc              BNE      |L3.10|
;;;154        {
;;;155            ; /* wait */
;;;156        }
;;;157    
;;;158        /* leave when error */
;;;159        if(I2C_GetStatus(I2C1) == I2C_STATUS_ERROR)
000010  4d19              LDR      r5,|L3.120|
000012  4628              MOV      r0,r5
000014  f7fffffe          BL       I2C_GetStatus
000018  2800              CMP      r0,#0
00001a  d109              BNE      |L3.48|
;;;160        {
;;;161     //   printf("I2C_STATUS_ERROR\n");
;;;162            if((sys_err & SYS_ERR_I2C1) == 0)
00001c  4817              LDR      r0,|L3.124|
00001e  7801              LDRB     r1,[r0,#0]  ; sys_err
000020  0749              LSLS     r1,r1,#29
000022  d405              BMI      |L3.48|
;;;163            {
;;;164                sys_err |= SYS_ERR_I2C1;
000024  7801              LDRB     r1,[r0,#0]  ; sys_err
000026  2204              MOVS     r2,#4
000028  4311              ORRS     r1,r1,r2
00002a  7001              STRB     r1,[r0,#0]
                  |L3.44|
;;;165                return;
;;;166            }
;;;167        }
;;;168    
;;;169        /* set data */
;;;170        i2c_trans_data.slave_addr  = addr;
;;;171        i2c_trans_data.p_tx_buff   = tx_arr;
;;;172        i2c_trans_data.p_rx_buff   = rx_arr;
;;;173        i2c_trans_data.tx_buff_len = tx_len;
;;;174        i2c_trans_data.rx_buff_len = rx_len;
;;;175        i2c_trans_data.curr_tx_pos = 0;
;;;176        i2c_trans_data.curr_rx_pos = 0;
;;;177        i2c_trans_data.next_status = I2C_STATUS_START_OK;
;;;178        i2c_trans_data.wait_cnt    = 0;
;;;179        i2c_trans_data.is_in_trans = TRUE;
;;;180    
;;;181        /* start */
;;;182        I2C_ClearTimeoutFlag(I2C1);
;;;183        I2C_Trigger(I2C1, 1, 0, 1, 0);
;;;184        I2C_EnableInt(I2C1);
;;;185    //	printf("last check bus and wait\n");
;;;186    
;;;187        /* last check bus and wait */
;;;188    #if 1
;;;189        while(i2c_trans_data.is_in_trans)
;;;190        {
;;;191            ; /* wait */
;;;192        }
;;;193    	
;;;194    #endif
;;;195    }
00002c  b005              ADD      sp,sp,#0x14
00002e  bdf0              POP      {r4-r7,pc}
                  |L3.48|
000030  74a7              STRB     r7,[r4,#0x12]         ;170
000032  9802              LDR      r0,[sp,#8]            ;171
000034  6020              STR      r0,[r4,#0]            ;171  ; i2c_trans_data
000036  9804              LDR      r0,[sp,#0x10]         ;172
000038  6060              STR      r0,[r4,#4]            ;172  ; i2c_trans_data
00003a  8126              STRH     r6,[r4,#8]            ;173
00003c  980a              LDR      r0,[sp,#0x28]         ;174
00003e  8160              STRH     r0,[r4,#0xa]          ;174
000040  2600              MOVS     r6,#0                 ;175
000042  81a6              STRH     r6,[r4,#0xc]          ;175
000044  81e6              STRH     r6,[r4,#0xe]          ;176
000046  2008              MOVS     r0,#8                 ;177
000048  74e0              STRB     r0,[r4,#0x13]         ;177
00004a  8226              STRH     r6,[r4,#0x10]         ;178
00004c  2001              MOVS     r0,#1                 ;179
00004e  7520              STRB     r0,[r4,#0x14]         ;179
000050  4628              MOV      r0,r5                 ;182
000052  f7fffffe          BL       I2C_ClearTimeoutFlag
000056  2301              MOVS     r3,#1                 ;183
000058  2200              MOVS     r2,#0                 ;183
00005a  4619              MOV      r1,r3                 ;183
00005c  4628              MOV      r0,r5                 ;183
00005e  9600              STR      r6,[sp,#0]            ;183
000060  f7fffffe          BL       I2C_Trigger
000064  4628              MOV      r0,r5                 ;184
000066  f7fffffe          BL       I2C_EnableInt
                  |L3.106|
00006a  7d20              LDRB     r0,[r4,#0x14]         ;189  ; i2c_trans_data
00006c  2800              CMP      r0,#0                 ;189
00006e  d1fc              BNE      |L3.106|
000070  e7dc              B        |L3.44|
;;;196    
                          ENDP

000072  0000              DCW      0x0000
                  |L3.116|
                          DCD      ||.bss||
                  |L3.120|
                          DCD      0x40120000
                  |L3.124|
                          DCD      sys_err

                          AREA ||i.Hal_I2c_Init||, CODE, READONLY, ALIGN=2

                  Hal_I2c_Init PROC
;;;42      */
;;;43     void Hal_I2c_Init(void)
000000  b570              PUSH     {r4-r6,lr}
;;;44     {
;;;45     	/*--I2C0--*/
;;;46         CLK_EnableModuleClock(I2C0_MODULE);
000002  4818              LDR      r0,|L4.100|
000004  f7fffffe          BL       CLK_EnableModuleClock
;;;47         SYS_ResetModule(I2C0_RST);
000008  4817              LDR      r0,|L4.104|
00000a  f7fffffe          BL       SYS_ResetModule
;;;48         I2C_EnableTimeout(I2C0, 1);
00000e  4c17              LDR      r4,|L4.108|
000010  2101              MOVS     r1,#1
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       I2C_EnableTimeout
;;;49         I2C_Open(I2C0, I2C_FAST_BAUDRATE);
000018  4915              LDR      r1,|L4.112|
00001a  4620              MOV      r0,r4
00001c  f7fffffe          BL       I2C_Open
000020  2001              MOVS     r0,#1
000022  4c14              LDR      r4,|L4.116|
000024  0480              LSLS     r0,r0,#18
000026  6020              STR      r0,[r4,#0]
;;;50         NVIC_EnableIRQ(I2C0_IRQn);
;;;51         NVIC_SetPriority(I2C0_IRQn, 2UL);
000028  2102              MOVS     r1,#2
00002a  2012              MOVS     r0,#0x12
00002c  f7fffffe          BL       NVIC_SetPriority
;;;52     	/*--I2C1--*/
;;;53     	CLK_EnableModuleClock(I2C1_MODULE);
000030  480c              LDR      r0,|L4.100|
000032  1c40              ADDS     r0,r0,#1
000034  f7fffffe          BL       CLK_EnableModuleClock
;;;54         SYS_ResetModule(I2C1_RST);
000038  480b              LDR      r0,|L4.104|
00003a  1c40              ADDS     r0,r0,#1
00003c  f7fffffe          BL       SYS_ResetModule
;;;55         I2C_EnableTimeout(I2C1, 1);
000040  4d0d              LDR      r5,|L4.120|
000042  2101              MOVS     r1,#1
000044  4628              MOV      r0,r5
000046  f7fffffe          BL       I2C_EnableTimeout
;;;56         I2C_Open(I2C1, I2C_BAUDRATE);
00004a  490c              LDR      r1,|L4.124|
00004c  4628              MOV      r0,r5
00004e  f7fffffe          BL       I2C_Open
000052  2001              MOVS     r0,#1
000054  04c0              LSLS     r0,r0,#19
000056  6020              STR      r0,[r4,#0]
;;;57         NVIC_EnableIRQ(I2C1_IRQn);
;;;58         NVIC_SetPriority(I2C1_IRQn, 2UL);
000058  2102              MOVS     r1,#2
00005a  2013              MOVS     r0,#0x13
00005c  f7fffffe          BL       NVIC_SetPriority
;;;59     
;;;60     }
000060  bd70              POP      {r4-r6,pc}
;;;61     
                          ENDP

000062  0000              DCW      0x0000
                  |L4.100|
                          DCD      0x40000008
                  |L4.104|
                          DCD      0x04000008
                  |L4.108|
                          DCD      0x40020000
                  |L4.112|
                          DCD      0x00030d40
                  |L4.116|
                          DCD      0xe000e100
                  |L4.120|
                          DCD      0x40120000
                  |L4.124|
                          DCD      0x000186a0

                          AREA ||i.Hal_I2c_Transfer||, CODE, READONLY, ALIGN=2

                  Hal_I2c_Transfer PROC
;;;104     */
;;;105    void Hal_I2c_Transfer(uint8_t addr, uint8_t* tx_arr, uint32_t tx_len, uint8_t* rx_arr, uint32_t rx_len)
000000  b5ff              PUSH     {r0-r7,lr}
;;;106    {
;;;107        /* first check bus and wait */
;;;108        while(i2c_trans_data.is_in_trans)
000002  4c1c              LDR      r4,|L5.116|
000004  b081              SUB      sp,sp,#4              ;106
000006  4616              MOV      r6,r2                 ;106
000008  4607              MOV      r7,r0                 ;106
                  |L5.10|
00000a  7d20              LDRB     r0,[r4,#0x14]  ; i2c_trans_data
00000c  2800              CMP      r0,#0
00000e  d1fc              BNE      |L5.10|
;;;109        {
;;;110            ; /* wait */
;;;111        }
;;;112    
;;;113        /* leave when error */
;;;114        if(I2C_GetStatus(I2C0) == I2C_STATUS_ERROR)
000010  4d19              LDR      r5,|L5.120|
000012  4628              MOV      r0,r5
000014  f7fffffe          BL       I2C_GetStatus
000018  2800              CMP      r0,#0
00001a  d109              BNE      |L5.48|
;;;115        {
;;;116       // 	printf("I2C_STATUS_ERROR\n");
;;;117            if((sys_err & SYS_ERR_I2C0) == 0)
00001c  4817              LDR      r0,|L5.124|
00001e  7801              LDRB     r1,[r0,#0]  ; sys_err
000020  0789              LSLS     r1,r1,#30
000022  d405              BMI      |L5.48|
;;;118            {
;;;119                sys_err |= SYS_ERR_I2C0;
000024  7801              LDRB     r1,[r0,#0]  ; sys_err
000026  2202              MOVS     r2,#2
000028  4311              ORRS     r1,r1,r2
00002a  7001              STRB     r1,[r0,#0]
                  |L5.44|
;;;120                return;
;;;121            }
;;;122        }
;;;123    
;;;124        /* set data */
;;;125        i2c_trans_data.slave_addr  = addr;
;;;126        i2c_trans_data.p_tx_buff   = tx_arr;
;;;127        i2c_trans_data.p_rx_buff   = rx_arr;
;;;128        i2c_trans_data.tx_buff_len = tx_len;
;;;129        i2c_trans_data.rx_buff_len = rx_len;
;;;130        i2c_trans_data.curr_tx_pos = 0;
;;;131        i2c_trans_data.curr_rx_pos = 0;
;;;132        i2c_trans_data.next_status = I2C_STATUS_START_OK;
;;;133        i2c_trans_data.wait_cnt    = 0;
;;;134        i2c_trans_data.is_in_trans = TRUE;
;;;135    
;;;136        /* start */
;;;137        I2C_ClearTimeoutFlag(I2C0);
;;;138        I2C_Trigger(I2C0, 1, 0, 1, 0);
;;;139        I2C_EnableInt(I2C0);
;;;140    //	printf("last check bus and wait\n");
;;;141        /* last check bus and wait */
;;;142    #if 1
;;;143        while(i2c_trans_data.is_in_trans)
;;;144        {
;;;145            ; /* wait */
;;;146        }
;;;147    #endif
;;;148    }
00002c  b005              ADD      sp,sp,#0x14
00002e  bdf0              POP      {r4-r7,pc}
                  |L5.48|
000030  74a7              STRB     r7,[r4,#0x12]         ;125
000032  9802              LDR      r0,[sp,#8]            ;126
000034  6020              STR      r0,[r4,#0]            ;126  ; i2c_trans_data
000036  9804              LDR      r0,[sp,#0x10]         ;127
000038  6060              STR      r0,[r4,#4]            ;127  ; i2c_trans_data
00003a  8126              STRH     r6,[r4,#8]            ;128
00003c  980a              LDR      r0,[sp,#0x28]         ;129
00003e  8160              STRH     r0,[r4,#0xa]          ;129
000040  2600              MOVS     r6,#0                 ;130
000042  81a6              STRH     r6,[r4,#0xc]          ;130
000044  81e6              STRH     r6,[r4,#0xe]          ;131
000046  2008              MOVS     r0,#8                 ;132
000048  74e0              STRB     r0,[r4,#0x13]         ;132
00004a  8226              STRH     r6,[r4,#0x10]         ;133
00004c  2001              MOVS     r0,#1                 ;134
00004e  7520              STRB     r0,[r4,#0x14]         ;134
000050  4628              MOV      r0,r5                 ;137
000052  f7fffffe          BL       I2C_ClearTimeoutFlag
000056  2301              MOVS     r3,#1                 ;138
000058  2200              MOVS     r2,#0                 ;138
00005a  4619              MOV      r1,r3                 ;138
00005c  4628              MOV      r0,r5                 ;138
00005e  9600              STR      r6,[sp,#0]            ;138
000060  f7fffffe          BL       I2C_Trigger
000064  4628              MOV      r0,r5                 ;139
000066  f7fffffe          BL       I2C_EnableInt
                  |L5.106|
00006a  7d20              LDRB     r0,[r4,#0x14]         ;143  ; i2c_trans_data
00006c  2800              CMP      r0,#0                 ;143
00006e  d1fc              BNE      |L5.106|
000070  e7dc              B        |L5.44|
;;;149    
                          ENDP

000072  0000              DCW      0x0000
                  |L5.116|
                          DCD      ||.bss||
                  |L5.120|
                          DCD      0x40020000
                  |L5.124|
                          DCD      sys_err

                          AREA ||i.I2C0_IRQHandler||, CODE, READONLY, ALIGN=2

                  I2C0_IRQHandler PROC
;;;202     */
;;;203    void I2C0_IRQHandler(void)
000000  b5f8              PUSH     {r3-r7,lr}
;;;204    {
;;;205        uint16_t tmp;
;;;206        uint8_t*  tp;
;;;207        volatile uint32_t status;
;;;208    
;;;209    	status = I2C_GET_STATUS(I2C0);
000002  4e58              LDR      r6,|L6.356|
000004  68f0              LDR      r0,[r6,#0xc]
000006  2701              MOVS     r7,#1
000008  9000              STR      r0,[sp,#0]
00000a  4957              LDR      r1,|L6.360|
00000c  04b8              LSLS     r0,r7,#18
00000e  6008              STR      r0,[r1,#0]
;;;210    
;;;211        NVIC_ClearPendingIRQ(I2C0_IRQn);
;;;212    
;;;213        if(I2C_GET_TIMEOUT_FLAG(I2C0))
000010  6970              LDR      r0,[r6,#0x14]
000012  43c0              MVNS     r0,r0
000014  07c0              LSLS     r0,r0,#31
000016  d026              BEQ      |L6.102|
;;;214        {
;;;215            I2C_ClearTimeoutFlag(I2C0);
;;;216            Hal_I2c0_Stop();
;;;217            return;
;;;218        }
;;;219    
;;;220        if(i2c_trans_data.next_status != status)
000018  4c54              LDR      r4,|L6.364|
00001a  7ce1              LDRB     r1,[r4,#0x13]  ; i2c_trans_data
00001c  9800              LDR      r0,[sp,#0]
00001e  4281              CMP      r1,r0
000020  d010              BEQ      |L6.68|
;;;221        {
;;;222            i2c_trans_data.wait_cnt++;
000022  8a20              LDRH     r0,[r4,#0x10]  ; i2c_trans_data
000024  1c40              ADDS     r0,r0,#1
000026  8220              STRH     r0,[r4,#0x10]
;;;223    
;;;224            if(i2c_trans_data.wait_cnt > I2C_WAIT_CYCLE)
000028  8a20              LDRH     r0,[r4,#0x10]  ; i2c_trans_data
00002a  4951              LDR      r1,|L6.368|
00002c  4288              CMP      r0,r1
00002e  d909              BLS      |L6.68|
;;;225            {
;;;226                if((sys_err & SYS_ERR_I2C0) == 0)
000030  4850              LDR      r0,|L6.372|
000032  7801              LDRB     r1,[r0,#0]  ; sys_err
000034  0789              LSLS     r1,r1,#30
000036  d403              BMI      |L6.64|
;;;227                {
;;;228                    sys_err |= SYS_ERR_I2C0;
000038  7801              LDRB     r1,[r0,#0]  ; sys_err
00003a  2202              MOVS     r2,#2
00003c  4311              ORRS     r1,r1,r2
00003e  7001              STRB     r1,[r0,#0]
                  |L6.64|
;;;229                }
;;;230                Hal_I2c0_Stop();
000040  f7fffffe          BL       Hal_I2c0_Stop
                  |L6.68|
;;;231            }
;;;232        }
;;;233    //	printf("i2c0*****status= 0x%x\n",status);
;;;234        switch (status)
000044  9800              LDR      r0,[sp,#0]
000046  0741              LSLS     r1,r0,#29
000048  0f49              LSRS     r1,r1,#29
00004a  d133              BNE      |L6.180|
00004c  10c0              ASRS     r0,r0,#3
;;;235        {
;;;236            case I2C_STATUS_ERROR:
;;;237            case I2C_STATUS_TRANS_ADDR_NAK:
;;;238            case I2C_STATUS_TRANS_DATA_NAK:
;;;239            case I2C_STATUS_REC_ADDR_NAK:
;;;240                if((sys_err & SYS_ERR_I2C0) == 0)
;;;241                {
;;;242                    sys_err |= SYS_ERR_I2C0;
;;;243                }
;;;244    
;;;245                Hal_I2c0_Stop();
;;;246    
;;;247                break;
;;;248    
;;;249            /* 1st start */
;;;250            case I2C_STATUS_START_OK:
;;;251                i2c_trans_data.next_status = I2C_STATUS_TRANS_ADDR_ACK;
;;;252                i2c_trans_data.wait_cnt = 0;
;;;253                I2C_SetData(I2C0, i2c_trans_data.slave_addr | I2C_DIR_WRITE);
;;;254                I2C_Trigger(I2C0, 0, 0, 1, 0);
;;;255                break;
;;;256    
;;;257            /* tx transfer */
;;;258            case I2C_STATUS_TRANS_ADDR_ACK:
;;;259    			TIMER_Delay(TIMER0, 16);	//delay 3s
;;;260                if(i2c_trans_data.tx_buff_len)
;;;261                {
;;;262                    i2c_trans_data.next_status = I2C_STATUS_TRANS_DATA_ACK;
;;;263                    i2c_trans_data.wait_cnt = 0;
;;;264                    I2C_SetData(I2C0, i2c_trans_data.p_tx_buff[0]);
;;;265                    i2c_trans_data.curr_tx_pos = 1;
;;;266                    I2C_Trigger(I2C0, 0, 0, 1, 0);
;;;267                }
;;;268                else
;;;269                {
;;;270                    Hal_I2c0_Stop();
;;;271                }
;;;272                break;
;;;273    
;;;274            /* tx transfer */
;;;275            case I2C_STATUS_TRANS_DATA_ACK:
;;;276    			
;;;277                tmp = i2c_trans_data.curr_tx_pos;
;;;278    
;;;279                if(tmp < i2c_trans_data.tx_buff_len)
;;;280                {
;;;281                    i2c_trans_data.next_status = I2C_STATUS_TRANS_DATA_ACK;
;;;282                    i2c_trans_data.wait_cnt = 0;
;;;283                    I2C_SetData(I2C0, i2c_trans_data.p_tx_buff[tmp]);
;;;284                    i2c_trans_data.curr_tx_pos++;
;;;285                    I2C_Trigger(I2C0, 0, 0, 1, 0);
;;;286                }
;;;287                else if(i2c_trans_data.rx_buff_len)
;;;288                {
;;;289                    /* repeat start */
;;;290                    i2c_trans_data.next_status = I2C_STATUS_REPEAT_START_OK;
;;;291                    i2c_trans_data.wait_cnt = 0;
;;;292                    I2C_Trigger(I2C0, 1, 0, 1, 0);
;;;293                }
;;;294                else
;;;295                {
;;;296                    /* stop */
;;;297                    Hal_I2c0_Stop();
;;;298                }
;;;299                break;
;;;300    
;;;301            case I2C_STATUS_REPEAT_START_OK:
;;;302                if(i2c_trans_data.rx_buff_len)
;;;303                {
;;;304                    i2c_trans_data.next_status = I2C_STATUS_REC_ADDR_ACK;
;;;305                    i2c_trans_data.wait_cnt = 0;
;;;306                    I2C_SetData(I2C0, i2c_trans_data.slave_addr | I2C_DIR_READ);
;;;307                    I2C_Trigger(I2C0, 0, 0, 1, 0);
;;;308                }
;;;309                else
;;;310                {
;;;311                    Hal_I2c0_Stop();
;;;312                }
;;;313                break;
;;;314    
;;;315            case I2C_STATUS_REC_ADDR_ACK:
;;;316                if(i2c_trans_data.rx_buff_len)
;;;317                {
;;;318                    i2c_trans_data.next_status = I2C_STATUS_REC_DATA_ACK;
00004e  2150              MOVS     r1,#0x50
000050  2500              MOVS     r5,#0
000052  0003              MOVS     r3,r0                 ;234
000054  f7fffffe          BL       __ARM_common_switch8
000058  0c0b144a          DCB      0x0c,0x0b,0x14,0x4a
00005c  190b2f0b          DCB      0x19,0x0b,0x2f,0x0b
000060  2e560b60          DCB      0x2e,0x56,0x0b,0x60
000064  822e              DCB      0x82,0x2e
                  |L6.102|
000066  4630              MOV      r0,r6                 ;215
000068  f7fffffe          BL       I2C_ClearTimeoutFlag
00006c  e076              B        |L6.348|
00006e  4841              LDR      r0,|L6.372|
000070  7801              LDRB     r1,[r0,#0]            ;240  ; sys_err
000072  0789              LSLS     r1,r1,#30             ;240
000074  d472              BMI      |L6.348|
000076  7802              LDRB     r2,[r0,#0]            ;242  ; sys_err
000078  2102              MOVS     r1,#2                 ;242
00007a  430a              ORRS     r2,r2,r1              ;242
00007c  7002              STRB     r2,[r0,#0]            ;242
00007e  e06d              B        |L6.348|
000080  2018              MOVS     r0,#0x18              ;251
000082  74e0              STRB     r0,[r4,#0x13]         ;251
000084  8225              STRH     r5,[r4,#0x10]         ;252
000086  7ca1              LDRB     r1,[r4,#0x12]         ;253  ; i2c_trans_data
000088  e038              B        |L6.252|
00008a  2110              MOVS     r1,#0x10              ;259
00008c  483a              LDR      r0,|L6.376|
00008e  f7fffffe          BL       TIMER_Delay
000092  8920              LDRH     r0,[r4,#8]            ;260  ; i2c_trans_data
000094  2800              CMP      r0,#0                 ;260
000096  d061              BEQ      |L6.348|
000098  2028              MOVS     r0,#0x28              ;262
00009a  74e0              STRB     r0,[r4,#0x13]         ;262
00009c  8225              STRH     r5,[r4,#0x10]         ;263
00009e  6820              LDR      r0,[r4,#0]            ;264  ; i2c_trans_data
0000a0  7801              LDRB     r1,[r0,#0]            ;264
0000a2  4630              MOV      r0,r6                 ;264
0000a4  f7fffffe          BL       I2C_SetData
0000a8  81a7              STRH     r7,[r4,#0xc]          ;265
                  |L6.170|
0000aa  9500              STR      r5,[sp,#0]            ;254
0000ac  e052              B        |L6.340|
                  |L6.174|
0000ae  4630              MOV      r0,r6                 ;254
0000b0  f7fffffe          BL       I2C_Trigger
                  |L6.180|
;;;319                    i2c_trans_data.wait_cnt = 0;
;;;320                    /* this is the ack for the 1st rx byte */
;;;321                    if(i2c_trans_data.rx_buff_len == 1)
;;;322                    {
;;;323                        I2C_Trigger(I2C0, 0, 0, 1, 0);
;;;324                    }
;;;325                    else
;;;326                    {
;;;327                        I2C_Trigger(I2C0, 0, 0, 1, 1);
;;;328                    }
;;;329                }
;;;330                else
;;;331                {
;;;332                    Hal_I2c0_Stop();
;;;333                }
;;;334                break;
;;;335    
;;;336            case I2C_STATUS_REC_DATA_ACK:
;;;337                tmp = i2c_trans_data.curr_rx_pos;
;;;338                tp  = i2c_trans_data.p_rx_buff;
;;;339    
;;;340                if(tmp < i2c_trans_data.rx_buff_len)
;;;341                {
;;;342                    if(i2c_trans_data.rx_buff_len - tmp == 2)
;;;343                    {
;;;344                        /* should send nak for the last byte */
;;;345                        i2c_trans_data.next_status = I2C_STATUS_REC_DATA_NAK;
;;;346                    }
;;;347                    else
;;;348                    {
;;;349                        i2c_trans_data.next_status = I2C_STATUS_REC_DATA_ACK;
;;;350                    }
;;;351    
;;;352                    i2c_trans_data.wait_cnt = 0;
;;;353                    tp[tmp] = (uint8_t)(I2C_GetData(I2C0) & 0xFF);
;;;354                    i2c_trans_data.curr_rx_pos++;
;;;355    
;;;356                    if(i2c_trans_data.rx_buff_len - tmp == 2)
;;;357                    {
;;;358                        I2C_Trigger(I2C0, 0, 0, 1, 0);
;;;359                    }
;;;360                    else
;;;361                    {
;;;362                        I2C_Trigger(I2C0, 0, 0, 1, 1);
;;;363                    }
;;;364                }
;;;365                else
;;;366                {
;;;367                    Hal_I2c0_Stop();
;;;368                }
;;;369                break;
;;;370    
;;;371            case I2C_STATUS_REC_DATA_NAK:
;;;372                /* stop */
;;;373                Hal_I2c0_Stop();
;;;374                break;
;;;375    
;;;376            default:
;;;377                break;
;;;378        }
;;;379    }
0000b4  bdf8              POP      {r3-r7,pc}
0000b6  89a0              LDRH     r0,[r4,#0xc]          ;277  ; i2c_trans_data
0000b8  8921              LDRH     r1,[r4,#8]            ;279  ; i2c_trans_data
0000ba  4281              CMP      r1,r0                 ;279
0000bc  d90b              BLS      |L6.214|
0000be  2128              MOVS     r1,#0x28              ;281
0000c0  74e1              STRB     r1,[r4,#0x13]         ;281
0000c2  8225              STRH     r5,[r4,#0x10]         ;282
0000c4  6821              LDR      r1,[r4,#0]            ;283  ; i2c_trans_data
0000c6  5c09              LDRB     r1,[r1,r0]            ;283
0000c8  4630              MOV      r0,r6                 ;283
0000ca  f7fffffe          BL       I2C_SetData
0000ce  89a1              LDRH     r1,[r4,#0xc]          ;284  ; i2c_trans_data
0000d0  1c49              ADDS     r1,r1,#1              ;284
0000d2  81a1              STRH     r1,[r4,#0xc]          ;284
0000d4  e7e9              B        |L6.170|
                  |L6.214|
0000d6  8960              LDRH     r0,[r4,#0xa]          ;287  ; i2c_trans_data
0000d8  2800              CMP      r0,#0                 ;287
0000da  d03f              BEQ      |L6.348|
0000dc  2010              MOVS     r0,#0x10              ;290
0000de  74e0              STRB     r0,[r4,#0x13]         ;290
0000e0  8225              STRH     r5,[r4,#0x10]         ;291
0000e2  2301              MOVS     r3,#1                 ;292
0000e4  2200              MOVS     r2,#0                 ;292
0000e6  4619              MOV      r1,r3                 ;292
0000e8  9500              STR      r5,[sp,#0]            ;292
0000ea  e7e0              B        |L6.174|
0000ec  8960              LDRH     r0,[r4,#0xa]          ;302  ; i2c_trans_data
0000ee  2800              CMP      r0,#0                 ;302
0000f0  d034              BEQ      |L6.348|
0000f2  2040              MOVS     r0,#0x40              ;304
0000f4  74e0              STRB     r0,[r4,#0x13]         ;304
0000f6  8225              STRH     r5,[r4,#0x10]         ;305
0000f8  7ca1              LDRB     r1,[r4,#0x12]         ;306  ; i2c_trans_data
0000fa  4339              ORRS     r1,r1,r7              ;306
                  |L6.252|
0000fc  4630              MOV      r0,r6                 ;306
0000fe  f7fffffe          BL       I2C_SetData
000102  e7d2              B        |L6.170|
000104  8960              LDRH     r0,[r4,#0xa]          ;316  ; i2c_trans_data
000106  2800              CMP      r0,#0                 ;316
000108  d028              BEQ      |L6.348|
00010a  74e1              STRB     r1,[r4,#0x13]         ;318
00010c  8225              STRH     r5,[r4,#0x10]         ;319
00010e  8960              LDRH     r0,[r4,#0xa]          ;321  ; i2c_trans_data
000110  2801              CMP      r0,#1                 ;321
000112  d0ca              BEQ      |L6.170|
                  |L6.276|
000114  9700              STR      r7,[sp,#0]            ;327
000116  e01d              B        |L6.340|
000118  4620              MOV      r0,r4                 ;337
00011a  89e4              LDRH     r4,[r4,#0xe]          ;337  ; i2c_trans_data
00011c  6842              LDR      r2,[r0,#4]            ;338  ; i2c_trans_data
00011e  9200              STR      r2,[sp,#0]            ;340
000120  8943              LDRH     r3,[r0,#0xa]          ;340  ; i2c_trans_data
000122  42a3              CMP      r3,r4                 ;340
000124  d91a              BLS      |L6.348|
000126  8942              LDRH     r2,[r0,#0xa]          ;342  ; i2c_trans_data
000128  1b12              SUBS     r2,r2,r4              ;342
00012a  2a02              CMP      r2,#2                 ;342
00012c  d100              BNE      |L6.304|
00012e  2158              MOVS     r1,#0x58              ;345
                  |L6.304|
000130  74c1              STRB     r1,[r0,#0x13]         ;349
000132  2100              MOVS     r1,#0                 ;352
000134  4605              MOV      r5,r0                 ;352
000136  8201              STRH     r1,[r0,#0x10]         ;352
000138  4630              MOV      r0,r6                 ;353
00013a  f7fffffe          BL       I2C_GetData
00013e  9900              LDR      r1,[sp,#0]            ;353
000140  5508              STRB     r0,[r1,r4]            ;353
000142  89e8              LDRH     r0,[r5,#0xe]          ;354  ; i2c_trans_data
000144  1c40              ADDS     r0,r0,#1              ;354
000146  81e8              STRH     r0,[r5,#0xe]          ;354
000148  8968              LDRH     r0,[r5,#0xa]          ;356  ; i2c_trans_data
00014a  1b00              SUBS     r0,r0,r4              ;356
00014c  2802              CMP      r0,#2                 ;356
00014e  d1e1              BNE      |L6.276|
000150  2000              MOVS     r0,#0                 ;358
000152  9000              STR      r0,[sp,#0]            ;358
                  |L6.340|
000154  2301              MOVS     r3,#1                 ;362
000156  2200              MOVS     r2,#0                 ;362
000158  4611              MOV      r1,r2                 ;362
00015a  e7a8              B        |L6.174|
                  |L6.348|
00015c  f7fffffe          BL       Hal_I2c0_Stop
000160  bdf8              POP      {r3-r7,pc}
;;;380    
                          ENDP

000162  0000              DCW      0x0000
                  |L6.356|
                          DCD      0x40020000
                  |L6.360|
                          DCD      0xe000e280
                  |L6.364|
                          DCD      ||.bss||
                  |L6.368|
                          DCD      0x00001388
                  |L6.372|
                          DCD      sys_err
                  |L6.376|
                          DCD      0x40010000

                          AREA ||i.I2C1_IRQHandler||, CODE, READONLY, ALIGN=2

                  I2C1_IRQHandler PROC
;;;386     */
;;;387    void I2C1_IRQHandler(void)
000000  b5f8              PUSH     {r3-r7,lr}
;;;388    {
;;;389        uint16_t tmp;
;;;390        uint8_t*  tp;
;;;391        volatile uint32_t status;
;;;392    
;;;393        status = I2C_GET_STATUS(I2C1);
000002  4d59              LDR      r5,|L7.360|
000004  68e8              LDR      r0,[r5,#0xc]
000006  2601              MOVS     r6,#1
000008  9000              STR      r0,[sp,#0]
00000a  4958              LDR      r1,|L7.364|
00000c  04f0              LSLS     r0,r6,#19
00000e  6008              STR      r0,[r1,#0]
;;;394    
;;;395        NVIC_ClearPendingIRQ(I2C1_IRQn);
;;;396    
;;;397        if(I2C_GET_TIMEOUT_FLAG(I2C1))
000010  6968              LDR      r0,[r5,#0x14]
000012  43c0              MVNS     r0,r0
000014  07c0              LSLS     r0,r0,#31
000016  d026              BEQ      |L7.102|
;;;398        {
;;;399            I2C_ClearTimeoutFlag(I2C1);
;;;400            Hal_I2c1_Stop();
;;;401            return;
;;;402        }
;;;403    
;;;404        if(i2c_trans_data.next_status != status)
000018  4c55              LDR      r4,|L7.368|
00001a  7ce1              LDRB     r1,[r4,#0x13]  ; i2c_trans_data
00001c  9800              LDR      r0,[sp,#0]
;;;405        {
;;;406            i2c_trans_data.wait_cnt++;
;;;407    
;;;408            if(i2c_trans_data.wait_cnt > I2C_WAIT_CYCLE)
;;;409            {
;;;410                if((sys_err & SYS_ERR_I2C1) == 0)
00001e  4f55              LDR      r7,|L7.372|
000020  4281              CMP      r1,r0                 ;404
000022  d00f              BEQ      |L7.68|
000024  8a20              LDRH     r0,[r4,#0x10]         ;406  ; i2c_trans_data
000026  1c40              ADDS     r0,r0,#1              ;406
000028  8220              STRH     r0,[r4,#0x10]         ;406
00002a  8a20              LDRH     r0,[r4,#0x10]         ;408  ; i2c_trans_data
00002c  4952              LDR      r1,|L7.376|
00002e  4288              CMP      r0,r1                 ;408
000030  d908              BLS      |L7.68|
000032  7838              LDRB     r0,[r7,#0]  ; sys_err
000034  0740              LSLS     r0,r0,#29
000036  d403              BMI      |L7.64|
;;;411                {
;;;412                    sys_err |= SYS_ERR_I2C1;
000038  7838              LDRB     r0,[r7,#0]  ; sys_err
00003a  2104              MOVS     r1,#4
00003c  4308              ORRS     r0,r0,r1
00003e  7038              STRB     r0,[r7,#0]
                  |L7.64|
;;;413                }
;;;414    
;;;415                Hal_I2c1_Stop();
000040  f7fffffe          BL       Hal_I2c1_Stop
                  |L7.68|
;;;416            }
;;;417        }
;;;418    	//printf("i2c1*****status= 0x%x\n",status);
;;;419    
;;;420        switch (status)
000044  9800              LDR      r0,[sp,#0]
000046  0741              LSLS     r1,r0,#29
000048  0f49              LSRS     r1,r1,#29
00004a  d131              BNE      |L7.176|
00004c  10c2              ASRS     r2,r0,#3
;;;421        {
;;;422            case I2C_STATUS_ERROR:
;;;423            case I2C_STATUS_TRANS_ADDR_NAK:
;;;424            case I2C_STATUS_TRANS_DATA_NAK:
;;;425            case I2C_STATUS_REC_ADDR_NAK:
;;;426                if((sys_err & SYS_ERR_I2C1) == 0)
;;;427                {
;;;428                    sys_err |= SYS_ERR_I2C1;
;;;429                }
;;;430    
;;;431                Hal_I2c1_Stop();
;;;432    
;;;433                break;
;;;434    
;;;435            /* 1st start */
;;;436            case I2C_STATUS_START_OK:
;;;437                i2c_trans_data.next_status = I2C_STATUS_TRANS_ADDR_ACK;
;;;438                i2c_trans_data.wait_cnt = 0;
;;;439                I2C_SetData(I2C1, i2c_trans_data.slave_addr | I2C_DIR_WRITE);
;;;440                I2C_Trigger(I2C1, 0, 0, 1, 0);
;;;441                break;
;;;442    
;;;443            /* tx transfer */
;;;444            case I2C_STATUS_TRANS_ADDR_ACK:
;;;445                if(i2c_trans_data.tx_buff_len)
;;;446                {
;;;447                    i2c_trans_data.next_status = I2C_STATUS_TRANS_DATA_ACK;
00004e  2128              MOVS     r1,#0x28
000050  2000              MOVS     r0,#0
000052  0013              MOVS     r3,r2                 ;420
000054  f7fffffe          BL       __ARM_common_switch8
000058  0c0b1349          DCB      0x0c,0x0b,0x13,0x49
00005c  1c0b2d0b          DCB      0x1c,0x0b,0x2d,0x0b
000060  2c570b65          DCB      0x2c,0x57,0x0b,0x65
000064  842c              DCB      0x84,0x2c
                  |L7.102|
000066  4628              MOV      r0,r5                 ;399
000068  f7fffffe          BL       I2C_ClearTimeoutFlag
00006c  e078              B        |L7.352|
00006e  7838              LDRB     r0,[r7,#0]            ;426  ; sys_err
000070  0740              LSLS     r0,r0,#29             ;426
000072  d475              BMI      |L7.352|
000074  7838              LDRB     r0,[r7,#0]            ;428  ; sys_err
000076  2104              MOVS     r1,#4                 ;428
000078  4308              ORRS     r0,r0,r1              ;428
00007a  7038              STRB     r0,[r7,#0]            ;428
00007c  e070              B        |L7.352|
00007e  2118              MOVS     r1,#0x18              ;437
000080  74e1              STRB     r1,[r4,#0x13]         ;437
000082  4606              MOV      r6,r0                 ;438
000084  8220              STRH     r0,[r4,#0x10]         ;438
000086  7ca1              LDRB     r1,[r4,#0x12]         ;439  ; i2c_trans_data
000088  4628              MOV      r0,r5                 ;439
00008a  f7fffffe          BL       I2C_SetData
00008e  e01f              B        |L7.208|
000090  8922              LDRH     r2,[r4,#8]            ;445  ; i2c_trans_data
000092  2a00              CMP      r2,#0                 ;445
000094  d064              BEQ      |L7.352|
000096  74e1              STRB     r1,[r4,#0x13]
;;;448                    i2c_trans_data.wait_cnt = 0;
000098  4607              MOV      r7,r0
00009a  8220              STRH     r0,[r4,#0x10]
;;;449                    I2C_SetData(I2C1, i2c_trans_data.p_tx_buff[0]);
00009c  6820              LDR      r0,[r4,#0]  ; i2c_trans_data
00009e  7801              LDRB     r1,[r0,#0]
0000a0  4628              MOV      r0,r5
0000a2  f7fffffe          BL       I2C_SetData
;;;450                    i2c_trans_data.curr_tx_pos = 1;
0000a6  81a6              STRH     r6,[r4,#0xc]
;;;451                    I2C_Trigger(I2C1, 0, 0, 1, 0);
0000a8  e02b              B        |L7.258|
                  |L7.170|
0000aa  4628              MOV      r0,r5                 ;440
0000ac  f7fffffe          BL       I2C_Trigger
                  |L7.176|
;;;452                }
;;;453                else
;;;454                {
;;;455                    Hal_I2c1_Stop();
;;;456                }
;;;457                break;
;;;458    
;;;459            /* tx transfer */
;;;460            case I2C_STATUS_TRANS_DATA_ACK:
;;;461                tmp = i2c_trans_data.curr_tx_pos;
;;;462    
;;;463                if(tmp < i2c_trans_data.tx_buff_len)
;;;464                {
;;;465                    i2c_trans_data.next_status = I2C_STATUS_TRANS_DATA_ACK;
;;;466                    i2c_trans_data.wait_cnt = 0;
;;;467                    I2C_SetData(I2C1, i2c_trans_data.p_tx_buff[tmp]);
;;;468                    i2c_trans_data.curr_tx_pos++;
;;;469                    I2C_Trigger(I2C1, 0, 0, 1, 0);
;;;470                }
;;;471                else if(i2c_trans_data.rx_buff_len)
;;;472                {
;;;473                    /* repeat start */
;;;474                    i2c_trans_data.next_status = I2C_STATUS_REPEAT_START_OK;
;;;475                    i2c_trans_data.wait_cnt = 0;
;;;476                    I2C_Trigger(I2C1, 1, 0, 1, 0);
;;;477                }
;;;478                else
;;;479                {
;;;480                    /* stop */
;;;481                    Hal_I2c1_Stop();
;;;482                }
;;;483                break;
;;;484    
;;;485            case I2C_STATUS_REPEAT_START_OK:
;;;486                if(i2c_trans_data.rx_buff_len)
;;;487                {
;;;488                    i2c_trans_data.next_status = I2C_STATUS_REC_ADDR_ACK;
;;;489                    i2c_trans_data.wait_cnt = 0;
;;;490                    I2C_SetData(I2C1, i2c_trans_data.slave_addr | I2C_DIR_READ);
;;;491                    I2C_Trigger(I2C1, 0, 0, 1, 0);
;;;492                }
;;;493                else
;;;494                {
;;;495                    Hal_I2c1_Stop();
;;;496                }
;;;497                break;
;;;498    
;;;499            case I2C_STATUS_REC_ADDR_ACK:
;;;500                if(i2c_trans_data.rx_buff_len)
;;;501                {
;;;502                    i2c_trans_data.next_status = I2C_STATUS_REC_DATA_ACK;
;;;503                    i2c_trans_data.wait_cnt = 0;
;;;504                    /* this is the ack for the 1st rx byte */
;;;505                    if(i2c_trans_data.rx_buff_len == 1)
;;;506                    {
;;;507                        I2C_Trigger(I2C1, 0, 0, 1, 0);
;;;508                    }
;;;509                    else
;;;510                    {
;;;511                        I2C_Trigger(I2C1, 0, 0, 1, 1);
;;;512                    }
;;;513                }
;;;514                else
;;;515                {
;;;516                    Hal_I2c1_Stop();
;;;517                }
;;;518                break;
;;;519    
;;;520            case I2C_STATUS_REC_DATA_ACK:
;;;521                tmp = i2c_trans_data.curr_rx_pos;
;;;522                tp  = i2c_trans_data.p_rx_buff;
;;;523    
;;;524                if(tmp < i2c_trans_data.rx_buff_len)
;;;525                {
;;;526                    if(i2c_trans_data.rx_buff_len - tmp == 2)
;;;527                    {
;;;528                        /* should send nak for the last byte */
;;;529                        i2c_trans_data.next_status = I2C_STATUS_REC_DATA_NAK;
;;;530                    }
;;;531                    else
;;;532                    {
;;;533                        i2c_trans_data.next_status = I2C_STATUS_REC_DATA_ACK;
;;;534                    }
;;;535    
;;;536                    i2c_trans_data.wait_cnt = 0;
;;;537                    tp[tmp] = (uint8_t)(I2C_GetData(I2C1) & 0xFF);
;;;538                    i2c_trans_data.curr_rx_pos++;
;;;539    
;;;540                    if(i2c_trans_data.rx_buff_len - tmp == 2)
;;;541                    {
;;;542                        I2C_Trigger(I2C1, 0, 0, 1, 0);
;;;543                    }
;;;544                    else
;;;545                    {
;;;546                        I2C_Trigger(I2C1, 0, 0, 1, 1);
;;;547                    }
;;;548                }
;;;549                else
;;;550                {
;;;551                    Hal_I2c1_Stop();
;;;552                }
;;;553                break;
;;;554    
;;;555            case I2C_STATUS_REC_DATA_NAK:
;;;556                /* stop */
;;;557    		//I2C_GET_DATA
;;;558    
;;;559    	//	printf("(I2C_GetData(I2C1) & 0xFF) %x",I2C_GetData(I2C1));
;;;560                Hal_I2c1_Stop();
;;;561                break;
;;;562    
;;;563            default:
;;;564                break;
;;;565        }
;;;566    }
0000b0  bdf8              POP      {r3-r7,pc}
0000b2  89a2              LDRH     r2,[r4,#0xc]          ;461  ; i2c_trans_data
0000b4  8923              LDRH     r3,[r4,#8]            ;463  ; i2c_trans_data
0000b6  4293              CMP      r3,r2                 ;463
0000b8  d90c              BLS      |L7.212|
0000ba  74e1              STRB     r1,[r4,#0x13]         ;465
0000bc  4606              MOV      r6,r0                 ;466
0000be  8220              STRH     r0,[r4,#0x10]         ;466
0000c0  6820              LDR      r0,[r4,#0]            ;467  ; i2c_trans_data
0000c2  5c81              LDRB     r1,[r0,r2]            ;467
0000c4  4628              MOV      r0,r5                 ;467
0000c6  f7fffffe          BL       I2C_SetData
0000ca  89a1              LDRH     r1,[r4,#0xc]          ;468  ; i2c_trans_data
0000cc  1c49              ADDS     r1,r1,#1              ;468
0000ce  81a1              STRH     r1,[r4,#0xc]          ;468
                  |L7.208|
0000d0  9600              STR      r6,[sp,#0]            ;469
0000d2  e022              B        |L7.282|
                  |L7.212|
0000d4  8961              LDRH     r1,[r4,#0xa]          ;471  ; i2c_trans_data
0000d6  2900              CMP      r1,#0                 ;471
0000d8  d042              BEQ      |L7.352|
0000da  2110              MOVS     r1,#0x10              ;474
0000dc  74e1              STRB     r1,[r4,#0x13]         ;474
0000de  8220              STRH     r0,[r4,#0x10]         ;475
0000e0  2301              MOVS     r3,#1                 ;476
0000e2  2200              MOVS     r2,#0                 ;476
0000e4  4619              MOV      r1,r3                 ;476
0000e6  9000              STR      r0,[sp,#0]            ;476
0000e8  e7df              B        |L7.170|
0000ea  8961              LDRH     r1,[r4,#0xa]          ;486  ; i2c_trans_data
0000ec  2900              CMP      r1,#0                 ;486
0000ee  d037              BEQ      |L7.352|
0000f0  2140              MOVS     r1,#0x40              ;488
0000f2  74e1              STRB     r1,[r4,#0x13]         ;488
0000f4  4607              MOV      r7,r0                 ;489
0000f6  8220              STRH     r0,[r4,#0x10]         ;489
0000f8  7ca1              LDRB     r1,[r4,#0x12]         ;490  ; i2c_trans_data
0000fa  4628              MOV      r0,r5                 ;490
0000fc  4331              ORRS     r1,r1,r6              ;490
0000fe  f7fffffe          BL       I2C_SetData
                  |L7.258|
000102  9700              STR      r7,[sp,#0]            ;451
000104  e009              B        |L7.282|
000106  8961              LDRH     r1,[r4,#0xa]          ;500  ; i2c_trans_data
000108  2900              CMP      r1,#0                 ;500
00010a  d029              BEQ      |L7.352|
00010c  2150              MOVS     r1,#0x50              ;502
00010e  74e1              STRB     r1,[r4,#0x13]         ;502
000110  8220              STRH     r0,[r4,#0x10]         ;503
000112  8961              LDRH     r1,[r4,#0xa]          ;505  ; i2c_trans_data
000114  2901              CMP      r1,#1                 ;505
000116  d1db              BNE      |L7.208|
                  |L7.280|
000118  9000              STR      r0,[sp,#0]            ;507
                  |L7.282|
00011a  2301              MOVS     r3,#1                 ;546
00011c  2200              MOVS     r2,#0                 ;546
00011e  4611              MOV      r1,r2                 ;546
000120  e7c3              B        |L7.170|
000122  89e7              LDRH     r7,[r4,#0xe]          ;521  ; i2c_trans_data
000124  6861              LDR      r1,[r4,#4]            ;522  ; i2c_trans_data
000126  9100              STR      r1,[sp,#0]            ;524
000128  8961              LDRH     r1,[r4,#0xa]          ;524  ; i2c_trans_data
00012a  42b9              CMP      r1,r7                 ;524
00012c  d918              BLS      |L7.352|
00012e  8961              LDRH     r1,[r4,#0xa]          ;526  ; i2c_trans_data
000130  1bc9              SUBS     r1,r1,r7              ;526
000132  2902              CMP      r1,#2                 ;526
000134  d012              BEQ      |L7.348|
000136  2150              MOVS     r1,#0x50              ;533
                  |L7.312|
000138  74e1              STRB     r1,[r4,#0x13]         ;533
00013a  2000              MOVS     r0,#0                 ;536
00013c  8220              STRH     r0,[r4,#0x10]         ;536
00013e  4628              MOV      r0,r5                 ;537
000140  f7fffffe          BL       I2C_GetData
000144  4601              MOV      r1,r0                 ;537
000146  9800              LDR      r0,[sp,#0]            ;537
000148  55c1              STRB     r1,[r0,r7]            ;537
00014a  89e0              LDRH     r0,[r4,#0xe]          ;538  ; i2c_trans_data
00014c  1c40              ADDS     r0,r0,#1              ;538
00014e  81e0              STRH     r0,[r4,#0xe]          ;538
000150  8960              LDRH     r0,[r4,#0xa]          ;540  ; i2c_trans_data
000152  1bc0              SUBS     r0,r0,r7              ;540
000154  2802              CMP      r0,#2                 ;540
000156  d1bb              BNE      |L7.208|
000158  2000              MOVS     r0,#0                 ;542
00015a  e7dd              B        |L7.280|
                  |L7.348|
00015c  2158              MOVS     r1,#0x58              ;529
00015e  e7eb              B        |L7.312|
                  |L7.352|
000160  f7fffffe          BL       Hal_I2c1_Stop
000164  bdf8              POP      {r3-r7,pc}
;;;567    
                          ENDP

000166  0000              DCW      0x0000
                  |L7.360|
                          DCD      0x40120000
                  |L7.364|
                          DCD      0xe000e280
                  |L7.368|
                          DCD      ||.bss||
                  |L7.372|
                          DCD      sys_err
                  |L7.376|
                          DCD      0x00001388

                          AREA ||i.NVIC_SetPriority||, CODE, READONLY, ALIGN=2

                  NVIC_SetPriority PROC
;;;687     */
;;;688    __STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
000000  0783              LSLS     r3,r0,#30
;;;689    {
;;;690        if((int32_t)(IRQn) < 0)
;;;691        {
;;;692            SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
000002  22ff              MOVS     r2,#0xff
000004  0edb              LSRS     r3,r3,#27
000006  409a              LSLS     r2,r2,r3
000008  0789              LSLS     r1,r1,#30
00000a  0e09              LSRS     r1,r1,#24
00000c  4099              LSLS     r1,r1,r3
00000e  2800              CMP      r0,#0                 ;690
000010  da0b              BGE      |L8.42|
000012  0700              LSLS     r0,r0,#28
000014  0f00              LSRS     r0,r0,#28
000016  3808              SUBS     r0,r0,#8
000018  0883              LSRS     r3,r0,#2
00001a  4808              LDR      r0,|L8.60|
00001c  009b              LSLS     r3,r3,#2
00001e  1818              ADDS     r0,r3,r0
000020  69c3              LDR      r3,[r0,#0x1c]
000022  4393              BICS     r3,r3,r2
000024  430b              ORRS     r3,r3,r1
000026  61c3              STR      r3,[r0,#0x1c]
;;;693                                        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
;;;694        }
;;;695        else
;;;696        {
;;;697            NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
;;;698                                        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
;;;699        }
;;;700    }
000028  4770              BX       lr
                  |L8.42|
00002a  0883              LSRS     r3,r0,#2              ;697
00002c  4804              LDR      r0,|L8.64|
00002e  009b              LSLS     r3,r3,#2              ;697
000030  1818              ADDS     r0,r3,r0              ;697
000032  6803              LDR      r3,[r0,#0]            ;697
000034  4393              BICS     r3,r3,r2              ;697
000036  430b              ORRS     r3,r3,r1              ;697
000038  6003              STR      r3,[r0,#0]            ;697
00003a  4770              BX       lr
;;;701    
                          ENDP

                  |L8.60|
                          DCD      0xe000ed00
                  |L8.64|
                          DCD      0xe000e400

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  i2c_trans_data
                          %        24

                          AREA ||i.__ARM_common_switch8||, COMGROUP=__ARM_common_switch8, CODE, READONLY, ALIGN=1

                  __ARM_common_switch8 PROC
000000  b430              PUSH     {r4,r5}
000002  4674              MOV      r4,lr
000004  1e64              SUBS     r4,r4,#1
000006  7825              LDRB     r5,[r4,#0]
000008  1c64              ADDS     r4,r4,#1
00000a  42ab              CMP      r3,r5
00000c  d200              BCS      |L54.16|
00000e  461d              MOV      r5,r3
                  |L54.16|
000010  5d63              LDRB     r3,[r4,r5]
000012  005b              LSLS     r3,r3,#1
000014  18e3              ADDS     r3,r4,r3
000016  bc30              POP      {r4,r5}
000018  4718              BX       r3
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\src\\io\\io_i2c.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___8_io_i2c_c_c0dff8c5____REV16|
#line 388 "..\\lib\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___8_io_i2c_c_c0dff8c5____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___8_io_i2c_c_c0dff8c5____REVSH|
#line 402
|__asm___8_io_i2c_c_c0dff8c5____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
