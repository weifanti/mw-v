; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\io_usci_uart.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\io_usci_uart.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\lib\CMSIS\Include -I..\lib\Device\Nuvoton\NUC029xGE\Include -I..\lib\StdDriver\inc -I..\src\core\include -I..\src\driver\include -I..\src\io\include -I..\src\global -I..\src\server\include -I..\src\driver\audio -D__UVISION_VERSION=522 --omf_browse=.\obj\io_usci_uart.crf ..\src\io\io_usci_uart.c]
                          THUMB

                          AREA ||i.USCI0_Init||, CODE, READONLY, ALIGN=2

                  USCI0_Init PROC
;;;41     
;;;42     void USCI0_Init()
000000  b510              PUSH     {r4,lr}
;;;43     {
;;;44     
;;;45     #if 1/*---------------------------------------------------------------------------------------------------------*/
;;;46         /* Init USCI                                                                                               */
;;;47         /*---------------------------------------------------------------------------------------------------------*/
;;;48         /* Reset USCI0 */
;;;49         SYS->IPRST2 |=  SYS_IPRST2_USCI0RST_Msk;
000002  2005              MOVS     r0,#5
000004  0700              LSLS     r0,r0,#28
000006  6902              LDR      r2,[r0,#0x10]
000008  21ff              MOVS     r1,#0xff
00000a  3101              ADDS     r1,#1
00000c  430a              ORRS     r2,r2,r1
00000e  6102              STR      r2,[r0,#0x10]
;;;50         SYS->IPRST2 &= ~SYS_IPRST2_USCI0RST_Msk;
000010  6902              LDR      r2,[r0,#0x10]
000012  438a              BICS     r2,r2,r1
000014  6102              STR      r2,[r0,#0x10]
;;;51     
;;;52         /* Configure USCI0 as UART mode */
;;;53         UUART0->CTL = (2 << UUART_CTL_FUNMODE_Pos);                                 /* Select UART function mode */
000016  4c0b              LDR      r4,|L1.68|
000018  2002              MOVS     r0,#2
00001a  6020              STR      r0,[r4,#0]
;;;54         UUART0->LINECTL = UUART_WORD_LEN_8 | UUART_LINECTL_LSB_Msk;                 /* Set UART line configuration */
00001c  480a              LDR      r0,|L1.72|
00001e  62e0              STR      r0,[r4,#0x2c]
;;;55         UUART0->DATIN0 = (2 << UUART_DATIN0_EDGEDET_Pos);                           /* Set falling edge detection */
000020  2010              MOVS     r0,#0x10
000022  6120              STR      r0,[r4,#0x10]
;;;56         //UUART0->BRGEN = (103 << UUART_BRGEN_CLKDIV_Pos) | (5 << UUART_BRGEN_DSCNT_Pos); /* Set UART baud rate as 115200bps */
;;;57     	// UUART_Open(UUART0, 115200);
;;;58         UUART0->PROTCTL |= UUART_PROTCTL_PROTEN_Msk;                                /* Enable UART protocol */
000024  4807              LDR      r0,|L1.68|
000026  3040              ADDS     r0,r0,#0x40
000028  69c1              LDR      r1,[r0,#0x1c]
00002a  0642              LSLS     r2,r0,#25
00002c  4311              ORRS     r1,r1,r2
00002e  61c1              STR      r1,[r0,#0x1c]
;;;59     #endif
;;;60     	    /*---------------------------------------------------------------------------------------------------------*/
;;;61         /* Init USCI                                                                                               */
;;;62         /*---------------------------------------------------------------------------------------------------------*/
;;;63         /* Reset USCI0 */
;;;64         SYS_ResetModule(USCI0_RST);
000030  4806              LDR      r0,|L1.76|
000032  f7fffffe          BL       SYS_ResetModule
;;;65     
;;;66         /* Configure USCI0 as UART mode */
;;;67         UUART_Open(UUART0, 19200);
000036  214b              MOVS     r1,#0x4b
000038  0209              LSLS     r1,r1,#8
00003a  4620              MOV      r0,r4
00003c  f7fffffe          BL       UUART_Open
;;;68     }
000040  bd10              POP      {r4,pc}
;;;69     
                          ENDP

000042  0000              DCW      0x0000
                  |L1.68|
                          DCD      0x40070000
                  |L1.72|
                          DCD      0x00000801
                  |L1.76|
                          DCD      0x08000008

                          AREA ||i.USCI_IRQHandler||, CODE, READONLY, ALIGN=1

                  USCI_IRQHandler PROC
;;;101    /*---------------------------------------------------------------------------------------------------------*/
;;;102    void USCI_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;103    {
;;;104        USCI_UART_TEST_HANDLE();
000002  f7fffffe          BL       USCI_UART_TEST_HANDLE
;;;105    }
000006  bd10              POP      {r4,pc}
;;;106    
                          ENDP


                          AREA ||i.USCI_UART_FunctionTest||, CODE, READONLY, ALIGN=2

                  USCI_UART_FunctionTest PROC
;;;200    /*---------------------------------------------------------------------------------------------------------*/
;;;201    void USCI_UART_FunctionTest()
000000  b510              PUSH     {r4,lr}
;;;202    {
;;;203        printf("+-----------------------------------------------------------+\n");
000002  a00f              ADR      r0,|L3.64|
000004  f7fffffe          BL       __2printf
;;;204        printf("|  USCI UART Function Test                                  |\n");
000008  a01d              ADR      r0,|L3.128|
00000a  f7fffffe          BL       __2printf
;;;205        printf("+-----------------------------------------------------------+\n");
00000e  a00c              ADR      r0,|L3.64|
000010  f7fffffe          BL       __2printf
;;;206        printf("|  Description :                                            |\n");
000014  a02a              ADR      r0,|L3.192|
000016  f7fffffe          BL       __2printf
;;;207        printf("|    The sample code will print input char on terminal      |\n");
00001a  a039              ADR      r0,|L3.256|
00001c  f7fffffe          BL       __2printf
;;;208        printf("|    Please enter any to start     (Press '0' to exit)      |\n");
000020  a047              ADR      r0,|L3.320|
000022  f7fffffe          BL       __2printf
;;;209        printf("+-----------------------------------------------------------+\n");
000026  a006              ADR      r0,|L3.64|
000028  f7fffffe          BL       __2printf
;;;210    
;;;211        /*
;;;212            Using a RS232 cable to connect USCI-UART0 and PC.
;;;213            USCI-UART0 is set to debug port. USCI-UART0 is enable RX and TX end interrupt.
;;;214            When inputting char to terminal screen, RX end interrupt will happen and
;;;215            USCI-UART0 will print the received char on screen.
;;;216        */
;;;217    
;;;218        /* Enable USCI UART receive and transmit end interrupt */
;;;219        UUART_ENABLE_TRANS_INT(UUART0, UUART_INTEN_RXENDIEN_Msk );
00002c  4854              LDR      r0,|L3.384|
00002e  6841              LDR      r1,[r0,#4]
000030  2210              MOVS     r2,#0x10
000032  4311              ORRS     r1,r1,r2
000034  6041              STR      r1,[r0,#4]
000036  4953              LDR      r1,|L3.388|
000038  0490              LSLS     r0,r2,#18
00003a  6008              STR      r0,[r1,#0]
;;;220        //UUART_EnableInt(UUART0, UUART_INTEN_RXENDIEN_Msk );
;;;221        NVIC_EnableIRQ(USCI_IRQn);
;;;222        //while(g_ubWait);
;;;223    
;;;224        /* Disable USCI UART receive and transmit end interrupt */
;;;225        //UUART_DISABLE_TRANS_INT(UUART0, UUART_INTEN_RXENDIEN_Msk | UUART_INTEN_TXENDIEN_Msk);
;;;226        //NVIC_DisableIRQ(USCI_IRQn);
;;;227        //g_ubWait = TRUE;
;;;228        //printf("\nUSCI UART Sample Demo End.\n");
;;;229    }
00003c  bd10              POP      {r4,pc}
                          ENDP

00003e  0000              DCW      0x0000
                  |L3.64|
000040  2b2d2d2d          DCB      "+------------------------------------------------------"
000044  2d2d2d2d
000048  2d2d2d2d
00004c  2d2d2d2d
000050  2d2d2d2d
000054  2d2d2d2d
000058  2d2d2d2d
00005c  2d2d2d2d
000060  2d2d2d2d
000064  2d2d2d2d
000068  2d2d2d2d
00006c  2d2d2d2d
000070  2d2d2d2d
000074  2d2d2d  
000077  2d2d2d2d          DCB      "-----+\n",0
00007b  2d2b0a00
00007f  00                DCB      0
                  |L3.128|
000080  7c202055          DCB      "|  USCI UART Function Test                             "
000084  53434920
000088  55415254
00008c  2046756e
000090  6374696f
000094  6e205465
000098  73742020
00009c  20202020
0000a0  20202020
0000a4  20202020
0000a8  20202020
0000ac  20202020
0000b0  20202020
0000b4  202020  
0000b7  20202020          DCB      "     |\n",0
0000bb  207c0a00
0000bf  00                DCB      0
                  |L3.192|
0000c0  7c202044          DCB      "|  Description :                                       "
0000c4  65736372
0000c8  69707469
0000cc  6f6e203a
0000d0  20202020
0000d4  20202020
0000d8  20202020
0000dc  20202020
0000e0  20202020
0000e4  20202020
0000e8  20202020
0000ec  20202020
0000f0  20202020
0000f4  202020  
0000f7  20202020          DCB      "     |\n",0
0000fb  207c0a00
0000ff  00                DCB      0
                  |L3.256|
000100  7c202020          DCB      "|    The sample code will print input char on terminal "
000104  20546865
000108  2073616d
00010c  706c6520
000110  636f6465
000114  2077696c
000118  6c207072
00011c  696e7420
000120  696e7075
000124  74206368
000128  6172206f
00012c  6e207465
000130  726d696e
000134  616c20  
000137  20202020          DCB      "     |\n",0
00013b  207c0a00
00013f  00                DCB      0
                  |L3.320|
000140  7c202020          DCB      "|    Please enter any to start     (Press '0' to exit) "
000144  20506c65
000148  61736520
00014c  656e7465
000150  7220616e
000154  7920746f
000158  20737461
00015c  72742020
000160  20202028
000164  50726573
000168  73202730
00016c  2720746f
000170  20657869
000174  742920  
000177  20202020          DCB      "     |\n",0
00017b  207c0a00
00017f  00                DCB      0
                  |L3.384|
                          DCD      0x40070000
                  |L3.388|
                          DCD      0xe000e100

                          AREA ||i.USCI_UART_TEST_HANDLE||, CODE, READONLY, ALIGN=2

                  USCI_UART_TEST_HANDLE PROC
;;;109    /*---------------------------------------------------------------------------------------------------------*/
;;;110    void USCI_UART_TEST_HANDLE()
000000  b570              PUSH     {r4-r6,lr}
;;;111    {
;;;112        uint8_t u8InChar = 0xFF;
;;;113    	static uint8_t nRxIndex=0;
;;;114    	
;;;115    	if(!UUART_IS_RX_EMPTY(UUART0))
000002  4821              LDR      r0,|L4.136|
000004  6bc1              LDR      r1,[r0,#0x3c]
000006  07c9              LSLS     r1,r1,#31
000008  d139              BNE      |L4.126|
;;;116    	{
;;;117    	    u8InChar = UUART_READ(UUART0);
00000a  6b40              LDR      r0,[r0,#0x34]
;;;118    		
;;;119    //       printf("\nUUART0_READ = %x ", u8InChar);
;;;120    //		UART_WRITE(UART1,u8InChar);
;;;121    		switch (nRxIndex)
00000c  4c1f              LDR      r4,|L4.140|
00000e  b2c0              UXTB     r0,r0                 ;117
000010  78e2              LDRB     r2,[r4,#3]  ; nRxIndex
000012  2500              MOVS     r5,#0
000014  2101              MOVS     r1,#1
000016  0013              MOVS     r3,r2
000018  f7fffffe          BL       __ARM_common_switch8
00001c  08050910          DCB      0x08,0x05,0x09,0x10
000020  131a1d20          DCB      0x13,0x1a,0x1d,0x20
000024  2430              DCB      0x24,0x30
;;;122    		{
;;;123    			case 0: 
;;;124    				
;;;125    				if(u8InChar==0xff) nRxIndex=1;
000026  28ff              CMP      r0,#0xff
000028  d129              BNE      |L4.126|
                  |L4.42|
00002a  70e1              STRB     r1,[r4,#3]
00002c  e027              B        |L4.126|
;;;126    				break;
;;;127    				
;;;128    			case 1: 
;;;129    				if(u8InChar==0x55) nRxIndex=2;
00002e  2855              CMP      r0,#0x55
000030  d002              BEQ      |L4.56|
;;;130    				else
;;;131    				{
;;;132    					if(u8InChar==0xff) nRxIndex=1;
000032  28ff              CMP      r0,#0xff
000034  d023              BEQ      |L4.126|
000036  e021              B        |L4.124|
                  |L4.56|
000038  2002              MOVS     r0,#2                 ;129
00003a  e011              B        |L4.96|
;;;133    					else 
;;;134    						nRxIndex=0;
;;;135    				}
;;;136    				break;
;;;137    
;;;138    			case 2: 
;;;139    				if(u8InChar==0x03) nRxIndex=3;
00003c  2803              CMP      r0,#3
00003e  d00f              BEQ      |L4.96|
000040  e001              B        |L4.70|
;;;140    				else
;;;141    				{
;;;142    					if(u8InChar==0xff) nRxIndex=1;
;;;143    					else 
;;;144    						nRxIndex=0;
;;;145    				}
;;;146    				break;
;;;147    				
;;;148    			case 3: 
;;;149    				if(u8InChar==0x80) nRxIndex=4;
000042  2880              CMP      r0,#0x80
000044  d002              BEQ      |L4.76|
                  |L4.70|
;;;150    				else
;;;151    				{
;;;152    					if(u8InChar==0xff) nRxIndex=1;
000046  28ff              CMP      r0,#0xff
000048  d0ef              BEQ      |L4.42|
00004a  e017              B        |L4.124|
                  |L4.76|
00004c  2004              MOVS     r0,#4                 ;149
00004e  e007              B        |L4.96|
;;;153    					else 
;;;154    						nRxIndex=0;
;;;155    				}
;;;156    				break;
;;;157    			
;;;158    			case 4:  
;;;159    				uuart0_cmd = u8InChar;
000050  7020              STRB     r0,[r4,#0]
;;;160    				
;;;161    				nRxIndex=5;
000052  2005              MOVS     r0,#5
;;;162    				break;	
000054  e004              B        |L4.96|
;;;163    				
;;;164    			case 5:
;;;165    				uuart0_dat0 = u8InChar;
000056  7060              STRB     r0,[r4,#1]
;;;166    				
;;;167    				nRxIndex=6;
000058  2006              MOVS     r0,#6
;;;168    				break;
00005a  e001              B        |L4.96|
;;;169    				
;;;170    			case 6:  
;;;171    				uuart0_dat1 = u8InChar;
00005c  70a0              STRB     r0,[r4,#2]
;;;172    								
;;;173    				nRxIndex=7;
00005e  2007              MOVS     r0,#7
                  |L4.96|
000060  70e0              STRB     r0,[r4,#3]
000062  e00c              B        |L4.126|
;;;174    				break;
;;;175    				
;;;176    			case 7:
;;;177    				if(u8InChar==0xff) nRxIndex=1;
000064  28ff              CMP      r0,#0xff
000066  d0e0              BEQ      |L4.42|
;;;178    				else 
;;;179    				{
;;;180    					Core_Msg_Send(MSG_MCU1_SYS_STATE_IND, uuart0_cmd ,uuart0_dat0,uuart0_dat1);
000068  78a3              LDRB     r3,[r4,#2]  ; uuart0_dat1
00006a  7862              LDRB     r2,[r4,#1]  ; uuart0_dat0
00006c  7821              LDRB     r1,[r4,#0]  ; uuart0_cmd
00006e  2002              MOVS     r0,#2
000070  f7fffffe          BL       Core_Msg_Send
;;;181    					uuart0_cmd = 0xFF;
000074  20ff              MOVS     r0,#0xff
000076  7020              STRB     r0,[r4,#0]
;;;182    					uuart0_dat0 = 0xFF;
000078  7060              STRB     r0,[r4,#1]
;;;183    					uuart0_dat1 = 0xFF;
00007a  70a0              STRB     r0,[r4,#2]
                  |L4.124|
;;;184    					nRxIndex=0; 
;;;185    				}
;;;186    				break;
;;;187    					
;;;188    			default:
;;;189    				nRxIndex=0;
00007c  70e5              STRB     r5,[r4,#3]
                  |L4.126|
;;;190    				break;
;;;191    		} 
;;;192    	}
;;;193    	
;;;194    	UUART_CLR_PROT_INT_FLAG(UUART0, UUART_INTEN_RXENDIEN_Msk);
00007e  4902              LDR      r1,|L4.136|
000080  2010              MOVS     r0,#0x10
000082  3140              ADDS     r1,r1,#0x40
000084  6248              STR      r0,[r1,#0x24]
;;;195    
;;;196    }
000086  bd70              POP      {r4-r6,pc}
;;;197    
                          ENDP

                  |L4.136|
                          DCD      0x40070000
                  |L4.140|
                          DCD      ||area_number.12||

                          AREA ||i.USCI_Uart_Init||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  USCI_Uart_Init PROC
;;;78     /*---------------------------------------------------------------------------------------------------------*/
;;;79     int32_t USCI_Uart_Init(void)
000000  b510              PUSH     {r4,lr}
;;;80     {
;;;81         /* Init USCI0 for printf and test */
;;;82         USCI0_Init();
000002  f7fffffe          BL       USCI0_Init
;;;83     
;;;84         /*---------------------------------------------------------------------------------------------------------*/
;;;85         /* SAMPLE CODE                                                                                             */
;;;86         /*---------------------------------------------------------------------------------------------------------*/
;;;87     
;;;88         printf("\n\nCPU @ %d Hz\n", SystemCoreClock);
000006  4806              LDR      r0,|L5.32|
000008  6801              LDR      r1,[r0,#0]  ; SystemCoreClock
00000a  a006              ADR      r0,|L5.36|
00000c  f7fffffe          BL       __2printf
;;;89     
;;;90         printf("\nUSCI UART Sample Program\n");
000010  a008              ADR      r0,|L5.52|
000012  f7fffffe          BL       __2printf
;;;91     
;;;92         /* USCI UART sample function */
;;;93         USCI_UART_FunctionTest();
000016  f7fffffe          BL       USCI_UART_FunctionTest
;;;94     		
;;;95     		return 0;
00001a  2000              MOVS     r0,#0
;;;96     
;;;97     }
00001c  bd10              POP      {r4,pc}
;;;98     
                          ENDP

00001e  0000              DCW      0x0000
                  |L5.32|
                          DCD      SystemCoreClock
                  |L5.36|
000024  0a0a4350          DCB      "\n\nCPU @ %d Hz\n",0
000028  55204020
00002c  25642048
000030  7a0a00  
000033  00                DCB      0
                  |L5.52|
000034  0a555343          DCB      "\nUSCI UART Sample Program\n",0
000038  49205541
00003c  52542053
000040  616d706c
000044  65205072
000048  6f677261
00004c  6d0a00  
00004f  00                DCB      0

                          AREA ||.data||, DATA, ALIGN=2

                  g_uu32comRbytes
                          DCD      0x00000000

                          AREA ||area_number.9||, DATA, ALIGN=2

                          EXPORTAS ||area_number.9||, ||.data||
                  g_uu32comRhead
                          DCD      0x00000000

                          AREA ||area_number.10||, DATA, ALIGN=2

                          EXPORTAS ||area_number.10||, ||.data||
                  g_uu32comRtail
                          DCD      0x00000000

                          AREA ||area_number.11||, DATA, ALIGN=2

                          EXPORTAS ||area_number.11||, ||.data||
                  g_ubWait
                          DCD      0x00000001

                          AREA ||area_number.12||, DATA, ALIGN=0

                          EXPORTAS ||area_number.12||, ||.data||
                  uuart0_cmd
000000  ff                DCB      0xff
                  uuart0_dat0
000001  ff                DCB      0xff
                  uuart0_dat1
000002  ff                DCB      0xff
                  nRxIndex
000003  00                DCB      0x00

                          AREA ||i.__ARM_common_switch8||, COMGROUP=__ARM_common_switch8, CODE, READONLY, ALIGN=1

                  __ARM_common_switch8 PROC
000000  b430              PUSH     {r4,r5}
000002  4674              MOV      r4,lr
000004  1e64              SUBS     r4,r4,#1
000006  7825              LDRB     r5,[r4,#0]
000008  1c64              ADDS     r4,r4,#1
00000a  42ab              CMP      r3,r5
00000c  d200              BCS      |L44.16|
00000e  461d              MOV      r5,r3
                  |L44.16|
000010  5d63              LDRB     r3,[r4,r5]
000012  005b              LSLS     r3,r3,#1
000014  18e3              ADDS     r3,r4,r3
000016  bc30              POP      {r4,r5}
000018  4718              BX       r3
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\src\\io\\io_usci_uart.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___14_io_usci_uart_c_09764f62____REV16|
#line 388 "..\\lib\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___14_io_usci_uart_c_09764f62____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___14_io_usci_uart_c_09764f62____REVSH|
#line 402
|__asm___14_io_usci_uart_c_09764f62____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
