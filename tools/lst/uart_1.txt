; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\uart_1.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\uart_1.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\lib\CMSIS\Include -I..\lib\Device\Nuvoton\NUC029xGE\Include -I..\lib\StdDriver\inc -I..\src\core\include -I..\src\driver\include -I..\src\io\include -I..\src\global -I..\src\server\include -I..\src\driver\audio -D__UVISION_VERSION=522 --omf_browse=.\obj\uart_1.crf ..\lib\StdDriver\src\uart.c]
                          THUMB

                          AREA ||i.CLK_GetPLLClockFreq||, CODE, READONLY, ALIGN=2

                  CLK_GetPLLClockFreq PROC
;;;382      */
;;;383    __STATIC_INLINE uint32_t CLK_GetPLLClockFreq(void)
000000  b508              PUSH     {r3,lr}
;;;384    {
;;;385        uint32_t u32PllFreq = 0, u32PllReg;
;;;386        uint32_t u32FIN, u32NF, u32NR, u32NO;
;;;387        uint8_t au8NoTbl[4] = {1, 2, 2, 4};
000002  a011              ADR      r0,|L1.72|
000004  6800              LDR      r0,[r0,#0]
;;;388    
;;;389        u32PllReg = CLK->PLLCTL;
000006  9000              STR      r0,[sp,#0]
000008  4810              LDR      r0,|L1.76|
00000a  6a01              LDR      r1,[r0,#0x20]
;;;390    
;;;391        if(u32PllReg & (CLK_PLLCTL_PD_Msk | CLK_PLLCTL_OE_Msk))
00000c  1300              ASRS     r0,r0,#12
00000e  4201              TST      r1,r0
000010  d001              BEQ      |L1.22|
;;;392            return 0;           /* PLL is in power down mode or fix low */
000012  2000              MOVS     r0,#0
                  |L1.20|
;;;393    
;;;394        if(u32PllReg & CLK_PLLCTL_PLLSRC_HIRC)
;;;395            u32FIN = __HIRC;    /* PLL source clock from HIRC */
;;;396        else
;;;397            u32FIN = __HXT;     /* PLL source clock from HXT */
;;;398    
;;;399        if(u32PllReg & CLK_PLLCTL_BP_Msk)
;;;400            return u32FIN;      /* PLL is in bypass mode */
;;;401    
;;;402        /* PLL is output enabled in normal work mode */
;;;403        u32NO = au8NoTbl[((u32PllReg & CLK_PLLCTL_OUTDIV_Msk) >> CLK_PLLCTL_OUTDIV_Pos)];
;;;404        u32NF = ((u32PllReg & CLK_PLLCTL_FBDIV_Msk) >> CLK_PLLCTL_FBDIV_Pos) + 2;
;;;405        u32NR = ((u32PllReg & CLK_PLLCTL_INDIV_Msk) >> CLK_PLLCTL_INDIV_Pos) + 2;
;;;406    
;;;407        /* u32FIN is shifted 2 bits to avoid overflow */
;;;408        u32PllFreq = (((u32FIN >> 2) * u32NF) / (u32NR * u32NO) << 2);
;;;409    
;;;410        return u32PllFreq;
;;;411    }
000014  bd08              POP      {r3,pc}
                  |L1.22|
000016  0308              LSLS     r0,r1,#12             ;394
000018  d501              BPL      |L1.30|
00001a  480d              LDR      r0,|L1.80|
00001c  e000              B        |L1.32|
                  |L1.30|
00001e  480d              LDR      r0,|L1.84|
                  |L1.32|
000020  038a              LSLS     r2,r1,#14             ;399
000022  d4f7              BMI      |L1.20|
000024  040a              LSLS     r2,r1,#16             ;403
000026  0f92              LSRS     r2,r2,#30             ;403
000028  466b              MOV      r3,sp                 ;403
00002a  5c9b              LDRB     r3,[r3,r2]            ;403
00002c  05ca              LSLS     r2,r1,#23             ;404
00002e  0489              LSLS     r1,r1,#18             ;405
000030  0dd2              LSRS     r2,r2,#23             ;404
000032  0ec9              LSRS     r1,r1,#27             ;405
000034  1c89              ADDS     r1,r1,#2              ;405
000036  0880              LSRS     r0,r0,#2              ;408
000038  1c92              ADDS     r2,r2,#2              ;408
00003a  4359              MULS     r1,r3,r1              ;408
00003c  4350              MULS     r0,r2,r0              ;408
00003e  f7fffffe          BL       __aeabi_uidivmod
000042  0080              LSLS     r0,r0,#2              ;408
000044  bd08              POP      {r3,pc}
;;;412    
                          ENDP

000046  0000              DCW      0x0000
                  |L1.72|
000048  01020204          DCB      1,2,2,4
                  |L1.76|
                          DCD      0x50000200
                  |L1.80|
                          DCD      0x01518000
                  |L1.84|
                          DCD      0x00b71b00

                          AREA ||i.UART_ClearIntFlag||, CODE, READONLY, ALIGN=2

                  UART_ClearIntFlag PROC
;;;42      */
;;;43     void UART_ClearIntFlag(UART_T* uart, uint32_t u32InterruptFlag)
000000  054a              LSLS     r2,r1,#21
;;;44     {
000002  d501              BPL      |L2.8|
;;;45     
;;;46         if(u32InterruptFlag & UART_INTSTS_RLSINT_Msk)       /* Clear Receive Line Status Interrupt */
;;;47             uart->FIFOSTS = UART_FIFOSTS_BIF_Msk | UART_FIFOSTS_FEF_Msk | UART_FIFOSTS_FEF_Msk | UART_FIFOSTS_ADDRDETF_Msk;
000004  2268              MOVS     r2,#0x68
000006  6182              STR      r2,[r0,#0x18]
                  |L2.8|
;;;48     
;;;49         if(u32InterruptFlag & UART_INTSTS_MODEMINT_Msk)     /* Clear MODEM Status Interrupt */
000008  050a              LSLS     r2,r1,#20
00000a  d503              BPL      |L2.20|
;;;50             uart->MODEMSTS |= UART_MODEMSTS_CTSDETF_Msk;
00000c  6942              LDR      r2,[r0,#0x14]
00000e  2301              MOVS     r3,#1
000010  431a              ORRS     r2,r2,r3
000012  6142              STR      r2,[r0,#0x14]
                  |L2.20|
;;;51     
;;;52         if(u32InterruptFlag & UART_INTSTS_BUFERRINT_Msk)    /* Clear Buffer Error Interrupt */
000014  048a              LSLS     r2,r1,#18
000016  d501              BPL      |L2.28|
;;;53             uart->FIFOSTS = UART_FIFOSTS_RXOVIF_Msk | UART_FIFOSTS_TXOVIF_Msk;
000018  4a06              LDR      r2,|L2.52|
00001a  6182              STR      r2,[r0,#0x18]
                  |L2.28|
;;;54     
;;;55         if(u32InterruptFlag & UART_INTSTS_WKINT_Msk)        /* Clear Wake-up Interrupt */
00001c  044a              LSLS     r2,r1,#17
00001e  d501              BPL      |L2.36|
;;;56             uart->WKSTS = uart->WKSTS;
000020  6c42              LDR      r2,[r0,#0x44]
000022  6442              STR      r2,[r0,#0x44]
                  |L2.36|
;;;57     
;;;58         if(u32InterruptFlag & UART_INTSTS_LININT_Msk)       /* Clear LIN Bus Interrupt */
000024  0409              LSLS     r1,r1,#16
000026  d503              BPL      |L2.48|
;;;59         {
;;;60             uart->INTSTS = UART_INTSTS_LINIF_Msk;
000028  2180              MOVS     r1,#0x80
00002a  61c1              STR      r1,[r0,#0x1c]
;;;61             uart->LINSTS = uart->LINSTS;
00002c  6b81              LDR      r1,[r0,#0x38]
00002e  6381              STR      r1,[r0,#0x38]
                  |L2.48|
;;;62         }
;;;63     
;;;64     }
000030  4770              BX       lr
;;;65     
                          ENDP

000032  0000              DCW      0x0000
                  |L2.52|
                          DCD      0x01000001

                          AREA ||i.UART_Close||, CODE, READONLY, ALIGN=1

                  UART_Close PROC
;;;75      */
;;;76     void UART_Close(UART_T* uart)
000000  2100              MOVS     r1,#0
;;;77     {
;;;78         uart->INTEN = 0;
000002  6041              STR      r1,[r0,#4]
;;;79     }
000004  4770              BX       lr
;;;80     
                          ENDP


                          AREA ||i.UART_DisableFlowCtrl||, CODE, READONLY, ALIGN=1

                  UART_DisableFlowCtrl PROC
;;;90      */
;;;91     void UART_DisableFlowCtrl(UART_T* uart)
000000  6841              LDR      r1,[r0,#4]
;;;92     {
;;;93         uart->INTEN &= ~(UART_INTEN_ATORTSEN_Msk | UART_INTEN_ATOCTSEN_Msk);
000002  2203              MOVS     r2,#3
000004  0312              LSLS     r2,r2,#12
000006  4391              BICS     r1,r1,r2
000008  6041              STR      r1,[r0,#4]
;;;94     }
00000a  4770              BX       lr
;;;95     
                          ENDP


                          AREA ||i.UART_DisableInt||, CODE, READONLY, ALIGN=2

                  UART_DisableInt PROC
;;;116     */
;;;117    void UART_DisableInt(UART_T*  uart, uint32_t u32InterruptFlag)
000000  6842              LDR      r2,[r0,#4]
;;;118    {
;;;119        /* Disable UART specified interrupt */
;;;120        UART_DISABLE_INT(uart, u32InterruptFlag);
000002  438a              BICS     r2,r2,r1
000004  6042              STR      r2,[r0,#4]
;;;121    
;;;122        /* Disable NVIC UART IRQ */
;;;123        if(uart == UART0)
000006  4b07              LDR      r3,|L5.36|
000008  2201              MOVS     r2,#1
00000a  0312              LSLS     r2,r2,#12
00000c  4906              LDR      r1,|L5.40|
00000e  4298              CMP      r0,r3
000010  d101              BNE      |L5.22|
                  |L5.18|
000012  600a              STR      r2,[r1,#0]            ;118
;;;124            NVIC_DisableIRQ(UART02_IRQn);
;;;125        else if(uart == UART1)
;;;126            NVIC_DisableIRQ(UART1_IRQn);
;;;127        else
;;;128            NVIC_DisableIRQ(UART02_IRQn);
;;;129    }
000014  4770              BX       lr
                  |L5.22|
000016  4b05              LDR      r3,|L5.44|
000018  4298              CMP      r0,r3                 ;125
00001a  d1fa              BNE      |L5.18|
00001c  2001              MOVS     r0,#1                 ;125
00001e  0340              LSLS     r0,r0,#13             ;125
000020  6008              STR      r0,[r1,#0]            ;125
000022  4770              BX       lr
;;;130    
                          ENDP

                  |L5.36|
                          DCD      0x40050000
                  |L5.40|
                          DCD      0xe000e180
                  |L5.44|
                          DCD      0x40150000

                          AREA ||i.UART_EnableFlowCtrl||, CODE, READONLY, ALIGN=1

                  UART_EnableFlowCtrl PROC
;;;149     */
;;;150    void UART_EnableFlowCtrl(UART_T* uart)
000000  6901              LDR      r1,[r0,#0x10]
;;;151    {
;;;152        /* Set RTS pin output is low level active */
;;;153        uart->MODEM |= UART_MODEM_RTSACTLV_Msk;
000002  2201              MOVS     r2,#1
000004  0252              LSLS     r2,r2,#9
000006  4311              ORRS     r1,r1,r2
000008  6101              STR      r1,[r0,#0x10]
;;;154    
;;;155        /* Set CTS pin input is low level active */
;;;156        uart->MODEMSTS |= UART_MODEMSTS_CTSACTLV_Msk;
00000a  6941              LDR      r1,[r0,#0x14]
00000c  1052              ASRS     r2,r2,#1
00000e  4311              ORRS     r1,r1,r2
000010  6141              STR      r1,[r0,#0x14]
;;;157    
;;;158        /* Set RTS and CTS auto flow control enable */
;;;159        uart->INTEN |= UART_INTEN_ATORTSEN_Msk | UART_INTEN_ATOCTSEN_Msk;
000012  6841              LDR      r1,[r0,#4]
000014  2203              MOVS     r2,#3
000016  0312              LSLS     r2,r2,#12
000018  4311              ORRS     r1,r1,r2
00001a  6041              STR      r1,[r0,#4]
;;;160    }
00001c  4770              BX       lr
;;;161    
                          ENDP


                          AREA ||i.UART_EnableInt||, CODE, READONLY, ALIGN=2

                  UART_EnableInt PROC
;;;182     */
;;;183    void UART_EnableInt(UART_T*  uart, uint32_t u32InterruptFlag)
000000  6842              LDR      r2,[r0,#4]
;;;184    {
;;;185    
;;;186        /* Enable UART specified interrupt */
;;;187        UART_ENABLE_INT(uart, u32InterruptFlag);
000002  430a              ORRS     r2,r2,r1
000004  6042              STR      r2,[r0,#4]
;;;188    
;;;189        /* Enable NVIC UART IRQ */
;;;190        if(uart == UART0)
000006  4b07              LDR      r3,|L7.36|
000008  2201              MOVS     r2,#1
00000a  0312              LSLS     r2,r2,#12
00000c  4906              LDR      r1,|L7.40|
00000e  4298              CMP      r0,r3
000010  d101              BNE      |L7.22|
                  |L7.18|
000012  600a              STR      r2,[r1,#0]            ;184
;;;191            NVIC_EnableIRQ(UART02_IRQn);
;;;192        else if(uart == UART1)
;;;193            NVIC_EnableIRQ(UART1_IRQn);
;;;194        else
;;;195            NVIC_EnableIRQ(UART02_IRQn);
;;;196    
;;;197    }
000014  4770              BX       lr
                  |L7.22|
000016  4b05              LDR      r3,|L7.44|
000018  4298              CMP      r0,r3                 ;192
00001a  d1fa              BNE      |L7.18|
00001c  2001              MOVS     r0,#1                 ;192
00001e  0340              LSLS     r0,r0,#13             ;192
000020  6008              STR      r0,[r1,#0]            ;192
000022  4770              BX       lr
;;;198    
                          ENDP

                  |L7.36|
                          DCD      0x40050000
                  |L7.40|
                          DCD      0xe000e100
                  |L7.44|
                          DCD      0x40150000

                          AREA ||i.UART_Open||, CODE, READONLY, ALIGN=2

                  UART_Open PROC
;;;209     */
;;;210    void UART_Open(UART_T* uart, uint32_t u32baudrate)
000000  b5f0              PUSH     {r4-r7,lr}
;;;211    {
000002  4604              MOV      r4,r0
;;;212        uint8_t u8UartClkSrcSel, u8UartClkDivNum;
;;;213        uint32_t u32ClkTbl[4] = {__HXT, 0, __LXT, __HIRC};
000004  481c              LDR      r0,|L8.120|
000006  460d              MOV      r5,r1                 ;211
000008  c80f              LDM      r0,{r0-r3}
00000a  b085              SUB      sp,sp,#0x14           ;211
00000c  466e              MOV      r6,sp
00000e  c60f              STM      r6!,{r0-r3}
;;;214        uint32_t u32Baud_Div = 0;
;;;215    
;;;216        /* Get UART clock source selection */
;;;217        u8UartClkSrcSel = (CLK->CLKSEL1 & CLK_CLKSEL1_UARTSEL_Msk) >> CLK_CLKSEL1_UARTSEL_Pos;
000010  481a              LDR      r0,|L8.124|
000012  6941              LDR      r1,[r0,#0x14]
;;;218    
;;;219        /* Get UART clock divider number */
;;;220        u8UartClkDivNum = (CLK->CLKDIV0 & CLK_CLKDIV0_UARTDIV_Msk) >> CLK_CLKDIV0_UARTDIV_Pos;
000014  6980              LDR      r0,[r0,#0x18]
;;;221    
;;;222        /* Select UART function */
;;;223        uart->FUNCSEL = UART_FUNCSEL_UART;
;;;224    
;;;225        /* Set UART line configuration */
;;;226        uart->LINE = UART_WORD_LEN_8 | UART_PARITY_NONE | UART_STOP_BIT_1;
;;;227    
;;;228        /* Set UART Rx and RTS trigger level */
;;;229        uart->FIFO &= ~(UART_FIFO_RFITL_Msk | UART_FIFO_RTSTRGLV_Msk);
;;;230    
;;;231        /* Get PLL clock frequency if UART clock source selection is PLL */
;;;232        if(u8UartClkSrcSel == 1)
;;;233            u32ClkTbl[u8UartClkSrcSel] = CLK_GetPLLClockFreq();
;;;234    
;;;235        /* Set UART baud rate */
;;;236        if(u32baudrate != 0)
;;;237        {
;;;238            u32Baud_Div = UART_BAUD_MODE2_DIVIDER((u32ClkTbl[u8UartClkSrcSel]) / (u8UartClkDivNum + 1), u32baudrate);
;;;239    
;;;240            if(u32Baud_Div > 0xFFFF)
;;;241                uart->BAUD = (UART_BAUD_MODE0 | UART_BAUD_MODE0_DIVIDER((u32ClkTbl[u8UartClkSrcSel]) / (u8UartClkDivNum + 1), u32baudrate));
;;;242            else
;;;243                uart->BAUD = (UART_BAUD_MODE2 | u32Baud_Div);
;;;244        }
;;;245    }
000016  018a              LSLS     r2,r1,#6
000018  2103              MOVS     r1,#3
00001a  0f96              LSRS     r6,r2,#30
00001c  0500              LSLS     r0,r0,#20
00001e  0f07              LSRS     r7,r0,#28
000020  2000              MOVS     r0,#0                 ;223
000022  6320              STR      r0,[r4,#0x30]         ;223
000024  60e1              STR      r1,[r4,#0xc]          ;226
000026  68a0              LDR      r0,[r4,#8]            ;229
000028  4915              LDR      r1,|L8.128|
00002a  4008              ANDS     r0,r0,r1              ;229
00002c  60a0              STR      r0,[r4,#8]            ;229
00002e  2e01              CMP      r6,#1                 ;232
000030  d102              BNE      |L8.56|
000032  f7fffffe          BL       CLK_GetPLLClockFreq
000036  9001              STR      r0,[sp,#4]            ;233
                  |L8.56|
000038  2d00              CMP      r5,#0                 ;236
00003a  d01b              BEQ      |L8.116|
00003c  00b1              LSLS     r1,r6,#2              ;238
00003e  4668              MOV      r0,sp                 ;238
000040  5840              LDR      r0,[r0,r1]            ;238
000042  1c79              ADDS     r1,r7,#1              ;238
000044  f7fffffe          BL       __aeabi_uidivmod
000048  4606              MOV      r6,r0                 ;238
00004a  0869              LSRS     r1,r5,#1              ;238
00004c  1840              ADDS     r0,r0,r1              ;238
00004e  4629              MOV      r1,r5                 ;238
000050  f7fffffe          BL       __aeabi_uidivmod
000054  490b              LDR      r1,|L8.132|
000056  1e80              SUBS     r0,r0,#2              ;240
000058  4288              CMP      r0,r1                 ;240
00005a  d907              BLS      |L8.108|
00005c  00e9              LSLS     r1,r5,#3              ;241
00005e  1870              ADDS     r0,r6,r1              ;241
000060  4629              MOV      r1,r5                 ;241
000062  f7fffffe          BL       __aeabi_uidivmod
000066  0900              LSRS     r0,r0,#4              ;241
000068  1e80              SUBS     r0,r0,#2              ;241
00006a  e002              B        |L8.114|
                  |L8.108|
00006c  2103              MOVS     r1,#3                 ;243
00006e  0709              LSLS     r1,r1,#28             ;243
000070  4308              ORRS     r0,r0,r1              ;243
                  |L8.114|
000072  6260              STR      r0,[r4,#0x24]         ;243
                  |L8.116|
000074  b005              ADD      sp,sp,#0x14
000076  bdf0              POP      {r4-r7,pc}
;;;246    
                          ENDP

                  |L8.120|
                          DCD      ||.constdata||
                  |L8.124|
                          DCD      0x50000200
                  |L8.128|
                          DCD      0xfff0ff0f
                  |L8.132|
                          DCD      0x0000ffff

                          AREA ||i.UART_Read||, CODE, READONLY, ALIGN=1

                  UART_Read PROC
;;;258     */
;;;259    uint32_t UART_Read(UART_T* uart, uint8_t *pu8RxBuf, uint32_t u32ReadBytes)
000000  b570              PUSH     {r4-r6,lr}
;;;260    {
000002  4604              MOV      r4,r0
;;;261        uint32_t  u32Count, u32delayno;
;;;262    
;;;263        for(u32Count = 0; u32Count < u32ReadBytes; u32Count++)
000004  2000              MOVS     r0,#0
;;;264        {
;;;265            u32delayno = 0;
;;;266    
;;;267            while(uart->FIFOSTS & UART_FIFOSTS_RXEMPTY_Msk)   /* Check RX empty => failed */
;;;268            {
;;;269                u32delayno++;
;;;270                if(u32delayno >= 0x40000000)
000006  2501              MOVS     r5,#1
000008  07ad              LSLS     r5,r5,#30
00000a  e00c              B        |L9.38|
                  |L9.12|
00000c  2300              MOVS     r3,#0                 ;265
00000e  e004              B        |L9.26|
                  |L9.16|
000010  1c5b              ADDS     r3,r3,#1              ;267
000012  42ab              CMP      r3,r5
000014  d301              BCC      |L9.26|
;;;271                    return FALSE;
000016  2000              MOVS     r0,#0
;;;272            }
;;;273            pu8RxBuf[u32Count] = uart->DAT;    /* Get Data from UART RX  */
;;;274        }
;;;275    
;;;276        return u32Count;
;;;277    
;;;278    }
000018  bd70              POP      {r4-r6,pc}
                  |L9.26|
00001a  69a6              LDR      r6,[r4,#0x18]         ;267
00001c  0476              LSLS     r6,r6,#17             ;267
00001e  d4f7              BMI      |L9.16|
000020  6823              LDR      r3,[r4,#0]            ;273
000022  540b              STRB     r3,[r1,r0]            ;273
000024  1c40              ADDS     r0,r0,#1              ;273
                  |L9.38|
000026  4290              CMP      r0,r2                 ;263
000028  d3f0              BCC      |L9.12|
00002a  bd70              POP      {r4-r6,pc}
;;;279    
                          ENDP


                          AREA ||i.UART_SelectIrDAMode||, CODE, READONLY, ALIGN=2

                  UART_SelectIrDAMode PROC
;;;371     */
;;;372    void UART_SelectIrDAMode(UART_T* uart, uint32_t u32Buadrate, uint32_t u32Direction)
000000  b5f7              PUSH     {r0-r2,r4-r7,lr}
;;;373    {
000002  4604              MOV      r4,r0
;;;374        uint8_t u8UartClkSrcSel, u8UartClkDivNum;
;;;375        uint32_t u32ClkTbl[4] = {__HXT, 0, __LXT, __HIRC};
000004  481c              LDR      r0,|L10.120|
000006  b084              SUB      sp,sp,#0x10           ;373
000008  c80f              LDM      r0,{r0-r3}
;;;376        uint32_t u32Baud_Div;
;;;377    
;;;378        /* Select IrDA function mode */
;;;379        uart->FUNCSEL = UART_FUNCSEL_IrDA;
00000a  466d              MOV      r5,sp
00000c  c50f              STM      r5!,{r0-r3}
00000e  2602              MOVS     r6,#2
000010  6326              STR      r6,[r4,#0x30]
;;;380    
;;;381        /* Get UART clock source selection */
;;;382        u8UartClkSrcSel = (CLK->CLKSEL1 & CLK_CLKSEL1_UARTSEL_Msk) >> CLK_CLKSEL1_UARTSEL_Pos;
000012  481a              LDR      r0,|L10.124|
000014  6941              LDR      r1,[r0,#0x14]
;;;383    
;;;384        /* Get UART clock divider number */
;;;385        u8UartClkDivNum = (CLK->CLKDIV0 & CLK_CLKDIV0_UARTDIV_Msk) >> CLK_CLKDIV0_UARTDIV_Pos;
000016  6980              LDR      r0,[r0,#0x18]
;;;386    
;;;387        /* Get PLL clock frequency if UART clock source selection is PLL */
;;;388        if(u8UartClkSrcSel == 1)
;;;389            u32ClkTbl[u8UartClkSrcSel] = CLK_GetPLLClockFreq();
;;;390    
;;;391        /* Set UART IrDA baud rate in mode 0 */
;;;392        if(u32Buadrate != 0)
;;;393        {
;;;394            u32Baud_Div = UART_BAUD_MODE0_DIVIDER((u32ClkTbl[u8UartClkSrcSel]) / (u8UartClkDivNum + 1), u32Buadrate);
;;;395    
;;;396            if(u32Baud_Div < 0xFFFF)
;;;397                uart->BAUD = (UART_BAUD_MODE0 | u32Baud_Div);
;;;398        }
;;;399    
;;;400        /* Configure IrDA relative settings */
;;;401        if(u32Direction == UART_IRDA_RXEN)
;;;402        {
;;;403            uart->IRDA |= UART_IRDA_RXINV_Msk;     //Rx signal is inverse
;;;404            uart->IRDA &= ~UART_IRDA_TXEN_Msk;
;;;405        }
;;;406        else
;;;407        {
;;;408            uart->IRDA &= ~UART_IRDA_TXINV_Msk;    //Tx signal is not inverse
;;;409            uart->IRDA |= UART_IRDA_TXEN_Msk;
;;;410        }
;;;411    
;;;412    }
000018  0189              LSLS     r1,r1,#6
00001a  0f8d              LSRS     r5,r1,#30
00001c  0500              LSLS     r0,r0,#20
00001e  0f07              LSRS     r7,r0,#28
000020  2d01              CMP      r5,#1                 ;388
000022  d102              BNE      |L10.42|
000024  f7fffffe          BL       CLK_GetPLLClockFreq
000028  9001              STR      r0,[sp,#4]            ;389
                  |L10.42|
00002a  9805              LDR      r0,[sp,#0x14]         ;392
00002c  2800              CMP      r0,#0                 ;392
00002e  d011              BEQ      |L10.84|
000030  00a9              LSLS     r1,r5,#2              ;394
000032  4668              MOV      r0,sp                 ;394
000034  5840              LDR      r0,[r0,r1]            ;394
000036  1c79              ADDS     r1,r7,#1              ;394
000038  f7fffffe          BL       __aeabi_uidivmod
00003c  9905              LDR      r1,[sp,#0x14]         ;394
00003e  00c9              LSLS     r1,r1,#3              ;394
000040  1840              ADDS     r0,r0,r1              ;394
000042  9905              LDR      r1,[sp,#0x14]         ;394
000044  f7fffffe          BL       __aeabi_uidivmod
000048  0900              LSRS     r0,r0,#4              ;394
00004a  490d              LDR      r1,|L10.128|
00004c  1e80              SUBS     r0,r0,#2              ;396
00004e  4288              CMP      r0,r1                 ;396
000050  d200              BCS      |L10.84|
000052  6260              STR      r0,[r4,#0x24]         ;397
                  |L10.84|
000054  9806              LDR      r0,[sp,#0x18]         ;401
000056  2800              CMP      r0,#0                 ;401
000058  6aa0              LDR      r0,[r4,#0x28]         ;408
00005a  d007              BEQ      |L10.108|
00005c  2120              MOVS     r1,#0x20              ;408
00005e  4388              BICS     r0,r0,r1              ;408
000060  62a0              STR      r0,[r4,#0x28]         ;408
000062  6aa0              LDR      r0,[r4,#0x28]         ;409
000064  4330              ORRS     r0,r0,r6              ;409
                  |L10.102|
000066  62a0              STR      r0,[r4,#0x28]         ;404
000068  b007              ADD      sp,sp,#0x1c
00006a  bdf0              POP      {r4-r7,pc}
                  |L10.108|
00006c  2140              MOVS     r1,#0x40              ;403
00006e  4308              ORRS     r0,r0,r1              ;403
000070  62a0              STR      r0,[r4,#0x28]         ;403
000072  6aa0              LDR      r0,[r4,#0x28]         ;404
000074  43b0              BICS     r0,r0,r6              ;404
000076  e7f6              B        |L10.102|
;;;413    
                          ENDP

                  |L10.120|
                          DCD      ||.constdata||+0x20
                  |L10.124|
                          DCD      0x50000200
                  |L10.128|
                          DCD      0x0000ffff

                          AREA ||i.UART_SelectLINMode||, CODE, READONLY, ALIGN=1

                  UART_SelectLINMode PROC
;;;452     */
;;;453    void UART_SelectLINMode(UART_T* uart, uint32_t u32Mode, uint32_t u32BreakLength)
000000  b510              PUSH     {r4,lr}
;;;454    {
;;;455        /* Select LIN function mode */
;;;456        uart->FUNCSEL = UART_FUNCSEL_LIN;
000002  2301              MOVS     r3,#1
000004  6303              STR      r3,[r0,#0x30]
;;;457    
;;;458        /* Select LIN function setting : Tx enable, Rx enable and break field length */
;;;459        uart->ALTCTL &= ~(UART_ALTCTL_LINTXEN_Msk | UART_ALTCTL_LINRXEN_Msk | UART_ALTCTL_BRKFL_Msk);
000006  6ac3              LDR      r3,[r0,#0x2c]
000008  24cf              MOVS     r4,#0xcf
00000a  43a3              BICS     r3,r3,r4
00000c  62c3              STR      r3,[r0,#0x2c]
;;;460        uart->ALTCTL |= (u32Mode | (u32BreakLength << UART_ALTCTL_BRKFL_Pos));
00000e  6ac3              LDR      r3,[r0,#0x2c]
000010  4311              ORRS     r1,r1,r2
000012  430b              ORRS     r3,r3,r1
000014  62c3              STR      r3,[r0,#0x2c]
;;;461    }
000016  bd10              POP      {r4,pc}
;;;462    
                          ENDP


                          AREA ||i.UART_SelectRS485Mode||, CODE, READONLY, ALIGN=2

                  UART_SelectRS485Mode PROC
;;;428     */
;;;429    void UART_SelectRS485Mode(UART_T* uart, uint32_t u32Mode, uint32_t u32Addr)
000000  b510              PUSH     {r4,lr}
;;;430    {
;;;431        /* Select UART RS485 function mode */
;;;432        uart->FUNCSEL = UART_FUNCSEL_RS485;
000002  2303              MOVS     r3,#3
000004  6303              STR      r3,[r0,#0x30]
;;;433    
;;;434        /* Set RS585 configuration */
;;;435        uart->ALTCTL &= ~(UART_ALTCTL_RS485NMM_Msk | UART_ALTCTL_RS485AUD_Msk | UART_ALTCTL_RS485AAD_Msk | UART_ALTCTL_ADDRMV_Msk);
000006  6ac3              LDR      r3,[r0,#0x2c]
000008  4c04              LDR      r4,|L12.28|
00000a  4023              ANDS     r3,r3,r4
00000c  62c3              STR      r3,[r0,#0x2c]
;;;436        uart->ALTCTL |= (u32Mode | (u32Addr << UART_ALTCTL_ADDRMV_Pos));
00000e  6ac3              LDR      r3,[r0,#0x2c]
000010  0612              LSLS     r2,r2,#24
000012  430a              ORRS     r2,r2,r1
000014  4313              ORRS     r3,r3,r2
000016  62c3              STR      r3,[r0,#0x2c]
;;;437    }
000018  bd10              POP      {r4,pc}
;;;438    
                          ENDP

00001a  0000              DCW      0x0000
                  |L12.28|
                          DCD      0x00fff8ff

                          AREA ||i.UART_SetLine_Config||, CODE, READONLY, ALIGN=2

                  UART_SetLine_Config PROC
;;;306     */
;;;307    void UART_SetLine_Config(UART_T* uart, uint32_t u32baudrate, uint32_t u32data_width, uint32_t u32parity, uint32_t  u32stop_bits)
000000  b5ff              PUSH     {r0-r7,lr}
;;;308    {
000002  4605              MOV      r5,r0
;;;309        uint8_t u8UartClkSrcSel, u8UartClkDivNum;
;;;310        uint32_t u32ClkTbl[4] = {__HXT, 0, __LXT, __HIRC};
000004  481b              LDR      r0,|L13.116|
000006  460c              MOV      r4,r1                 ;308
000008  c80f              LDM      r0,{r0-r3}
00000a  b085              SUB      sp,sp,#0x14           ;308
00000c  466e              MOV      r6,sp
00000e  c60f              STM      r6!,{r0-r3}
;;;311        uint32_t u32Baud_Div = 0;
;;;312    
;;;313        /* Get UART clock source selection */
;;;314        u8UartClkSrcSel = (CLK->CLKSEL1 & CLK_CLKSEL1_UARTSEL_Msk) >> CLK_CLKSEL1_UARTSEL_Pos;
000010  4819              LDR      r0,|L13.120|
000012  6941              LDR      r1,[r0,#0x14]
;;;315    
;;;316        /* Get UART clock divider number */
;;;317        u8UartClkDivNum = (CLK->CLKDIV0 & CLK_CLKDIV0_UARTDIV_Msk) >> CLK_CLKDIV0_UARTDIV_Pos;
000014  6980              LDR      r0,[r0,#0x18]
;;;318    
;;;319        /* Get PLL clock frequency if UART clock source selection is PLL */
;;;320        if(u8UartClkSrcSel == 1)
;;;321            u32ClkTbl[u8UartClkSrcSel] = CLK_GetPLLClockFreq();
;;;322    
;;;323        /* Set UART baud rate */
;;;324        if(u32baudrate != 0)
;;;325        {
;;;326            u32Baud_Div = UART_BAUD_MODE2_DIVIDER((u32ClkTbl[u8UartClkSrcSel]) / (u8UartClkDivNum + 1), u32baudrate);
;;;327    
;;;328            if(u32Baud_Div > 0xFFFF)
;;;329                uart->BAUD = (UART_BAUD_MODE0 | UART_BAUD_MODE0_DIVIDER((u32ClkTbl[u8UartClkSrcSel]) / (u8UartClkDivNum + 1), u32baudrate));
;;;330            else
;;;331                uart->BAUD = (UART_BAUD_MODE2 | u32Baud_Div);
;;;332        }
;;;333    
;;;334        /* Set UART line configuration */
;;;335        uart->LINE = u32data_width | u32parity | u32stop_bits;
;;;336    }
000016  0189              LSLS     r1,r1,#6
000018  0f8e              LSRS     r6,r1,#30
00001a  0500              LSLS     r0,r0,#20
00001c  0f07              LSRS     r7,r0,#28
00001e  2e01              CMP      r6,#1                 ;320
000020  d102              BNE      |L13.40|
000022  f7fffffe          BL       CLK_GetPLLClockFreq
000026  9001              STR      r0,[sp,#4]            ;321
                  |L13.40|
000028  2c00              CMP      r4,#0                 ;324
00002a  d01b              BEQ      |L13.100|
00002c  00b1              LSLS     r1,r6,#2              ;326
00002e  4668              MOV      r0,sp                 ;326
000030  5840              LDR      r0,[r0,r1]            ;326
000032  1c79              ADDS     r1,r7,#1              ;326
000034  f7fffffe          BL       __aeabi_uidivmod
000038  4606              MOV      r6,r0                 ;326
00003a  0861              LSRS     r1,r4,#1              ;326
00003c  1840              ADDS     r0,r0,r1              ;326
00003e  4621              MOV      r1,r4                 ;326
000040  f7fffffe          BL       __aeabi_uidivmod
000044  490d              LDR      r1,|L13.124|
000046  1e80              SUBS     r0,r0,#2              ;328
000048  4288              CMP      r0,r1                 ;328
00004a  d907              BLS      |L13.92|
00004c  00e1              LSLS     r1,r4,#3              ;329
00004e  1870              ADDS     r0,r6,r1              ;329
000050  4621              MOV      r1,r4                 ;329
000052  f7fffffe          BL       __aeabi_uidivmod
000056  0900              LSRS     r0,r0,#4              ;329
000058  1e80              SUBS     r0,r0,#2              ;329
00005a  e002              B        |L13.98|
                  |L13.92|
00005c  2103              MOVS     r1,#3                 ;331
00005e  0709              LSLS     r1,r1,#28             ;331
000060  4308              ORRS     r0,r0,r1              ;331
                  |L13.98|
000062  6268              STR      r0,[r5,#0x24]         ;329
                  |L13.100|
000064  9908              LDR      r1,[sp,#0x20]         ;335
000066  9807              LDR      r0,[sp,#0x1c]         ;335
000068  4308              ORRS     r0,r0,r1              ;335
00006a  990e              LDR      r1,[sp,#0x38]         ;335
00006c  4308              ORRS     r0,r0,r1              ;335
00006e  60e8              STR      r0,[r5,#0xc]          ;335
000070  b009              ADD      sp,sp,#0x24
000072  bdf0              POP      {r4-r7,pc}
;;;337    
                          ENDP

                  |L13.116|
                          DCD      ||.constdata||+0x10
                  |L13.120|
                          DCD      0x50000200
                  |L13.124|
                          DCD      0x0000ffff

                          AREA ||i.UART_SetTimeoutCnt||, CODE, READONLY, ALIGN=1

                  UART_SetTimeoutCnt PROC
;;;348     */
;;;349    void UART_SetTimeoutCnt(UART_T* uart, uint32_t u32TOC)
000000  6a02              LDR      r2,[r0,#0x20]
;;;350    {
;;;351        /* Set time-out interrupt comparator */
;;;352        uart->TOUT = (uart->TOUT & ~UART_TOUT_TOIC_Msk) | (u32TOC);
000002  0a12              LSRS     r2,r2,#8
000004  0212              LSLS     r2,r2,#8
000006  430a              ORRS     r2,r2,r1
000008  6202              STR      r2,[r0,#0x20]
;;;353    
;;;354        /* Set time-out counter enable */
;;;355        uart->INTEN |= UART_INTEN_TOCNTEN_Msk;
00000a  6841              LDR      r1,[r0,#4]
00000c  2201              MOVS     r2,#1
00000e  02d2              LSLS     r2,r2,#11
000010  4311              ORRS     r1,r1,r2
000012  6041              STR      r1,[r0,#4]
;;;356    }
000014  4770              BX       lr
;;;357    
                          ENDP


                          AREA ||i.UART_Write||, CODE, READONLY, ALIGN=1

                  UART_Write PROC
;;;474     */
;;;475    uint32_t UART_Write(UART_T* uart, uint8_t *pu8TxBuf, uint32_t u32WriteBytes)
000000  b570              PUSH     {r4-r6,lr}
;;;476    {
000002  4604              MOV      r4,r0
;;;477        uint32_t  u32Count, u32delayno;
;;;478    
;;;479        for(u32Count = 0; u32Count != u32WriteBytes; u32Count++)
000004  2000              MOVS     r0,#0
;;;480        {
;;;481            u32delayno = 0;
;;;482            while((uart->FIFOSTS & UART_FIFOSTS_TXEMPTYF_Msk) == 0)   /* Wait Tx empty and Time-out manner */
;;;483            {
;;;484                u32delayno++;
;;;485                if(u32delayno >= 0x40000000)
000006  2501              MOVS     r5,#1
000008  07ad              LSLS     r5,r5,#30
00000a  e00c              B        |L15.38|
                  |L15.12|
00000c  2300              MOVS     r3,#0                 ;481
00000e  e004              B        |L15.26|
                  |L15.16|
000010  1c5b              ADDS     r3,r3,#1              ;482
000012  42ab              CMP      r3,r5
000014  d301              BCC      |L15.26|
;;;486                    return FALSE;
000016  2000              MOVS     r0,#0
;;;487            }
;;;488            uart->DAT = pu8TxBuf[u32Count];    /* Send UART Data from buffer */
;;;489        }
;;;490    
;;;491        return u32Count;
;;;492    
;;;493    }
000018  bd70              POP      {r4-r6,pc}
                  |L15.26|
00001a  69a6              LDR      r6,[r4,#0x18]         ;482
00001c  00f6              LSLS     r6,r6,#3              ;482
00001e  d5f7              BPL      |L15.16|
000020  5c0b              LDRB     r3,[r1,r0]            ;488
000022  6023              STR      r3,[r4,#0]            ;488
000024  1c40              ADDS     r0,r0,#1              ;488
                  |L15.38|
000026  4290              CMP      r0,r2                 ;479
000028  d1f0              BNE      |L15.12|
00002a  bd70              POP      {r4-r6,pc}
;;;494    
                          ENDP


                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                          DCD      0x00b71b00
                          DCD      0x00000000
                          DCD      0x00008000
                          DCD      0x01518000
                          DCD      0x00b71b00
                          DCD      0x00000000
                          DCD      0x00008000
                          DCD      0x01518000
                          DCD      0x00b71b00
                          DCD      0x00000000
                          DCD      0x00008000
                          DCD      0x01518000

;*** Start embedded assembler ***

#line 1 "..\\lib\\StdDriver\\src\\uart.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_uart_c_f12f5b44____REV16|
#line 388 "..\\lib\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___6_uart_c_f12f5b44____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_uart_c_f12f5b44____REVSH|
#line 402
|__asm___6_uart_c_f12f5b44____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
