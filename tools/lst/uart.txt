; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\uart.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\uart.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\lib\CMSIS\Include -I..\lib\Device\Nuvoton\NUC029xGE\Include -I..\lib\StdDriver\inc -I..\src\core\include -I..\src\driver\include -I..\src\io\include -D__UVISION_VERSION=522 --omf_browse=.\obj\uart.crf ..\src\io\uart.c]
                          THUMB

                          AREA ||i.Debug_Uart_Init||, CODE, READONLY, ALIGN=2

                  Debug_Uart_Init PROC
;;;332    /*---------------------------------------------------------------------------------------------------------*/
;;;333    int32_t Debug_Uart_Init(void)
000000  b510              PUSH     {r4,lr}
;;;334    {
;;;335    	printf("debug uart init!\n");
000002  a005              ADR      r0,|L1.24|
000004  f7fffffe          BL       __2printf
;;;336        /* Init UART0 for printf and test */
;;;337        UART0_Init();
000008  f7fffffe          BL       UART0_Init
;;;338    	
;;;339        /* Enable UART RDA Interrupt */
;;;340        UART_EnableInt(UART0, UART_INTEN_RDAIEN_Msk );
00000c  2101              MOVS     r1,#1
00000e  4807              LDR      r0,|L1.44|
000010  f7fffffe          BL       UART_EnableInt
;;;341    
;;;342    
;;;343        return 0;
000014  2000              MOVS     r0,#0
;;;344    }
000016  bd10              POP      {r4,pc}
;;;345    
                          ENDP

                  |L1.24|
000018  64656275          DCB      "debug uart init!\n",0
00001c  67207561
000020  72742069
000024  6e697421
000028  0a00    
00002a  00                DCB      0
00002b  00                DCB      0
                  |L1.44|
                          DCD      0x40050000

                          AREA ||i.Transfer_Uart_Init||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  Transfer_Uart_Init PROC
;;;310    /*---------------------------------------------------------------------------------------------------------*/
;;;311    int32_t Transfer_Uart_Init(void)
000000  b510              PUSH     {r4,lr}
;;;312    {
;;;313    	printf("transfer uart init!\n");
000002  a00c              ADR      r0,|L2.52|
000004  f7fffffe          BL       __2printf
;;;314        /* Init UART0 for printf and test */
;;;315        UART1_Init();
000008  f7fffffe          BL       UART1_Init
;;;316    
;;;317        /* Init UART0 for printf and test */
;;;318        UART2_Init();
00000c  f7fffffe          BL       UART2_Init
;;;319    	
;;;320        printf("\n\nCPU @ %d Hz\n", SystemCoreClock);
000010  480e              LDR      r0,|L2.76|
000012  6801              LDR      r1,[r0,#0]  ; SystemCoreClock
000014  a00e              ADR      r0,|L2.80|
000016  f7fffffe          BL       __2printf
;;;321        printf("\nUART Sample Program\n");
00001a  a011              ADR      r0,|L2.96|
00001c  f7fffffe          BL       __2printf
;;;322    	
;;;323        /* Enable UART1 UART2 RDA Interrupt */
;;;324    	UART_EnableInt(UART2, UART_INTEN_RDAIEN_Msk );
000020  2101              MOVS     r1,#1
000022  4815              LDR      r0,|L2.120|
000024  f7fffffe          BL       UART_EnableInt
;;;325    	UART_EnableInt(UART1, UART_INTEN_RDAIEN_Msk );
000028  2101              MOVS     r1,#1
00002a  4814              LDR      r0,|L2.124|
00002c  f7fffffe          BL       UART_EnableInt
;;;326    
;;;327        return 0;
000030  2000              MOVS     r0,#0
;;;328    }
000032  bd10              POP      {r4,pc}
;;;329    
                          ENDP

                  |L2.52|
000034  7472616e          DCB      "transfer uart init!\n",0
000038  73666572
00003c  20756172
000040  7420696e
000044  6974210a
000048  00      
000049  00                DCB      0
00004a  00                DCB      0
00004b  00                DCB      0
                  |L2.76|
                          DCD      SystemCoreClock
                  |L2.80|
000050  0a0a4350          DCB      "\n\nCPU @ %d Hz\n",0
000054  55204020
000058  25642048
00005c  7a0a00  
00005f  00                DCB      0
                  |L2.96|
000060  0a554152          DCB      "\nUART Sample Program\n",0
000064  54205361
000068  6d706c65
00006c  2050726f
000070  6772616d
000074  0a00    
000076  00                DCB      0
000077  00                DCB      0
                  |L2.120|
                          DCD      0x40154000
                  |L2.124|
                          DCD      0x40150000

                          AREA ||i.UART02_IRQHandler||, CODE, READONLY, ALIGN=1

                  UART02_IRQHandler PROC
;;;292    /*---------------------------------------------------------------------------------------------------------*/
;;;293    void UART02_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;294    {
;;;295        UART_TEST_HANDLE();
000002  f7fffffe          BL       UART_TEST_HANDLE
;;;296    }
000006  bd10              POP      {r4,pc}
;;;297    
                          ENDP


                          AREA ||i.UART0_Init||, CODE, READONLY, ALIGN=2

                  UART0_Init PROC
;;;44     
;;;45     void UART0_Init()
000000  2005              MOVS     r0,#5
;;;46     {
;;;47         /* Reset UART0 */
;;;48         SYS->IPRST1 |=  SYS_IPRST1_UART0RST_Msk;
000002  0700              LSLS     r0,r0,#28
000004  68c2              LDR      r2,[r0,#0xc]
000006  2101              MOVS     r1,#1
000008  0409              LSLS     r1,r1,#16
00000a  430a              ORRS     r2,r2,r1
00000c  60c2              STR      r2,[r0,#0xc]
;;;49         SYS->IPRST1 &= ~SYS_IPRST1_UART0RST_Msk;
00000e  68c2              LDR      r2,[r0,#0xc]
000010  438a              BICS     r2,r2,r1
000012  60c2              STR      r2,[r0,#0xc]
;;;50     
;;;51         /* Configure UART0 and set UART0 baud rate */
;;;52         UART0->BAUD = UART_BAUD_MODE2 | UART_BAUD_MODE2_DIVIDER(__HXT, 115200);
000014  4803              LDR      r0,|L4.36|
000016  4902              LDR      r1,|L4.32|
000018  6241              STR      r1,[r0,#0x24]
;;;53         UART0->LINE = UART_WORD_LEN_8 | UART_PARITY_NONE | UART_STOP_BIT_1;
00001a  2103              MOVS     r1,#3
00001c  60c1              STR      r1,[r0,#0xc]
;;;54     }
00001e  4770              BX       lr
;;;55     
                          ENDP

                  |L4.32|
                          DCD      0x30000066
                  |L4.36|
                          DCD      0x40050000

                          AREA ||i.UART1_IRQHandler||, CODE, READONLY, ALIGN=1

                  UART1_IRQHandler PROC
;;;301    /*---------------------------------------------------------------------------------------------------------*/
;;;302    void UART1_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;303    {
;;;304        UART_4G_HANDLE();
000002  f7fffffe          BL       UART_4G_HANDLE
;;;305    }
000006  bd10              POP      {r4,pc}
;;;306    
                          ENDP


                          AREA ||i.UART1_Init||, CODE, READONLY, ALIGN=2

                  UART1_Init PROC
;;;55     
;;;56     void UART1_Init()
000000  2005              MOVS     r0,#5
;;;57     {
;;;58         /* Reset UART1 */
;;;59         SYS->IPRST1 |=  SYS_IPRST1_UART1RST_Msk;
000002  0700              LSLS     r0,r0,#28
000004  68c2              LDR      r2,[r0,#0xc]
000006  2101              MOVS     r1,#1
000008  0449              LSLS     r1,r1,#17
00000a  430a              ORRS     r2,r2,r1
00000c  60c2              STR      r2,[r0,#0xc]
;;;60         SYS->IPRST1 &= ~SYS_IPRST1_UART1RST_Msk;
00000e  68c2              LDR      r2,[r0,#0xc]
000010  438a              BICS     r2,r2,r1
000012  60c2              STR      r2,[r0,#0xc]
;;;61     
;;;62         /* Configure UART0 and set UART0 baud rate */
;;;63         UART1->BAUD = UART_BAUD_MODE2 | UART_BAUD_MODE2_DIVIDER(__HXT, 19200);
000014  4803              LDR      r0,|L6.36|
000016  4902              LDR      r1,|L6.32|
000018  6241              STR      r1,[r0,#0x24]
;;;64         UART1->LINE = UART_WORD_LEN_8 | UART_PARITY_NONE | UART_STOP_BIT_1;
00001a  2103              MOVS     r1,#3
00001c  60c1              STR      r1,[r0,#0xc]
;;;65     }
00001e  4770              BX       lr
;;;66     
                          ENDP

                  |L6.32|
                          DCD      0x3000026f
                  |L6.36|
                          DCD      0x40150000

                          AREA ||i.UART2_Init||, CODE, READONLY, ALIGN=2

                  UART2_Init PROC
;;;66     
;;;67     void UART2_Init()
000000  2005              MOVS     r0,#5
;;;68     {
;;;69         /* Reset UART0 */
;;;70         SYS->IPRST1 |=  SYS_IPRST1_UART2RST_Msk;
000002  0700              LSLS     r0,r0,#28
000004  68c2              LDR      r2,[r0,#0xc]
000006  2101              MOVS     r1,#1
000008  0489              LSLS     r1,r1,#18
00000a  430a              ORRS     r2,r2,r1
00000c  60c2              STR      r2,[r0,#0xc]
;;;71         SYS->IPRST1 &= ~SYS_IPRST1_UART2RST_Msk;
00000e  68c2              LDR      r2,[r0,#0xc]
000010  438a              BICS     r2,r2,r1
000012  60c2              STR      r2,[r0,#0xc]
;;;72     
;;;73         /* Configure UART0 and set UART0 baud rate */
;;;74         UART2->BAUD = UART_BAUD_MODE2 | UART_BAUD_MODE2_DIVIDER(__HXT, 115200);
000014  4803              LDR      r0,|L7.36|
000016  4902              LDR      r1,|L7.32|
000018  6241              STR      r1,[r0,#0x24]
;;;75         UART2->LINE = UART_WORD_LEN_8 | UART_PARITY_NONE | UART_STOP_BIT_1;
00001a  2103              MOVS     r1,#3
00001c  60c1              STR      r1,[r0,#0xc]
;;;76     }
00001e  4770              BX       lr
;;;77     
                          ENDP

                  |L7.32|
                          DCD      0x30000066
                  |L7.36|
                          DCD      0x40154000

                          AREA ||i.UART_4G_HANDLE||, CODE, READONLY, ALIGN=2

                  UART_4G_HANDLE PROC
;;;200    /*---------------------------------------------------------------------------------------------------------*/
;;;201    void UART_4G_HANDLE(void)
000000  b570              PUSH     {r4-r6,lr}
;;;202    {
;;;203        uint8_t u8InChar = 0xFF;
;;;204    	static uint8_t nRxIndex=0;
;;;205    	
;;;206    	UART_ClearIntFlag(UART1, UART_INTEN_RDAIEN_Msk);
000002  4c24              LDR      r4,|L8.148|
000004  2101              MOVS     r1,#1
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       UART_ClearIntFlag
;;;207    
;;;208    	if(UART_IS_RX_READY(UART1))
00000c  69e1              LDR      r1,[r4,#0x1c]
00000e  07c9              LSLS     r1,r1,#31
000010  d011              BEQ      |L8.54|
;;;209        {
;;;210    	    u8InChar = UART_READ(UART1);
000012  6820              LDR      r0,[r4,#0]
;;;211    		u8InChar = UUART_WRITE(UUART0,u8InChar);
000014  4920              LDR      r1,|L8.152|
000016  b2c0              UXTB     r0,r0                 ;210
000018  6308              STR      r0,[r1,#0x30]
;;;212    		switch (nRxIndex)
00001a  4c20              LDR      r4,|L8.156|
00001c  2500              MOVS     r5,#0
00001e  78e2              LDRB     r2,[r4,#3]  ; nRxIndex
000020  2101              MOVS     r1,#1                 ;206
000022  0013              MOVS     r3,r2
000024  f7fffffe          BL       __ARM_common_switch8
000028  0805080f          DCB      0x08,0x05,0x08,0x0f
00002c  161a1d20          DCB      0x16,0x1a,0x1d,0x20
000030  2725              DCB      0x27,0x25
;;;213    		{
;;;214    			case 0: 
;;;215    				
;;;216    				if(u8InChar==0xff) nRxIndex=1;
000032  28ff              CMP      r0,#0xff
000034  d02b              BEQ      |L8.142|
                  |L8.54|
;;;217    				break;
;;;218    				
;;;219    			case 1: 
;;;220    				if(u8InChar==0x55) nRxIndex=2;
;;;221    				else
;;;222    				{
;;;223    					if(u8InChar==0xff) nRxIndex=1;
;;;224    					else 
;;;225    						nRxIndex=0;
;;;226    				}
;;;227    				break;
;;;228    
;;;229    			case 2: 
;;;230    				if(u8InChar==0x04) nRxIndex=3;
;;;231    				else
;;;232    				{
;;;233    					if(u8InChar==0xff) nRxIndex=1;
;;;234    					else 
;;;235    						nRxIndex=0;
;;;236    				}
;;;237    				break;
;;;238    				
;;;239    			case 3: 
;;;240    				if(u8InChar==0x80) nRxIndex=4;
;;;241    				else
;;;242    				{
;;;243    					if(u8InChar==0xff) nRxIndex=1;
;;;244    					else 
;;;245    						nRxIndex=0;
;;;246    				}
;;;247    				break;
;;;248    			
;;;249    			case 4:  
;;;250    				uart1_cmd = u8InChar;
;;;251    				
;;;252    				nRxIndex=5;
;;;253    				break;	
;;;254    				
;;;255    			case 5:
;;;256    				uart1_dat = u8InChar;
;;;257    				
;;;258    				nRxIndex=6;
;;;259    				break;
;;;260    				
;;;261    			case 6:  
;;;262    				if(u8InChar==0x00) nRxIndex=7;
;;;263    				else
;;;264    				{
;;;265    					if(u8InChar==0xff) nRxIndex=1;
;;;266    					else 
;;;267    						nRxIndex=0;
;;;268    				}
;;;269    				break;	
;;;270    				
;;;271    			case 7:
;;;272    				if(u8InChar==0xff) nRxIndex=1;
;;;273    				else 
;;;274    				{
;;;275    					Core_Msg_Send(MSG_4G_SYS_STATE_IND, uart1_cmd ,uart1_dat,0);
;;;276    					uart1_cmd = 0xFF;
;;;277    					uart1_dat = 0xFF;
;;;278    					nRxIndex=0;
;;;279    				}
;;;280    				break;
;;;281    					
;;;282    			default:
;;;283    				nRxIndex=0;
;;;284    				break;
;;;285    		} 
;;;286    	}
;;;287    
;;;288    }
000036  bd70              POP      {r4-r6,pc}
000038  2855              CMP      r0,#0x55              ;220
00003a  d002              BEQ      |L8.66|
00003c  28ff              CMP      r0,#0xff              ;223
00003e  d0fa              BEQ      |L8.54|
000040  e017              B        |L8.114|
                  |L8.66|
000042  2002              MOVS     r0,#2                 ;220
000044  e013              B        |L8.110|
000046  2804              CMP      r0,#4                 ;230
000048  d101              BNE      |L8.78|
00004a  2003              MOVS     r0,#3                 ;230
00004c  e00f              B        |L8.110|
                  |L8.78|
00004e  28ff              CMP      r0,#0xff              ;233
000050  d01d              BEQ      |L8.142|
000052  e00e              B        |L8.114|
000054  2880              CMP      r0,#0x80              ;240
000056  d1fa              BNE      |L8.78|
000058  2004              MOVS     r0,#4                 ;240
00005a  e008              B        |L8.110|
00005c  7020              STRB     r0,[r4,#0]            ;250
00005e  2005              MOVS     r0,#5                 ;252
000060  e005              B        |L8.110|
000062  7060              STRB     r0,[r4,#1]            ;256
000064  2006              MOVS     r0,#6                 ;258
000066  e002              B        |L8.110|
000068  2800              CMP      r0,#0                 ;262
00006a  d1f0              BNE      |L8.78|
00006c  2007              MOVS     r0,#7                 ;262
                  |L8.110|
00006e  70e0              STRB     r0,[r4,#3]            ;262
000070  bd70              POP      {r4-r6,pc}
                  |L8.114|
000072  70e5              STRB     r5,[r4,#3]            ;267
000074  bd70              POP      {r4-r6,pc}
000076  28ff              CMP      r0,#0xff              ;272
000078  d009              BEQ      |L8.142|
00007a  7862              LDRB     r2,[r4,#1]            ;275  ; uart1_dat
00007c  2300              MOVS     r3,#0                 ;275
00007e  7821              LDRB     r1,[r4,#0]            ;275  ; uart1_cmd
000080  2001              MOVS     r0,#1                 ;275
000082  f7fffffe          BL       Core_Msg_Send
000086  20ff              MOVS     r0,#0xff              ;276
000088  7020              STRB     r0,[r4,#0]            ;276
00008a  7060              STRB     r0,[r4,#1]            ;277
00008c  e7f1              B        |L8.114|
                  |L8.142|
00008e  70e1              STRB     r1,[r4,#3]            ;272
000090  bd70              POP      {r4-r6,pc}
;;;289    
                          ENDP

000092  0000              DCW      0x0000
                  |L8.148|
                          DCD      0x40150000
                  |L8.152|
                          DCD      0x40070000
                  |L8.156|
                          DCD      ||.data||

                          AREA ||i.UART_TEST_HANDLE||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                  UART_TEST_HANDLE PROC
;;;80     /*---------------------------------------------------------------------------------------------------------*/
;;;81     void UART_TEST_HANDLE()
000000  b5f8              PUSH     {r3-r7,lr}
;;;82     {
;;;83         uint8_t u8InChar = 0xFF;	
;;;84     	static uint8_t nRxIndex=0;
;;;85     	
;;;86         //uint32_t u32IntSts = UART0->INTSTS;
;;;87     	UART_ClearIntFlag(UART0, UART_INTEN_RDAIEN_Msk);
000002  4c37              LDR      r4,|L9.224|
000004  2101              MOVS     r1,#1
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       UART_ClearIntFlag
;;;88     	UART_ClearIntFlag(UART2, UART_INTEN_RDAIEN_Msk);
00000c  4f35              LDR      r7,|L9.228|
00000e  2101              MOVS     r1,#1
000010  4638              MOV      r0,r7
000012  f7fffffe          BL       UART_ClearIntFlag
;;;89     //  printf("\nuart02_Input:");
;;;90         /* Get all the input characters */
;;;91     	 if(UART_IS_RX_READY(UART0))
000016  69e0              LDR      r0,[r4,#0x1c]
000018  2600              MOVS     r6,#0
00001a  07c0              LSLS     r0,r0,#31
;;;92         {
;;;93             /* Get the character from UART Buffer */
;;;94             u8InChar = UART_READ(UART0);
;;;95     //        printf("\nUART0_READ = %x ", u8InChar);
;;;96     		UART_WRITE(UART2,u8InChar);
;;;97     		UART_WRITE(UART0,u8InChar);
;;;98     
;;;99             if(u8InChar == '0')
;;;100            {
;;;101                g_bWait = FALSE;
00001c  4d32              LDR      r5,|L9.232|
00001e  2800              CMP      r0,#0                 ;91
000020  d01a              BEQ      |L9.88|
000022  6820              LDR      r0,[r4,#0]            ;94
000024  b2c0              UXTB     r0,r0                 ;94
000026  6038              STR      r0,[r7,#0]            ;96
000028  6020              STR      r0,[r4,#0]            ;97
00002a  2830              CMP      r0,#0x30              ;99
00002c  d100              BNE      |L9.48|
00002e  60ee              STR      r6,[r5,#0xc]  ; g_bWait
                  |L9.48|
;;;102            }
;;;103    
;;;104            /* Check if buffer full */
;;;105            if(g_u32comRbytes < RXBUFSIZE)
000030  6869              LDR      r1,[r5,#4]  ; g_u32comRbytes
000032  2201              MOVS     r2,#1
000034  0292              LSLS     r2,r2,#10
000036  4291              CMP      r1,r2
000038  d20e              BCS      |L9.88|
;;;106            {
;;;107                /* Enqueue the character */
;;;108                g_u8RecData[g_u32comRtail] = u8InChar;
00003a  492c              LDR      r1,|L9.236|
00003c  68aa              LDR      r2,[r5,#8]  ; g_u32comRtail
00003e  5488              STRB     r0,[r1,r2]
;;;109                g_u32comRtail = (g_u32comRtail == (RXBUFSIZE - 1)) ? 0 : (g_u32comRtail + 1);
000040  68a8              LDR      r0,[r5,#8]  ; g_u32comRtail
000042  492b              LDR      r1,|L9.240|
000044  4288              CMP      r0,r1
000046  d101              BNE      |L9.76|
000048  2000              MOVS     r0,#0
00004a  e001              B        |L9.80|
                  |L9.76|
00004c  68a8              LDR      r0,[r5,#8]  ; g_u32comRtail
00004e  1c40              ADDS     r0,r0,#1
                  |L9.80|
000050  60a8              STR      r0,[r5,#8]  ; g_u32comRtail
;;;110                g_u32comRbytes++;
000052  6868              LDR      r0,[r5,#4]  ; g_u32comRbytes
000054  1c40              ADDS     r0,r0,#1
000056  6068              STR      r0,[r5,#4]  ; g_u32comRbytes
                  |L9.88|
;;;111            }
;;;112        }
;;;113    
;;;114    	 if(UART_IS_RX_READY(UART2))
000058  69f8              LDR      r0,[r7,#0x1c]
00005a  07c0              LSLS     r0,r0,#31
00005c  d013              BEQ      |L9.134|
;;;115        {
;;;116    	    u8InChar = UART_READ(UART2);
00005e  6838              LDR      r0,[r7,#0]
000060  b2c4              UXTB     r4,r0
;;;117    		u8InChar = UART_WRITE(UART1,u8InChar);
000062  4824              LDR      r0,|L9.244|
000064  6004              STR      r4,[r0,#0]
;;;118            printf("\nUART2_READ = %x ", u8InChar);
000066  4621              MOV      r1,r4
000068  a023              ADR      r0,|L9.248|
00006a  f7fffffe          BL       __2printf
;;;119    		switch (nRxIndex)
00006e  78a9              LDRB     r1,[r5,#2]  ; nRxIndex
000070  2001              MOVS     r0,#1                 ;87
000072  000b              MOVS     r3,r1
000074  f7fffffe          BL       __ARM_common_switch8
000078  0805080f          DCB      0x08,0x05,0x08,0x0f
00007c  161a1d20          DCB      0x16,0x1a,0x1d,0x20
000080  2624              DCB      0x26,0x24
;;;120    		{
;;;121    			case 0: 
;;;122    				
;;;123    				if(u8InChar==0xff) nRxIndex=1;
000082  2cff              CMP      r4,#0xff
000084  d02a              BEQ      |L9.220|
                  |L9.134|
;;;124    				break;
;;;125    				
;;;126    			case 1: 
;;;127    				if(u8InChar==0x55) nRxIndex=2;
;;;128    				else
;;;129    				{
;;;130    					if(u8InChar==0xff) nRxIndex=1;
;;;131    					else 
;;;132    						nRxIndex=0;
;;;133    				}
;;;134    				break;
;;;135    
;;;136    			case 2: 
;;;137    				if(u8InChar==0x03) nRxIndex=3;
;;;138    				else
;;;139    				{
;;;140    					if(u8InChar==0xff) nRxIndex=1;
;;;141    					else 
;;;142    						nRxIndex=0;
;;;143    				}
;;;144    				break;
;;;145    				
;;;146    			case 3: 
;;;147    				if(u8InChar==0x80) nRxIndex=4;
;;;148    				else
;;;149    				{
;;;150    					if(u8InChar==0xff) nRxIndex=1;
;;;151    					else 
;;;152    						nRxIndex=0;
;;;153    				}
;;;154    				break;
;;;155    			
;;;156    			case 4:  
;;;157    				uart1_cmd = u8InChar;
;;;158    				
;;;159    				nRxIndex=5;
;;;160    				break;	
;;;161    				
;;;162    			case 5:
;;;163    				uart1_dat = u8InChar;
;;;164    				
;;;165    				nRxIndex=6;
;;;166    				break;
;;;167    				
;;;168    			case 6:  
;;;169    				if(u8InChar==0x00) nRxIndex=7;
;;;170    				else
;;;171    				{
;;;172    					if(u8InChar==0xff) nRxIndex=1;
;;;173    					else 
;;;174    						nRxIndex=0;
;;;175    				}
;;;176    				break;	
;;;177    				
;;;178    			case 7:
;;;179    				if(u8InChar==0xff) nRxIndex=1;
;;;180    				else 
;;;181    				{
;;;182    					Core_Msg_Send(MSG_MCU1_SYS_STATE_IND, uart1_cmd ,uart1_dat,0);
;;;183    					uart1_cmd = 0xFF;
;;;184    					uart1_dat = 0xFF;
;;;185    					nRxIndex=0;
;;;186    				}
;;;187    				break;
;;;188    					
;;;189    			default:
;;;190    				nRxIndex=0;
;;;191    				break;
;;;192    		} 
;;;193    	}
;;;194        
;;;195      //  printf("\nuart02Transmission Test:");
;;;196    }
000086  bdf8              POP      {r3-r7,pc}
000088  2c55              CMP      r4,#0x55              ;127
00008a  d002              BEQ      |L9.146|
00008c  2cff              CMP      r4,#0xff              ;130
00008e  d0fa              BEQ      |L9.134|
000090  e016              B        |L9.192|
                  |L9.146|
000092  2002              MOVS     r0,#2                 ;127
000094  e022              B        |L9.220|
000096  2c03              CMP      r4,#3                 ;137
000098  d101              BNE      |L9.158|
00009a  2003              MOVS     r0,#3                 ;137
00009c  e01e              B        |L9.220|
                  |L9.158|
00009e  2cff              CMP      r4,#0xff              ;140
0000a0  d01c              BEQ      |L9.220|
0000a2  e00d              B        |L9.192|
0000a4  2c80              CMP      r4,#0x80              ;147
0000a6  d1fa              BNE      |L9.158|
0000a8  2004              MOVS     r0,#4                 ;147
0000aa  e017              B        |L9.220|
0000ac  702c              STRB     r4,[r5,#0]            ;157
0000ae  2005              MOVS     r0,#5                 ;159
0000b0  e014              B        |L9.220|
0000b2  706c              STRB     r4,[r5,#1]            ;163
0000b4  2006              MOVS     r0,#6                 ;165
0000b6  e011              B        |L9.220|
0000b8  2c00              CMP      r4,#0                 ;169
0000ba  d1f0              BNE      |L9.158|
0000bc  2007              MOVS     r0,#7                 ;169
0000be  e00d              B        |L9.220|
                  |L9.192|
0000c0  70ae              STRB     r6,[r5,#2]            ;174
0000c2  bdf8              POP      {r3-r7,pc}
0000c4  2cff              CMP      r4,#0xff              ;179
0000c6  d009              BEQ      |L9.220|
0000c8  786a              LDRB     r2,[r5,#1]            ;182  ; uart1_dat
0000ca  2300              MOVS     r3,#0                 ;182
0000cc  7829              LDRB     r1,[r5,#0]            ;182  ; uart1_cmd
0000ce  2002              MOVS     r0,#2                 ;182
0000d0  f7fffffe          BL       Core_Msg_Send
0000d4  20ff              MOVS     r0,#0xff              ;183
0000d6  7028              STRB     r0,[r5,#0]            ;183
0000d8  7068              STRB     r0,[r5,#1]            ;184
0000da  e7f1              B        |L9.192|
                  |L9.220|
0000dc  70a8              STRB     r0,[r5,#2]            ;179
0000de  bdf8              POP      {r3-r7,pc}
;;;197    
                          ENDP

                  |L9.224|
                          DCD      0x40050000
                  |L9.228|
                          DCD      0x40154000
                  |L9.232|
                          DCD      ||.data||
                  |L9.236|
                          DCD      ||.bss||
                  |L9.240|
                          DCD      0x000003ff
                  |L9.244|
                          DCD      0x40150000
                  |L9.248|
0000f8  0a554152          DCB      "\nUART2_READ = %x ",0
0000fc  54325f52
000100  45414420
000104  3d202578
000108  2000    
00010a  00                DCB      0
00010b  00                DCB      0

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  g_u8RecData
                          %        1024

                          AREA ||.data||, DATA, ALIGN=2

                  uart1_cmd
000000  ff                DCB      0xff
                  uart1_dat
000001  ff                DCB      0xff
                  nRxIndex
000002  00                DCB      0x00
                  |symbol_number.38|
000003  00                DCB      0x00
                  g_u32comRbytes
                          DCD      0x00000000
                  g_u32comRtail
                          DCD      0x00000000
                  g_bWait
                          DCD      0x00000001

                          AREA ||area_number.14||, DATA, ALIGN=2

                          EXPORTAS ||area_number.14||, ||.data||
                  g_u32comRhead
                          DCD      0x00000000

                          AREA ||i.__ARM_common_switch8||, COMGROUP=__ARM_common_switch8, CODE, READONLY, ALIGN=1

                  __ARM_common_switch8 PROC
000000  b430              PUSH     {r4,r5}
000002  4674              MOV      r4,lr
000004  1e64              SUBS     r4,r4,#1
000006  7825              LDRB     r5,[r4,#0]
000008  1c64              ADDS     r4,r4,#1
00000a  42ab              CMP      r3,r5
00000c  d200              BCS      |L63.16|
00000e  461d              MOV      r5,r3
                  |L63.16|
000010  5d63              LDRB     r3,[r4,r5]
000012  005b              LSLS     r3,r3,#1
000014  18e3              ADDS     r3,r4,r3
000016  bc30              POP      {r4,r5}
000018  4718              BX       r3
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\src\\io\\uart.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_uart_c_a80fc96b____REV16|
#line 388 "..\\lib\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___6_uart_c_a80fc96b____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_uart_c_a80fc96b____REVSH|
#line 402
|__asm___6_uart_c_a80fc96b____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
