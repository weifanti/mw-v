; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\main.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\main.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\lib\CMSIS\Include -I..\lib\Device\Nuvoton\NUC029xGE\Include -I..\lib\StdDriver\inc -I..\src\core\include -I..\src\driver\include -I..\src\io\include -I..\src\global -I..\src\server\include -I..\src\driver\audio -D__UVISION_VERSION=522 --omf_browse=.\obj\main.crf ..\main.c]
                          THUMB

                          AREA ||i.Amplifier_open||, CODE, READONLY, ALIGN=2

                  Amplifier_open PROC
;;;123    
;;;124    void Amplifier_open(void)
000000  b510              PUSH     {r4,lr}
;;;125    {
;;;126    	GPIO_SetMode(PC, BIT1, GPIO_MODE_OUTPUT);	
000002  4c0c              LDR      r4,|L1.52|
000004  2201              MOVS     r2,#1
000006  2102              MOVS     r1,#2
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       GPIO_SetMode
;;;127    	GPIO_SetMode(PC, BIT13, GPIO_MODE_OUTPUT);
00000e  2201              MOVS     r2,#1
000010  0351              LSLS     r1,r2,#13
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       GPIO_SetMode
;;;128    	GPIO_SetMode(PB, BIT14, GPIO_MODE_OUTPUT);
000018  4806              LDR      r0,|L1.52|
00001a  2201              MOVS     r2,#1
00001c  0391              LSLS     r1,r2,#14
00001e  3840              SUBS     r0,r0,#0x40
000020  f7fffffe          BL       GPIO_SetMode
;;;129    	PC1 = 1;
000024  4904              LDR      r1,|L1.56|
000026  2001              MOVS     r0,#1
000028  6048              STR      r0,[r1,#4]
;;;130    	PC13 = 1;
00002a  6348              STR      r0,[r1,#0x34]
;;;131    	PB14 = 1;
00002c  4902              LDR      r1,|L1.56|
00002e  3940              SUBS     r1,r1,#0x40
000030  6388              STR      r0,[r1,#0x38]
;;;132    }
000032  bd10              POP      {r4,pc}
;;;133    
                          ENDP

                  |L1.52|
                          DCD      0x50004080
                  |L1.56|
                          DCD      0x50004280

                          AREA ||i.IoKeyProcess||, CODE, READONLY, ALIGN=2

                  IoKeyProcess PROC
;;;220    
;;;221    void IoKeyProcess(void)
000000  b570              PUSH     {r4-r6,lr}
;;;222    {
;;;223    
;;;224    	if(((Global_datas.g_mode_status == POWER_IDLE_MODE || Global_datas.g_mode_status == POWER_ON_MODE )&&(IN_KEY_POWER_CP != IoKeyInputmessage)) || (Global_datas.shoutting_down))
000002  4c1d              LDR      r4,|L2.120|
000004  4d1d              LDR      r5,|L2.124|
000006  7961              LDRB     r1,[r4,#5]  ; Global_datas
000008  7828              LDRB     r0,[r5,#0]
00000a  290e              CMP      r1,#0xe
00000c  d001              BEQ      |L2.18|
00000e  2900              CMP      r1,#0
000010  d101              BNE      |L2.22|
                  |L2.18|
000012  28f1              CMP      r0,#0xf1
000014  d12b              BNE      |L2.110|
                  |L2.22|
000016  7b61              LDRB     r1,[r4,#0xd]  ; Global_datas
000018  2900              CMP      r1,#0
00001a  d128              BNE      |L2.110|
;;;225        {
;;;226    		return;
;;;227    	}
;;;228    
;;;229    	if(IoKeyInputmessage)
00001c  2800              CMP      r0,#0
00001e  d024              BEQ      |L2.106|
;;;230    	{
;;;231    		switch(IoKeyInputmessage)
000020  28f0              CMP      r0,#0xf0
000022  d012              BEQ      |L2.74|
000024  28f1              CMP      r0,#0xf1
000026  d016              BEQ      |L2.86|
000028  28f3              CMP      r0,#0xf3
00002a  d002              BEQ      |L2.50|
00002c  28f4              CMP      r0,#0xf4
00002e  d11c              BNE      |L2.106|
000030  e005              B        |L2.62|
                  |L2.50|
;;;232    		{
;;;233    			case IN_KEY_PAIR_SP:
;;;234    				printf("pari key sp\n");
000032  a013              ADR      r0,|L2.128|
000034  f7fffffe          BL       __2printf
;;;235    				drv_wifi_4g_switch_cmd_send();
000038  f7fffffe          BL       drv_wifi_4g_switch_cmd_send
;;;236    				break;
00003c  e015              B        |L2.106|
                  |L2.62|
;;;237    			case IN_KEY_PAIR_CP:
;;;238    				printf("pari key cp\n");
00003e  a014              ADR      r0,|L2.144|
000040  f7fffffe          BL       __2printf
;;;239    				drv_pairing_cmd_send();
000044  f7fffffe          BL       drv_pairing_cmd_send
;;;240    				
;;;241    				break;
000048  e00f              B        |L2.106|
                  |L2.74|
;;;242    			case IN_KEY_POWER_SP:
;;;243    				printf("power key sp\n");
00004a  a015              ADR      r0,|L2.160|
00004c  f7fffffe          BL       __2printf
;;;244    				srv_key_mode_handler();
000050  f7fffffe          BL       srv_key_mode_handler
;;;245    				break;
000054  e009              B        |L2.106|
                  |L2.86|
;;;246    			case IN_KEY_POWER_CP:
;;;247    				printf("power key cp\n");	
000056  a016              ADR      r0,|L2.176|
000058  f7fffffe          BL       __2printf
;;;248    				if(Global_datas.g_mode_status == POWER_IDLE_MODE)
00005c  7960              LDRB     r0,[r4,#5]  ; Global_datas
00005e  280e              CMP      r0,#0xe
000060  d006              BEQ      |L2.112|
;;;249    				{
;;;250    					SYS_Status();
;;;251    				}
;;;252    
;;;253    				else
;;;254    				{
;;;255    					PowerOff();
000062  f7fffffe          BL       PowerOff
;;;256    					SysIdle();
000066  f7fffffe          BL       SysIdle
                  |L2.106|
;;;257    				}
;;;258    				break;
;;;259    
;;;260    		  	default:break;
;;;261    		}
;;;262    	}
;;;263    
;;;264    	IoKeyInputmessage = 0;
00006a  2000              MOVS     r0,#0
00006c  7028              STRB     r0,[r5,#0]
                  |L2.110|
;;;265    		
;;;266    }
00006e  bd70              POP      {r4-r6,pc}
                  |L2.112|
000070  f7fffffe          BL       SYS_Status
000074  e7f9              B        |L2.106|
;;;267    
                          ENDP

000076  0000              DCW      0x0000
                  |L2.120|
                          DCD      Global_datas+0x20
                  |L2.124|
                          DCD      IoKeyInputmessage
                  |L2.128|
000080  70617269          DCB      "pari key sp\n",0
000084  206b6579
000088  2073700a
00008c  00      
00008d  00                DCB      0
00008e  00                DCB      0
00008f  00                DCB      0
                  |L2.144|
000090  70617269          DCB      "pari key cp\n",0
000094  206b6579
000098  2063700a
00009c  00      
00009d  00                DCB      0
00009e  00                DCB      0
00009f  00                DCB      0
                  |L2.160|
0000a0  706f7765          DCB      "power key sp\n",0
0000a4  72206b65
0000a8  79207370
0000ac  0a00    
0000ae  00                DCB      0
0000af  00                DCB      0
                  |L2.176|
0000b0  706f7765          DCB      "power key cp\n",0
0000b4  72206b65
0000b8  79206370
0000bc  0a00    
0000be  00                DCB      0
0000bf  00                DCB      0

                          AREA ||i.PowerOff||, CODE, READONLY, ALIGN=2

                  PowerOff PROC
;;;207    
;;;208    void PowerOff(void)
000000  b510              PUSH     {r4,lr}
;;;209    {
;;;210    	drv_Cmd_Send2NCU031(0x70, 0x15,0x00);// power off cmd to LCD board
000002  2200              MOVS     r2,#0
000004  2115              MOVS     r1,#0x15
000006  2070              MOVS     r0,#0x70
000008  f7fffffe          BL       drv_Cmd_Send2NCU031
;;;211    	
;;;212    	Cmd_Send2FourG( 0x03,0x55,0x00); // poweroff cmd to 4G
00000c  2200              MOVS     r2,#0
00000e  2155              MOVS     r1,#0x55
000010  2003              MOVS     r0,#3
000012  f7fffffe          BL       Cmd_Send2FourG
;;;213    	//Drv_4GMoudle_PowerUp(0);  // wait for 4g modle ready ,than turn off power, don't off here.
;;;214    	drv_led_init();// led all off
000016  f7fffffe          BL       drv_led_init
;;;215    	Drv_audio_powerdown();
00001a  f7fffffe          BL       Drv_audio_powerdown
;;;216    	Global_datas.shoutting_down = 1;
00001e  4804              LDR      r0,|L3.48|
000020  2101              MOVS     r1,#1
000022  7341              STRB     r1,[r0,#0xd]
;;;217    	TimeOutSet(&PoweroffLedTimer, 5000);
000024  4903              LDR      r1,|L3.52|
000026  4804              LDR      r0,|L3.56|
000028  f7fffffe          BL       TimeOutSet
;;;218    }
00002c  bd10              POP      {r4,pc}
;;;219    
                          ENDP

00002e  0000              DCW      0x0000
                  |L3.48|
                          DCD      Global_datas+0x20
                  |L3.52|
                          DCD      0x00001388
                  |L3.56|
                          DCD      PoweroffLedTimer

                          AREA ||i.SYS_BusInit||, CODE, READONLY, ALIGN=1

                  SYS_BusInit PROC
;;;111    
;;;112    void SYS_BusInit(void)
000000  b510              PUSH     {r4,lr}
;;;113    {
;;;114    	Debug_Uart_Init();
000002  f7fffffe          BL       Debug_Uart_Init
;;;115    	
;;;116    	Transfer_Uart_Init();
000006  f7fffffe          BL       Transfer_Uart_Init
;;;117    	
;;;118    	USCI_Uart_Init();
00000a  f7fffffe          BL       USCI_Uart_Init
;;;119    	
;;;120    	Hal_I2c_Init();
00000e  f7fffffe          BL       Hal_I2c_Init
;;;121    	
;;;122    }
000012  bd10              POP      {r4,pc}
;;;123    
                          ENDP


                          AREA ||i.SYS_Clock_init||, CODE, READONLY, ALIGN=2

                  SYS_Clock_init PROC
;;;44     
;;;45     void SYS_Clock_init(void)
000000  b5f8              PUSH     {r3-r7,lr}
;;;46     {
;;;47     
;;;48         
;;;49        // SYS->GPF_MFPL = SYS_GPF_MFPL_PF4MFP_XT1_IN | SYS_GPF_MFPL_PF3MFP_XT1_OUT | SYS_GPF_MFPL_PF1MFP_X32_IN | SYS_GPF_MFPL_PF0MFP_X32_OUT;
;;;50     	/* Enable HIRC clock (Internal RC 22.1184MHz) */
;;;51         CLK_EnableXtalRC(CLK_PWRCTL_HIRCEN_Msk);
000002  2004              MOVS     r0,#4
000004  f7fffffe          BL       CLK_EnableXtalRC
;;;52     
;;;53         /* Wait for HIRC clock ready */
;;;54         CLK_WaitClockReady(CLK_STATUS_HIRCSTB_Msk);
000008  2010              MOVS     r0,#0x10
00000a  f7fffffe          BL       CLK_WaitClockReady
;;;55     
;;;56         /* Select HCLK clock source as HIRC and HCLK clock divider as 1 */
;;;57         CLK_SetHCLK(CLK_CLKSEL0_HCLKSEL_HIRC, CLK_CLKDIV0_HCLK(1));
00000e  2100              MOVS     r1,#0
000010  2007              MOVS     r0,#7
000012  f7fffffe          BL       CLK_SetHCLK
;;;58     
;;;59         /* Enable HXT clock (external XTAL 12MHz) */
;;;60         CLK_EnableXtalRC(CLK_PWRCTL_HXTEN_Msk | CLK_PWRCTL_LXTEN_Msk);
000016  2003              MOVS     r0,#3
000018  f7fffffe          BL       CLK_EnableXtalRC
;;;61     //    CLK_EnableXtalRC(CLK_PWRCTL_HXTEN_Msk);
;;;62         /* Wait for HXT clock ready */
;;;63         CLK_WaitClockReady(CLK_STATUS_HXTSTB_Msk | CLK_STATUS_LXTSTB_Msk);
00001c  2003              MOVS     r0,#3
00001e  f7fffffe          BL       CLK_WaitClockReady
;;;64     //    CLK_WaitClockReady(CLK_STATUS_HXTSTB_Msk);
;;;65         /* Set core clock as PLL_CLOCK from PLL and SysTick source to HCLK/2*/
;;;66         CLK_SetCoreClock(PLL_CLOCK);
000022  4822              LDR      r0,|L5.172|
000024  f7fffffe          BL       CLK_SetCoreClock
;;;67         CLK_SetSysTickClockSrc(CLK_CLKSEL0_STCLKSEL_HCLK_DIV2);
000028  2018              MOVS     r0,#0x18
00002a  f7fffffe          BL       CLK_SetSysTickClockSrc
;;;68     
;;;69         /* Enable UART module clock */
;;;70         CLK_EnableModuleClock(UART0_MODULE);
00002e  4c20              LDR      r4,|L5.176|
000030  4620              MOV      r0,r4
000032  f7fffffe          BL       CLK_EnableModuleClock
;;;71     	/* Enable UART module clock */
;;;72         CLK_EnableModuleClock(UART1_MODULE);
000036  1c65              ADDS     r5,r4,#1
000038  4628              MOV      r0,r5
00003a  f7fffffe          BL       CLK_EnableModuleClock
;;;73     	
;;;74         /* Enable USCI module clock */
;;;75         CLK_EnableModuleClock(UART2_MODULE);
00003e  1ca6              ADDS     r6,r4,#2
000040  4630              MOV      r0,r6
000042  f7fffffe          BL       CLK_EnableModuleClock
;;;76     	
;;;77         /* Enable USCI module clock */
;;;78         CLK_EnableModuleClock(USCI0_MODULE);
000046  4f1b              LDR      r7,|L5.180|
000048  4638              MOV      r0,r7
00004a  f7fffffe          BL       CLK_EnableModuleClock
;;;79     	
;;;80     	/* Enable I2C0 module clock */
;;;81         CLK_EnableModuleClock(I2C0_MODULE);
00004e  481a              LDR      r0,|L5.184|
000050  f7fffffe          BL       CLK_EnableModuleClock
;;;82     	
;;;83     	/* Enable I2C1 module clock */
;;;84         CLK_EnableModuleClock(I2C1_MODULE);
000054  4818              LDR      r0,|L5.184|
000056  1c40              ADDS     r0,r0,#1
000058  f7fffffe          BL       CLK_EnableModuleClock
;;;85     
;;;86     	/* Enable ADC module clock */
;;;87         CLK_EnableModuleClock(ADC_MODULE);
00005c  4817              LDR      r0,|L5.188|
00005e  f7fffffe          BL       CLK_EnableModuleClock
;;;88     
;;;89         /* Enable PWM0 module clock */
;;;90         CLK_EnableModuleClock(PWM0_MODULE);
000062  4817              LDR      r0,|L5.192|
000064  f7fffffe          BL       CLK_EnableModuleClock
;;;91     
;;;92     	/* Enable timer clock */
;;;93     	CLK_EnableModuleClock(TMR0_MODULE);
000068  4816              LDR      r0,|L5.196|
00006a  f7fffffe          BL       CLK_EnableModuleClock
;;;94         CLK_EnableModuleClock(RTC_MODULE);
00006e  4816              LDR      r0,|L5.200|
000070  f7fffffe          BL       CLK_EnableModuleClock
;;;95     
;;;96         /* Select UART module clock source as HXT and UART module clock divider as 1 */
;;;97         CLK_SetModuleClock(UART0_MODULE, CLK_CLKSEL1_UARTSEL_HXT, CLK_CLKDIV0_UART(1));
000074  2200              MOVS     r2,#0
000076  4611              MOV      r1,r2
000078  4620              MOV      r0,r4
00007a  f7fffffe          BL       CLK_SetModuleClock
;;;98     	
;;;99     	CLK_SetModuleClock(UART1_MODULE, CLK_CLKSEL1_UARTSEL_HXT, CLK_CLKDIV0_UART(1));
00007e  2200              MOVS     r2,#0
000080  4611              MOV      r1,r2
000082  4628              MOV      r0,r5
000084  f7fffffe          BL       CLK_SetModuleClock
;;;100    
;;;101    	CLK_SetModuleClock(UART2_MODULE, CLK_CLKSEL1_UARTSEL_HXT, CLK_CLKDIV0_UART(1));
000088  2200              MOVS     r2,#0
00008a  4611              MOV      r1,r2
00008c  4630              MOV      r0,r6
00008e  f7fffffe          BL       CLK_SetModuleClock
;;;102    	CLK_SetModuleClock(USCI0_MODULE, CLK_CLKSEL1_UARTSEL_HXT, CLK_CLKDIV0_UART(1));
000092  2200              MOVS     r2,#0
000094  4611              MOV      r1,r2
000096  4638              MOV      r0,r7
000098  f7fffffe          BL       CLK_SetModuleClock
;;;103    
;;;104        /* ADC clock source is 22.1184MHz, set divider to 7, ADC clock is 22.1184/7 MHz */
;;;105        CLK_SetModuleClock(ADC_MODULE, CLK_CLKSEL1_ADCSEL_HIRC, CLK_CLKDIV0_ADC(7));
00009c  2203              MOVS     r2,#3
00009e  0452              LSLS     r2,r2,#17
0000a0  210c              MOVS     r1,#0xc
0000a2  4806              LDR      r0,|L5.188|
0000a4  f7fffffe          BL       CLK_SetModuleClock
;;;106        /* Select PWM01 module clock source */
;;;107       // CLK_SetModuleClock(PWM0_MODULE, CLK_CLKSEL1_PWM0SEL_PCLK0, 0);
;;;108    
;;;109    }
0000a8  bdf8              POP      {r3-r7,pc}
;;;110    
                          ENDP

0000aa  0000              DCW      0x0000
                  |L5.172|
                          DCD      0x044aa200
                  |L5.176|
                          DCD      0x57803d10
                  |L5.180|
                          DCD      0x80000008
                  |L5.184|
                          DCD      0x40000008
                  |L5.188|
                          DCD      0x5623fe1c
                  |L5.192|
                          DCD      0x53c00014
                  |L5.196|
                          DCD      0x5e800002
                  |L5.200|
                          DCD      0x63200001

                          AREA ||i.SYS_Init||, CODE, READONLY, ALIGN=2

                  SYS_Init PROC
;;;143    /*---------------------------------------------------------------------------------------------------------*/
;;;144    void SYS_Init(void)
000000  b510              PUSH     {r4,lr}
000002  2059              MOVS     r0,#0x59
000004  4c0e              LDR      r4,|L6.64|
000006  2216              MOVS     r2,#0x16
000008  2188              MOVS     r1,#0x88
                  |L6.10|
00000a  6020              STR      r0,[r4,#0]
00000c  6022              STR      r2,[r4,#0]
00000e  6021              STR      r1,[r4,#0]
000010  6823              LDR      r3,[r4,#0]
000012  2b00              CMP      r3,#0
000014  d0f9              BEQ      |L6.10|
;;;145    {
;;;146        /* Unlock protected registers */
;;;147        SYS_UnlockReg();
;;;148    	
;;;149    	SYS_Clock_init();
000016  f7fffffe          BL       SYS_Clock_init
;;;150    	TYM_gpio_init();
00001a  f7fffffe          BL       TYM_gpio_init
00001e  2000              MOVS     r0,#0
000020  6020              STR      r0,[r4,#0]
;;;151    
;;;152    	/* Lock protected registers */
;;;153        SYS_LockReg();
;;;154    
;;;155        /* Start Timer1 to measure delay period of TIMER_Delay API is reasonable or not */
;;;156       // TIMER1->CTL = TIMER_PERIODIC_MODE | (12 - 1);
;;;157    	TYM_sys_PowerManger_init();
000022  f7fffffe          BL       TYM_sys_PowerManger_init
;;;158    	drv_led_init();
000026  f7fffffe          BL       drv_led_init
;;;159    
;;;160    	Drv_FourG_Gpio_Init();
00002a  f7fffffe          BL       Drv_FourG_Gpio_Init
;;;161    	
;;;162    
;;;163    	SYS_BusInit();
00002e  f7fffffe          BL       SYS_BusInit
;;;164    	
;;;165    	Hal_Timer1_Init(); // kim
000032  f7fffffe          BL       Hal_Timer1_Init
;;;166    
;;;167    	TYM_DriverInit();
000036  f7fffffe          BL       TYM_DriverInit
;;;168    	
;;;169    	Core_Msg_Init();
00003a  f7fffffe          BL       Core_Msg_Init
;;;170    
;;;171    	//srv_rtc_init();
;;;172    
;;;173    }
00003e  bd10              POP      {r4,pc}
;;;174    
                          ENDP

                  |L6.64|
                          DCD      0x50000100

                          AREA ||i.SYS_Status||, CODE, READONLY, ALIGN=2

                  SYS_Status PROC
;;;187    
;;;188    void SYS_Status(void)
000000  b570              PUSH     {r4-r6,lr}
;;;189    {
;;;190    	Global_datas.g_mode_status = POWER_ON_MODE;	
000002  4c10              LDR      r4,|L7.68|
000004  2500              MOVS     r5,#0
000006  7165              STRB     r5,[r4,#5]
;;;191    	Global_datas.g_4g_initing = 1;
000008  2001              MOVS     r0,#1
00000a  71a0              STRB     r0,[r4,#6]
;;;192    	Global_datas.eq_mode = EQ_MODE_INDOOR;
00000c  73a0              STRB     r0,[r4,#0xe]
;;;193    	Global_datas.volume = VOLUME_DEFAULT;
00000e  2008              MOVS     r0,#8
000010  73e0              STRB     r0,[r4,#0xf]
;;;194    	TYM_drv_powerkeepon(1);
000012  2001              MOVS     r0,#1
000014  f7fffffe          BL       TYM_drv_powerkeepon
;;;195    	Drv_4GMoudle_PowerUp(1);
000018  2001              MOVS     r0,#1
00001a  f7fffffe          BL       Drv_4GMoudle_PowerUp
;;;196    	drv_FourGmodel_power_key_SetHi();
00001e  f7fffffe          BL       drv_FourGmodel_power_key_SetHi
;;;197    	TimeOutSet(&ModulePowerUpPinTimer,3000);
000022  4909              LDR      r1,|L7.72|
000024  4809              LDR      r0,|L7.76|
000026  f7fffffe          BL       TimeOutSet
;;;198    	TimeOutSet(&PoweroffLedTimer, 100);
00002a  2164              MOVS     r1,#0x64
00002c  4808              LDR      r0,|L7.80|
00002e  f7fffffe          BL       TimeOutSet
;;;199    	Drv_audio_init();
000032  f7fffffe          BL       Drv_audio_init
;;;200    	Global_datas.shoutting_down = 0;
000036  7365              STRB     r5,[r4,#0xd]
;;;201    	
;;;202    
;;;203    	
;;;204    	drv_Cmd_Send2NCU031(0x70, 0x16,0x00);// power on cmd to LCD board
000038  2200              MOVS     r2,#0
00003a  2116              MOVS     r1,#0x16
00003c  2070              MOVS     r0,#0x70
00003e  f7fffffe          BL       drv_Cmd_Send2NCU031
;;;205    	
;;;206    }
000042  bd70              POP      {r4-r6,pc}
;;;207    
                          ENDP

                  |L7.68|
                          DCD      Global_datas+0x20
                  |L7.72|
                          DCD      0x00000bb8
                  |L7.76|
                          DCD      ModulePowerUpPinTimer
                  |L7.80|
                          DCD      PoweroffLedTimer

                          AREA ||i.SysIdle||, CODE, READONLY, ALIGN=2

                  SysIdle PROC
;;;174    
;;;175    void SysIdle(void)
000000  b570              PUSH     {r4-r6,lr}
;;;176    {
;;;177    	Global_datas.g_mode_status = POWER_IDLE_MODE;	
000002  4c08              LDR      r4,|L8.36|
000004  200e              MOVS     r0,#0xe
000006  7160              STRB     r0,[r4,#5]
;;;178    	Global_datas.g_4g_initing = 0;
000008  2500              MOVS     r5,#0
00000a  71a5              STRB     r5,[r4,#6]
;;;179    	Global_datas.mode_switching = 0;
00000c  7465              STRB     r5,[r4,#0x11]
;;;180    	Global_datas.mute = 0;
00000e  74a5              STRB     r5,[r4,#0x12]
;;;181    	
;;;182    	drv_FourGmodel_power_key_SetLow();
000010  f7fffffe          BL       drv_FourGmodel_power_key_SetLow
;;;183    	TimeOutSet(&SysTimer_1s,1000);
000014  217d              MOVS     r1,#0x7d
000016  00c9              LSLS     r1,r1,#3
000018  4803              LDR      r0,|L8.40|
00001a  f7fffffe          BL       TimeOutSet
;;;184    	Global_datas.subboard_online = 0;	
00001e  7425              STRB     r5,[r4,#0x10]
;;;185    
;;;186    }
000020  bd70              POP      {r4-r6,pc}
;;;187    
                          ENDP

000022  0000              DCW      0x0000
                  |L8.36|
                          DCD      Global_datas+0x20
                  |L8.40|
                          DCD      SysTimer_1s

                          AREA ||i.TYM_DriverInit||, CODE, READONLY, ALIGN=1

                  TYM_DriverInit PROC
;;;133    
;;;134    void TYM_DriverInit(void)
000000  b510              PUSH     {r4,lr}
;;;135    {
;;;136    	//Drv_audio_init();
;;;137    	Drv_IrKey_init(); // kim
000002  f7fffffe          BL       Drv_IrKey_init
;;;138    	drv_gipo_key_init();
000006  f7fffffe          BL       drv_gipo_key_init
;;;139    }
00000a  bd10              POP      {r4,pc}
;;;140    
                          ENDP


                          AREA ||i.main||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                  main PROC
;;;271    /*---------------------------------------------------------------------------------------------------------*/
;;;272    int32_t main(void)
000000  b088              SUB      sp,sp,#0x20
;;;273    {
;;;274    	sCoreMsg msg;
;;;275    	uint32_t count;
;;;276    	uint8_t refcount0=1;
000002  2601              MOVS     r6,#1
;;;277    	uint8_t refcount1=1;
;;;278    	uint8_t refcount2=1;
;;;279      	uint8_t bat_val[2];
;;;280    	uint8_t ledtimecount = 0;
000004  2000              MOVS     r0,#0
000006  4635              MOV      r5,r6                 ;277
;;;281    	
;;;282    //	uint8_t autoside = 0;
;;;283    //    S_RTC_TIME_DATA_T sReadRTC;
;;;284    
;;;285    	/* Init System, peripheral clock and multi-function I/O */
;;;286    
;;;287    	SYS_Init();
000008  9005              STR      r0,[sp,#0x14]
00000a  f7fffffe          BL       SYS_Init
;;;288    	//SYS_Status();
;;;289    	SysIdle();
00000e  f7fffffe          BL       SysIdle
;;;290    	
;;;291    	
;;;292        printf("\nmain\n");
000012  a0fe              ADR      r0,|L10.1036|
000014  f7fffffe          BL       __2printf
000018  4cfe              LDR      r4,|L10.1044|
00001a  2701              MOVS     r7,#1                 ;276
                  |L10.28|
;;;293    		
;;;294        while(1)
;;;295        {
;;;296    
;;;297    		if(IsTimeOut(&SysTimer_1s))
00001c  48fe              LDR      r0,|L10.1048|
00001e  f7fffffe          BL       IsTimeOut
000022  2800              CMP      r0,#0
000024  d02e              BEQ      |L10.132|
;;;298    		{
;;;299    			TimeOutSet(&SysTimer_1s, 500);
000026  21ff              MOVS     r1,#0xff
000028  31f5              ADDS     r1,r1,#0xf5
00002a  48fb              LDR      r0,|L10.1048|
00002c  f7fffffe          BL       TimeOutSet
;;;300    			
;;;301    	        if(Global_datas.g_4g_initing)
000030  79a0              LDRB     r0,[r4,#6]  ; Global_datas
000032  2800              CMP      r0,#0
000034  d002              BEQ      |L10.60|
;;;302    			{
;;;303    				srv_led_sys_initing();
000036  f7fffffe          BL       srv_led_sys_initing
00003a  e001              B        |L10.64|
                  |L10.60|
;;;304    			}
;;;305    			else
;;;306    			{
;;;307    				srv_led_change_handler();
00003c  f7fffffe          BL       srv_led_change_handler
                  |L10.64|
;;;308    			}
;;;309    
;;;310    			if(IsTimeOut(&ModulePowerUpPinTimer))
000040  48f6              LDR      r0,|L10.1052|
000042  f7fffffe          BL       IsTimeOut
000046  2800              CMP      r0,#0
000048  d001              BEQ      |L10.78|
;;;311    			{
;;;312    				drv_FourGmodel_power_key_SetLow();
00004a  f7fffffe          BL       drv_FourGmodel_power_key_SetLow
                  |L10.78|
;;;313    			}
;;;314    
;;;315    			if(Global_datas.g_mode_status == POWER_IDLE_MODE)
00004e  7960              LDRB     r0,[r4,#5]  ; Global_datas
000050  280e              CMP      r0,#0xe
000052  d110              BNE      |L10.118|
;;;316    			{
;;;317    				if(!IsTimeOut(&PoweroffLedTimer))
000054  48f2              LDR      r0,|L10.1056|
000056  f7fffffe          BL       IsTimeOut
00005a  2800              CMP      r0,#0
00005c  d03b              BEQ      |L10.214|
;;;318    				{			
;;;319    					if(ledtimecount)
;;;320    					{
;;;321    						PA12 = 1;
;;;322    						PA13 = 1;
;;;323    						PA1 = 1;
;;;324    						ledtimecount = 0;
;;;325    					}
;;;326    					else
;;;327    					{
;;;328    						PA12 = 0;
;;;329    						PA13 = 0;
;;;330    						PA1 = 0;
;;;331    						ledtimecount = 1;
;;;332    					}
;;;333    				}
;;;334    				else
;;;335    				{
;;;336    					PA12 = 1;
00005e  48f1              LDR      r0,|L10.1060|
000060  6307              STR      r7,[r0,#0x30]
;;;337    					PA13 = 1;
000062  6347              STR      r7,[r0,#0x34]
;;;338    					PA1 = 1;
000064  6047              STR      r7,[r0,#4]
;;;339    					Drv_4GMoudle_PowerUp(0); // if timeout,turn off.
000066  2000              MOVS     r0,#0
000068  f7fffffe          BL       Drv_4GMoudle_PowerUp
;;;340    					TYM_drv_powerkeepon(0); 
00006c  2000              MOVS     r0,#0
00006e  f7fffffe          BL       TYM_drv_powerkeepon
;;;341    
;;;342    					Global_datas.shoutting_down = 0;
000072  2000              MOVS     r0,#0
000074  7360              STRB     r0,[r4,#0xd]
                  |L10.118|
;;;343    				}
;;;344    				
;;;345    			}
;;;346    
;;;347    
;;;348    			if(IsTimeOut(&SubBoardHandshakeTimer))
000076  48ec              LDR      r0,|L10.1064|
000078  f7fffffe          BL       IsTimeOut
00007c  2800              CMP      r0,#0
00007e  d001              BEQ      |L10.132|
;;;349    			{
;;;350    				Global_datas.subboard_online = 0;
000080  2000              MOVS     r0,#0
000082  7420              STRB     r0,[r4,#0x10]
                  |L10.132|
;;;351    			}			
;;;352    		}
;;;353    		
;;;354    		if(Global_datas.key_led_blink)
000084  7b20              LDRB     r0,[r4,#0xc]  ; Global_datas
000086  2800              CMP      r0,#0
000088  d008              BEQ      |L10.156|
;;;355    		{
;;;356    			Global_datas.key_led_blink = 0;
00008a  2000              MOVS     r0,#0
00008c  7320              STRB     r0,[r4,#0xc]
;;;357    			drv_err_led_on(1);
00008e  2001              MOVS     r0,#1
000090  f7fffffe          BL       drv_err_led_on
;;;358    			TimeOutSet(&LedKeyBlinkTimer, 100);
000094  2164              MOVS     r1,#0x64
000096  48e5              LDR      r0,|L10.1068|
000098  f7fffffe          BL       TimeOutSet
                  |L10.156|
;;;359    		}
;;;360    
;;;361    		if(IsTimeOut(&LedKeyBlinkTimer))
00009c  48e3              LDR      r0,|L10.1068|
00009e  f7fffffe          BL       IsTimeOut
0000a2  2800              CMP      r0,#0
0000a4  d002              BEQ      |L10.172|
;;;362    		{
;;;363    			drv_err_led_on(0);
0000a6  2000              MOVS     r0,#0
0000a8  f7fffffe          BL       drv_err_led_on
                  |L10.172|
;;;364    		}
;;;365    
;;;366    		if(Global_datas.mode_switching)
0000ac  7c60              LDRB     r0,[r4,#0x11]  ; Global_datas
0000ae  2800              CMP      r0,#0
0000b0  d008              BEQ      |L10.196|
;;;367    		{
;;;368    			Global_datas.mode_switching = 0;
0000b2  2000              MOVS     r0,#0
0000b4  7460              STRB     r0,[r4,#0x11]
;;;369    			drv_5825_mute_pin_set(0);  // mute
0000b6  f7fffffe          BL       drv_5825_mute_pin_set
;;;370    			TimeOutSet(&ModeSwitchTimer, 1000);
0000ba  217d              MOVS     r1,#0x7d
0000bc  00c9              LSLS     r1,r1,#3
0000be  48dc              LDR      r0,|L10.1072|
0000c0  f7fffffe          BL       TimeOutSet
                  |L10.196|
;;;371    		}
;;;372    
;;;373    		if(IsTimeOut(&ModeSwitchTimer))
0000c4  48da              LDR      r0,|L10.1072|
0000c6  f7fffffe          BL       IsTimeOut
0000ca  2800              CMP      r0,#0
0000cc  d017              BEQ      |L10.254|
;;;374    		{
;;;375    			if(Global_datas.mute == 0)
0000ce  7ca0              LDRB     r0,[r4,#0x12]  ; Global_datas
0000d0  2800              CMP      r0,#0
0000d2  d011              BEQ      |L10.248|
0000d4  e013              B        |L10.254|
                  |L10.214|
0000d6  9805              LDR      r0,[sp,#0x14]         ;319
0000d8  2800              CMP      r0,#0                 ;319
0000da  d005              BEQ      |L10.232|
0000dc  48d1              LDR      r0,|L10.1060|
0000de  6307              STR      r7,[r0,#0x30]         ;321
0000e0  6347              STR      r7,[r0,#0x34]         ;322
0000e2  6047              STR      r7,[r0,#4]            ;323
0000e4  2000              MOVS     r0,#0                 ;324
0000e6  e005              B        |L10.244|
                  |L10.232|
0000e8  49ce              LDR      r1,|L10.1060|
0000ea  2000              MOVS     r0,#0                 ;328
0000ec  6308              STR      r0,[r1,#0x30]         ;328
0000ee  6348              STR      r0,[r1,#0x34]         ;329
0000f0  6048              STR      r0,[r1,#4]            ;330
0000f2  2001              MOVS     r0,#1                 ;331
                  |L10.244|
0000f4  9005              STR      r0,[sp,#0x14]         ;331
0000f6  e7be              B        |L10.118|
                  |L10.248|
;;;376    			{
;;;377    				drv_5825_mute_pin_set(1);  // unmute
0000f8  2001              MOVS     r0,#1
0000fa  f7fffffe          BL       drv_5825_mute_pin_set
                  |L10.254|
;;;378    			}
;;;379    		}
;;;380    
;;;381    		
;;;382    
;;;383    		if(Core_Msg_Get(&msg))
0000fe  a801              ADD      r0,sp,#4
000100  f7fffffe          BL       Core_Msg_Get
000104  2800              CMP      r0,#0
000106  d07d              BEQ      |L10.516|
;;;384    		{
;;;385            // deal with message
;;;386            switch(msg.msg)
000108  9801              LDR      r0,[sp,#4]
00010a  2801              CMP      r0,#1
00010c  d002              BEQ      |L10.276|
00010e  2802              CMP      r0,#2
                  |L10.272|
000110  d178              BNE      |L10.516|
000112  e12c              B        |L10.878|
                  |L10.276|
;;;387    	        {
;;;388    	            case MSG_4G_SYS_STATE_IND:
;;;389    					drv_Cmd_Send2NCU031(msg.param0,msg.param1,msg.param2);
000114  9804              LDR      r0,[sp,#0x10]
000116  b2c2              UXTB     r2,r0
000118  9803              LDR      r0,[sp,#0xc]
00011a  b2c1              UXTB     r1,r0
00011c  9802              LDR      r0,[sp,#8]
00011e  b2c0              UXTB     r0,r0
000120  f7fffffe          BL       drv_Cmd_Send2NCU031
;;;390    					printf("MSG_4G_SYS_STATE_IND:msg.param0 = %x, msg.param1 = %x \n",msg.param0,msg.param1);
000124  a0c3              ADR      r0,|L10.1076|
000126  9a03              LDR      r2,[sp,#0xc]
000128  9902              LDR      r1,[sp,#8]
00012a  f7fffffe          BL       __2printf
;;;391    	                if((msg.param0 == 0x08) && (msg.param1 == 0x00))
00012e  9802              LDR      r0,[sp,#8]
000130  2808              CMP      r0,#8
000132  d113              BNE      |L10.348|
000134  9803              LDR      r0,[sp,#0xc]
000136  2800              CMP      r0,#0
000138  d1ea              BNE      |L10.272|
;;;392    	                {
;;;393    
;;;394    						printf("0x08, msg.param1 = %x \n",msg.param1);
00013a  4601              MOV      r1,r0
00013c  a0cb              ADR      r0,|L10.1132|
00013e  f7fffffe          BL       __2printf
;;;395    	                	//Cmd_Send2FourG(0x03,0x16,0x00);
;;;396    						drv_Cmd_Send2NCU031(msg.param0,msg.param1,0);
000142  9803              LDR      r0,[sp,#0xc]
000144  2200              MOVS     r2,#0
000146  b2c1              UXTB     r1,r0
000148  9802              LDR      r0,[sp,#8]
00014a  b2c0              UXTB     r0,r0
00014c  f7fffffe          BL       drv_Cmd_Send2NCU031
;;;397    						Global_datas.g_4g_initing = 0;
000150  2000              MOVS     r0,#0
000152  71a0              STRB     r0,[r4,#6]
;;;398    						Global_datas.g_mode_status = WIFI_MODE;
000154  7167              STRB     r7,[r4,#5]
;;;399    						printf("\n AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n");
000156  a0cb              ADR      r0,|L10.1156|
000158  f7fffffe          BL       __2printf
                  |L10.348|
;;;400    					} 
;;;401    					
;;;402    					if((msg.param0 == 0x09) && (msg.param1 == 0x01))
00015c  9802              LDR      r0,[sp,#8]
00015e  2809              CMP      r0,#9
000160  d12a              BNE      |L10.440|
000162  9803              LDR      r0,[sp,#0xc]
000164  2801              CMP      r0,#1
000166  d1d3              BNE      |L10.272|
;;;403    	                {
;;;404    //						printf("0x09, msg.param1 = %x \n",msg.param1);
;;;405    	                	//in bat val
;;;406    						bat_val[1] = (Global_datas.ADC_ChannelValue[15]>>8) & 0xff;
000168  48aa              LDR      r0,|L10.1044|
00016a  466b              MOV      r3,sp
00016c  3820              SUBS     r0,r0,#0x20
00016e  8bc0              LDRH     r0,[r0,#0x1e]  ; Global_datas
000170  0401              LSLS     r1,r0,#16
000172  0e09              LSRS     r1,r1,#24
000174  7059              STRB     r1,[r3,#1]
;;;407    						bat_val[0] = Global_datas.ADC_ChannelValue[15] & 0xff;
000176  b2c2              UXTB     r2,r0
000178  701a              STRB     r2,[r3,#0]
;;;408    						if(Global_datas.g_PowerStatus.PowerBatInStatus != POWER_BAT_IN_FALSE)
00017a  7820              LDRB     r0,[r4,#0]  ; Global_datas
00017c  2801              CMP      r0,#1
00017e  d002              BEQ      |L10.390|
;;;409    							bat_val[1] = bat_val[1] & 0x80;  //in bat en
000180  09c8              LSRS     r0,r1,#7
000182  01c0              LSLS     r0,r0,#7
000184  7058              STRB     r0,[r3,#1]
                  |L10.390|
;;;410    						Cmd_Send2FourG(0x09,bat_val[1],bat_val[0]);
000186  7859              LDRB     r1,[r3,#1]
000188  2009              MOVS     r0,#9
00018a  f7fffffe          BL       Cmd_Send2FourG
;;;411    						//ex bat val
;;;412    						bat_val[1] = (Global_datas.ADC_ChannelValue[12]>>8) & 0xff;
00018e  48a1              LDR      r0,|L10.1044|
000190  3820              SUBS     r0,r0,#0x20
000192  8b02              LDRH     r2,[r0,#0x18]  ; Global_datas
000194  0410              LSLS     r0,r2,#16
000196  0e01              LSRS     r1,r0,#24
000198  4668              MOV      r0,sp
00019a  7041              STRB     r1,[r0,#1]
;;;413    						bat_val[0] = Global_datas.ADC_ChannelValue[12] & 0xff;
00019c  b2d2              UXTB     r2,r2
00019e  7002              STRB     r2,[r0,#0]
;;;414    						if(Global_datas.g_PowerStatus.PowerBatExStatus != POWER_BAT_EX_FALSE)
0001a0  7860              LDRB     r0,[r4,#1]  ; Global_datas
0001a2  2803              CMP      r0,#3
0001a4  d003              BEQ      |L10.430|
;;;415    							bat_val[1] = bat_val[1] & 0x60;  //ex bat en
0001a6  2060              MOVS     r0,#0x60
0001a8  4001              ANDS     r1,r1,r0
0001aa  4668              MOV      r0,sp
0001ac  7041              STRB     r1,[r0,#1]
                  |L10.430|
;;;416    						Cmd_Send2FourG(0x09,bat_val[1],bat_val[0]);
0001ae  4668              MOV      r0,sp
0001b0  7841              LDRB     r1,[r0,#1]
0001b2  2009              MOVS     r0,#9
0001b4  f7fffffe          BL       Cmd_Send2FourG
                  |L10.440|
;;;417    					}
;;;418    					
;;;419    					if(msg.param0 == 0x07)
0001b8  9802              LDR      r0,[sp,#8]
0001ba  2807              CMP      r0,#7
0001bc  d103              BNE      |L10.454|
;;;420    	        		{
;;;421    	                	// vol
;;;422    	                	//Drv_Dap_vol_set(msg.param1);
;;;423    						printf("0x07, msg.param1 = %x \n",msg.param1);
0001be  a0bb              ADR      r0,|L10.1196|
0001c0  9903              LDR      r1,[sp,#0xc]
0001c2  f7fffffe          BL       __2printf
                  |L10.454|
;;;424    					}
;;;425    					if(msg.param0 == 0x04 )
0001c6  9802              LDR      r0,[sp,#8]
0001c8  2804              CMP      r0,#4
0001ca  d103              BNE      |L10.468|
;;;426    					{
;;;427    	                	//Drv_Dap_vol_mute(msg.param1);
;;;428    	                	// vol
;;;429    	                	
;;;430    					printf("0x04, msg.param1 = %x \n",msg.param1);
0001cc  a0bd              ADR      r0,|L10.1220|
0001ce  9903              LDR      r1,[sp,#0xc]
0001d0  f7fffffe          BL       __2printf
                  |L10.468|
;;;431    					}
;;;432    					
;;;433    					if(msg.param0 == 0x0F)
0001d4  9802              LDR      r0,[sp,#8]
0001d6  280f              CMP      r0,#0xf
0001d8  d111              BNE      |L10.510|
;;;434    					{
;;;435    						if(msg.param1 == 0x19)
0001da  9803              LDR      r0,[sp,#0xc]
0001dc  2819              CMP      r0,#0x19
0001de  d105              BNE      |L10.492|
;;;436    						{
;;;437    							Global_datas.g_mode_status = LOUD_SPEAKER_MODE;
0001e0  2009              MOVS     r0,#9
0001e2  7160              STRB     r0,[r4,#5]
;;;438    							printf("0x0F, msg.param1 = %x \n",msg.param1);
0001e4  a0bd              ADR      r0,|L10.1244|
0001e6  9903              LDR      r1,[sp,#0xc]
0001e8  f7fffffe          BL       __2printf
                  |L10.492|
;;;439    						}
;;;440    					
;;;441    						if (msg.param1 == 0x17)
0001ec  9803              LDR      r0,[sp,#0xc]
0001ee  2817              CMP      r0,#0x17
0001f0  d105              BNE      |L10.510|
;;;442    						{
;;;443    		                	Global_datas.g_mode_status = AUX_MODE;
0001f2  2008              MOVS     r0,#8
0001f4  7160              STRB     r0,[r4,#5]
;;;444    						printf("0x0F, msg.param1 = %x \n",msg.param1);
0001f6  a0b9              ADR      r0,|L10.1244|
0001f8  9903              LDR      r1,[sp,#0xc]
0001fa  f7fffffe          BL       __2printf
                  |L10.510|
;;;445    						}
;;;446    					}
;;;447    
;;;448    					if(msg.param0 == 0x0d)  // 4G GO TO POWER OFF , NEED TO POWER DOWN 4G VCC
0001fe  9802              LDR      r0,[sp,#8]
000200  280d              CMP      r0,#0xd
000202  e000              B        |L10.518|
                  |L10.516|
000204  e0b2              B        |L10.876|
                  |L10.518|
000206  d105              BNE      |L10.532|
;;;449    					{
;;;450    						Drv_4GMoudle_PowerUp(0);  // wait for 4g modle ready ,than turn off power
000208  2000              MOVS     r0,#0
00020a  f7fffffe          BL       Drv_4GMoudle_PowerUp
;;;451    						TYM_drv_powerkeepon(0); 
00020e  2000              MOVS     r0,#0
000210  f7fffffe          BL       TYM_drv_powerkeepon
                  |L10.532|
;;;452    					}
;;;453    
;;;454    					if(msg.param0 == 0x06)  // sys status
000214  9802              LDR      r0,[sp,#8]
000216  2806              CMP      r0,#6
000218  d14f              BNE      |L10.698|
;;;455    					{
;;;456    						if(msg.param1 == 0x06)
00021a  9803              LDR      r0,[sp,#0xc]
00021c  2806              CMP      r0,#6
00021e  d104              BNE      |L10.554|
;;;457    						{
;;;458    		                	Global_datas.g_mode_status = BT_MODE;
000220  2106              MOVS     r1,#6
000222  7161              STRB     r1,[r4,#5]
;;;459    							printf("0x06, msg.param1 = %x \n",msg.param1);
000224  a0b3              ADR      r0,|L10.1268|
000226  f7fffffe          BL       __2printf
                  |L10.554|
;;;460    						}
;;;461    					
;;;462    						if (msg.param1 == 0x07)
00022a  9803              LDR      r0,[sp,#0xc]
00022c  2807              CMP      r0,#7
00022e  d104              BNE      |L10.570|
;;;463    						{
;;;464    		                	Global_datas.g_mode_status = BT_CONNECTED_MODE;
000230  2107              MOVS     r1,#7
000232  7161              STRB     r1,[r4,#5]
;;;465    		                	
;;;466    						printf("0x06, msg.param1 = %x \n",msg.param1);
000234  a0af              ADR      r0,|L10.1268|
000236  f7fffffe          BL       __2printf
                  |L10.570|
;;;467    						}
;;;468    						if (msg.param1 == 0x02)
00023a  9803              LDR      r0,[sp,#0xc]
00023c  2802              CMP      r0,#2
00023e  d104              BNE      |L10.586|
;;;469    						{
;;;470    		                	Global_datas.g_mode_status = WIFI_CONNECTED_MODE;
000240  2102              MOVS     r1,#2
000242  7161              STRB     r1,[r4,#5]
;;;471    		                	
;;;472    						printf("0x06, msg.param1 = %x \n",msg.param1);
000244  a0ab              ADR      r0,|L10.1268|
000246  f7fffffe          BL       __2printf
                  |L10.586|
;;;473    						}
;;;474    						if (msg.param1 == 0x04)
00024a  9803              LDR      r0,[sp,#0xc]
00024c  2804              CMP      r0,#4
00024e  d104              BNE      |L10.602|
;;;475    						{
;;;476    		                	Global_datas.g_mode_status = WIFI_MODE;
;;;477    		                	
;;;478    						printf("0x06, msg.param1 = %x \n",msg.param1);
000250  4601              MOV      r1,r0
000252  7167              STRB     r7,[r4,#5]            ;476
000254  a0a7              ADR      r0,|L10.1268|
000256  f7fffffe          BL       __2printf
                  |L10.602|
;;;479    						}
;;;480    						if (msg.param1 == 0x05)
00025a  9803              LDR      r0,[sp,#0xc]
00025c  2805              CMP      r0,#5
00025e  d105              BNE      |L10.620|
;;;481    						{
;;;482    		                	Global_datas.g_mode_status = WIFI_CONNECTING_MODE;
000260  2003              MOVS     r0,#3
000262  7160              STRB     r0,[r4,#5]
;;;483    		                	
;;;484    						printf("0x06, msg.param1 = %x \n",msg.param1);
000264  a0a3              ADR      r0,|L10.1268|
000266  9903              LDR      r1,[sp,#0xc]
000268  f7fffffe          BL       __2printf
                  |L10.620|
;;;485    						}
;;;486    						if (msg.param1 == 0x011)
00026c  9803              LDR      r0,[sp,#0xc]
00026e  2811              CMP      r0,#0x11
000270  d105              BNE      |L10.638|
;;;487    						{
;;;488    		                	Global_datas.g_mode_status = FOURG_CONNECTED_MODE;
000272  2005              MOVS     r0,#5
000274  7160              STRB     r0,[r4,#5]
;;;489    		                	
;;;490    						printf("0x06, msg.param1 = %x \n",msg.param1);
000276  a09f              ADR      r0,|L10.1268|
000278  9903              LDR      r1,[sp,#0xc]
00027a  f7fffffe          BL       __2printf
                  |L10.638|
;;;491    						}
;;;492    						if (msg.param1 == 0x012)
00027e  9803              LDR      r0,[sp,#0xc]
000280  2812              CMP      r0,#0x12
000282  d105              BNE      |L10.656|
;;;493    						{
;;;494    		                	Global_datas.g_mode_status = FOURG_MODE;
000284  2004              MOVS     r0,#4
000286  7160              STRB     r0,[r4,#5]
;;;495    		                	
;;;496    						printf("0x06, msg.param1 = %x \n",msg.param1);
000288  a09a              ADR      r0,|L10.1268|
00028a  9903              LDR      r1,[sp,#0xc]
00028c  f7fffffe          BL       __2printf
                  |L10.656|
;;;497    						}
;;;498    						if (msg.param1 == 0x0B)
000290  9803              LDR      r0,[sp,#0xc]
000292  280b              CMP      r0,#0xb
000294  d104              BNE      |L10.672|
;;;499    						{
;;;500    		                	Global_datas.g_mode_status = SYSTEM_UPDATING;
000296  210b              MOVS     r1,#0xb
000298  7161              STRB     r1,[r4,#5]
;;;501    		                	
;;;502    						printf("0x06, msg.param1 = %x \n",msg.param1);
00029a  a096              ADR      r0,|L10.1268|
00029c  f7fffffe          BL       __2printf
                  |L10.672|
;;;503    						}
;;;504    						if ((msg.param1 == 0x09) || (msg.param1 == 0x08) || (msg.param1 == 0x16))
0002a0  9803              LDR      r0,[sp,#0xc]
0002a2  2809              CMP      r0,#9
0002a4  d003              BEQ      |L10.686|
0002a6  2808              CMP      r0,#8
0002a8  d001              BEQ      |L10.686|
0002aa  2816              CMP      r0,#0x16
0002ac  d105              BNE      |L10.698|
                  |L10.686|
;;;505    						{
;;;506    		                	Global_datas.g_mode_status = SYS_LOW_POWER;
0002ae  200c              MOVS     r0,#0xc
0002b0  7160              STRB     r0,[r4,#5]
;;;507    		                	
;;;508    						printf("0x06, msg.param1 = %x \n",msg.param1);
0002b2  a090              ADR      r0,|L10.1268|
0002b4  9903              LDR      r1,[sp,#0xc]
0002b6  f7fffffe          BL       __2printf
                  |L10.698|
;;;509    						}
;;;510    						
;;;511    					}
;;;512    				//rtc time	
;;;513    					if(msg.param0 == 0x11)
0002ba  9802              LDR      r0,[sp,#8]
0002bc  2811              CMP      r0,#0x11
0002be  d105              BNE      |L10.716|
;;;514    					{
;;;515    						srv_rtc_set_ym(msg.param1,msg.param2);
0002c0  9804              LDR      r0,[sp,#0x10]
0002c2  b2c1              UXTB     r1,r0
0002c4  9803              LDR      r0,[sp,#0xc]
0002c6  b2c0              UXTB     r0,r0
0002c8  f7fffffe          BL       srv_rtc_set_ym
                  |L10.716|
;;;516    					}
;;;517    					
;;;518    					if(msg.param0 == 0x12)
0002cc  9802              LDR      r0,[sp,#8]
0002ce  2812              CMP      r0,#0x12
0002d0  d105              BNE      |L10.734|
;;;519    					{
;;;520    						srv_rtc_set_dw(msg.param1,msg.param2);
0002d2  9804              LDR      r0,[sp,#0x10]
0002d4  b2c1              UXTB     r1,r0
0002d6  9803              LDR      r0,[sp,#0xc]
0002d8  b2c0              UXTB     r0,r0
0002da  f7fffffe          BL       srv_rtc_set_dw
                  |L10.734|
;;;521    					}
;;;522    					
;;;523    					if(msg.param0 == 0x13)
0002de  9802              LDR      r0,[sp,#8]
0002e0  2813              CMP      r0,#0x13
0002e2  d105              BNE      |L10.752|
;;;524    					{
;;;525    						srv_rtc_set_hm(msg.param1,msg.param2);
0002e4  9804              LDR      r0,[sp,#0x10]
0002e6  b2c1              UXTB     r1,r0
0002e8  9803              LDR      r0,[sp,#0xc]
0002ea  b2c0              UXTB     r0,r0
0002ec  f7fffffe          BL       srv_rtc_set_hm
                  |L10.752|
;;;526    					}
;;;527    					
;;;528    					if(msg.param0 == 0x14)
0002f0  9802              LDR      r0,[sp,#8]
0002f2  2814              CMP      r0,#0x14
0002f4  d105              BNE      |L10.770|
;;;529    					{
;;;530    						srv_rtc_set_st(msg.param1,msg.param2);
0002f6  9804              LDR      r0,[sp,#0x10]
0002f8  b2c1              UXTB     r1,r0
0002fa  9803              LDR      r0,[sp,#0xc]
0002fc  b2c0              UXTB     r0,r0
0002fe  f7fffffe          BL       srv_rtc_set_st
                  |L10.770|
;;;531    					}
;;;532    					//rtc alarm
;;;533    					if(msg.param0 == 0x15)
000302  9802              LDR      r0,[sp,#8]
000304  2815              CMP      r0,#0x15
000306  d105              BNE      |L10.788|
;;;534    					{
;;;535    						srv_rtc_alarm_set_ym(msg.param1,msg.param2);
000308  9804              LDR      r0,[sp,#0x10]
00030a  b2c1              UXTB     r1,r0
00030c  9803              LDR      r0,[sp,#0xc]
00030e  b2c0              UXTB     r0,r0
000310  f7fffffe          BL       srv_rtc_alarm_set_ym
                  |L10.788|
;;;536    					}
;;;537    					
;;;538    					if(msg.param0 == 0x16)
000314  9802              LDR      r0,[sp,#8]
000316  2816              CMP      r0,#0x16
000318  d105              BNE      |L10.806|
;;;539    					{
;;;540    						srv_rtc_alarm_set_dw(msg.param1,msg.param2);
00031a  9804              LDR      r0,[sp,#0x10]
00031c  b2c1              UXTB     r1,r0
00031e  9803              LDR      r0,[sp,#0xc]
000320  b2c0              UXTB     r0,r0
000322  f7fffffe          BL       srv_rtc_alarm_set_dw
                  |L10.806|
;;;541    					}
;;;542    					
;;;543    					if(msg.param0 == 0x17)
000326  9802              LDR      r0,[sp,#8]
000328  2817              CMP      r0,#0x17
00032a  d105              BNE      |L10.824|
;;;544    					{
;;;545    						srv_rtc_alarm_set_hm(msg.param1,msg.param2);
00032c  9804              LDR      r0,[sp,#0x10]
00032e  b2c1              UXTB     r1,r0
000330  9803              LDR      r0,[sp,#0xc]
000332  b2c0              UXTB     r0,r0
000334  f7fffffe          BL       srv_rtc_alarm_set_hm
                  |L10.824|
;;;546    					}
;;;547    					
;;;548    					if(msg.param0 == 0x18)
000338  9802              LDR      r0,[sp,#8]
00033a  2818              CMP      r0,#0x18
00033c  d105              BNE      |L10.842|
;;;549    					{
;;;550    						srv_rtc_alarm_set_st(msg.param1,msg.param2);
00033e  9804              LDR      r0,[sp,#0x10]
000340  b2c1              UXTB     r1,r0
000342  9803              LDR      r0,[sp,#0xc]
000344  b2c0              UXTB     r0,r0
000346  f7fffffe          BL       srv_rtc_alarm_set_st
                  |L10.842|
;;;551    					}
;;;552    					if(msg.param0 == 0x19)
00034a  9802              LDR      r0,[sp,#8]
00034c  2819              CMP      r0,#0x19
00034e  d101              BNE      |L10.852|
;;;553    					{
;;;554    						srv_rtc_get();
000350  f7fffffe          BL       srv_rtc_get
                  |L10.852|
;;;555    					}
;;;556    					if(msg.param0 == 0x1a)
000354  9802              LDR      r0,[sp,#8]
000356  281a              CMP      r0,#0x1a
000358  d101              BNE      |L10.862|
;;;557    					{
;;;558    						srv_rtc_alarm_get();
00035a  f7fffffe          BL       srv_rtc_alarm_get
                  |L10.862|
;;;559    					}
;;;560    					
;;;561    					if(msg.param0 == 0x20)
00035e  9802              LDR      r0,[sp,#8]
000360  2820              CMP      r0,#0x20
000362  d103              BNE      |L10.876|
;;;562    					{
;;;563    						Cmd_Send2FourG(0x20,0x0,0x3);  //version 0.0.3
000364  2203              MOVS     r2,#3
000366  2100              MOVS     r1,#0
000368  f7fffffe          BL       Cmd_Send2FourG
                  |L10.876|
00036c  e147              B        |L10.1534|
                  |L10.878|
;;;564    					}
;;;565    	            break;
;;;566    
;;;567    			 	case MSG_MCU1_SYS_STATE_IND:
;;;568    
;;;569    				    if((msg.param0 == 0x03) && (msg.param1 == 0x55)) //power off mode
00036e  9802              LDR      r0,[sp,#8]
000370  2803              CMP      r0,#3
000372  d102              BNE      |L10.890|
000374  9803              LDR      r0,[sp,#0xc]
000376  2855              CMP      r0,#0x55
000378  d0f8              BEQ      |L10.876|
                  |L10.890|
;;;570    					{
;;;571    						//Global_datas.g_mode_status = POWER_OFF_MODE;
;;;572    					}
;;;573    					else
;;;574    					{
;;;575    						Cmd_Send2FourG( msg.param0,msg.param1,msg.param2);
00037a  9804              LDR      r0,[sp,#0x10]
00037c  b2c2              UXTB     r2,r0
00037e  9803              LDR      r0,[sp,#0xc]
000380  b2c1              UXTB     r1,r0
000382  9802              LDR      r0,[sp,#8]
000384  b2c0              UXTB     r0,r0
000386  f7fffffe          BL       Cmd_Send2FourG
;;;576    					}
;;;577    					
;;;578    					
;;;579    					//printf("MSG_MCU1_SYS_STATE_IND:msg.param0 = %x, msg.param1 = %x \n",msg.param0,msg.param1);
;;;580    					if((msg.param0 == 0x01) && (msg.param1 == 0x00))
00038a  9802              LDR      r0,[sp,#8]
00038c  2801              CMP      r0,#1
00038e  d107              BNE      |L10.928|
000390  9803              LDR      r0,[sp,#0xc]
000392  2800              CMP      r0,#0
000394  d1ea              BNE      |L10.876|
;;;581    					{
;;;582    						drv_Cmd_Send2NCU031(0x01,Global_datas.g_PowerStatus.bat_status,Global_datas.g_PowerStatus.bat_value);
000396  7922              LDRB     r2,[r4,#4]  ; Global_datas
000398  78e1              LDRB     r1,[r4,#3]  ; Global_datas
00039a  2001              MOVS     r0,#1
00039c  f7fffffe          BL       drv_Cmd_Send2NCU031
                  |L10.928|
;;;583    					}
;;;584    					if(msg.param0 == 0x02) // MIC VOLUNE ,NO USE 
;;;585    					{
;;;586    					
;;;587    					}
;;;588    
;;;589    					if((msg.param0 == 0x03) && (msg.param1 == 0x03))
0003a0  9802              LDR      r0,[sp,#8]
0003a2  2803              CMP      r0,#3
0003a4  d1e2              BNE      |L10.876|
0003a6  9803              LDR      r0,[sp,#0xc]
0003a8  2803              CMP      r0,#3
0003aa  d110              BNE      |L10.974|
;;;590    					{
;;;591    						if (Global_datas.volume > VOLUME_MIN)
0003ac  7be0              LDRB     r0,[r4,#0xf]  ; Global_datas
0003ae  2800              CMP      r0,#0
0003b0  d029              BEQ      |L10.1030|
0003b2  1e40              SUBS     r0,r0,#1
;;;592    						{
;;;593    							Global_datas.volume--;
0003b4  b2c0              UXTB     r0,r0
0003b6  73e0              STRB     r0,[r4,#0xf]
;;;594    							Drv_Dap_vol_set(Global_datas.volume);
0003b8  f7fffffe          BL       Drv_Dap_vol_set
;;;595    							if(Global_datas.volume == 0)
0003bc  7be0              LDRB     r0,[r4,#0xf]  ; Global_datas
0003be  2800              CMP      r0,#0
0003c0  d102              BNE      |L10.968|
;;;596    							{
;;;597    								Global_datas.mute = 1;
0003c2  74a7              STRB     r7,[r4,#0x12]
;;;598    								drv_5825_mute_pin_set(0); 
0003c4  f7fffffe          BL       drv_5825_mute_pin_set
                  |L10.968|
;;;599    							}
;;;600    							//printf("Hal_Dap_Load_vol_reduce\n");
;;;601    						}
;;;602    					}
;;;603    					
;;;604    					if((msg.param0 == 0x03) && (msg.param1 == 0x02))
0003c8  9802              LDR      r0,[sp,#8]
0003ca  2803              CMP      r0,#3
0003cc  d11b              BNE      |L10.1030|
                  |L10.974|
0003ce  9803              LDR      r0,[sp,#0xc]
0003d0  2802              CMP      r0,#2
0003d2  d10c              BNE      |L10.1006|
;;;605    					{
;;;606    
;;;607    						Global_datas.mute = 0;
0003d4  2000              MOVS     r0,#0
0003d6  74a0              STRB     r0,[r4,#0x12]
;;;608    						if (Global_datas.volume < VOLUME_MAX)
0003d8  7be0              LDRB     r0,[r4,#0xf]  ; Global_datas
0003da  2810              CMP      r0,#0x10
0003dc  d213              BCS      |L10.1030|
0003de  1c40              ADDS     r0,r0,#1
;;;609    						{
;;;610    							Global_datas.volume++;
0003e0  b2c0              UXTB     r0,r0
0003e2  73e0              STRB     r0,[r4,#0xf]
;;;611    							Drv_Dap_vol_set(Global_datas.volume);
0003e4  f7fffffe          BL       Drv_Dap_vol_set
;;;612    							//printf("Hal_Dap_Load_vol_add\n");
;;;613    						}
;;;614    					}
;;;615    
;;;616    					if((msg.param0 == 0x03) && (msg.param1 == 0x15)) //wifi mode
0003e8  9802              LDR      r0,[sp,#8]
0003ea  2803              CMP      r0,#3
0003ec  d10b              BNE      |L10.1030|
                  |L10.1006|
0003ee  9803              LDR      r0,[sp,#0xc]
0003f0  2815              CMP      r0,#0x15
0003f2  d109              BNE      |L10.1032|
;;;617    					{
;;;618    
;;;619    						drv_5825_mute_pin_set(0); 
0003f4  2000              MOVS     r0,#0
0003f6  f7fffffe          BL       drv_5825_mute_pin_set
;;;620    						Global_datas.mode_switching = 1;
0003fa  7467              STRB     r7,[r4,#0x11]
;;;621    						Global_datas.g_mode_status = WIFI_MODE;
0003fc  7167              STRB     r7,[r4,#5]
;;;622    						drv_audio_4G_Channel();
0003fe  f7fffffe          BL       drv_audio_4G_Channel
;;;623    						
;;;624    						printf("FourG_WIFI_CHANNEL\n");
000402  a042              ADR      r0,|L10.1292|
000404  e08c              B        |L10.1312|
                  |L10.1030|
000406  e0fa              B        |L10.1534|
                  |L10.1032|
000408  e08f              B        |L10.1322|
00040a  0000              DCW      0x0000
                  |L10.1036|
00040c  0a6d6169          DCB      "\nmain\n",0
000410  6e0a00  
000413  00                DCB      0
                  |L10.1044|
                          DCD      Global_datas+0x20
                  |L10.1048|
                          DCD      SysTimer_1s
                  |L10.1052|
                          DCD      ModulePowerUpPinTimer
                  |L10.1056|
                          DCD      PoweroffLedTimer
                  |L10.1060|
                          DCD      0x50004200
                  |L10.1064|
                          DCD      SubBoardHandshakeTimer
                  |L10.1068|
                          DCD      LedKeyBlinkTimer
                  |L10.1072|
                          DCD      ModeSwitchTimer
                  |L10.1076|
000434  4d53475f          DCB      "MSG_4G_SYS_STATE_IND:msg.param0 = %x, msg.param1 = %x \n"
000438  34475f53
00043c  59535f53
000440  54415445
000444  5f494e44
000448  3a6d7367
00044c  2e706172
000450  616d3020
000454  3d202578
000458  2c206d73
00045c  672e7061
000460  72616d31
000464  203d2025
000468  78200a  
00046b  00                DCB      0
                  |L10.1132|
00046c  30783038          DCB      "0x08, msg.param1 = %x \n",0
000470  2c206d73
000474  672e7061
000478  72616d31
00047c  203d2025
000480  78200a00
                  |L10.1156|
000484  0a204141          DCB      "\n AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n",0
000488  41414141
00048c  41414141
000490  41414141
000494  41414141
000498  41414141
00049c  41414141
0004a0  41414141
0004a4  41414141
0004a8  0a00    
0004aa  00                DCB      0
0004ab  00                DCB      0
                  |L10.1196|
0004ac  30783037          DCB      "0x07, msg.param1 = %x \n",0
0004b0  2c206d73
0004b4  672e7061
0004b8  72616d31
0004bc  203d2025
0004c0  78200a00
                  |L10.1220|
0004c4  30783034          DCB      "0x04, msg.param1 = %x \n",0
0004c8  2c206d73
0004cc  672e7061
0004d0  72616d31
0004d4  203d2025
0004d8  78200a00
                  |L10.1244|
0004dc  30783046          DCB      "0x0F, msg.param1 = %x \n",0
0004e0  2c206d73
0004e4  672e7061
0004e8  72616d31
0004ec  203d2025
0004f0  78200a00
                  |L10.1268|
0004f4  30783036          DCB      "0x06, msg.param1 = %x \n",0
0004f8  2c206d73
0004fc  672e7061
000500  72616d31
000504  203d2025
000508  78200a00
                  |L10.1292|
00050c  466f7572          DCB      "FourG_WIFI_CHANNEL\n",0
000510  475f5749
000514  46495f43
000518  48414e4e
00051c  454c0a00
                  |L10.1312|
000520  f7fffffe          BL       __2printf
;;;625    					}
;;;626    					if((msg.param0 == 0x03) && (msg.param1 == 0x16)) //BT mode
000524  9802              LDR      r0,[sp,#8]
000526  2803              CMP      r0,#3
000528  d169              BNE      |L10.1534|
                  |L10.1322|
00052a  9803              LDR      r0,[sp,#0xc]
00052c  2816              CMP      r0,#0x16
00052e  d10d              BNE      |L10.1356|
;;;627    					{
;;;628    						drv_5825_mute_pin_set(0); 
000530  2000              MOVS     r0,#0
000532  f7fffffe          BL       drv_5825_mute_pin_set
;;;629    						Global_datas.mode_switching = 1;
000536  7467              STRB     r7,[r4,#0x11]
;;;630    						Global_datas.g_mode_status = BT_MODE;
000538  2006              MOVS     r0,#6
00053a  7160              STRB     r0,[r4,#5]
;;;631    						drv_audio_4G_Channel();  	// bt wifi use the same mode
00053c  f7fffffe          BL       drv_audio_4G_Channel
;;;632    						printf("BT_CHANNEL\n");
000540  a041              ADR      r0,|L10.1608|
000542  f7fffffe          BL       __2printf
;;;633    					}
;;;634    					if((msg.param0 == 0x03) && (msg.param1 == 0x17)) //AUX mode
000546  9802              LDR      r0,[sp,#8]
000548  2803              CMP      r0,#3
00054a  d158              BNE      |L10.1534|
                  |L10.1356|
00054c  9803              LDR      r0,[sp,#0xc]
00054e  2817              CMP      r0,#0x17
000550  d10d              BNE      |L10.1390|
;;;635    					{
;;;636    						drv_5825_mute_pin_set(0); 
000552  2000              MOVS     r0,#0
000554  f7fffffe          BL       drv_5825_mute_pin_set
;;;637    						Global_datas.mode_switching = 1;
000558  7467              STRB     r7,[r4,#0x11]
;;;638    						Global_datas.g_mode_status = AUX_MODE;
00055a  2008              MOVS     r0,#8
00055c  7160              STRB     r0,[r4,#5]
;;;639    						drv_audio_AuxIn_Channel(); 
00055e  f7fffffe          BL       drv_audio_AuxIn_Channel
;;;640    						printf("AUXIN_CHANNEL\n");
000562  a03c              ADR      r0,|L10.1620|
000564  f7fffffe          BL       __2printf
;;;641    					}
;;;642    					if((msg.param0 == 0x03) && (msg.param1 == 0x18)) //FM mode
000568  9802              LDR      r0,[sp,#8]
00056a  2803              CMP      r0,#3
00056c  d147              BNE      |L10.1534|
                  |L10.1390|
00056e  9803              LDR      r0,[sp,#0xc]
000570  2818              CMP      r0,#0x18
000572  d10d              BNE      |L10.1424|
;;;643    					{
;;;644    						drv_5825_mute_pin_set(0); 
000574  2000              MOVS     r0,#0
000576  f7fffffe          BL       drv_5825_mute_pin_set
;;;645    						Global_datas.mode_switching = 1;
00057a  7467              STRB     r7,[r4,#0x11]
;;;646    						Global_datas.g_mode_status = FM_MODE;
00057c  200a              MOVS     r0,#0xa
00057e  7160              STRB     r0,[r4,#5]
;;;647    						drv_audio_FM_Channel(); 
000580  f7fffffe          BL       drv_audio_FM_Channel
;;;648    						printf("FM_CHANNEL\n");
000584  a037              ADR      r0,|L10.1636|
000586  f7fffffe          BL       __2printf
;;;649    					}
;;;650    					if((msg.param0 == 0x03) && (msg.param1 == 0x31)) // NEXT CHANNEL
;;;651    					{
;;;652    								
;;;653    					}
;;;654    					if((msg.param0 == 0x03) && (msg.param1 == 0x32))// PRE CHANNEL
;;;655    					{
;;;656    					
;;;657    					}
;;;658    					if((msg.param0 == 0x03) && (msg.param1 == 0x56)) // PLAY/PAUSE
;;;659    					{
;;;660    
;;;661    					}
;;;662    					if((msg.param0 == 0x03) && (msg.param1 == 0xC0)) //FM reset
00058a  9802              LDR      r0,[sp,#8]
00058c  2803              CMP      r0,#3
00058e  d136              BNE      |L10.1534|
                  |L10.1424|
000590  9803              LDR      r0,[sp,#0xc]
000592  28c0              CMP      r0,#0xc0
000594  d107              BNE      |L10.1446|
;;;663    					{
;;;664    						
;;;665    						drv_FM_on_NCU031_reset();
000596  f7fffffe          BL       drv_FM_on_NCU031_reset
;;;666    						printf("fm reset\n");
00059a  a035              ADR      r0,|L10.1648|
00059c  f7fffffe          BL       __2printf
;;;667    						
;;;668    					}
;;;669    					if((msg.param0 == 0x03) && (msg.param1 == 0xC1)) //inside
0005a0  9802              LDR      r0,[sp,#8]
0005a2  2803              CMP      r0,#3
0005a4  d12b              BNE      |L10.1534|
                  |L10.1446|
0005a6  9803              LDR      r0,[sp,#0xc]
0005a8  28c1              CMP      r0,#0xc1
0005aa  d105              BNE      |L10.1464|
;;;670    					{
;;;671    						printf("inside\n");
0005ac  a033              ADR      r0,|L10.1660|
0005ae  f7fffffe          BL       __2printf
;;;672    					}
;;;673    					if((msg.param0 == 0x03) && (msg.param1 == 0xC2)) //outside
0005b2  9802              LDR      r0,[sp,#8]
0005b4  2803              CMP      r0,#3
0005b6  d122              BNE      |L10.1534|
                  |L10.1464|
0005b8  9803              LDR      r0,[sp,#0xc]
0005ba  28c2              CMP      r0,#0xc2
0005bc  d105              BNE      |L10.1482|
;;;674    					{
;;;675    
;;;676    						printf("outside\n");
0005be  a031              ADR      r0,|L10.1668|
0005c0  f7fffffe          BL       __2printf
;;;677    					}
;;;678    					if((msg.param0 == 0x03) && (msg.param1 == 0xC3)) //autoside
0005c4  9802              LDR      r0,[sp,#8]
0005c6  2803              CMP      r0,#3
0005c8  d119              BNE      |L10.1534|
                  |L10.1482|
0005ca  9803              LDR      r0,[sp,#0xc]
0005cc  28c3              CMP      r0,#0xc3
0005ce  d105              BNE      |L10.1500|
;;;679    					{
;;;680    						printf("autoside\n");
0005d0  a02f              ADR      r0,|L10.1680|
0005d2  f7fffffe          BL       __2printf
;;;681    					}
;;;682    
;;;683    					if((msg.param0 == 0x03) && (msg.param1 == 0xCA)) // handshake
0005d6  9802              LDR      r0,[sp,#8]
0005d8  2803              CMP      r0,#3
0005da  d110              BNE      |L10.1534|
                  |L10.1500|
0005dc  9803              LDR      r0,[sp,#0xc]
0005de  28ca              CMP      r0,#0xca
0005e0  d10d              BNE      |L10.1534|
;;;684    					{
;;;685    						Global_datas.subboard_online = 1;
;;;686    						TimeOutSet(&SubBoardHandshakeTimer, 4000);
0005e2  217d              MOVS     r1,#0x7d
0005e4  7427              STRB     r7,[r4,#0x10]         ;685
0005e6  0149              LSLS     r1,r1,#5
0005e8  482c              LDR      r0,|L10.1692|
0005ea  f7fffffe          BL       TimeOutSet
;;;687    						drv_Cmd_Send2NCU031(msg.param0,msg.param1,msg.param2);//
0005ee  9804              LDR      r0,[sp,#0x10]
0005f0  b2c2              UXTB     r2,r0
0005f2  9803              LDR      r0,[sp,#0xc]
0005f4  b2c1              UXTB     r1,r0
0005f6  9802              LDR      r0,[sp,#8]
0005f8  b2c0              UXTB     r0,r0
0005fa  f7fffffe          BL       drv_Cmd_Send2NCU031
                  |L10.1534|
;;;688    					}					
;;;689    					
;;;690    	            break;
;;;691    					
;;;692    	            default:
;;;693    	             break;
;;;694    	        }
;;;695        	}
;;;696    	
;;;697    		srv_key_handler();
0005fe  f7fffffe          BL       srv_key_handler
;;;698    		GetKeyEvent();
000602  f7fffffe          BL       GetKeyEvent
;;;699    		IoKeyProcess();
000606  f7fffffe          BL       IoKeyProcess
;;;700    
;;;701    
;;;702    		
;;;703    		if (((count>>16)&0xF) == refcount0)	
00060a  9806              LDR      r0,[sp,#0x18]
00060c  0300              LSLS     r0,r0,#12
00060e  0f00              LSRS     r0,r0,#28
000610  42b0              CMP      r0,r6
000612  d107              BNE      |L10.1572|
;;;704    		{
;;;705    			
;;;706    			if(refcount0 <0xF)
000614  2e0f              CMP      r6,#0xf
000616  d202              BCS      |L10.1566|
000618  1c76              ADDS     r6,r6,#1
;;;707    				refcount0++;
00061a  b2f6              UXTB     r6,r6
00061c  e000              B        |L10.1568|
                  |L10.1566|
;;;708    			else
;;;709    				refcount0 = 0;
00061e  2600              MOVS     r6,#0
                  |L10.1568|
;;;710    			srv_bat_charge_handler();	
000620  f7fffffe          BL       srv_bat_charge_handler
                  |L10.1572|
;;;711    		}
;;;712    
;;;713    		if (((count>>15)&0xF) == refcount1)
000624  9806              LDR      r0,[sp,#0x18]
000626  0340              LSLS     r0,r0,#13
000628  0f00              LSRS     r0,r0,#28
00062a  42a8              CMP      r0,r5
00062c  d107              BNE      |L10.1598|
;;;714    		{	
;;;715    			
;;;716    			if(refcount1 <0xF)
00062e  2d0f              CMP      r5,#0xf
000630  d202              BCS      |L10.1592|
000632  1c6d              ADDS     r5,r5,#1
;;;717    				refcount1++;
000634  b2ed              UXTB     r5,r5
000636  e000              B        |L10.1594|
                  |L10.1592|
;;;718    			else
;;;719    				refcount1 = 0;
000638  2500              MOVS     r5,#0
                  |L10.1594|
;;;720    			
;;;721    			drv_power_status_updata();
00063a  f7fffffe          BL       drv_power_status_updata
                  |L10.1598|
;;;722    		}
;;;723    		count++;
00063e  9806              LDR      r0,[sp,#0x18]
000640  1c40              ADDS     r0,r0,#1
000642  9006              STR      r0,[sp,#0x18]         ;294
000644  e4ea              B        |L10.28|
;;;724    	}
;;;725    
;;;726    }
;;;727    
                          ENDP

000646  0000              DCW      0x0000
                  |L10.1608|
000648  42545f43          DCB      "BT_CHANNEL\n",0
00064c  48414e4e
000650  454c0a00
                  |L10.1620|
000654  41555849          DCB      "AUXIN_CHANNEL\n",0
000658  4e5f4348
00065c  414e4e45
000660  4c0a00  
000663  00                DCB      0
                  |L10.1636|
000664  464d5f43          DCB      "FM_CHANNEL\n",0
000668  48414e4e
00066c  454c0a00
                  |L10.1648|
000670  666d2072          DCB      "fm reset\n",0
000674  65736574
000678  0a00    
00067a  00                DCB      0
00067b  00                DCB      0
                  |L10.1660|
00067c  696e7369          DCB      "inside\n",0
000680  64650a00
                  |L10.1668|
000684  6f757473          DCB      "outside\n",0
000688  6964650a
00068c  00      
00068d  00                DCB      0
00068e  00                DCB      0
00068f  00                DCB      0
                  |L10.1680|
000690  6175746f          DCB      "autoside\n",0
000694  73696465
000698  0a00    
00069a  00                DCB      0
00069b  00                DCB      0
                  |L10.1692|
                          DCD      SubBoardHandshakeTimer

                          AREA ||.data||, DATA, ALIGN=0

                  sys_err
000000  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "..\\main.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_sys_err____REV16|
#line 388 "..\\lib\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___6_main_c_sys_err____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_sys_err____REVSH|
#line 402
|__asm___6_main_c_sys_err____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
