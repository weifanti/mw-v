; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\main.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\main.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\lib\CMSIS\Include -I..\lib\Device\Nuvoton\NUC029xGE\Include -I..\lib\StdDriver\inc -I..\src\core\include -I..\src\driver\include -I..\src\io\include -I..\src\global -I..\src\server\include -I..\src\driver\audio -D__UVISION_VERSION=522 --omf_browse=.\obj\main.crf ..\main.c]
                          THUMB

                          AREA ||i.Amplifier_open||, CODE, READONLY, ALIGN=2

                  Amplifier_open PROC
;;;122    
;;;123    void Amplifier_open(void)
000000  b510              PUSH     {r4,lr}
;;;124    {
;;;125    	GPIO_SetMode(PC, BIT1, GPIO_MODE_OUTPUT);	
000002  4c0c              LDR      r4,|L1.52|
000004  2201              MOVS     r2,#1
000006  2102              MOVS     r1,#2
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       GPIO_SetMode
;;;126    	GPIO_SetMode(PC, BIT13, GPIO_MODE_OUTPUT);
00000e  2201              MOVS     r2,#1
000010  0351              LSLS     r1,r2,#13
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       GPIO_SetMode
;;;127    	GPIO_SetMode(PB, BIT14, GPIO_MODE_OUTPUT);
000018  4806              LDR      r0,|L1.52|
00001a  2201              MOVS     r2,#1
00001c  0391              LSLS     r1,r2,#14
00001e  3840              SUBS     r0,r0,#0x40
000020  f7fffffe          BL       GPIO_SetMode
;;;128    	PC1 = 1;
000024  4904              LDR      r1,|L1.56|
000026  2001              MOVS     r0,#1
000028  6048              STR      r0,[r1,#4]
;;;129    	PC13 = 1;
00002a  6348              STR      r0,[r1,#0x34]
;;;130    	PB14 = 1;
00002c  4902              LDR      r1,|L1.56|
00002e  3940              SUBS     r1,r1,#0x40
000030  6388              STR      r0,[r1,#0x38]
;;;131    }
000032  bd10              POP      {r4,pc}
;;;132    
                          ENDP

                  |L1.52|
                          DCD      0x50004080
                  |L1.56|
                          DCD      0x50004280

                          AREA ||i.IoKeyProcess||, CODE, READONLY, ALIGN=2

                  IoKeyProcess PROC
;;;216    
;;;217    void IoKeyProcess(void)
000000  b570              PUSH     {r4-r6,lr}
;;;218    {
;;;219    
;;;220    	if(((Global_datas.g_mode_status == POWER_IDLE_MODE || Global_datas.g_mode_status == POWER_ON_MODE )&&(IN_KEY_POWER_CP != IoKeyInputmessage)) || (Global_datas.shoutting_down))
000002  4c1d              LDR      r4,|L2.120|
000004  4d1d              LDR      r5,|L2.124|
000006  7961              LDRB     r1,[r4,#5]  ; Global_datas
000008  7828              LDRB     r0,[r5,#0]
00000a  290e              CMP      r1,#0xe
00000c  d001              BEQ      |L2.18|
00000e  2900              CMP      r1,#0
000010  d101              BNE      |L2.22|
                  |L2.18|
000012  28f1              CMP      r0,#0xf1
000014  d12b              BNE      |L2.110|
                  |L2.22|
000016  7b61              LDRB     r1,[r4,#0xd]  ; Global_datas
000018  2900              CMP      r1,#0
00001a  d128              BNE      |L2.110|
;;;221        {
;;;222    		return;
;;;223    	}
;;;224    
;;;225    	if(IoKeyInputmessage)
00001c  2800              CMP      r0,#0
00001e  d024              BEQ      |L2.106|
;;;226    	{
;;;227    		switch(IoKeyInputmessage)
000020  28f0              CMP      r0,#0xf0
000022  d012              BEQ      |L2.74|
000024  28f1              CMP      r0,#0xf1
000026  d016              BEQ      |L2.86|
000028  28f3              CMP      r0,#0xf3
00002a  d002              BEQ      |L2.50|
00002c  28f4              CMP      r0,#0xf4
00002e  d11c              BNE      |L2.106|
000030  e005              B        |L2.62|
                  |L2.50|
;;;228    		{
;;;229    			case IN_KEY_PAIR_SP:
;;;230    				printf("pari key sp\n");
000032  a013              ADR      r0,|L2.128|
000034  f7fffffe          BL       __2printf
;;;231    				drv_wifi_4g_switch_cmd_send();
000038  f7fffffe          BL       drv_wifi_4g_switch_cmd_send
;;;232    				break;
00003c  e015              B        |L2.106|
                  |L2.62|
;;;233    			case IN_KEY_PAIR_CP:
;;;234    				printf("pari key cp\n");
00003e  a014              ADR      r0,|L2.144|
000040  f7fffffe          BL       __2printf
;;;235    				drv_pairing_cmd_send();
000044  f7fffffe          BL       drv_pairing_cmd_send
;;;236    				
;;;237    				break;
000048  e00f              B        |L2.106|
                  |L2.74|
;;;238    			case IN_KEY_POWER_SP:
;;;239    				printf("power key sp\n");
00004a  a015              ADR      r0,|L2.160|
00004c  f7fffffe          BL       __2printf
;;;240    				srv_key_mode_handler();
000050  f7fffffe          BL       srv_key_mode_handler
;;;241    				break;
000054  e009              B        |L2.106|
                  |L2.86|
;;;242    			case IN_KEY_POWER_CP:
;;;243    				printf("power key cp\n");	
000056  a016              ADR      r0,|L2.176|
000058  f7fffffe          BL       __2printf
;;;244    				if(Global_datas.g_mode_status == POWER_IDLE_MODE)
00005c  7960              LDRB     r0,[r4,#5]  ; Global_datas
00005e  280e              CMP      r0,#0xe
000060  d006              BEQ      |L2.112|
;;;245    				{
;;;246    					SYS_Status();
;;;247    				}
;;;248    
;;;249    				else
;;;250    				{
;;;251    					PowerOff();
000062  f7fffffe          BL       PowerOff
;;;252    					SysIdle();
000066  f7fffffe          BL       SysIdle
                  |L2.106|
;;;253    				}
;;;254    				break;
;;;255    
;;;256    		  	default:break;
;;;257    		}
;;;258    	}
;;;259    
;;;260    	IoKeyInputmessage = 0;
00006a  2000              MOVS     r0,#0
00006c  7028              STRB     r0,[r5,#0]
                  |L2.110|
;;;261    		
;;;262    }
00006e  bd70              POP      {r4-r6,pc}
                  |L2.112|
000070  f7fffffe          BL       SYS_Status
000074  e7f9              B        |L2.106|
;;;263    
                          ENDP

000076  0000              DCW      0x0000
                  |L2.120|
                          DCD      Global_datas+0x20
                  |L2.124|
                          DCD      IoKeyInputmessage
                  |L2.128|
000080  70617269          DCB      "pari key sp\n",0
000084  206b6579
000088  2073700a
00008c  00      
00008d  00                DCB      0
00008e  00                DCB      0
00008f  00                DCB      0
                  |L2.144|
000090  70617269          DCB      "pari key cp\n",0
000094  206b6579
000098  2063700a
00009c  00      
00009d  00                DCB      0
00009e  00                DCB      0
00009f  00                DCB      0
                  |L2.160|
0000a0  706f7765          DCB      "power key sp\n",0
0000a4  72206b65
0000a8  79207370
0000ac  0a00    
0000ae  00                DCB      0
0000af  00                DCB      0
                  |L2.176|
0000b0  706f7765          DCB      "power key cp\n",0
0000b4  72206b65
0000b8  79206370
0000bc  0a00    
0000be  00                DCB      0
0000bf  00                DCB      0

                          AREA ||i.PowerOff||, CODE, READONLY, ALIGN=2

                  PowerOff PROC
;;;203    
;;;204    void PowerOff(void)
000000  b510              PUSH     {r4,lr}
;;;205    {
;;;206    	drv_Cmd_Send2NCU031(0x70, 0x15,0x00);// power off cmd to LCD board
000002  2200              MOVS     r2,#0
000004  2115              MOVS     r1,#0x15
000006  2070              MOVS     r0,#0x70
000008  f7fffffe          BL       drv_Cmd_Send2NCU031
;;;207    	
;;;208    	Cmd_Send2FourG( 0x03,0x55,0x00); // poweroff cmd to 4G
00000c  2200              MOVS     r2,#0
00000e  2155              MOVS     r1,#0x55
000010  2003              MOVS     r0,#3
000012  f7fffffe          BL       Cmd_Send2FourG
;;;209    	//Drv_4GMoudle_PowerUp(0);  // wait for 4g modle ready ,than turn off power, don't off here.
;;;210    	drv_led_init();// led all off
000016  f7fffffe          BL       drv_led_init
;;;211    	Drv_audio_powerdown();
00001a  f7fffffe          BL       Drv_audio_powerdown
;;;212    	Global_datas.shoutting_down = 1;
00001e  4804              LDR      r0,|L3.48|
000020  2101              MOVS     r1,#1
000022  7341              STRB     r1,[r0,#0xd]
;;;213    	TimeOutSet(&PoweroffLedTimer, 5000);
000024  4903              LDR      r1,|L3.52|
000026  4804              LDR      r0,|L3.56|
000028  f7fffffe          BL       TimeOutSet
;;;214    }
00002c  bd10              POP      {r4,pc}
;;;215    
                          ENDP

00002e  0000              DCW      0x0000
                  |L3.48|
                          DCD      Global_datas+0x20
                  |L3.52|
                          DCD      0x00001388
                  |L3.56|
                          DCD      PoweroffLedTimer

                          AREA ||i.SYS_BusInit||, CODE, READONLY, ALIGN=1

                  SYS_BusInit PROC
;;;110    
;;;111    void SYS_BusInit(void)
000000  b510              PUSH     {r4,lr}
;;;112    {
;;;113    	Debug_Uart_Init();
000002  f7fffffe          BL       Debug_Uart_Init
;;;114    	
;;;115    	Transfer_Uart_Init();
000006  f7fffffe          BL       Transfer_Uart_Init
;;;116    	
;;;117    	USCI_Uart_Init();
00000a  f7fffffe          BL       USCI_Uart_Init
;;;118    	
;;;119    	Hal_I2c_Init();
00000e  f7fffffe          BL       Hal_I2c_Init
;;;120    	
;;;121    }
000012  bd10              POP      {r4,pc}
;;;122    
                          ENDP


                          AREA ||i.SYS_Clock_init||, CODE, READONLY, ALIGN=2

                  SYS_Clock_init PROC
;;;43     
;;;44     void SYS_Clock_init(void)
000000  b5f8              PUSH     {r3-r7,lr}
;;;45     {
;;;46     
;;;47         
;;;48        // SYS->GPF_MFPL = SYS_GPF_MFPL_PF4MFP_XT1_IN | SYS_GPF_MFPL_PF3MFP_XT1_OUT | SYS_GPF_MFPL_PF1MFP_X32_IN | SYS_GPF_MFPL_PF0MFP_X32_OUT;
;;;49     	/* Enable HIRC clock (Internal RC 22.1184MHz) */
;;;50         CLK_EnableXtalRC(CLK_PWRCTL_HIRCEN_Msk);
000002  2004              MOVS     r0,#4
000004  f7fffffe          BL       CLK_EnableXtalRC
;;;51     
;;;52         /* Wait for HIRC clock ready */
;;;53         CLK_WaitClockReady(CLK_STATUS_HIRCSTB_Msk);
000008  2010              MOVS     r0,#0x10
00000a  f7fffffe          BL       CLK_WaitClockReady
;;;54     
;;;55         /* Select HCLK clock source as HIRC and HCLK clock divider as 1 */
;;;56         CLK_SetHCLK(CLK_CLKSEL0_HCLKSEL_HIRC, CLK_CLKDIV0_HCLK(1));
00000e  2100              MOVS     r1,#0
000010  2007              MOVS     r0,#7
000012  f7fffffe          BL       CLK_SetHCLK
;;;57     
;;;58         /* Enable HXT clock (external XTAL 12MHz) */
;;;59         CLK_EnableXtalRC(CLK_PWRCTL_HXTEN_Msk | CLK_PWRCTL_LXTEN_Msk);
000016  2003              MOVS     r0,#3
000018  f7fffffe          BL       CLK_EnableXtalRC
;;;60     //    CLK_EnableXtalRC(CLK_PWRCTL_HXTEN_Msk);
;;;61         /* Wait for HXT clock ready */
;;;62         CLK_WaitClockReady(CLK_STATUS_HXTSTB_Msk | CLK_STATUS_LXTSTB_Msk);
00001c  2003              MOVS     r0,#3
00001e  f7fffffe          BL       CLK_WaitClockReady
;;;63     //    CLK_WaitClockReady(CLK_STATUS_HXTSTB_Msk);
;;;64         /* Set core clock as PLL_CLOCK from PLL and SysTick source to HCLK/2*/
;;;65         CLK_SetCoreClock(PLL_CLOCK);
000022  4822              LDR      r0,|L5.172|
000024  f7fffffe          BL       CLK_SetCoreClock
;;;66         CLK_SetSysTickClockSrc(CLK_CLKSEL0_STCLKSEL_HCLK_DIV2);
000028  2018              MOVS     r0,#0x18
00002a  f7fffffe          BL       CLK_SetSysTickClockSrc
;;;67     
;;;68         /* Enable UART module clock */
;;;69         CLK_EnableModuleClock(UART0_MODULE);
00002e  4c20              LDR      r4,|L5.176|
000030  4620              MOV      r0,r4
000032  f7fffffe          BL       CLK_EnableModuleClock
;;;70     	/* Enable UART module clock */
;;;71         CLK_EnableModuleClock(UART1_MODULE);
000036  1c65              ADDS     r5,r4,#1
000038  4628              MOV      r0,r5
00003a  f7fffffe          BL       CLK_EnableModuleClock
;;;72     	
;;;73         /* Enable USCI module clock */
;;;74         CLK_EnableModuleClock(UART2_MODULE);
00003e  1ca6              ADDS     r6,r4,#2
000040  4630              MOV      r0,r6
000042  f7fffffe          BL       CLK_EnableModuleClock
;;;75     	
;;;76         /* Enable USCI module clock */
;;;77         CLK_EnableModuleClock(USCI0_MODULE);
000046  4f1b              LDR      r7,|L5.180|
000048  4638              MOV      r0,r7
00004a  f7fffffe          BL       CLK_EnableModuleClock
;;;78     	
;;;79     	/* Enable I2C0 module clock */
;;;80         CLK_EnableModuleClock(I2C0_MODULE);
00004e  481a              LDR      r0,|L5.184|
000050  f7fffffe          BL       CLK_EnableModuleClock
;;;81     	
;;;82     	/* Enable I2C1 module clock */
;;;83         CLK_EnableModuleClock(I2C1_MODULE);
000054  4818              LDR      r0,|L5.184|
000056  1c40              ADDS     r0,r0,#1
000058  f7fffffe          BL       CLK_EnableModuleClock
;;;84     
;;;85     	/* Enable ADC module clock */
;;;86         CLK_EnableModuleClock(ADC_MODULE);
00005c  4817              LDR      r0,|L5.188|
00005e  f7fffffe          BL       CLK_EnableModuleClock
;;;87     
;;;88         /* Enable PWM0 module clock */
;;;89         CLK_EnableModuleClock(PWM0_MODULE);
000062  4817              LDR      r0,|L5.192|
000064  f7fffffe          BL       CLK_EnableModuleClock
;;;90     
;;;91     	/* Enable timer clock */
;;;92     	CLK_EnableModuleClock(TMR0_MODULE);
000068  4816              LDR      r0,|L5.196|
00006a  f7fffffe          BL       CLK_EnableModuleClock
;;;93         CLK_EnableModuleClock(RTC_MODULE);
00006e  4816              LDR      r0,|L5.200|
000070  f7fffffe          BL       CLK_EnableModuleClock
;;;94     
;;;95         /* Select UART module clock source as HXT and UART module clock divider as 1 */
;;;96         CLK_SetModuleClock(UART0_MODULE, CLK_CLKSEL1_UARTSEL_HXT, CLK_CLKDIV0_UART(1));
000074  2200              MOVS     r2,#0
000076  4611              MOV      r1,r2
000078  4620              MOV      r0,r4
00007a  f7fffffe          BL       CLK_SetModuleClock
;;;97     	
;;;98     	CLK_SetModuleClock(UART1_MODULE, CLK_CLKSEL1_UARTSEL_HXT, CLK_CLKDIV0_UART(1));
00007e  2200              MOVS     r2,#0
000080  4611              MOV      r1,r2
000082  4628              MOV      r0,r5
000084  f7fffffe          BL       CLK_SetModuleClock
;;;99     
;;;100    	CLK_SetModuleClock(UART2_MODULE, CLK_CLKSEL1_UARTSEL_HXT, CLK_CLKDIV0_UART(1));
000088  2200              MOVS     r2,#0
00008a  4611              MOV      r1,r2
00008c  4630              MOV      r0,r6
00008e  f7fffffe          BL       CLK_SetModuleClock
;;;101    	CLK_SetModuleClock(USCI0_MODULE, CLK_CLKSEL1_UARTSEL_HXT, CLK_CLKDIV0_UART(1));
000092  2200              MOVS     r2,#0
000094  4611              MOV      r1,r2
000096  4638              MOV      r0,r7
000098  f7fffffe          BL       CLK_SetModuleClock
;;;102    
;;;103        /* ADC clock source is 22.1184MHz, set divider to 7, ADC clock is 22.1184/7 MHz */
;;;104        CLK_SetModuleClock(ADC_MODULE, CLK_CLKSEL1_ADCSEL_HIRC, CLK_CLKDIV0_ADC(7));
00009c  2203              MOVS     r2,#3
00009e  0452              LSLS     r2,r2,#17
0000a0  210c              MOVS     r1,#0xc
0000a2  4806              LDR      r0,|L5.188|
0000a4  f7fffffe          BL       CLK_SetModuleClock
;;;105        /* Select PWM01 module clock source */
;;;106       // CLK_SetModuleClock(PWM0_MODULE, CLK_CLKSEL1_PWM0SEL_PCLK0, 0);
;;;107    
;;;108    }
0000a8  bdf8              POP      {r3-r7,pc}
;;;109    
                          ENDP

0000aa  0000              DCW      0x0000
                  |L5.172|
                          DCD      0x044aa200
                  |L5.176|
                          DCD      0x57803d10
                  |L5.180|
                          DCD      0x80000008
                  |L5.184|
                          DCD      0x40000008
                  |L5.188|
                          DCD      0x5623fe1c
                  |L5.192|
                          DCD      0x53c00014
                  |L5.196|
                          DCD      0x5e800002
                  |L5.200|
                          DCD      0x63200001

                          AREA ||i.SYS_Init||, CODE, READONLY, ALIGN=2

                  SYS_Init PROC
;;;142    /*---------------------------------------------------------------------------------------------------------*/
;;;143    void SYS_Init(void)
000000  b510              PUSH     {r4,lr}
000002  2059              MOVS     r0,#0x59
000004  4c0e              LDR      r4,|L6.64|
000006  2216              MOVS     r2,#0x16
000008  2188              MOVS     r1,#0x88
                  |L6.10|
00000a  6020              STR      r0,[r4,#0]
00000c  6022              STR      r2,[r4,#0]
00000e  6021              STR      r1,[r4,#0]
000010  6823              LDR      r3,[r4,#0]
000012  2b00              CMP      r3,#0
000014  d0f9              BEQ      |L6.10|
;;;144    {
;;;145        /* Unlock protected registers */
;;;146        SYS_UnlockReg();
;;;147    	
;;;148    	SYS_Clock_init();
000016  f7fffffe          BL       SYS_Clock_init
;;;149    	TYM_gpio_init();
00001a  f7fffffe          BL       TYM_gpio_init
00001e  2000              MOVS     r0,#0
000020  6020              STR      r0,[r4,#0]
;;;150    
;;;151    	/* Lock protected registers */
;;;152        SYS_LockReg();
;;;153    
;;;154        /* Start Timer1 to measure delay period of TIMER_Delay API is reasonable or not */
;;;155       // TIMER1->CTL = TIMER_PERIODIC_MODE | (12 - 1);
;;;156    	TYM_sys_PowerManger_init();
000022  f7fffffe          BL       TYM_sys_PowerManger_init
;;;157    	drv_led_init();
000026  f7fffffe          BL       drv_led_init
;;;158    
;;;159    	Drv_FourG_Gpio_Init();
00002a  f7fffffe          BL       Drv_FourG_Gpio_Init
;;;160    	
;;;161    
;;;162    	SYS_BusInit();
00002e  f7fffffe          BL       SYS_BusInit
;;;163    	
;;;164    	Hal_Timer1_Init(); // kim
000032  f7fffffe          BL       Hal_Timer1_Init
;;;165    
;;;166    	TYM_DriverInit();
000036  f7fffffe          BL       TYM_DriverInit
;;;167    	
;;;168    	Core_Msg_Init();
00003a  f7fffffe          BL       Core_Msg_Init
;;;169    
;;;170    	//srv_rtc_init();
;;;171    
;;;172    }
00003e  bd10              POP      {r4,pc}
;;;173    
                          ENDP

                  |L6.64|
                          DCD      0x50000100

                          AREA ||i.SYS_Status||, CODE, READONLY, ALIGN=2

                  SYS_Status PROC
;;;183    
;;;184    void SYS_Status(void)
000000  b570              PUSH     {r4-r6,lr}
;;;185    {
;;;186    	Global_datas.g_mode_status = POWER_ON_MODE;	
000002  4c10              LDR      r4,|L7.68|
000004  2500              MOVS     r5,#0
000006  7165              STRB     r5,[r4,#5]
;;;187    	Global_datas.g_4g_initing = 1;
000008  2001              MOVS     r0,#1
00000a  71a0              STRB     r0,[r4,#6]
;;;188    	Global_datas.eq_mode = EQ_MODE_INDOOR;
00000c  73a0              STRB     r0,[r4,#0xe]
;;;189    	Global_datas.volume = VOLUME_DEFAULT;
00000e  2008              MOVS     r0,#8
000010  73e0              STRB     r0,[r4,#0xf]
;;;190    	TYM_drv_powerkeepon(1);
000012  2001              MOVS     r0,#1
000014  f7fffffe          BL       TYM_drv_powerkeepon
;;;191    	Drv_4GMoudle_PowerUp(1);
000018  2001              MOVS     r0,#1
00001a  f7fffffe          BL       Drv_4GMoudle_PowerUp
;;;192    	drv_FourGmodel_power_key_SetHi();
00001e  f7fffffe          BL       drv_FourGmodel_power_key_SetHi
;;;193    	TimeOutSet(&ModulePowerUpPinTimer,3000);
000022  4909              LDR      r1,|L7.72|
000024  4809              LDR      r0,|L7.76|
000026  f7fffffe          BL       TimeOutSet
;;;194    	TimeOutSet(&PoweroffLedTimer, 100);
00002a  2164              MOVS     r1,#0x64
00002c  4808              LDR      r0,|L7.80|
00002e  f7fffffe          BL       TimeOutSet
;;;195    	Drv_audio_init();
000032  f7fffffe          BL       Drv_audio_init
;;;196    	Global_datas.shoutting_down = 0;
000036  7365              STRB     r5,[r4,#0xd]
;;;197    	
;;;198    
;;;199    	
;;;200    	drv_Cmd_Send2NCU031(0x70, 0x16,0x00);// power on cmd to LCD board
000038  2200              MOVS     r2,#0
00003a  2116              MOVS     r1,#0x16
00003c  2070              MOVS     r0,#0x70
00003e  f7fffffe          BL       drv_Cmd_Send2NCU031
;;;201    	
;;;202    }
000042  bd70              POP      {r4-r6,pc}
;;;203    
                          ENDP

                  |L7.68|
                          DCD      Global_datas+0x20
                  |L7.72|
                          DCD      0x00000bb8
                  |L7.76|
                          DCD      ModulePowerUpPinTimer
                  |L7.80|
                          DCD      PoweroffLedTimer

                          AREA ||i.SysIdle||, CODE, READONLY, ALIGN=2

                  SysIdle PROC
;;;173    
;;;174    void SysIdle(void)
000000  b570              PUSH     {r4-r6,lr}
;;;175    {
;;;176    	Global_datas.g_mode_status = POWER_IDLE_MODE;	
000002  4c07              LDR      r4,|L8.32|
000004  200e              MOVS     r0,#0xe
000006  7160              STRB     r0,[r4,#5]
;;;177    	Global_datas.g_4g_initing = 0;
000008  2500              MOVS     r5,#0
00000a  71a5              STRB     r5,[r4,#6]
;;;178    	drv_FourGmodel_power_key_SetLow();
00000c  f7fffffe          BL       drv_FourGmodel_power_key_SetLow
;;;179    	TimeOutSet(&SysTimer_1s,1000);
000010  217d              MOVS     r1,#0x7d
000012  00c9              LSLS     r1,r1,#3
000014  4803              LDR      r0,|L8.36|
000016  f7fffffe          BL       TimeOutSet
;;;180    	Global_datas.subboard_online = 0;	
00001a  7425              STRB     r5,[r4,#0x10]
;;;181    
;;;182    }
00001c  bd70              POP      {r4-r6,pc}
;;;183    
                          ENDP

00001e  0000              DCW      0x0000
                  |L8.32|
                          DCD      Global_datas+0x20
                  |L8.36|
                          DCD      SysTimer_1s

                          AREA ||i.TYM_DriverInit||, CODE, READONLY, ALIGN=1

                  TYM_DriverInit PROC
;;;132    
;;;133    void TYM_DriverInit(void)
000000  b510              PUSH     {r4,lr}
;;;134    {
;;;135    	//Drv_audio_init();
;;;136    	Drv_IrKey_init(); // kim
000002  f7fffffe          BL       Drv_IrKey_init
;;;137    	drv_gipo_key_init();
000006  f7fffffe          BL       drv_gipo_key_init
;;;138    }
00000a  bd10              POP      {r4,pc}
;;;139    
                          ENDP


                          AREA ||i.main||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                  main PROC
;;;267    /*---------------------------------------------------------------------------------------------------------*/
;;;268    int32_t main(void)
000000  b086              SUB      sp,sp,#0x18
;;;269    {
;;;270    	sCoreMsg msg;
;;;271    	uint32_t count;
;;;272    	uint8_t refcount0=1;
000002  2601              MOVS     r6,#1
;;;273    	uint8_t refcount1=1;
;;;274    	uint8_t refcount2=1;
;;;275      	uint8_t bat_val[2];
;;;276    	uint8_t ledtimecount = 0;
000004  2000              MOVS     r0,#0
000006  4635              MOV      r5,r6                 ;273
;;;277    	
;;;278    //	uint8_t autoside = 0;
;;;279    //    S_RTC_TIME_DATA_T sReadRTC;
;;;280    
;;;281    	/* Init System, peripheral clock and multi-function I/O */
;;;282    
;;;283    	SYS_Init();
000008  9005              STR      r0,[sp,#0x14]
00000a  f7fffffe          BL       SYS_Init
;;;284    	//SYS_Status();
;;;285    	SysIdle();
00000e  f7fffffe          BL       SysIdle
;;;286    	
;;;287    	
;;;288        printf("\nmain\n");
000012  a0fa              ADR      r0,|L10.1020|
000014  f7fffffe          BL       __2printf
000018  4cfa              LDR      r4,|L10.1028|
                  |L10.26|
;;;289    		
;;;290        while(1)
;;;291        {
;;;292    
;;;293    		if(IsTimeOut(&SysTimer_1s))
00001a  48fb              LDR      r0,|L10.1032|
00001c  f7fffffe          BL       IsTimeOut
000020  2800              CMP      r0,#0
000022  d02f              BEQ      |L10.132|
;;;294    		{
;;;295    			TimeOutSet(&SysTimer_1s, 500);
000024  21ff              MOVS     r1,#0xff
000026  31f5              ADDS     r1,r1,#0xf5
000028  48f7              LDR      r0,|L10.1032|
00002a  f7fffffe          BL       TimeOutSet
;;;296    			
;;;297    	        if(Global_datas.g_4g_initing)
00002e  79a0              LDRB     r0,[r4,#6]  ; Global_datas
000030  2800              CMP      r0,#0
000032  d002              BEQ      |L10.58|
;;;298    			{
;;;299    				srv_led_sys_initing();
000034  f7fffffe          BL       srv_led_sys_initing
000038  e001              B        |L10.62|
                  |L10.58|
;;;300    			}
;;;301    			else
;;;302    			{
;;;303    				srv_led_change_handler();
00003a  f7fffffe          BL       srv_led_change_handler
                  |L10.62|
;;;304    			}
;;;305    
;;;306    			if(IsTimeOut(&ModulePowerUpPinTimer))
00003e  48f3              LDR      r0,|L10.1036|
000040  f7fffffe          BL       IsTimeOut
000044  2800              CMP      r0,#0
000046  d001              BEQ      |L10.76|
;;;307    			{
;;;308    				drv_FourGmodel_power_key_SetLow();
000048  f7fffffe          BL       drv_FourGmodel_power_key_SetLow
                  |L10.76|
;;;309    			}
;;;310    
;;;311    			if(Global_datas.g_mode_status == POWER_IDLE_MODE)
00004c  7960              LDRB     r0,[r4,#5]  ; Global_datas
00004e  280e              CMP      r0,#0xe
000050  d111              BNE      |L10.118|
;;;312    			{
;;;313    				if(!IsTimeOut(&PoweroffLedTimer))
000052  48ef              LDR      r0,|L10.1040|
000054  f7fffffe          BL       IsTimeOut
000058  2800              CMP      r0,#0
00005a  d032              BEQ      |L10.194|
;;;314    				{			
;;;315    					if(ledtimecount)
;;;316    					{
;;;317    						PA12 = 1;
;;;318    						PA13 = 1;
;;;319    						PA1 = 1;
;;;320    						ledtimecount = 0;
;;;321    					}
;;;322    					else
;;;323    					{
;;;324    						PA12 = 0;
;;;325    						PA13 = 0;
;;;326    						PA1 = 0;
;;;327    						ledtimecount = 1;
;;;328    					}
;;;329    				}
;;;330    				else
;;;331    				{
;;;332    					PA12 = 1;
00005c  49ed              LDR      r1,|L10.1044|
00005e  2001              MOVS     r0,#1
000060  6308              STR      r0,[r1,#0x30]
;;;333    					PA13 = 1;
000062  6348              STR      r0,[r1,#0x34]
;;;334    					PA1 = 1;
000064  6048              STR      r0,[r1,#4]
;;;335    					Drv_4GMoudle_PowerUp(0); // if timeout,turn off.
000066  2000              MOVS     r0,#0
000068  f7fffffe          BL       Drv_4GMoudle_PowerUp
;;;336    					TYM_drv_powerkeepon(0); 
00006c  2000              MOVS     r0,#0
00006e  f7fffffe          BL       TYM_drv_powerkeepon
;;;337    
;;;338    					Global_datas.shoutting_down = 0;
000072  2000              MOVS     r0,#0
000074  7360              STRB     r0,[r4,#0xd]
                  |L10.118|
;;;339    				}
;;;340    				
;;;341    			}
;;;342    
;;;343    
;;;344    			if(IsTimeOut(&SubBoardHandshakeTimer))
000076  48e8              LDR      r0,|L10.1048|
000078  f7fffffe          BL       IsTimeOut
00007c  2800              CMP      r0,#0
00007e  d001              BEQ      |L10.132|
;;;345    			{
;;;346    				Global_datas.subboard_online = 0;
000080  2000              MOVS     r0,#0
000082  7420              STRB     r0,[r4,#0x10]
                  |L10.132|
;;;347    			}			
;;;348    		}
;;;349    		
;;;350    		if(Global_datas.key_led_blink)
000084  7b20              LDRB     r0,[r4,#0xc]  ; Global_datas
000086  2800              CMP      r0,#0
000088  d008              BEQ      |L10.156|
;;;351    		{
;;;352    			Global_datas.key_led_blink = 0;
00008a  2000              MOVS     r0,#0
00008c  7320              STRB     r0,[r4,#0xc]
;;;353    			drv_err_led_on(1);
00008e  2001              MOVS     r0,#1
000090  f7fffffe          BL       drv_err_led_on
;;;354    			TimeOutSet(&LedKeyBlinkTimer, 100);
000094  2164              MOVS     r1,#0x64
000096  48e1              LDR      r0,|L10.1052|
000098  f7fffffe          BL       TimeOutSet
                  |L10.156|
;;;355    		}
;;;356    
;;;357    		if(IsTimeOut(&LedKeyBlinkTimer))
00009c  48df              LDR      r0,|L10.1052|
00009e  f7fffffe          BL       IsTimeOut
0000a2  2800              CMP      r0,#0
0000a4  d002              BEQ      |L10.172|
;;;358    		{
;;;359    			drv_err_led_on(0);
0000a6  2000              MOVS     r0,#0
0000a8  f7fffffe          BL       drv_err_led_on
                  |L10.172|
;;;360    		}
;;;361    
;;;362    		if(Core_Msg_Get(&msg))
0000ac  a801              ADD      r0,sp,#4
0000ae  f7fffffe          BL       Core_Msg_Get
0000b2  2800              CMP      r0,#0
0000b4  d07e              BEQ      |L10.436|
;;;363    		{
;;;364            // deal with message
;;;365            switch(msg.msg)
0000b6  9801              LDR      r0,[sp,#4]
0000b8  2801              CMP      r0,#1
0000ba  d014              BEQ      |L10.230|
0000bc  2802              CMP      r0,#2
                  |L10.190|
0000be  d179              BNE      |L10.436|
0000c0  e140              B        |L10.836|
                  |L10.194|
0000c2  9805              LDR      r0,[sp,#0x14]         ;315
0000c4  2800              CMP      r0,#0                 ;315
0000c6  d006              BEQ      |L10.214|
0000c8  49d2              LDR      r1,|L10.1044|
0000ca  2001              MOVS     r0,#1                 ;317
0000cc  6308              STR      r0,[r1,#0x30]         ;317
0000ce  6348              STR      r0,[r1,#0x34]         ;318
0000d0  6048              STR      r0,[r1,#4]            ;319
0000d2  2000              MOVS     r0,#0                 ;320
0000d4  e005              B        |L10.226|
                  |L10.214|
0000d6  49cf              LDR      r1,|L10.1044|
0000d8  2000              MOVS     r0,#0                 ;324
0000da  6308              STR      r0,[r1,#0x30]         ;324
0000dc  6348              STR      r0,[r1,#0x34]         ;325
0000de  6048              STR      r0,[r1,#4]            ;326
0000e0  2001              MOVS     r0,#1                 ;327
                  |L10.226|
0000e2  9005              STR      r0,[sp,#0x14]         ;327
0000e4  e7c7              B        |L10.118|
                  |L10.230|
;;;366    	        {
;;;367    	            case MSG_4G_SYS_STATE_IND:
;;;368    					drv_Cmd_Send2NCU031(msg.param0,msg.param1,msg.param2);
0000e6  9804              LDR      r0,[sp,#0x10]
0000e8  b2c2              UXTB     r2,r0
0000ea  9803              LDR      r0,[sp,#0xc]
0000ec  b2c1              UXTB     r1,r0
0000ee  9802              LDR      r0,[sp,#8]
0000f0  b2c0              UXTB     r0,r0
0000f2  f7fffffe          BL       drv_Cmd_Send2NCU031
;;;369    					printf("MSG_4G_SYS_STATE_IND:msg.param0 = %x, msg.param1 = %x \n",msg.param0,msg.param1);
0000f6  a0ca              ADR      r0,|L10.1056|
0000f8  9a03              LDR      r2,[sp,#0xc]
0000fa  9902              LDR      r1,[sp,#8]
0000fc  f7fffffe          BL       __2printf
;;;370    	                if((msg.param0 == 0x08) && (msg.param1 == 0x00))
000100  9802              LDR      r0,[sp,#8]
000102  2808              CMP      r0,#8
000104  d114              BNE      |L10.304|
000106  9803              LDR      r0,[sp,#0xc]
000108  2800              CMP      r0,#0
00010a  d1d8              BNE      |L10.190|
;;;371    	                {
;;;372    
;;;373    						printf("0x08, msg.param1 = %x \n",msg.param1);
00010c  4601              MOV      r1,r0
00010e  a0d2              ADR      r0,|L10.1112|
000110  f7fffffe          BL       __2printf
;;;374    	                	//Cmd_Send2FourG(0x03,0x16,0x00);
;;;375    						drv_Cmd_Send2NCU031(msg.param0,msg.param1,0);
000114  9803              LDR      r0,[sp,#0xc]
000116  2200              MOVS     r2,#0
000118  b2c1              UXTB     r1,r0
00011a  9802              LDR      r0,[sp,#8]
00011c  b2c0              UXTB     r0,r0
00011e  f7fffffe          BL       drv_Cmd_Send2NCU031
;;;376    						Global_datas.g_4g_initing = 0;
000122  2000              MOVS     r0,#0
000124  71a0              STRB     r0,[r4,#6]
;;;377    						Global_datas.g_mode_status = WIFI_MODE;
000126  2001              MOVS     r0,#1
000128  7160              STRB     r0,[r4,#5]
;;;378    						printf("\n AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n");
00012a  a0d1              ADR      r0,|L10.1136|
00012c  f7fffffe          BL       __2printf
                  |L10.304|
;;;379    					} 
;;;380    					
;;;381    					if((msg.param0 == 0x09) && (msg.param1 == 0x01))
000130  9802              LDR      r0,[sp,#8]
000132  2809              CMP      r0,#9
000134  d12a              BNE      |L10.396|
000136  9803              LDR      r0,[sp,#0xc]
000138  2801              CMP      r0,#1
00013a  d1c0              BNE      |L10.190|
;;;382    	                {
;;;383    //						printf("0x09, msg.param1 = %x \n",msg.param1);
;;;384    	                	//in bat val
;;;385    						bat_val[1] = (Global_datas.ADC_ChannelValue[15]>>8) & 0xff;
00013c  48b1              LDR      r0,|L10.1028|
00013e  466b              MOV      r3,sp
000140  3820              SUBS     r0,r0,#0x20
000142  8bc0              LDRH     r0,[r0,#0x1e]  ; Global_datas
000144  0401              LSLS     r1,r0,#16
000146  0e09              LSRS     r1,r1,#24
000148  7059              STRB     r1,[r3,#1]
;;;386    						bat_val[0] = Global_datas.ADC_ChannelValue[15] & 0xff;
00014a  b2c2              UXTB     r2,r0
00014c  701a              STRB     r2,[r3,#0]
;;;387    						if(Global_datas.g_PowerStatus.PowerBatInStatus != POWER_BAT_IN_FALSE)
00014e  7820              LDRB     r0,[r4,#0]  ; Global_datas
000150  2801              CMP      r0,#1
000152  d002              BEQ      |L10.346|
;;;388    							bat_val[1] = bat_val[1] & 0x80;  //in bat en
000154  09c8              LSRS     r0,r1,#7
000156  01c0              LSLS     r0,r0,#7
000158  7058              STRB     r0,[r3,#1]
                  |L10.346|
;;;389    						Cmd_Send2FourG(0x09,bat_val[1],bat_val[0]);
00015a  7859              LDRB     r1,[r3,#1]
00015c  2009              MOVS     r0,#9
00015e  f7fffffe          BL       Cmd_Send2FourG
;;;390    						//ex bat val
;;;391    						bat_val[1] = (Global_datas.ADC_ChannelValue[12]>>8) & 0xff;
000162  48a8              LDR      r0,|L10.1028|
000164  3820              SUBS     r0,r0,#0x20
000166  8b02              LDRH     r2,[r0,#0x18]  ; Global_datas
000168  0410              LSLS     r0,r2,#16
00016a  0e01              LSRS     r1,r0,#24
00016c  4668              MOV      r0,sp
00016e  7041              STRB     r1,[r0,#1]
;;;392    						bat_val[0] = Global_datas.ADC_ChannelValue[12] & 0xff;
000170  b2d2              UXTB     r2,r2
000172  7002              STRB     r2,[r0,#0]
;;;393    						if(Global_datas.g_PowerStatus.PowerBatExStatus != POWER_BAT_EX_FALSE)
000174  7860              LDRB     r0,[r4,#1]  ; Global_datas
000176  2803              CMP      r0,#3
000178  d003              BEQ      |L10.386|
;;;394    							bat_val[1] = bat_val[1] & 0x60;  //ex bat en
00017a  2060              MOVS     r0,#0x60
00017c  4001              ANDS     r1,r1,r0
00017e  4668              MOV      r0,sp
000180  7041              STRB     r1,[r0,#1]
                  |L10.386|
;;;395    						Cmd_Send2FourG(0x09,bat_val[1],bat_val[0]);
000182  4668              MOV      r0,sp
000184  7841              LDRB     r1,[r0,#1]
000186  2009              MOVS     r0,#9
000188  f7fffffe          BL       Cmd_Send2FourG
                  |L10.396|
;;;396    					}
;;;397    					
;;;398    					if(msg.param0 == 0x07)
00018c  9802              LDR      r0,[sp,#8]
00018e  2807              CMP      r0,#7
000190  d103              BNE      |L10.410|
;;;399    	        		{
;;;400    	                	// vol
;;;401    	                	//Drv_Dap_vol_set(msg.param1);
;;;402    						printf("0x07, msg.param1 = %x \n",msg.param1);
000192  a0c1              ADR      r0,|L10.1176|
000194  9903              LDR      r1,[sp,#0xc]
000196  f7fffffe          BL       __2printf
                  |L10.410|
;;;403    					}
;;;404    					if(msg.param0 == 0x04 )
00019a  9802              LDR      r0,[sp,#8]
00019c  2804              CMP      r0,#4
00019e  d103              BNE      |L10.424|
;;;405    					{
;;;406    	                	//Drv_Dap_vol_mute(msg.param1);
;;;407    	                	// vol
;;;408    	                	
;;;409    					printf("0x04, msg.param1 = %x \n",msg.param1);
0001a0  a0c3              ADR      r0,|L10.1200|
0001a2  9903              LDR      r1,[sp,#0xc]
0001a4  f7fffffe          BL       __2printf
                  |L10.424|
;;;410    					}
;;;411    					
;;;412    					if(msg.param0 == 0x0F)
0001a8  9802              LDR      r0,[sp,#8]
0001aa  280f              CMP      r0,#0xf
0001ac  d113              BNE      |L10.470|
;;;413    					{
;;;414    						if(msg.param1 == 0x19)
0001ae  9803              LDR      r0,[sp,#0xc]
0001b0  2819              CMP      r0,#0x19
0001b2  e000              B        |L10.438|
                  |L10.436|
0001b4  e0c5              B        |L10.834|
                  |L10.438|
0001b6  d105              BNE      |L10.452|
;;;415    						{
;;;416    							Global_datas.g_mode_status = LOUD_SPEAKER_MODE;
0001b8  2009              MOVS     r0,#9
0001ba  7160              STRB     r0,[r4,#5]
;;;417    							printf("0x0F, msg.param1 = %x \n",msg.param1);
0001bc  a0c2              ADR      r0,|L10.1224|
0001be  9903              LDR      r1,[sp,#0xc]
0001c0  f7fffffe          BL       __2printf
                  |L10.452|
;;;418    						}
;;;419    					
;;;420    						if (msg.param1 == 0x17)
0001c4  9803              LDR      r0,[sp,#0xc]
0001c6  2817              CMP      r0,#0x17
0001c8  d105              BNE      |L10.470|
;;;421    						{
;;;422    		                	Global_datas.g_mode_status = AUX_MODE;
0001ca  2008              MOVS     r0,#8
0001cc  7160              STRB     r0,[r4,#5]
;;;423    						printf("0x0F, msg.param1 = %x \n",msg.param1);
0001ce  a0be              ADR      r0,|L10.1224|
0001d0  9903              LDR      r1,[sp,#0xc]
0001d2  f7fffffe          BL       __2printf
                  |L10.470|
;;;424    						}
;;;425    					}
;;;426    
;;;427    					if(msg.param0 == 0x0d)  // 4G GO TO POWER OFF , NEED TO POWER DOWN 4G VCC
0001d6  9802              LDR      r0,[sp,#8]
0001d8  280d              CMP      r0,#0xd
0001da  d105              BNE      |L10.488|
;;;428    					{
;;;429    						Drv_4GMoudle_PowerUp(0);  // wait for 4g modle ready ,than turn off power
0001dc  2000              MOVS     r0,#0
0001de  f7fffffe          BL       Drv_4GMoudle_PowerUp
;;;430    						TYM_drv_powerkeepon(0); 
0001e2  2000              MOVS     r0,#0
0001e4  f7fffffe          BL       TYM_drv_powerkeepon
                  |L10.488|
;;;431    					}
;;;432    
;;;433    					if(msg.param0 == 0x06)  // sys status
0001e8  9802              LDR      r0,[sp,#8]
0001ea  2806              CMP      r0,#6
0001ec  d150              BNE      |L10.656|
;;;434    					{
;;;435    						if(msg.param1 == 0x06)
0001ee  9803              LDR      r0,[sp,#0xc]
0001f0  2806              CMP      r0,#6
0001f2  d104              BNE      |L10.510|
;;;436    						{
;;;437    		                	Global_datas.g_mode_status = BT_MODE;
0001f4  2106              MOVS     r1,#6
0001f6  7161              STRB     r1,[r4,#5]
;;;438    							printf("0x06, msg.param1 = %x \n",msg.param1);
0001f8  a0b9              ADR      r0,|L10.1248|
0001fa  f7fffffe          BL       __2printf
                  |L10.510|
;;;439    						}
;;;440    					
;;;441    						if (msg.param1 == 0x07)
0001fe  9803              LDR      r0,[sp,#0xc]
000200  2807              CMP      r0,#7
000202  d104              BNE      |L10.526|
;;;442    						{
;;;443    		                	Global_datas.g_mode_status = BT_CONNECTED_MODE;
000204  2107              MOVS     r1,#7
000206  7161              STRB     r1,[r4,#5]
;;;444    		                	
;;;445    						printf("0x06, msg.param1 = %x \n",msg.param1);
000208  a0b5              ADR      r0,|L10.1248|
00020a  f7fffffe          BL       __2printf
                  |L10.526|
;;;446    						}
;;;447    						if (msg.param1 == 0x02)
00020e  9803              LDR      r0,[sp,#0xc]
000210  2802              CMP      r0,#2
000212  d104              BNE      |L10.542|
;;;448    						{
;;;449    		                	Global_datas.g_mode_status = WIFI_CONNECTED_MODE;
000214  2102              MOVS     r1,#2
000216  7161              STRB     r1,[r4,#5]
;;;450    		                	
;;;451    						printf("0x06, msg.param1 = %x \n",msg.param1);
000218  a0b1              ADR      r0,|L10.1248|
00021a  f7fffffe          BL       __2printf
                  |L10.542|
;;;452    						}
;;;453    						if (msg.param1 == 0x04)
00021e  9803              LDR      r0,[sp,#0xc]
000220  2804              CMP      r0,#4
000222  d105              BNE      |L10.560|
;;;454    						{
;;;455    		                	Global_datas.g_mode_status = WIFI_MODE;
000224  2001              MOVS     r0,#1
000226  7160              STRB     r0,[r4,#5]
;;;456    		                	
;;;457    						printf("0x06, msg.param1 = %x \n",msg.param1);
000228  a0ad              ADR      r0,|L10.1248|
00022a  9903              LDR      r1,[sp,#0xc]
00022c  f7fffffe          BL       __2printf
                  |L10.560|
;;;458    						}
;;;459    						if (msg.param1 == 0x05)
000230  9803              LDR      r0,[sp,#0xc]
000232  2805              CMP      r0,#5
000234  d105              BNE      |L10.578|
;;;460    						{
;;;461    		                	Global_datas.g_mode_status = WIFI_CONNECTING_MODE;
000236  2003              MOVS     r0,#3
000238  7160              STRB     r0,[r4,#5]
;;;462    		                	
;;;463    						printf("0x06, msg.param1 = %x \n",msg.param1);
00023a  a0a9              ADR      r0,|L10.1248|
00023c  9903              LDR      r1,[sp,#0xc]
00023e  f7fffffe          BL       __2printf
                  |L10.578|
;;;464    						}
;;;465    						if (msg.param1 == 0x011)
000242  9803              LDR      r0,[sp,#0xc]
000244  2811              CMP      r0,#0x11
000246  d105              BNE      |L10.596|
;;;466    						{
;;;467    		                	Global_datas.g_mode_status = FOURG_CONNECTED_MODE;
000248  2005              MOVS     r0,#5
00024a  7160              STRB     r0,[r4,#5]
;;;468    		                	
;;;469    						printf("0x06, msg.param1 = %x \n",msg.param1);
00024c  a0a4              ADR      r0,|L10.1248|
00024e  9903              LDR      r1,[sp,#0xc]
000250  f7fffffe          BL       __2printf
                  |L10.596|
;;;470    						}
;;;471    						if (msg.param1 == 0x012)
000254  9803              LDR      r0,[sp,#0xc]
000256  2812              CMP      r0,#0x12
000258  d105              BNE      |L10.614|
;;;472    						{
;;;473    		                	Global_datas.g_mode_status = FOURG_MODE;
00025a  2004              MOVS     r0,#4
00025c  7160              STRB     r0,[r4,#5]
;;;474    		                	
;;;475    						printf("0x06, msg.param1 = %x \n",msg.param1);
00025e  a0a0              ADR      r0,|L10.1248|
000260  9903              LDR      r1,[sp,#0xc]
000262  f7fffffe          BL       __2printf
                  |L10.614|
;;;476    						}
;;;477    						if (msg.param1 == 0x0B)
000266  9803              LDR      r0,[sp,#0xc]
000268  280b              CMP      r0,#0xb
00026a  d104              BNE      |L10.630|
;;;478    						{
;;;479    		                	Global_datas.g_mode_status = SYSTEM_UPDATING;
00026c  210b              MOVS     r1,#0xb
00026e  7161              STRB     r1,[r4,#5]
;;;480    		                	
;;;481    						printf("0x06, msg.param1 = %x \n",msg.param1);
000270  a09b              ADR      r0,|L10.1248|
000272  f7fffffe          BL       __2printf
                  |L10.630|
;;;482    						}
;;;483    						if ((msg.param1 == 0x09) || (msg.param1 == 0x08) || (msg.param1 == 0x16))
000276  9803              LDR      r0,[sp,#0xc]
000278  2809              CMP      r0,#9
00027a  d003              BEQ      |L10.644|
00027c  2808              CMP      r0,#8
00027e  d001              BEQ      |L10.644|
000280  2816              CMP      r0,#0x16
000282  d105              BNE      |L10.656|
                  |L10.644|
;;;484    						{
;;;485    		                	Global_datas.g_mode_status = SYS_LOW_POWER;
000284  200c              MOVS     r0,#0xc
000286  7160              STRB     r0,[r4,#5]
;;;486    		                	
;;;487    						printf("0x06, msg.param1 = %x \n",msg.param1);
000288  a095              ADR      r0,|L10.1248|
00028a  9903              LDR      r1,[sp,#0xc]
00028c  f7fffffe          BL       __2printf
                  |L10.656|
;;;488    						}
;;;489    						
;;;490    					}
;;;491    				//rtc time	
;;;492    					if(msg.param0 == 0x11)
000290  9802              LDR      r0,[sp,#8]
000292  2811              CMP      r0,#0x11
000294  d105              BNE      |L10.674|
;;;493    					{
;;;494    						srv_rtc_set_ym(msg.param1,msg.param2);
000296  9804              LDR      r0,[sp,#0x10]
000298  b2c1              UXTB     r1,r0
00029a  9803              LDR      r0,[sp,#0xc]
00029c  b2c0              UXTB     r0,r0
00029e  f7fffffe          BL       srv_rtc_set_ym
                  |L10.674|
;;;495    					}
;;;496    					
;;;497    					if(msg.param0 == 0x12)
0002a2  9802              LDR      r0,[sp,#8]
0002a4  2812              CMP      r0,#0x12
0002a6  d105              BNE      |L10.692|
;;;498    					{
;;;499    						srv_rtc_set_dw(msg.param1,msg.param2);
0002a8  9804              LDR      r0,[sp,#0x10]
0002aa  b2c1              UXTB     r1,r0
0002ac  9803              LDR      r0,[sp,#0xc]
0002ae  b2c0              UXTB     r0,r0
0002b0  f7fffffe          BL       srv_rtc_set_dw
                  |L10.692|
;;;500    					}
;;;501    					
;;;502    					if(msg.param0 == 0x13)
0002b4  9802              LDR      r0,[sp,#8]
0002b6  2813              CMP      r0,#0x13
0002b8  d105              BNE      |L10.710|
;;;503    					{
;;;504    						srv_rtc_set_hm(msg.param1,msg.param2);
0002ba  9804              LDR      r0,[sp,#0x10]
0002bc  b2c1              UXTB     r1,r0
0002be  9803              LDR      r0,[sp,#0xc]
0002c0  b2c0              UXTB     r0,r0
0002c2  f7fffffe          BL       srv_rtc_set_hm
                  |L10.710|
;;;505    					}
;;;506    					
;;;507    					if(msg.param0 == 0x14)
0002c6  9802              LDR      r0,[sp,#8]
0002c8  2814              CMP      r0,#0x14
0002ca  d105              BNE      |L10.728|
;;;508    					{
;;;509    						srv_rtc_set_st(msg.param1,msg.param2);
0002cc  9804              LDR      r0,[sp,#0x10]
0002ce  b2c1              UXTB     r1,r0
0002d0  9803              LDR      r0,[sp,#0xc]
0002d2  b2c0              UXTB     r0,r0
0002d4  f7fffffe          BL       srv_rtc_set_st
                  |L10.728|
;;;510    					}
;;;511    					//rtc alarm
;;;512    					if(msg.param0 == 0x15)
0002d8  9802              LDR      r0,[sp,#8]
0002da  2815              CMP      r0,#0x15
0002dc  d105              BNE      |L10.746|
;;;513    					{
;;;514    						srv_rtc_alarm_set_ym(msg.param1,msg.param2);
0002de  9804              LDR      r0,[sp,#0x10]
0002e0  b2c1              UXTB     r1,r0
0002e2  9803              LDR      r0,[sp,#0xc]
0002e4  b2c0              UXTB     r0,r0
0002e6  f7fffffe          BL       srv_rtc_alarm_set_ym
                  |L10.746|
;;;515    					}
;;;516    					
;;;517    					if(msg.param0 == 0x16)
0002ea  9802              LDR      r0,[sp,#8]
0002ec  2816              CMP      r0,#0x16
0002ee  d105              BNE      |L10.764|
;;;518    					{
;;;519    						srv_rtc_alarm_set_dw(msg.param1,msg.param2);
0002f0  9804              LDR      r0,[sp,#0x10]
0002f2  b2c1              UXTB     r1,r0
0002f4  9803              LDR      r0,[sp,#0xc]
0002f6  b2c0              UXTB     r0,r0
0002f8  f7fffffe          BL       srv_rtc_alarm_set_dw
                  |L10.764|
;;;520    					}
;;;521    					
;;;522    					if(msg.param0 == 0x17)
0002fc  9802              LDR      r0,[sp,#8]
0002fe  2817              CMP      r0,#0x17
000300  d105              BNE      |L10.782|
;;;523    					{
;;;524    						srv_rtc_alarm_set_hm(msg.param1,msg.param2);
000302  9804              LDR      r0,[sp,#0x10]
000304  b2c1              UXTB     r1,r0
000306  9803              LDR      r0,[sp,#0xc]
000308  b2c0              UXTB     r0,r0
00030a  f7fffffe          BL       srv_rtc_alarm_set_hm
                  |L10.782|
;;;525    					}
;;;526    					
;;;527    					if(msg.param0 == 0x18)
00030e  9802              LDR      r0,[sp,#8]
000310  2818              CMP      r0,#0x18
000312  d105              BNE      |L10.800|
;;;528    					{
;;;529    						srv_rtc_alarm_set_st(msg.param1,msg.param2);
000314  9804              LDR      r0,[sp,#0x10]
000316  b2c1              UXTB     r1,r0
000318  9803              LDR      r0,[sp,#0xc]
00031a  b2c0              UXTB     r0,r0
00031c  f7fffffe          BL       srv_rtc_alarm_set_st
                  |L10.800|
;;;530    					}
;;;531    					if(msg.param0 == 0x19)
000320  9802              LDR      r0,[sp,#8]
000322  2819              CMP      r0,#0x19
000324  d101              BNE      |L10.810|
;;;532    					{
;;;533    						srv_rtc_get();
000326  f7fffffe          BL       srv_rtc_get
                  |L10.810|
;;;534    					}
;;;535    					if(msg.param0 == 0x1a)
00032a  9802              LDR      r0,[sp,#8]
00032c  281a              CMP      r0,#0x1a
00032e  d101              BNE      |L10.820|
;;;536    					{
;;;537    						srv_rtc_alarm_get();
000330  f7fffffe          BL       srv_rtc_alarm_get
                  |L10.820|
;;;538    					}
;;;539    					
;;;540    					if(msg.param0 == 0x20)
000334  9802              LDR      r0,[sp,#8]
000336  2820              CMP      r0,#0x20
000338  d103              BNE      |L10.834|
;;;541    					{
;;;542    						Cmd_Send2FourG(0x20,0x0,0x3);  //version 0.0.3
00033a  2203              MOVS     r2,#3
00033c  2100              MOVS     r1,#0
00033e  f7fffffe          BL       Cmd_Send2FourG
                  |L10.834|
000342  e148              B        |L10.1494|
                  |L10.836|
;;;543    					}
;;;544    	            break;
;;;545    
;;;546    			 	case MSG_MCU1_SYS_STATE_IND:
;;;547    
;;;548    				    if((msg.param0 == 0x03) && (msg.param1 == 0x55)) //power off mode
000344  9802              LDR      r0,[sp,#8]
000346  2803              CMP      r0,#3
000348  d102              BNE      |L10.848|
00034a  9803              LDR      r0,[sp,#0xc]
00034c  2855              CMP      r0,#0x55
00034e  d0f8              BEQ      |L10.834|
                  |L10.848|
;;;549    					{
;;;550    						//Global_datas.g_mode_status = POWER_OFF_MODE;
;;;551    					}
;;;552    					else
;;;553    					{
;;;554    						Cmd_Send2FourG( msg.param0,msg.param1,msg.param2);
000350  9804              LDR      r0,[sp,#0x10]
000352  b2c2              UXTB     r2,r0
000354  9803              LDR      r0,[sp,#0xc]
000356  b2c1              UXTB     r1,r0
000358  9802              LDR      r0,[sp,#8]
00035a  b2c0              UXTB     r0,r0
00035c  f7fffffe          BL       Cmd_Send2FourG
;;;555    					}
;;;556    					
;;;557    					
;;;558    					//printf("MSG_MCU1_SYS_STATE_IND:msg.param0 = %x, msg.param1 = %x \n",msg.param0,msg.param1);
;;;559    					if((msg.param0 == 0x01) && (msg.param1 == 0x00))
000360  9802              LDR      r0,[sp,#8]
000362  2801              CMP      r0,#1
000364  d107              BNE      |L10.886|
000366  9803              LDR      r0,[sp,#0xc]
000368  2800              CMP      r0,#0
00036a  d1ea              BNE      |L10.834|
;;;560    					{
;;;561    						drv_Cmd_Send2NCU031(0x01,Global_datas.g_PowerStatus.bat_status,Global_datas.g_PowerStatus.bat_value);
00036c  7922              LDRB     r2,[r4,#4]  ; Global_datas
00036e  78e1              LDRB     r1,[r4,#3]  ; Global_datas
000370  2001              MOVS     r0,#1
000372  f7fffffe          BL       drv_Cmd_Send2NCU031
                  |L10.886|
;;;562    					}
;;;563    					if(msg.param0 == 0x02) // MIC VOLUNE ,NO USE 
;;;564    					{
;;;565    					
;;;566    					}
;;;567    
;;;568    					if((msg.param0 == 0x03) && (msg.param1 == 0x03))
000376  9802              LDR      r0,[sp,#8]
000378  2803              CMP      r0,#3
00037a  d1e2              BNE      |L10.834|
00037c  9803              LDR      r0,[sp,#0xc]
00037e  2803              CMP      r0,#3
000380  d10d              BNE      |L10.926|
;;;569    					{
;;;570    						if (Global_datas.volume > VOLUME_MIN)
000382  7be0              LDRB     r0,[r4,#0xf]  ; Global_datas
000384  2800              CMP      r0,#0
000386  d037              BEQ      |L10.1016|
000388  1e40              SUBS     r0,r0,#1
;;;571    						{
;;;572    							Global_datas.volume--;
00038a  b2c0              UXTB     r0,r0
00038c  73e0              STRB     r0,[r4,#0xf]
;;;573    							Drv_Dap_vol_set(Global_datas.volume);
00038e  f7fffffe          BL       Drv_Dap_vol_set
;;;574    							printf("Hal_Dap_Load_vol_add\n");
000392  a059              ADR      r0,|L10.1272|
000394  f7fffffe          BL       __2printf
;;;575    						}
;;;576    					}
;;;577    					
;;;578    					if((msg.param0 == 0x03) && (msg.param1 == 0x02))
000398  9802              LDR      r0,[sp,#8]
00039a  2803              CMP      r0,#3
00039c  d12c              BNE      |L10.1016|
                  |L10.926|
00039e  9803              LDR      r0,[sp,#0xc]
0003a0  2802              CMP      r0,#2
0003a2  d10d              BNE      |L10.960|
;;;579    					{
;;;580    						if (Global_datas.volume < VOLUME_MAX)
0003a4  7be0              LDRB     r0,[r4,#0xf]  ; Global_datas
0003a6  2810              CMP      r0,#0x10
0003a8  d226              BCS      |L10.1016|
0003aa  1c40              ADDS     r0,r0,#1
;;;581    						{
;;;582    							Global_datas.volume++;
0003ac  b2c0              UXTB     r0,r0
0003ae  73e0              STRB     r0,[r4,#0xf]
;;;583    							Drv_Dap_vol_set(Global_datas.volume);
0003b0  f7fffffe          BL       Drv_Dap_vol_set
;;;584    							printf("Hal_Dap_Load_vol_reduce\n");
0003b4  a056              ADR      r0,|L10.1296|
0003b6  f7fffffe          BL       __2printf
;;;585    						}
;;;586    					}
;;;587    
;;;588    					if((msg.param0 == 0x03) && (msg.param1 == 0x15)) //wifi mode
0003ba  9802              LDR      r0,[sp,#8]
0003bc  2803              CMP      r0,#3
0003be  d11b              BNE      |L10.1016|
                  |L10.960|
0003c0  9803              LDR      r0,[sp,#0xc]
0003c2  2815              CMP      r0,#0x15
0003c4  d107              BNE      |L10.982|
;;;589    					{
;;;590    						Global_datas.g_mode_status = WIFI_MODE;
0003c6  2001              MOVS     r0,#1
0003c8  7160              STRB     r0,[r4,#5]
;;;591    						printf("FourG_WIFI_CHANNEL\n");
0003ca  a058              ADR      r0,|L10.1324|
0003cc  f7fffffe          BL       __2printf
;;;592    					}
;;;593    					if((msg.param0 == 0x03) && (msg.param1 == 0x16)) //BT mode
0003d0  9802              LDR      r0,[sp,#8]
0003d2  2803              CMP      r0,#3
0003d4  d110              BNE      |L10.1016|
                  |L10.982|
0003d6  9803              LDR      r0,[sp,#0xc]
0003d8  2816              CMP      r0,#0x16
0003da  d107              BNE      |L10.1004|
;;;594    					{
;;;595    						Global_datas.g_mode_status = BT_MODE;
0003dc  2006              MOVS     r0,#6
0003de  7160              STRB     r0,[r4,#5]
;;;596    						printf("FourG_BT_CHANNEL\n");
0003e0  a057              ADR      r0,|L10.1344|
0003e2  f7fffffe          BL       __2printf
;;;597    					}
;;;598    					if((msg.param0 == 0x03) && (msg.param1 == 0x17)) //AUX mode
0003e6  9802              LDR      r0,[sp,#8]
0003e8  2803              CMP      r0,#3
0003ea  d105              BNE      |L10.1016|
                  |L10.1004|
0003ec  9803              LDR      r0,[sp,#0xc]
0003ee  2817              CMP      r0,#0x17
0003f0  d103              BNE      |L10.1018|
;;;599    					{
;;;600    						Global_datas.g_mode_status = AUX_MODE;
0003f2  2008              MOVS     r0,#8
0003f4  7160              STRB     r0,[r4,#5]
;;;601    						printf("AUXIN_CHANNEL\n");
0003f6  e0ad              B        |L10.1364|
                  |L10.1016|
0003f8  e0ed              B        |L10.1494|
                  |L10.1018|
0003fa  e0b1              B        |L10.1376|
                  |L10.1020|
0003fc  0a6d6169          DCB      "\nmain\n",0
000400  6e0a00  
000403  00                DCB      0
                  |L10.1028|
                          DCD      Global_datas+0x20
                  |L10.1032|
                          DCD      SysTimer_1s
                  |L10.1036|
                          DCD      ModulePowerUpPinTimer
                  |L10.1040|
                          DCD      PoweroffLedTimer
                  |L10.1044|
                          DCD      0x50004200
                  |L10.1048|
                          DCD      SubBoardHandshakeTimer
                  |L10.1052|
                          DCD      LedKeyBlinkTimer
                  |L10.1056|
000420  4d53475f          DCB      "MSG_4G_SYS_STATE_IND:msg.param0 = %x, msg.param1 = %x \n"
000424  34475f53
000428  59535f53
00042c  54415445
000430  5f494e44
000434  3a6d7367
000438  2e706172
00043c  616d3020
000440  3d202578
000444  2c206d73
000448  672e7061
00044c  72616d31
000450  203d2025
000454  78200a  
000457  00                DCB      0
                  |L10.1112|
000458  30783038          DCB      "0x08, msg.param1 = %x \n",0
00045c  2c206d73
000460  672e7061
000464  72616d31
000468  203d2025
00046c  78200a00
                  |L10.1136|
000470  0a204141          DCB      "\n AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n",0
000474  41414141
000478  41414141
00047c  41414141
000480  41414141
000484  41414141
000488  41414141
00048c  41414141
000490  41414141
000494  0a00    
000496  00                DCB      0
000497  00                DCB      0
                  |L10.1176|
000498  30783037          DCB      "0x07, msg.param1 = %x \n",0
00049c  2c206d73
0004a0  672e7061
0004a4  72616d31
0004a8  203d2025
0004ac  78200a00
                  |L10.1200|
0004b0  30783034          DCB      "0x04, msg.param1 = %x \n",0
0004b4  2c206d73
0004b8  672e7061
0004bc  72616d31
0004c0  203d2025
0004c4  78200a00
                  |L10.1224|
0004c8  30783046          DCB      "0x0F, msg.param1 = %x \n",0
0004cc  2c206d73
0004d0  672e7061
0004d4  72616d31
0004d8  203d2025
0004dc  78200a00
                  |L10.1248|
0004e0  30783036          DCB      "0x06, msg.param1 = %x \n",0
0004e4  2c206d73
0004e8  672e7061
0004ec  72616d31
0004f0  203d2025
0004f4  78200a00
                  |L10.1272|
0004f8  48616c5f          DCB      "Hal_Dap_Load_vol_add\n",0
0004fc  4461705f
000500  4c6f6164
000504  5f766f6c
000508  5f616464
00050c  0a00    
00050e  00                DCB      0
00050f  00                DCB      0
                  |L10.1296|
000510  48616c5f          DCB      "Hal_Dap_Load_vol_reduce\n",0
000514  4461705f
000518  4c6f6164
00051c  5f766f6c
000520  5f726564
000524  7563650a
000528  00      
000529  00                DCB      0
00052a  00                DCB      0
00052b  00                DCB      0
                  |L10.1324|
00052c  466f7572          DCB      "FourG_WIFI_CHANNEL\n",0
000530  475f5749
000534  46495f43
000538  48414e4e
00053c  454c0a00
                  |L10.1344|
000540  466f7572          DCB      "FourG_BT_CHANNEL\n",0
000544  475f4254
000548  5f434841
00054c  4e4e454c
000550  0a00    
000552  00                DCB      0
000553  00                DCB      0
                  |L10.1364|
000554  a031              ADR      r0,|L10.1564|
000556  f7fffffe          BL       __2printf
;;;602    					}
;;;603    					if((msg.param0 == 0x03) && (msg.param1 == 0x18)) //FM mode
00055a  9802              LDR      r0,[sp,#8]
00055c  2803              CMP      r0,#3
00055e  d13a              BNE      |L10.1494|
                  |L10.1376|
000560  9803              LDR      r0,[sp,#0xc]
000562  2818              CMP      r0,#0x18
000564  d107              BNE      |L10.1398|
;;;604    					{
;;;605    						Global_datas.g_mode_status = FM_MODE;
000566  200a              MOVS     r0,#0xa
000568  7160              STRB     r0,[r4,#5]
;;;606    						printf("AUXIN_CHANNEL\n");
00056a  a02c              ADR      r0,|L10.1564|
00056c  f7fffffe          BL       __2printf
;;;607    					//	drv_fm_led_on();
;;;608    					}
;;;609    					if((msg.param0 == 0x03) && (msg.param1 == 0x31)) // NEXT CHANNEL
;;;610    					{
;;;611    								
;;;612    					}
;;;613    					if((msg.param0 == 0x03) && (msg.param1 == 0x32))// PRE CHANNEL
;;;614    					{
;;;615    					
;;;616    					}
;;;617    					if((msg.param0 == 0x03) && (msg.param1 == 0x56)) // PLAY/PAUSE
;;;618    					{
;;;619    
;;;620    					}
;;;621    					if((msg.param0 == 0x03) && (msg.param1 == 0xC0)) //FM reset
000570  9802              LDR      r0,[sp,#8]
000572  2803              CMP      r0,#3
000574  d12f              BNE      |L10.1494|
                  |L10.1398|
000576  9803              LDR      r0,[sp,#0xc]
000578  28c0              CMP      r0,#0xc0
00057a  d107              BNE      |L10.1420|
;;;622    					{
;;;623    						
;;;624    						drv_FM_on_NCU031_reset();
00057c  f7fffffe          BL       drv_FM_on_NCU031_reset
;;;625    						printf("fm reset\n");
000580  a02a              ADR      r0,|L10.1580|
000582  f7fffffe          BL       __2printf
;;;626    						
;;;627    					}
;;;628    					if((msg.param0 == 0x03) && (msg.param1 == 0xC1)) //inside
000586  9802              LDR      r0,[sp,#8]
000588  2803              CMP      r0,#3
00058a  d124              BNE      |L10.1494|
                  |L10.1420|
00058c  9803              LDR      r0,[sp,#0xc]
00058e  28c1              CMP      r0,#0xc1
000590  d105              BNE      |L10.1438|
;;;629    					{
;;;630    						printf("inside\n");
000592  a029              ADR      r0,|L10.1592|
000594  f7fffffe          BL       __2printf
;;;631    					}
;;;632    					if((msg.param0 == 0x03) && (msg.param1 == 0xC2)) //outside
000598  9802              LDR      r0,[sp,#8]
00059a  2803              CMP      r0,#3
00059c  d11b              BNE      |L10.1494|
                  |L10.1438|
00059e  9803              LDR      r0,[sp,#0xc]
0005a0  28c2              CMP      r0,#0xc2
0005a2  d105              BNE      |L10.1456|
;;;633    					{
;;;634    
;;;635    						printf("outside\n");
0005a4  a026              ADR      r0,|L10.1600|
0005a6  f7fffffe          BL       __2printf
;;;636    					}
;;;637    					if((msg.param0 == 0x03) && (msg.param1 == 0xC3)) //autoside
0005aa  9802              LDR      r0,[sp,#8]
0005ac  2803              CMP      r0,#3
0005ae  d112              BNE      |L10.1494|
                  |L10.1456|
0005b0  9803              LDR      r0,[sp,#0xc]
0005b2  28c3              CMP      r0,#0xc3
0005b4  d105              BNE      |L10.1474|
;;;638    					{
;;;639    						printf("autoside\n");
0005b6  a025              ADR      r0,|L10.1612|
0005b8  f7fffffe          BL       __2printf
;;;640    					}
;;;641    
;;;642    					if((msg.param0 == 0x03) && (msg.param1 == 0xCA)) // handshake
0005bc  9802              LDR      r0,[sp,#8]
0005be  2803              CMP      r0,#3
0005c0  d109              BNE      |L10.1494|
                  |L10.1474|
0005c2  9803              LDR      r0,[sp,#0xc]
0005c4  28ca              CMP      r0,#0xca
0005c6  d106              BNE      |L10.1494|
;;;643    					{
;;;644    						Global_datas.subboard_online = 1;
0005c8  2001              MOVS     r0,#1
0005ca  7420              STRB     r0,[r4,#0x10]
;;;645    						TimeOutSet(&SubBoardHandshakeTimer, 4000);
0005cc  217d              MOVS     r1,#0x7d
0005ce  0149              LSLS     r1,r1,#5
0005d0  4821              LDR      r0,|L10.1624|
0005d2  f7fffffe          BL       TimeOutSet
                  |L10.1494|
;;;646    					}					
;;;647    					
;;;648    	            break;
;;;649    					
;;;650    	            default:
;;;651    	             break;
;;;652    	        }
;;;653        	}
;;;654    	
;;;655    		srv_key_handler();
0005d6  f7fffffe          BL       srv_key_handler
;;;656    		GetKeyEvent();
0005da  f7fffffe          BL       GetKeyEvent
;;;657    		IoKeyProcess();
0005de  f7fffffe          BL       IoKeyProcess
;;;658    
;;;659    
;;;660    		
;;;661    		if (((count>>16)&0xF) == refcount0)	
0005e2  0338              LSLS     r0,r7,#12
0005e4  0f00              LSRS     r0,r0,#28
0005e6  42b0              CMP      r0,r6
0005e8  d107              BNE      |L10.1530|
;;;662    		{
;;;663    			
;;;664    			if(refcount0 <0xF)
0005ea  2e0f              CMP      r6,#0xf
0005ec  d202              BCS      |L10.1524|
0005ee  1c76              ADDS     r6,r6,#1
;;;665    				refcount0++;
0005f0  b2f6              UXTB     r6,r6
0005f2  e000              B        |L10.1526|
                  |L10.1524|
;;;666    			else
;;;667    				refcount0 = 0;
0005f4  2600              MOVS     r6,#0
                  |L10.1526|
;;;668    			srv_bat_charge_handler();	
0005f6  f7fffffe          BL       srv_bat_charge_handler
                  |L10.1530|
;;;669    		}
;;;670    
;;;671    		if (((count>>15)&0xF) == refcount1)
0005fa  0378              LSLS     r0,r7,#13
0005fc  0f00              LSRS     r0,r0,#28
0005fe  42a8              CMP      r0,r5
000600  d109              BNE      |L10.1558|
;;;672    		{	
;;;673    			
;;;674    			if(refcount1 <0xF)
000602  2d0f              CMP      r5,#0xf
000604  d202              BCS      |L10.1548|
000606  1c6d              ADDS     r5,r5,#1
;;;675    				refcount1++;
000608  b2ed              UXTB     r5,r5
00060a  e000              B        |L10.1550|
                  |L10.1548|
;;;676    			else
;;;677    				refcount1 = 0;
00060c  2500              MOVS     r5,#0
                  |L10.1550|
;;;678    			
;;;679    			drv_power_status_updata();
00060e  f7fffffe          BL       drv_power_status_updata
;;;680    			srv_audio_handler();
000612  f7fffffe          BL       srv_audio_handler
                  |L10.1558|
000616  1c7f              ADDS     r7,r7,#1
000618  e4ff              B        |L10.26|
;;;681    		}
;;;682    		count++;
;;;683    	}
;;;684    
;;;685    }
;;;686    
                          ENDP

00061a  0000              DCW      0x0000
                  |L10.1564|
00061c  41555849          DCB      "AUXIN_CHANNEL\n",0
000620  4e5f4348
000624  414e4e45
000628  4c0a00  
00062b  00                DCB      0
                  |L10.1580|
00062c  666d2072          DCB      "fm reset\n",0
000630  65736574
000634  0a00    
000636  00                DCB      0
000637  00                DCB      0
                  |L10.1592|
000638  696e7369          DCB      "inside\n",0
00063c  64650a00
                  |L10.1600|
000640  6f757473          DCB      "outside\n",0
000644  6964650a
000648  00      
000649  00                DCB      0
00064a  00                DCB      0
00064b  00                DCB      0
                  |L10.1612|
00064c  6175746f          DCB      "autoside\n",0
000650  73696465
000654  0a00    
000656  00                DCB      0
000657  00                DCB      0
                  |L10.1624|
                          DCD      SubBoardHandshakeTimer

                          AREA ||.data||, DATA, ALIGN=0

                  sys_err
000000  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "..\\main.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_sys_err____REV16|
#line 388 "..\\lib\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___6_main_c_sys_err____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_sys_err____REVSH|
#line 402
|__asm___6_main_c_sys_err____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
