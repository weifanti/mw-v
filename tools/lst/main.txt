; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\main.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\main.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\lib\CMSIS\Include -I..\lib\Device\Nuvoton\NUC029xGE\Include -I..\lib\StdDriver\inc -I..\src\core\include -I..\src\driver\include -I..\src\io\include -I..\src\global -I..\src\server\include -I..\src\driver\audio -D__UVISION_VERSION=522 --omf_browse=.\obj\main.crf ..\main.c]
                          THUMB

                          AREA ||i.AMP_FaultPinDetectInit||, CODE, READONLY, ALIGN=2

                  AMP_FaultPinDetectInit PROC
;;;227    
;;;228    void AMP_FaultPinDetectInit(void)
000000  b510              PUSH     {r4,lr}
;;;229    {
;;;230    	GPIO_SetMode(PF, BIT2, GPIO_MODE_INPUT);	
000002  2200              MOVS     r2,#0
000004  2104              MOVS     r1,#4
000006  4802              LDR      r0,|L1.16|
000008  f7fffffe          BL       GPIO_SetMode
;;;231    }
00000c  bd10              POP      {r4,pc}
;;;232    
                          ENDP

00000e  0000              DCW      0x0000
                  |L1.16|
                          DCD      0x50004140

                          AREA ||i.Amplifier_open||, CODE, READONLY, ALIGN=2

                  Amplifier_open PROC
;;;233    
;;;234    void Amplifier_open(void)
000000  b510              PUSH     {r4,lr}
;;;235    {
;;;236    	GPIO_SetMode(PC, BIT1, GPIO_MODE_OUTPUT);	
000002  4c0c              LDR      r4,|L2.52|
000004  2201              MOVS     r2,#1
000006  2102              MOVS     r1,#2
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       GPIO_SetMode
;;;237    	GPIO_SetMode(PC, BIT13, GPIO_MODE_OUTPUT);
00000e  2201              MOVS     r2,#1
000010  0351              LSLS     r1,r2,#13
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       GPIO_SetMode
;;;238    	GPIO_SetMode(PB, BIT14, GPIO_MODE_OUTPUT);
000018  4806              LDR      r0,|L2.52|
00001a  2201              MOVS     r2,#1
00001c  0391              LSLS     r1,r2,#14
00001e  3840              SUBS     r0,r0,#0x40
000020  f7fffffe          BL       GPIO_SetMode
;;;239    	PC1 = 1;
000024  4904              LDR      r1,|L2.56|
000026  2001              MOVS     r0,#1
000028  6048              STR      r0,[r1,#4]
;;;240    	PC13 = 1;
00002a  6348              STR      r0,[r1,#0x34]
;;;241    	PB14 = 1;
00002c  4902              LDR      r1,|L2.56|
00002e  3940              SUBS     r1,r1,#0x40
000030  6388              STR      r0,[r1,#0x38]
;;;242    }
000032  bd10              POP      {r4,pc}
;;;243    
                          ENDP

                  |L2.52|
                          DCD      0x50004080
                  |L2.56|
                          DCD      0x50004280

                          AREA ||i.IoKeyProcess||, CODE, READONLY, ALIGN=2

                  IoKeyProcess PROC
;;;395    
;;;396    void IoKeyProcess(void)
000000  b570              PUSH     {r4-r6,lr}
;;;397    {
;;;398    
;;;399    	if(((Global_datas.g_mode_status == POWER_IDLE_MODE || Global_datas.g_mode_status == POWER_ON_MODE )&&(IN_KEY_POWER_CP != IoKeyInputmessage)) || (Global_datas.shoutting_down))
000002  4c1d              LDR      r4,|L3.120|
000004  4d1d              LDR      r5,|L3.124|
000006  79e1              LDRB     r1,[r4,#7]  ; Global_datas
000008  7828              LDRB     r0,[r5,#0]
00000a  290e              CMP      r1,#0xe
00000c  d001              BEQ      |L3.18|
00000e  2900              CMP      r1,#0
000010  d101              BNE      |L3.22|
                  |L3.18|
000012  2802              CMP      r0,#2
000014  d12b              BNE      |L3.110|
                  |L3.22|
000016  7c61              LDRB     r1,[r4,#0x11]  ; Global_datas
000018  2900              CMP      r1,#0
00001a  d128              BNE      |L3.110|
;;;400        {
;;;401    		return;
;;;402    	}
;;;403    
;;;404    	if(IoKeyInputmessage)
00001c  2800              CMP      r0,#0
00001e  d024              BEQ      |L3.106|
;;;405    	{
;;;406    		switch(IoKeyInputmessage)
000020  2801              CMP      r0,#1
000022  d012              BEQ      |L3.74|
000024  2802              CMP      r0,#2
000026  d016              BEQ      |L3.86|
000028  2804              CMP      r0,#4
00002a  d002              BEQ      |L3.50|
00002c  2805              CMP      r0,#5
00002e  d11c              BNE      |L3.106|
000030  e005              B        |L3.62|
                  |L3.50|
;;;407    		{
;;;408    			case IN_KEY_PAIR_SP:
;;;409    				printf("pari key sp\n");
000032  a013              ADR      r0,|L3.128|
000034  f7fffffe          BL       __2printf
;;;410    				drv_wifi_4g_switch_cmd_send();
000038  f7fffffe          BL       drv_wifi_4g_switch_cmd_send
;;;411    				break;
00003c  e015              B        |L3.106|
                  |L3.62|
;;;412    			case IN_KEY_PAIR_CP:
;;;413    				printf("pari key cp\n");
00003e  a014              ADR      r0,|L3.144|
000040  f7fffffe          BL       __2printf
;;;414    				drv_pairing_cmd_send();
000044  f7fffffe          BL       drv_pairing_cmd_send
;;;415    				
;;;416    				break;
000048  e00f              B        |L3.106|
                  |L3.74|
;;;417    			case IN_KEY_POWER_SP:
;;;418    				printf("power key sp\n");
00004a  a015              ADR      r0,|L3.160|
00004c  f7fffffe          BL       __2printf
;;;419    				srv_key_mode_handler();
000050  f7fffffe          BL       srv_key_mode_handler
;;;420    				break;
000054  e009              B        |L3.106|
                  |L3.86|
;;;421    			case IN_KEY_POWER_CP:
;;;422    				printf("power key cp\n");	
000056  a016              ADR      r0,|L3.176|
000058  f7fffffe          BL       __2printf
;;;423    				if(Global_datas.g_mode_status == POWER_IDLE_MODE)
00005c  79e0              LDRB     r0,[r4,#7]  ; Global_datas
00005e  280e              CMP      r0,#0xe
000060  d006              BEQ      |L3.112|
;;;424    				{
;;;425    					SYS_Status();
;;;426    				}
;;;427    
;;;428    				else
;;;429    				{
;;;430    					PowerOff();
000062  f7fffffe          BL       PowerOff
;;;431    					SysIdle();
000066  f7fffffe          BL       SysIdle
                  |L3.106|
;;;432    				}
;;;433    				break;
;;;434    
;;;435    		  	default:break;
;;;436    		}
;;;437    	}
;;;438    
;;;439    	IoKeyInputmessage = 0;
00006a  2000              MOVS     r0,#0
00006c  7028              STRB     r0,[r5,#0]
                  |L3.110|
;;;440    		
;;;441    }
00006e  bd70              POP      {r4-r6,pc}
                  |L3.112|
000070  f7fffffe          BL       SYS_Status
000074  e7f9              B        |L3.106|
;;;442    
                          ENDP

000076  0000              DCW      0x0000
                  |L3.120|
                          DCD      Global_datas+0x20
                  |L3.124|
                          DCD      IoKeyInputmessage
                  |L3.128|
000080  70617269          DCB      "pari key sp\n",0
000084  206b6579
000088  2073700a
00008c  00      
00008d  00                DCB      0
00008e  00                DCB      0
00008f  00                DCB      0
                  |L3.144|
000090  70617269          DCB      "pari key cp\n",0
000094  206b6579
000098  2063700a
00009c  00      
00009d  00                DCB      0
00009e  00                DCB      0
00009f  00                DCB      0
                  |L3.160|
0000a0  706f7765          DCB      "power key sp\n",0
0000a4  72206b65
0000a8  79207370
0000ac  0a00    
0000ae  00                DCB      0
0000af  00                DCB      0
                  |L3.176|
0000b0  706f7765          DCB      "power key cp\n",0
0000b4  72206b65
0000b8  79206370
0000bc  0a00    
0000be  00                DCB      0
0000bf  00                DCB      0

                          AREA ||i.MessageProcess||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  MessageProcess PROC
;;;948    #endif
;;;949    void MessageProcess(void)
000000  b5f0              PUSH     {r4-r7,lr}
;;;950    {
000002  b085              SUB      sp,sp,#0x14
;;;951    	sCoreMsg msg;
;;;952    	
;;;953      	uint8_t bat_val[2];
;;;954    
;;;955    	if(Core_Msg_Get(&msg))
000004  4668              MOV      r0,sp
000006  f7fffffe          BL       Core_Msg_Get
00000a  2800              CMP      r0,#0
00000c  d026              BEQ      |L4.92|
;;;956    		{
;;;957            // deal with message
;;;958            switch(msg.msg)
00000e  9800              LDR      r0,[sp,#0]
;;;959    	        {
;;;960    	            case MSG_4G_SYS_STATE_IND:
;;;961    					
;;;962    					printf("MSG_4G_SYS_STATE_IND:msg.param0 = %x, msg.param1 = %x \n",msg.param0,msg.param1);
000010  2707              MOVS     r7,#7
000012  2501              MOVS     r5,#1                 ;958
;;;963    					
;;;964    	                if((msg.param0 == 0x08) && (msg.param1 == 0x00))   // 4G handshake
;;;965    	                {
;;;966    						Global_datas.inputmessage = IN_KEY_INIT_FINISH_CMD;
000014  4cdb              LDR      r4,|L4.900|
000016  2801              CMP      r0,#1                 ;958
000018  d005              BEQ      |L4.38|
00001a  2802              CMP      r0,#2                 ;958
00001c  d11e              BNE      |L4.92|
;;;967    					} 
;;;968    					else if((msg.param0 == 0x09) && (msg.param1 == 0x01))  // check battery level  
;;;969    				    {
;;;970    						//Cmd_Send2FourG(0x09,Global_datas.PowerState.battery_level, Global_datas.PowerState.AdapterIn);  //Param0: barrery level (1-10)  1到10 对应 10%～ 100%  十个等级   ;Param1： 1 适配器插入，0 未插
;;;971    						//printf("battery_level = %x \n",Global_datas.PowerState.battery_level);
;;;972    						//printf("AdapterIn     = %x \n",Global_datas.PowerState.AdapterIn);
;;;973    					}
;;;974    					
;;;975    					else if(msg.param0 == 0x07)   // set volume
;;;976    	        		{
;;;977    	                	// vol
;;;978    						printf("0x07, msg.param1 = %x \n",msg.param1);
;;;979    						
;;;980    						if(msg.param1)
;;;981    						{
;;;982    							Global_datas.volume = msg.param1;
;;;983    							Drv_Dap_vol_set(Global_datas.volume);
;;;984    							Global_datas.mute = 0;
;;;985    							drv_5825_mute_pin_set(1);
;;;986    						}
;;;987    						else
;;;988    						{
;;;989    							Global_datas.volume = 0;
;;;990    							Drv_Dap_vol_set(Global_datas.volume);
;;;991    							Global_datas.mute = 1;
;;;992    							drv_5825_mute_pin_set(0);
;;;993    						}
;;;994    						
;;;995    					}
;;;996    					else if(msg.param0 == 0x04 ) // mute set
;;;997    					{
;;;998    	                	
;;;999    					}
;;;1000   					else if(msg.param0 == 0x0d)  // 4G GO TO POWER OFF , NEED TO POWER DOWN 4G VCC
;;;1001   					{
;;;1002   						Global_datas.inputmessage = IN_KEY_TURNOFF_4G_MOUDLE;
;;;1003   						printf("IN_KEY_TURNOFF_4G_MOUDLE \n");
;;;1004   					}
;;;1005   					else if(msg.param0 == 0x06)  // sys status
;;;1006   					{
;;;1007   						if(msg.param1 == 0x06)
;;;1008   						{
;;;1009   		                	Global_datas.g_mode_status = BT_MODE;
;;;1010   							printf("0x06, msg.param1 = %x \n",msg.param1);
;;;1011   							//Drv_Dap_vol_set(VOLUME_DEFAULT);
;;;1012   							Global_datas.MW_radio_net_type = NET_TYPE_NONE;
;;;1013   							drv_Cmd_Send2NCU031(0x70, 0x1d,Global_datas.MW_radio_net_type);// net type
;;;1014   							
;;;1015   						}
;;;1016   					
;;;1017   						if (msg.param1 == 0x07)
;;;1018   						{
;;;1019   		                	Global_datas.g_mode_status = BT_CONNECTED_MODE;
;;;1020   							printf("0x06, msg.param1 = %x \n",msg.param1);
;;;1021   							Global_datas.MW_radio_net_type = NET_TYPE_NONE;
;;;1022   						}
;;;1023   						if (msg.param1 == 0x02)
;;;1024   						{
;;;1025   		                	Global_datas.g_mode_status = WIFI_CONNECTED_MODE;
;;;1026   							Global_datas.MW_radio_net_type = NET_TYPE_WIFI;
;;;1027   							printf("0x06, msg.param1 = %x \n",msg.param1);
;;;1028   							
;;;1029   						}
;;;1030   						if (msg.param1 == 0x04)
;;;1031   						{
;;;1032   		                	Global_datas.g_mode_status = WIFI_MODE;
;;;1033   							Global_datas.MW_radio_net_type = NET_TYPE_WIFI;
;;;1034   							
;;;1035   							drv_Cmd_Send2NCU031(0x70, 0x1d,Global_datas.MW_radio_net_type);// net type
;;;1036   						printf("0x06, msg.param1 = %x \n",msg.param1);
;;;1037   						}
;;;1038   						if (msg.param1 == 0x05)
;;;1039   						{
;;;1040   		                	Global_datas.g_mode_status = WIFI_CONNECTING_MODE;
;;;1041   							Global_datas.MW_radio_net_type = NET_TYPE_WIFI;
;;;1042   		                	
;;;1043   						printf("0x06, msg.param1 = %x \n",msg.param1);
;;;1044   						}
;;;1045   						if (msg.param1 == 0x011)
;;;1046   						{
;;;1047   		                	Global_datas.g_mode_status = FOURG_CONNECTED_MODE;
;;;1048   							Global_datas.MW_radio_net_type = NET_TYPE_4G;
;;;1049   							printf("0x06, msg.param1 = %x \n",msg.param1);
;;;1050   						}
;;;1051   						if (msg.param1 == 0x012)
;;;1052   						{
;;;1053   		                	Global_datas.g_mode_status = FOURG_MODE;
;;;1054   							Global_datas.MW_radio_net_type = NET_TYPE_4G;
;;;1055   							drv_Cmd_Send2NCU031(0x70, 0x1d,Global_datas.MW_radio_net_type);// net type
;;;1056   							
;;;1057   							printf("0x06, msg.param1 = %x \n",msg.param1);
;;;1058   							
;;;1059   						}
;;;1060   						if (msg.param1 == 0x0B)
;;;1061   						{
;;;1062   		                	Global_datas.g_mode_status = SYSTEM_UPDATING;
;;;1063   		                	
;;;1064   						printf("0x06, msg.param1 = %x \n",msg.param1);
;;;1065   						}
;;;1066   						if ((msg.param1 == 0x09) || (msg.param1 == 0x08) || (msg.param1 == 0x16))
;;;1067   						{
;;;1068   		                	Global_datas.g_mode_status = SYS_LOW_POWER;
;;;1069   		                	
;;;1070   						printf("0x06, msg.param1 = %x \n",msg.param1);
;;;1071   						}
;;;1072   						
;;;1073   					}
;;;1074   					else if(msg.param0 == 0x10)
;;;1075   					{
;;;1076   						switch(msg.param1)
;;;1077   						{
;;;1078    							case 0x01: //send bt mac to PTE
;;;1079   								
;;;1080   							drv_Cmd_Send2Pte(0x18, Global_datas.bt_mac_len, 0);
;;;1081   							break;
;;;1082   							
;;;1083    							case 0x02: //send bt name to PTE
;;;1084   								
;;;1085   							drv_Cmd_Send2Pte(0x19, Global_datas.bt_name_len, 0);
;;;1086   							break;		
;;;1087   							
;;;1088    							case 0x03: //send 4G versoin to PTE
;;;1089   								
;;;1090   							drv_Cmd_Send2Pte(0x1a, Global_datas.FourG_version_len, 0);
;;;1091   							break;
;;;1092   							
;;;1093    							case 0x04: //send 4G mac to PTE
;;;1094   								
;;;1095   							drv_Cmd_Send2Pte(0x1b, Global_datas.FourG_mac_len, 0);
;;;1096   							break;	
;;;1097   
;;;1098   							case 0x09:
;;;1099   								
;;;1100   							drv_Cmd_Send2Pte(0x20,msg.param2, 0); // send 4G MobileDbm to PTE
;;;1101   							break;
;;;1102   
;;;1103   							
;;;1104   							default:break;
;;;1105   						}
;;;1106   
;;;1107   					}
;;;1108   					else if(msg.param0 == 0x20) // check version
;;;1109   					{
;;;1110   						Cmd_Send2FourG(0x20,0x0,0x1);  //version 0.0.1
;;;1111   					}
;;;1112   	            break;
;;;1113   
;;;1114   				
;;;1115   
;;;1116   			 	case MSG_MCU1_SYS_STATE_IND:
;;;1117   					//printf("MSG_MCU1_SYS_STATE_IND:msg.param0 = %x, msg.param1 = %x \n",msg.param0,msg.param1);
;;;1118   					if((msg.param0 == 0x01) && (msg.param1 == 0x00))  // check power state
00001e  9801              LDR      r0,[sp,#4]
000020  2801              CMP      r0,#1
000022  d07d              BEQ      |L4.288|
000024  e0da              B        |L4.476|
                  |L4.38|
000026  a0d8              ADR      r0,|L4.904|
000028  9a02              LDR      r2,[sp,#8]            ;962
00002a  9901              LDR      r1,[sp,#4]            ;962
00002c  f7fffffe          BL       __2printf
000030  9801              LDR      r0,[sp,#4]            ;964
000032  2808              CMP      r0,#8                 ;964
000034  d014              BEQ      |L4.96|
000036  2809              CMP      r0,#9                 ;968
000038  d010              BEQ      |L4.92|
00003a  2600              MOVS     r6,#0                 ;968
00003c  2807              CMP      r0,#7                 ;975
00003e  d014              BEQ      |L4.106|
000040  2804              CMP      r0,#4                 ;996
000042  d00b              BEQ      |L4.92|
000044  280d              CMP      r0,#0xd               ;1000
000046  d027              BEQ      |L4.152|
000048  2806              CMP      r0,#6                 ;1005
00004a  d02b              BEQ      |L4.164|
00004c  2810              CMP      r0,#0x10              ;1074
00004e  d068              BEQ      |L4.290|
000050  2820              CMP      r0,#0x20              ;1108
000052  d103              BNE      |L4.92|
000054  2201              MOVS     r2,#1                 ;1110
000056  2100              MOVS     r1,#0                 ;1110
000058  f7fffffe          BL       Cmd_Send2FourG
                  |L4.92|
;;;1119   					{
;;;1120   						drv_Cmd_Send2NCU031(0x01,Global_datas.g_PowerStatus.bat_status,Global_datas.g_PowerStatus.bat_value);
;;;1121   					}
;;;1122   
;;;1123   					if((msg.param0 == 0x03) && (msg.param1 == 0x03)) // VOL--
;;;1124   					{
;;;1125   						Global_datas.inputmessage = IN_KEY_VOL_SUB_S;
;;;1126   						printf("VOL-\n");
;;;1127   					}
;;;1128   					
;;;1129   					if((msg.param0 == 0x03) && (msg.param1 == 0x02))  // V+
;;;1130   					{
;;;1131   						Global_datas.inputmessage = IN_KEY_VOL_ADD_S;
;;;1132   						printf("VOL+\n");
;;;1133   					}
;;;1134   
;;;1135   					if((msg.param0 == 0x03) && (msg.param1 == 0x15)) //wifi mode
;;;1136   					{
;;;1137   
;;;1138   						printf("FourG_WIFI_CHANNEL\n");
;;;1139   						Global_datas.inputmessage = IN_KEY_MW_RADIO_MODE_S;
;;;1140   					}
;;;1141   					if((msg.param0 == 0x03) && (msg.param1 == 0x16)) //BT mode
;;;1142   					{
;;;1143   						printf("BT_CHANNEL\n");
;;;1144   						Global_datas.inputmessage = IN_KEY_BT_MODE_S;
;;;1145   					}
;;;1146   					if((msg.param0 == 0x03) && (msg.param1 == 0x17)) //AUX mode
;;;1147   					{
;;;1148   						printf("AUXIN_CHANNEL\n");
;;;1149   						Global_datas.inputmessage = IN_KEY_AUX_MODE_S;
;;;1150   					
;;;1151   					}
;;;1152   					if((msg.param0 == 0x03) && (msg.param1 == 0x18)) //FM mode
;;;1153   					{
;;;1154   						printf("FM_CHANNEL\n");
;;;1155   						Global_datas.inputmessage = IN_KEY_FM_MODE_S;
;;;1156   											}
;;;1157   					if((msg.param0 == 0x03) && (msg.param1 == 0x31)) // NEXT CHANNEL
;;;1158   					{
;;;1159   						Global_datas.inputmessage = IN_KEY_RADIO_NEXT_S;
;;;1160   								
;;;1161   					}
;;;1162   					if((msg.param0 == 0x03) && (msg.param1 == 0x32))// PRE CHANNEL
;;;1163   					{
;;;1164   						Global_datas.inputmessage = IN_KEY_RADIO_PREV_S;
;;;1165   					
;;;1166   					}
;;;1167   					if((msg.param0 == 0x03) && (msg.param1 == 0x56)) // PLAY/PAUSE
;;;1168   					{
;;;1169   						Global_datas.inputmessage = IN_KEY_PLAY_S;
;;;1170   					}
;;;1171   					
;;;1172   					if((msg.param0 == 0x03) && (msg.param1 == 0x0d)) // NEXT SONG
;;;1173   					{
;;;1174   						Global_datas.inputmessage = IN_KEY_NEXT_SONG_S;
;;;1175   								
;;;1176   					}
;;;1177   					if((msg.param0 == 0x03) && (msg.param1 == 0x0e))// PREV SONG
;;;1178   					{
;;;1179   						Global_datas.inputmessage = IN_KEY_PREV_SONG_S;
;;;1180   					
;;;1181   					}
;;;1182   
;;;1183   					
;;;1184   					
;;;1185   					if((msg.param0 == 0x03) && (msg.param1 == 0xC1)) //inside
;;;1186   					{
;;;1187   						printf("inside\n");
;;;1188   						Global_datas.inputmessage = IN_KEY_EQ_INDOOR_S;
;;;1189   					}
;;;1190   					if((msg.param0 == 0x03) && (msg.param1 == 0xC2)) //outside
;;;1191   					{
;;;1192   
;;;1193   						printf("outside\n");
;;;1194   						Global_datas.inputmessage = IN_KEY_EQ_OUTDOOR_S;
;;;1195   					}
;;;1196   					
;;;1197   					if((msg.param0 == 0x03) && (msg.param1 == 0xC8))
;;;1198   					{
;;;1199   
;;;1200   						printf("FM UP\n");
;;;1201   						Global_datas.inputmessage = IN_KEY_FM_NEXT_FREQ_S;
;;;1202   					}
;;;1203   
;;;1204   					if((msg.param0 == 0x03) && (msg.param1 == 0xC9))
;;;1205   					{
;;;1206   
;;;1207   						printf("FM DOWN\n");
;;;1208   						Global_datas.inputmessage = IN_KEY_FM_PREV_FREQ_S;
;;;1209   					}	
;;;1210   					
;;;1211   					if((msg.param0 == 0x03) && (msg.param1 == 0xCB))
;;;1212   					{
;;;1213   
;;;1214   						printf("FM LONG PRESS\n");
;;;1215   						Global_datas.inputmessage = IN_KEY_AUTO_SEARCH_S;
;;;1216   					}	
;;;1217   
;;;1218   
;;;1219   					
;;;1220   
;;;1221   					if((msg.param0 == 0x03) && (msg.param1 == 0x62)) // MIC key  single press
;;;1222   					{
;;;1223   						Cmd_Send2FourG(0x03,0x62,0);
;;;1224   
;;;1225   						printf("mic key press\n");
;;;1226   					}
;;;1227   					else if((msg.param0 == 0x03) && (msg.param1 == 0x63)) // MIC long press
;;;1228   					{
;;;1229   						Cmd_Send2FourG(0x03,0x63,0);
;;;1230   						
;;;1231   						printf("mic key long press\n");
;;;1232   					}
;;;1233   					else if((msg.param0 == 0x03) && (msg.param1 == 0x64)) // MIC long press release
;;;1234   					{
;;;1235   						Cmd_Send2FourG(0x03,0x64,0);					
;;;1236   						printf("mic key long release\n");
;;;1237   					}					
;;;1238   
;;;1239   
;;;1240   /*
;;;1241     	控制盒每3秒向主机发送一次握手信号，主机返回当前机器状态。
;;;1242     	0XCA + XX    其中XX包含当前控制盒硬开关位置:
;;;1243   	BIT 0~3 代表模式为， 0 = 空； 1 WIFI ; 2 FM; 3 BT; 4 AUX.
;;;1244   	BIT 4~7 代表EQ模式，0 = 空，1 INDOOR;  2 OUTDOOR
;;;1245   
;;;1246   */
;;;1247   					if((msg.param0 == 0x03) && (msg.param1 == 0xCA)) // handshake
;;;1248   					{
;;;1249   						if(Global_datas.SubBoard.subboard_online == 0)  // first in
;;;1250   						{
;;;1251   						 	//drv_SendAllstateToSubboard();
;;;1252   							SendFmFreqToSubBoard();
;;;1253   							printf("SUB BOARD ON\n");
;;;1254   
;;;1255   							Global_datas.SubBoard.eq_mode = msg.param2 >> 4;
;;;1256   							Global_datas.SubBoard.playmode = msg.param2 & 0x0f;
;;;1257   							Global_datas.SubBoard.subboard_online = 1;
;;;1258   							printf("msg.param1 = %d \n",msg.param2);
;;;1259   							printf("play_mode = %d \n",Global_datas.SubBoard.playmode);							
;;;1260   						}
;;;1261   						
;;;1262   
;;;1263   
;;;1264   						
;;;1265   						TimeOutSet(&SubBoardHandshakeTimer, 4000);
;;;1266   						//drv_Cmd_Send2NCU031(msg.param0,msg.param1,msg.param2);//
;;;1267   					}					
;;;1268   					
;;;1269   	            break;
;;;1270   					
;;;1271   	            default:
;;;1272   	             break;
;;;1273   	        }
;;;1274       	}	
;;;1275   }
00005c  b005              ADD      sp,sp,#0x14
00005e  bdf0              POP      {r4-r7,pc}
                  |L4.96|
000060  9802              LDR      r0,[sp,#8]            ;964
000062  2800              CMP      r0,#0                 ;964
000064  d1fa              BNE      |L4.92|
000066  2077              MOVS     r0,#0x77              ;966
000068  e10b              B        |L4.642|
                  |L4.106|
00006a  a0d5              ADR      r0,|L4.960|
00006c  9902              LDR      r1,[sp,#8]            ;978
00006e  f7fffffe          BL       __2printf
000072  9802              LDR      r0,[sp,#8]            ;980
000074  2800              CMP      r0,#0                 ;980
000076  d006              BEQ      |L4.134|
000078  b2c0              UXTB     r0,r0                 ;982
00007a  74e0              STRB     r0,[r4,#0x13]         ;982
00007c  f7fffffe          BL       Drv_Dap_vol_set
000080  7566              STRB     r6,[r4,#0x15]         ;984
000082  2001              MOVS     r0,#1                 ;985
000084  e005              B        |L4.146|
                  |L4.134|
000086  4630              MOV      r0,r6                 ;989
000088  74e6              STRB     r6,[r4,#0x13]         ;989
00008a  f7fffffe          BL       Drv_Dap_vol_set
00008e  7565              STRB     r5,[r4,#0x15]         ;991
000090  2000              MOVS     r0,#0                 ;992
                  |L4.146|
000092  f7fffffe          BL       drv_5825_mute_pin_set
                  |L4.150|
000096  e7e1              B        |L4.92|
                  |L4.152|
000098  201a              MOVS     r0,#0x1a              ;1002
00009a  75e0              STRB     r0,[r4,#0x17]         ;1002
00009c  a0ce              ADR      r0,|L4.984|
00009e  f7fffffe          BL       __2printf
0000a2  e7db              B        |L4.92|
                  |L4.164|
0000a4  9802              LDR      r0,[sp,#8]            ;1007
0000a6  2806              CMP      r0,#6                 ;1007
0000a8  d10a              BNE      |L4.192|
0000aa  2106              MOVS     r1,#6                 ;1009
0000ac  71e1              STRB     r1,[r4,#7]            ;1009
0000ae  a0d1              ADR      r0,|L4.1012|
0000b0  f7fffffe          BL       __2printf
0000b4  4632              MOV      r2,r6                 ;1012
0000b6  76e6              STRB     r6,[r4,#0x1b]         ;1012
0000b8  211d              MOVS     r1,#0x1d              ;1013
0000ba  2070              MOVS     r0,#0x70              ;1013
0000bc  f7fffffe          BL       drv_Cmd_Send2NCU031
                  |L4.192|
0000c0  9802              LDR      r0,[sp,#8]            ;1017
0000c2  2807              CMP      r0,#7                 ;1017
0000c4  d105              BNE      |L4.210|
0000c6  4639              MOV      r1,r7                 ;1019
0000c8  71e7              STRB     r7,[r4,#7]            ;1019
0000ca  a0ca              ADR      r0,|L4.1012|
0000cc  f7fffffe          BL       __2printf
0000d0  76e6              STRB     r6,[r4,#0x1b]         ;1021
                  |L4.210|
0000d2  9802              LDR      r0,[sp,#8]            ;1023
0000d4  2602              MOVS     r6,#2                 ;958
0000d6  2802              CMP      r0,#2                 ;1023
0000d8  d105              BNE      |L4.230|
0000da  71e6              STRB     r6,[r4,#7]            ;1025
0000dc  4631              MOV      r1,r6                 ;1025
0000de  76e5              STRB     r5,[r4,#0x1b]         ;1026
0000e0  a0c4              ADR      r0,|L4.1012|
0000e2  f7fffffe          BL       __2printf
                  |L4.230|
0000e6  9802              LDR      r0,[sp,#8]            ;1030
0000e8  2804              CMP      r0,#4                 ;1030
0000ea  d10a              BNE      |L4.258|
0000ec  71e5              STRB     r5,[r4,#7]            ;1032
0000ee  462a              MOV      r2,r5                 ;1032
0000f0  76e5              STRB     r5,[r4,#0x1b]         ;1033
0000f2  211d              MOVS     r1,#0x1d              ;1035
0000f4  2070              MOVS     r0,#0x70              ;1035
0000f6  f7fffffe          BL       drv_Cmd_Send2NCU031
0000fa  a0be              ADR      r0,|L4.1012|
0000fc  9902              LDR      r1,[sp,#8]            ;1036
0000fe  f7fffffe          BL       __2printf
                  |L4.258|
000102  9802              LDR      r0,[sp,#8]            ;1038
000104  2805              CMP      r0,#5                 ;1038
000106  d106              BNE      |L4.278|
000108  2003              MOVS     r0,#3                 ;1040
00010a  71e0              STRB     r0,[r4,#7]            ;1040
00010c  76e5              STRB     r5,[r4,#0x1b]         ;1041
00010e  a0b9              ADR      r0,|L4.1012|
000110  9902              LDR      r1,[sp,#8]            ;1043
000112  f7fffffe          BL       __2printf
                  |L4.278|
000116  9802              LDR      r0,[sp,#8]            ;1045
000118  2811              CMP      r0,#0x11              ;1045
00011a  d109              BNE      |L4.304|
00011c  2005              MOVS     r0,#5                 ;1047
00011e  e001              B        |L4.292|
                  |L4.288|
000120  e054              B        |L4.460|
                  |L4.290|
000122  e02a              B        |L4.378|
                  |L4.292|
000124  71e0              STRB     r0,[r4,#7]            ;1047
000126  76e6              STRB     r6,[r4,#0x1b]         ;1048
000128  a0b2              ADR      r0,|L4.1012|
00012a  9902              LDR      r1,[sp,#8]            ;1049
00012c  f7fffffe          BL       __2printf
                  |L4.304|
000130  9802              LDR      r0,[sp,#8]            ;1051
000132  2812              CMP      r0,#0x12              ;1051
000134  d10b              BNE      |L4.334|
000136  2004              MOVS     r0,#4                 ;1053
000138  71e0              STRB     r0,[r4,#7]            ;1053
00013a  4632              MOV      r2,r6                 ;1054
00013c  76e6              STRB     r6,[r4,#0x1b]         ;1054
00013e  211d              MOVS     r1,#0x1d              ;1055
000140  2070              MOVS     r0,#0x70              ;1055
000142  f7fffffe          BL       drv_Cmd_Send2NCU031
000146  a0ab              ADR      r0,|L4.1012|
000148  9902              LDR      r1,[sp,#8]            ;1057
00014a  f7fffffe          BL       __2printf
                  |L4.334|
00014e  9802              LDR      r0,[sp,#8]            ;1060
000150  280b              CMP      r0,#0xb               ;1060
000152  d104              BNE      |L4.350|
000154  210b              MOVS     r1,#0xb               ;1062
000156  71e1              STRB     r1,[r4,#7]            ;1062
000158  a0a6              ADR      r0,|L4.1012|
00015a  f7fffffe          BL       __2printf
                  |L4.350|
00015e  9802              LDR      r0,[sp,#8]            ;1066
000160  2809              CMP      r0,#9                 ;1066
000162  d003              BEQ      |L4.364|
000164  2808              CMP      r0,#8                 ;1066
000166  d001              BEQ      |L4.364|
000168  2816              CMP      r0,#0x16              ;1066
00016a  d194              BNE      |L4.150|
                  |L4.364|
00016c  200c              MOVS     r0,#0xc               ;1068
00016e  71e0              STRB     r0,[r4,#7]            ;1068
000170  a0a0              ADR      r0,|L4.1012|
000172  9902              LDR      r1,[sp,#8]            ;1070
000174  f7fffffe          BL       __2printf
                  |L4.376|
000178  e770              B        |L4.92|
                  |L4.378|
00017a  9802              LDR      r0,[sp,#8]            ;1076
00017c  0003              MOVS     r3,r0                 ;1076
00017e  f7fffffe          BL       __ARM_common_switch8
000182  0a06              DCB      0x0a,0x06
000184  070d151b          DCB      0x07,0x0d,0x15,0x1b
000188  06060606          DCB      0x06,0x06,0x06,0x06
00018c  2006              DCB      0x20,0x06
00018e  e765              B        |L4.92|
000190  487c              LDR      r0,|L4.900|
000192  2200              MOVS     r2,#0                 ;1080
000194  30c0              ADDS     r0,r0,#0xc0           ;1080
000196  7a81              LDRB     r1,[r0,#0xa]          ;1080  ; Global_datas
000198  2018              MOVS     r0,#0x18              ;1080
00019a  e004              B        |L4.422|
00019c  4879              LDR      r0,|L4.900|
00019e  2200              MOVS     r2,#0                 ;1085
0001a0  30a0              ADDS     r0,r0,#0xa0           ;1085
0001a2  7841              LDRB     r1,[r0,#1]            ;1085  ; Global_datas
0001a4  2019              MOVS     r0,#0x19              ;1085
                  |L4.422|
0001a6  f7fffffe          BL       drv_Cmd_Send2Pte
0001aa  e757              B        |L4.92|
0001ac  4875              LDR      r0,|L4.900|
0001ae  2200              MOVS     r2,#0                 ;1090
0001b0  30e0              ADDS     r0,r0,#0xe0           ;1090
0001b2  7cc1              LDRB     r1,[r0,#0x13]         ;1090  ; Global_datas
0001b4  201a              MOVS     r0,#0x1a              ;1090
0001b6  e7f6              B        |L4.422|
0001b8  4894              LDR      r0,|L4.1036|
0001ba  2200              MOVS     r2,#0                 ;1095
0001bc  7f01              LDRB     r1,[r0,#0x1c]         ;1095  ; Global_datas
0001be  201b              MOVS     r0,#0x1b              ;1095
0001c0  e7f1              B        |L4.422|
0001c2  9803              LDR      r0,[sp,#0xc]          ;1100
0001c4  2200              MOVS     r2,#0                 ;1100
0001c6  b2c1              UXTB     r1,r0                 ;1100
0001c8  2020              MOVS     r0,#0x20              ;1100
0001ca  e7ec              B        |L4.422|
                  |L4.460|
0001cc  9802              LDR      r0,[sp,#8]            ;1118
0001ce  2800              CMP      r0,#0                 ;1118
0001d0  d1d2              BNE      |L4.376|
0001d2  7922              LDRB     r2,[r4,#4]            ;1120  ; Global_datas
0001d4  78e1              LDRB     r1,[r4,#3]            ;1120  ; Global_datas
0001d6  2001              MOVS     r0,#1                 ;1120
0001d8  f7fffffe          BL       drv_Cmd_Send2NCU031
                  |L4.476|
0001dc  9801              LDR      r0,[sp,#4]            ;1123
0001de  2803              CMP      r0,#3                 ;1123
0001e0  d1ca              BNE      |L4.376|
0001e2  9802              LDR      r0,[sp,#8]            ;1123
0001e4  2803              CMP      r0,#3                 ;1123
0001e6  d107              BNE      |L4.504|
0001e8  200c              MOVS     r0,#0xc               ;1125
0001ea  75e0              STRB     r0,[r4,#0x17]         ;1125
0001ec  a088              ADR      r0,|L4.1040|
0001ee  f7fffffe          BL       __2printf
0001f2  9801              LDR      r0,[sp,#4]            ;1129
0001f4  2803              CMP      r0,#3                 ;1129
0001f6  d1bf              BNE      |L4.376|
                  |L4.504|
0001f8  9802              LDR      r0,[sp,#8]            ;1129
0001fa  2802              CMP      r0,#2                 ;1129
0001fc  d107              BNE      |L4.526|
0001fe  200b              MOVS     r0,#0xb               ;1131
000200  75e0              STRB     r0,[r4,#0x17]         ;1131
000202  a085              ADR      r0,|L4.1048|
000204  f7fffffe          BL       __2printf
000208  9801              LDR      r0,[sp,#4]            ;1135
00020a  2803              CMP      r0,#3                 ;1135
00020c  d1b4              BNE      |L4.376|
                  |L4.526|
00020e  9802              LDR      r0,[sp,#8]            ;1135
000210  2815              CMP      r0,#0x15              ;1135
000212  d107              BNE      |L4.548|
000214  a082              ADR      r0,|L4.1056|
000216  f7fffffe          BL       __2printf
00021a  2009              MOVS     r0,#9                 ;1139
00021c  75e0              STRB     r0,[r4,#0x17]         ;1139
00021e  9801              LDR      r0,[sp,#4]            ;1141
000220  2803              CMP      r0,#3                 ;1141
000222  d1a9              BNE      |L4.376|
                  |L4.548|
000224  9802              LDR      r0,[sp,#8]            ;1141
000226  2816              CMP      r0,#0x16              ;1141
000228  d107              BNE      |L4.570|
00022a  a082              ADR      r0,|L4.1076|
00022c  f7fffffe          BL       __2printf
000230  200a              MOVS     r0,#0xa               ;1144
000232  75e0              STRB     r0,[r4,#0x17]         ;1144
000234  9801              LDR      r0,[sp,#4]            ;1146
000236  2803              CMP      r0,#3                 ;1146
000238  d19e              BNE      |L4.376|
                  |L4.570|
00023a  9802              LDR      r0,[sp,#8]            ;1146
00023c  2817              CMP      r0,#0x17              ;1146
00023e  d107              BNE      |L4.592|
000240  a07f              ADR      r0,|L4.1088|
000242  f7fffffe          BL       __2printf
000246  2008              MOVS     r0,#8                 ;1149
000248  75e0              STRB     r0,[r4,#0x17]         ;1149
00024a  9801              LDR      r0,[sp,#4]            ;1152
00024c  2803              CMP      r0,#3                 ;1152
00024e  d193              BNE      |L4.376|
                  |L4.592|
000250  9802              LDR      r0,[sp,#8]            ;1152
000252  2818              CMP      r0,#0x18              ;1152
000254  d106              BNE      |L4.612|
000256  a07e              ADR      r0,|L4.1104|
000258  f7fffffe          BL       __2printf
00025c  75e7              STRB     r7,[r4,#0x17]         ;1155
00025e  9801              LDR      r0,[sp,#4]            ;1157
000260  2803              CMP      r0,#3                 ;1157
000262  d189              BNE      |L4.376|
                  |L4.612|
000264  9802              LDR      r0,[sp,#8]            ;1157
000266  2831              CMP      r0,#0x31              ;1157
000268  d00a              BEQ      |L4.640|
00026a  2832              CMP      r0,#0x32              ;1162
00026c  d00b              BEQ      |L4.646|
00026e  2856              CMP      r0,#0x56              ;1167
000270  d00b              BEQ      |L4.650|
000272  280d              CMP      r0,#0xd               ;1172
000274  d00b              BEQ      |L4.654|
000276  280e              CMP      r0,#0xe               ;1177
000278  d00b              BEQ      |L4.658|
00027a  28c1              CMP      r0,#0xc1              ;1185
00027c  d00b              BEQ      |L4.662|
00027e  e012              B        |L4.678|
                  |L4.640|
000280  2017              MOVS     r0,#0x17              ;1159
                  |L4.642|
000282  75e0              STRB     r0,[r4,#0x17]         ;966
                  |L4.644|
000284  e6ea              B        |L4.92|
                  |L4.646|
000286  2016              MOVS     r0,#0x16              ;1164
000288  e7fb              B        |L4.642|
                  |L4.650|
00028a  2010              MOVS     r0,#0x10              ;1169
00028c  e7f9              B        |L4.642|
                  |L4.654|
00028e  2011              MOVS     r0,#0x11              ;1174
000290  e7f7              B        |L4.642|
                  |L4.658|
000292  2012              MOVS     r0,#0x12              ;1179
000294  e7f5              B        |L4.642|
                  |L4.662|
000296  a071              ADR      r0,|L4.1116|
000298  f7fffffe          BL       __2printf
00029c  200d              MOVS     r0,#0xd               ;1188
00029e  75e0              STRB     r0,[r4,#0x17]         ;1188
0002a0  9801              LDR      r0,[sp,#4]            ;1190
0002a2  2803              CMP      r0,#3                 ;1190
0002a4  d1ee              BNE      |L4.644|
                  |L4.678|
0002a6  9802              LDR      r0,[sp,#8]            ;1190
0002a8  28c2              CMP      r0,#0xc2              ;1190
0002aa  d107              BNE      |L4.700|
0002ac  a06d              ADR      r0,|L4.1124|
0002ae  f7fffffe          BL       __2printf
0002b2  200e              MOVS     r0,#0xe               ;1194
0002b4  75e0              STRB     r0,[r4,#0x17]         ;1194
0002b6  9801              LDR      r0,[sp,#4]            ;1197
0002b8  2803              CMP      r0,#3                 ;1197
0002ba  d1e3              BNE      |L4.644|
                  |L4.700|
0002bc  9802              LDR      r0,[sp,#8]            ;1197
0002be  28c8              CMP      r0,#0xc8              ;1197
0002c0  d107              BNE      |L4.722|
0002c2  a06b              ADR      r0,|L4.1136|
0002c4  f7fffffe          BL       __2printf
0002c8  2013              MOVS     r0,#0x13              ;1201
0002ca  75e0              STRB     r0,[r4,#0x17]         ;1201
0002cc  9801              LDR      r0,[sp,#4]            ;1204
0002ce  2803              CMP      r0,#3                 ;1204
0002d0  d1d8              BNE      |L4.644|
                  |L4.722|
0002d2  9802              LDR      r0,[sp,#8]            ;1204
0002d4  28c9              CMP      r0,#0xc9              ;1204
0002d6  d107              BNE      |L4.744|
0002d8  a067              ADR      r0,|L4.1144|
0002da  f7fffffe          BL       __2printf
0002de  2014              MOVS     r0,#0x14              ;1208
0002e0  75e0              STRB     r0,[r4,#0x17]         ;1208
0002e2  9801              LDR      r0,[sp,#4]            ;1211
0002e4  2803              CMP      r0,#3                 ;1211
0002e6  d1cd              BNE      |L4.644|
                  |L4.744|
0002e8  9802              LDR      r0,[sp,#8]            ;1211
0002ea  28cb              CMP      r0,#0xcb              ;1211
0002ec  d107              BNE      |L4.766|
0002ee  a065              ADR      r0,|L4.1156|
0002f0  f7fffffe          BL       __2printf
0002f4  2015              MOVS     r0,#0x15              ;1215
0002f6  75e0              STRB     r0,[r4,#0x17]         ;1215
0002f8  9801              LDR      r0,[sp,#4]            ;1221
0002fa  2803              CMP      r0,#3                 ;1221
0002fc  d1c2              BNE      |L4.644|
                  |L4.766|
0002fe  9802              LDR      r0,[sp,#8]            ;1221
000300  2862              CMP      r0,#0x62              ;1221
000302  d004              BEQ      |L4.782|
000304  2863              CMP      r0,#0x63              ;1227
000306  d009              BEQ      |L4.796|
000308  2864              CMP      r0,#0x64              ;1233
00030a  d00e              BEQ      |L4.810|
00030c  e018              B        |L4.832|
                  |L4.782|
00030e  2200              MOVS     r2,#0                 ;1223
000310  2162              MOVS     r1,#0x62              ;1223
000312  2003              MOVS     r0,#3                 ;1223
000314  f7fffffe          BL       Cmd_Send2FourG
000318  a05e              ADR      r0,|L4.1172|
00031a  e00c              B        |L4.822|
                  |L4.796|
00031c  2200              MOVS     r2,#0                 ;1229
00031e  2163              MOVS     r1,#0x63              ;1229
000320  2003              MOVS     r0,#3                 ;1229
000322  f7fffffe          BL       Cmd_Send2FourG
000326  a05f              ADR      r0,|L4.1188|
000328  e005              B        |L4.822|
                  |L4.810|
00032a  2200              MOVS     r2,#0                 ;1235
00032c  2164              MOVS     r1,#0x64              ;1235
00032e  2003              MOVS     r0,#3                 ;1235
000330  f7fffffe          BL       Cmd_Send2FourG
000334  a060              ADR      r0,|L4.1208|
                  |L4.822|
000336  f7fffffe          BL       __2printf
00033a  9801              LDR      r0,[sp,#4]            ;1247
00033c  2803              CMP      r0,#3                 ;1247
00033e  d1a1              BNE      |L4.644|
                  |L4.832|
000340  9802              LDR      r0,[sp,#8]            ;1247
000342  28ca              CMP      r0,#0xca              ;1247
000344  d19e              BNE      |L4.644|
000346  7f20              LDRB     r0,[r4,#0x1c]         ;1249  ; Global_datas
000348  2800              CMP      r0,#0                 ;1249
00034a  d114              BNE      |L4.886|
00034c  f7fffffe          BL       SendFmFreqToSubBoard
000350  a05f              ADR      r0,|L4.1232|
000352  f7fffffe          BL       __2printf
000356  9803              LDR      r0,[sp,#0xc]          ;1255
000358  0900              LSRS     r0,r0,#4              ;1255
00035a  7760              STRB     r0,[r4,#0x1d]         ;1255
00035c  9803              LDR      r0,[sp,#0xc]          ;1256
00035e  0700              LSLS     r0,r0,#28             ;1256
000360  0f00              LSRS     r0,r0,#28             ;1256
000362  77a0              STRB     r0,[r4,#0x1e]         ;1256
000364  7725              STRB     r5,[r4,#0x1c]         ;1257
000366  a05e              ADR      r0,|L4.1248|
000368  9903              LDR      r1,[sp,#0xc]          ;1258
00036a  f7fffffe          BL       __2printf
00036e  7fa1              LDRB     r1,[r4,#0x1e]         ;1259  ; Global_datas
000370  a060              ADR      r0,|L4.1268|
000372  f7fffffe          BL       __2printf
                  |L4.886|
000376  217d              MOVS     r1,#0x7d              ;1265
000378  0149              LSLS     r1,r1,#5              ;1265
00037a  4863              LDR      r0,|L4.1288|
00037c  f7fffffe          BL       TimeOutSet
000380  e66c              B        |L4.92|
;;;1276   
                          ENDP

000382  0000              DCW      0x0000
                  |L4.900|
                          DCD      Global_datas+0x20
                  |L4.904|
000388  4d53475f          DCB      "MSG_4G_SYS_STATE_IND:msg.param0 = %x, msg.param1 = %x \n"
00038c  34475f53
000390  59535f53
000394  54415445
000398  5f494e44
00039c  3a6d7367
0003a0  2e706172
0003a4  616d3020
0003a8  3d202578
0003ac  2c206d73
0003b0  672e7061
0003b4  72616d31
0003b8  203d2025
0003bc  78200a  
0003bf  00                DCB      0
                  |L4.960|
0003c0  30783037          DCB      "0x07, msg.param1 = %x \n",0
0003c4  2c206d73
0003c8  672e7061
0003cc  72616d31
0003d0  203d2025
0003d4  78200a00
                  |L4.984|
0003d8  494e5f4b          DCB      "IN_KEY_TURNOFF_4G_MOUDLE \n",0
0003dc  45595f54
0003e0  55524e4f
0003e4  46465f34
0003e8  475f4d4f
0003ec  55444c45
0003f0  200a00  
0003f3  00                DCB      0
                  |L4.1012|
0003f4  30783036          DCB      "0x06, msg.param1 = %x \n",0
0003f8  2c206d73
0003fc  672e7061
000400  72616d31
000404  203d2025
000408  78200a00
                  |L4.1036|
                          DCD      Global_datas+0x120
                  |L4.1040|
000410  564f4c2d          DCB      "VOL-\n",0
000414  0a00    
000416  00                DCB      0
000417  00                DCB      0
                  |L4.1048|
000418  564f4c2b          DCB      "VOL+\n",0
00041c  0a00    
00041e  00                DCB      0
00041f  00                DCB      0
                  |L4.1056|
000420  466f7572          DCB      "FourG_WIFI_CHANNEL\n",0
000424  475f5749
000428  46495f43
00042c  48414e4e
000430  454c0a00
                  |L4.1076|
000434  42545f43          DCB      "BT_CHANNEL\n",0
000438  48414e4e
00043c  454c0a00
                  |L4.1088|
000440  41555849          DCB      "AUXIN_CHANNEL\n",0
000444  4e5f4348
000448  414e4e45
00044c  4c0a00  
00044f  00                DCB      0
                  |L4.1104|
000450  464d5f43          DCB      "FM_CHANNEL\n",0
000454  48414e4e
000458  454c0a00
                  |L4.1116|
00045c  696e7369          DCB      "inside\n",0
000460  64650a00
                  |L4.1124|
000464  6f757473          DCB      "outside\n",0
000468  6964650a
00046c  00      
00046d  00                DCB      0
00046e  00                DCB      0
00046f  00                DCB      0
                  |L4.1136|
000470  464d2055          DCB      "FM UP\n",0
000474  500a00  
000477  00                DCB      0
                  |L4.1144|
000478  464d2044          DCB      "FM DOWN\n",0
00047c  4f574e0a
000480  00      
000481  00                DCB      0
000482  00                DCB      0
000483  00                DCB      0
                  |L4.1156|
000484  464d204c          DCB      "FM LONG PRESS\n",0
000488  4f4e4720
00048c  50524553
000490  530a00  
000493  00                DCB      0
                  |L4.1172|
000494  6d696320          DCB      "mic key press\n",0
000498  6b657920
00049c  70726573
0004a0  730a00  
0004a3  00                DCB      0
                  |L4.1188|
0004a4  6d696320          DCB      "mic key long press\n",0
0004a8  6b657920
0004ac  6c6f6e67
0004b0  20707265
0004b4  73730a00
                  |L4.1208|
0004b8  6d696320          DCB      "mic key long release\n",0
0004bc  6b657920
0004c0  6c6f6e67
0004c4  2072656c
0004c8  65617365
0004cc  0a00    
0004ce  00                DCB      0
0004cf  00                DCB      0
                  |L4.1232|
0004d0  53554220          DCB      "SUB BOARD ON\n",0
0004d4  424f4152
0004d8  44204f4e
0004dc  0a00    
0004de  00                DCB      0
0004df  00                DCB      0
                  |L4.1248|
0004e0  6d73672e          DCB      "msg.param1 = %d \n",0
0004e4  70617261
0004e8  6d31203d
0004ec  20256420
0004f0  0a00    
0004f2  00                DCB      0
0004f3  00                DCB      0
                  |L4.1268|
0004f4  706c6179          DCB      "play_mode = %d \n",0
0004f8  5f6d6f64
0004fc  65203d20
000500  2564200a
000504  00      
000505  00                DCB      0
000506  00                DCB      0
000507  00                DCB      0
                  |L4.1288|
                          DCD      SubBoardHandshakeTimer

                          AREA ||i.PllSetMode||, CODE, READONLY, ALIGN=1

                  PllSetMode PROC
;;;1722   
;;;1723   void PllSetMode(uint8_t mode)  // 0 low 25m, 1 HI 72M
000000  4770              BX       lr
;;;1724   {
;;;1725   /*
;;;1726       SYS_UnlockReg();
;;;1727   	
;;;1728   	if(mode)
;;;1729   	{
;;;1730   		CLK_SetCoreClock(FREQ_72MHZ);
;;;1731   	}
;;;1732   	else
;;;1733   	{
;;;1734   		CLK_SetCoreClock(FREQ_25MHZ);
;;;1735   	}
;;;1736   
;;;1737       SYS_LockReg();	
;;;1738   
;;;1739   	
;;;1740       printf("\n\nCPU @ %d Hz\n", SystemCoreClock);
;;;1741   */
;;;1742   
;;;1743   }
;;;1744   
                          ENDP


                          AREA ||i.PowerDownFunction||, CODE, READONLY, ALIGN=2

                  PowerDownFunction PROC
;;;355    /*---------------------------------------------------------------------------------------------------------*/
;;;356    void PowerDownFunction(void)
000000  b510              PUSH     {r4,lr}
;;;357    {
;;;358        /* Check if all the debug messages are finished */
;;;359        UART_WAIT_TX_EMPTY(UART0);
000002  4803              LDR      r0,|L6.16|
                  |L6.4|
000004  6981              LDR      r1,[r0,#0x18]
000006  00c9              LSLS     r1,r1,#3
000008  d5fc              BPL      |L6.4|
;;;360    
;;;361        /* Enter to Power-down mode */
;;;362        CLK_PowerDown();
00000a  f7fffffe          BL       CLK_PowerDown
;;;363    }
00000e  bd10              POP      {r4,pc}
;;;364    
                          ENDP

                  |L6.16|
                          DCD      0x40050000

                          AREA ||i.PowerDown_deepsleep||, CODE, READONLY, ALIGN=2

                  PowerDown_deepsleep PROC
;;;366    
;;;367    void PowerDown_deepsleep(void)
000000  b510              PUSH     {r4,lr}
;;;368    {
;;;369    	drv_Cmd_Send2NCU031(0x70, 0x15,0x00);// power off cmd to LCD board
000002  2200              MOVS     r2,#0
000004  2115              MOVS     r1,#0x15
000006  2070              MOVS     r0,#0x70
000008  f7fffffe          BL       drv_Cmd_Send2NCU031
;;;370    	
;;;371    	Cmd_Send2FourG( 0x03,0x55,0x00); // poweroff cmd to 4G
00000c  2200              MOVS     r2,#0
00000e  2155              MOVS     r1,#0x55
000010  2003              MOVS     r0,#3
000012  f7fffffe          BL       Cmd_Send2FourG
;;;372    	//Drv_4GMoudle_PowerUp(0);  // wait for 4g modle ready ,than turn off power, don't off here.
;;;373    	drv_led_init();// led all off
000016  f7fffffe          BL       drv_led_init
;;;374    	Drv_audio_powerdown();
00001a  f7fffffe          BL       Drv_audio_powerdown
;;;375    	Global_datas.shoutting_down = 1;
00001e  480d              LDR      r0,|L7.84|
000020  2101              MOVS     r1,#1
000022  7441              STRB     r1,[r0,#0x11]
;;;376    	TimeOutSet(&PoweroffLedTimer, 5000);
000024  490c              LDR      r1,|L7.88|
000026  480d              LDR      r0,|L7.92|
000028  f7fffffe          BL       TimeOutSet
;;;377    	
;;;378    	Drv_4GMoudle_PowerUp(0); // if timeout,turn off.
00002c  2000              MOVS     r0,#0
00002e  f7fffffe          BL       Drv_4GMoudle_PowerUp
;;;379    	TYM_drv_powerkeepon(0); 		
000032  2000              MOVS     r0,#0
000034  f7fffffe          BL       TYM_drv_powerkeepon
;;;380    	TYM_SysPower12V_3V3_onoff(0);
000038  2000              MOVS     r0,#0
00003a  f7fffffe          BL       TYM_SysPower12V_3V3_onoff
;;;381    
;;;382    	//Unlock protected registers before entering Power-down mode 
;;;383      SYS_UnlockReg();
00003e  f7fffffe          BL       SYS_UnlockReg
;;;384    	printf("Enter to Power-Down ......\n");
000042  a007              ADR      r0,|L7.96|
000044  f7fffffe          BL       __2printf
;;;385        /* Enter to Power-down mode */
;;;386    	
;;;387        PowerDownFunction();
000048  f7fffffe          BL       PowerDownFunction
;;;388    	
;;;389        printf("System waken-up done.\n\n");
00004c  a00b              ADR      r0,|L7.124|
00004e  f7fffffe          BL       __2printf
;;;390    
;;;391    	
;;;392    }
000052  bd10              POP      {r4,pc}
;;;393    
                          ENDP

                  |L7.84|
                          DCD      Global_datas+0x20
                  |L7.88|
                          DCD      0x00001388
                  |L7.92|
                          DCD      PoweroffLedTimer
                  |L7.96|
000060  456e7465          DCB      "Enter to Power-Down ......\n",0
000064  7220746f
000068  20506f77
00006c  65722d44
000070  6f776e20
000074  2e2e2e2e
000078  2e2e0a00
                  |L7.124|
00007c  53797374          DCB      "System waken-up done.\n\n",0
000080  656d2077
000084  616b656e
000088  2d757020
00008c  646f6e65
000090  2e0a0a00

                          AREA ||i.PowerOff||, CODE, READONLY, ALIGN=2

                  PowerOff PROC
;;;339    
;;;340    void PowerOff(void)
000000  b510              PUSH     {r4,lr}
;;;341    {
;;;342    	drv_Cmd_Send2NCU031(0x70, 0x15,0x00);// power off cmd to LCD board
000002  2200              MOVS     r2,#0
000004  2115              MOVS     r1,#0x15
000006  2070              MOVS     r0,#0x70
000008  f7fffffe          BL       drv_Cmd_Send2NCU031
;;;343    	
;;;344    	Cmd_Send2FourG( 0x03,0x55,0x00); // poweroff cmd to 4G
00000c  2200              MOVS     r2,#0
00000e  2155              MOVS     r1,#0x55
000010  2003              MOVS     r0,#3
000012  f7fffffe          BL       Cmd_Send2FourG
;;;345    	//Drv_4GMoudle_PowerUp(0);  // wait for 4g modle ready ,than turn off power, don't off here.
;;;346    	drv_led_init();// led all off
000016  f7fffffe          BL       drv_led_init
;;;347    	Drv_audio_powerdown();
00001a  f7fffffe          BL       Drv_audio_powerdown
;;;348    	Global_datas.shoutting_down = 1;
00001e  4804              LDR      r0,|L8.48|
000020  2101              MOVS     r1,#1
000022  7441              STRB     r1,[r0,#0x11]
;;;349    	TimeOutSet(&PoweroffLedTimer, 5000);
000024  4903              LDR      r1,|L8.52|
000026  4804              LDR      r0,|L8.56|
000028  f7fffffe          BL       TimeOutSet
;;;350    }
00002c  bd10              POP      {r4,pc}
;;;351    
                          ENDP

00002e  0000              DCW      0x0000
                  |L8.48|
                          DCD      Global_datas+0x20
                  |L8.52|
                          DCD      0x00001388
                  |L8.56|
                          DCD      PoweroffLedTimer

                          AREA ||i.Pte_ProcessData||, CODE, READONLY, ALIGN=2

                  Pte_ProcessData PROC
;;;1434   
;;;1435   void Pte_ProcessData(void)
000000  b5fe              PUSH     {r1-r7,lr}
;;;1436   {
;;;1437   	uint8_t vol = 0;
;;;1438   	uint8_t temp = 0;
;;;1439   	uint8_t freq_hi = 0;
;;;1440   	uint8_t freq_low = 0;
;;;1441   	uint8_t temp_cmd = 0;
;;;1442   	uint8_t temp_param0 = 0;
;;;1443   	uint32_t temp_freq = 0;
000002  2000              MOVS     r0,#0
;;;1444   
;;;1445   
;;;1446   	while(RxMsgCount_PTE)
;;;1447   	{ 
;;;1448   		
;;;1449   		RxMsgCount_PTE--;
;;;1450   		temp_cmd = RxBuff[RxMsgCount_PTE*MSG_MAX_LEN+1];
;;;1451   		temp_param0 = RxBuff[RxMsgCount_PTE*MSG_MAX_LEN+2];
;;;1452   		
;;;1453   		if(RxBuff[RxMsgCount_PTE*MSG_MAX_LEN+0] == 0x01)
;;;1454   		{
;;;1455   			switch(temp_cmd)  
;;;1456   			{
;;;1457   			   case 0x01:printf("Enter test mode\n");drv_Cmd_Send2Pte(0x01,0x00,0x00);Global_datas.PteTestMode = 1;break;
000004  4cf7              LDR      r4,|L9.996|
;;;1458   			   case 0x02:printf("Read mcu version\n");drv_Cmd_Send2Pte(0x02,sizeof(mcu_version),0);break;
;;;1459   			   case 0x03:printf("Read dsp version\n");drv_Cmd_Send2Pte(0x03,sizeof(dsp_version),0);break;
;;;1460   			   case 0x04:
;;;1461   			   	printf("internal bat\n");
;;;1462   			    if(temp_param0)
;;;1463   			    {
;;;1464   			    	battery_charge_enable();
;;;1465   			    }
;;;1466   				else
;;;1467   				{
;;;1468   					battery_charge_disable();
;;;1469   				}
;;;1470   			    drv_Cmd_Send2Pte(0x04,temp_param0,0); // return enable/disable
;;;1471   			   break;
;;;1472   
;;;1473   				case 0x05:
;;;1474   				 printf("read ntc value\n");
;;;1475   				 drv_Cmd_Send2Pte(0x05,Global_datas.PowerState.NTC_level,0); // read ntc value
000006  9000              STR      r0,[sp,#0]
000008  4620              MOV      r0,r4
00000a  3080              ADDS     r0,r0,#0x80
00000c  4607              MOV      r7,r0                 ;1457
;;;1476   				break;
;;;1477   
;;;1478   				case 0x06:
;;;1479   				 printf("read battery value\n");
;;;1480   				 drv_Cmd_Send2Pte(0x06,Global_datas.PowerState.battery_level,0); // read battery value
;;;1481   				break;	
;;;1482   				
;;;1483   				case 0x07:
;;;1484   				 printf("PTE mic mode\n");
;;;1485   
;;;1486   				 if(Global_datas.state == SYS_PLAY_STATE_MW_RADIO)
;;;1487   				 {
;;;1488   					 if(temp_param0)
;;;1489   					 {
;;;1490   						Cmd_Send2FourG(0x03,0x63,0);
;;;1491   						printf("PTE mic key long press\n");
;;;1492   					 }
;;;1493   					 else
;;;1494   					 {
;;;1495   					 	Cmd_Send2FourG(0x03,0x64,0);					 
;;;1496   					 	printf("PTE mic key long release\n");
;;;1497   					 }
;;;1498   					 
;;;1499   					 drv_Cmd_Send2Pte(0x07,temp_param0,0); // return to pte
;;;1500   				}
;;;1501   
;;;1502   				break;	
;;;1503   
;;;1504   				case 0x08:
;;;1505   				 printf("PTE enter aux mode\n");
;;;1506   				 drv_Cmd_Send2Pte(0x08,0,0); // read battery value
;;;1507   				 Global_datas.inputmessage = IN_KEY_AUX_MODE_S;
;;;1508   				break;	
;;;1509   				
;;;1510   				case 0x09:                          
;;;1511   				 printf("PTE enter mw radio mode\n");  // change to mw-radio mode
;;;1512   				 if(Global_datas.state != SYS_PLAY_STATE_MW_RADIO)
;;;1513   				 {
;;;1514   					Global_datas.inputmessage = IN_KEY_MW_RADIO_MODE_S;
;;;1515   				 }
;;;1516   				 
;;;1517   				 	drv_Cmd_Send2Pte(0x09,0,0);
;;;1518   
;;;1519   				break;	
;;;1520   
;;;1521   				case 0x0A:
;;;1522   				 printf("PTE enter BT mode\n");
;;;1523   				 Global_datas.inputmessage = IN_KEY_BT_MODE_S;
;;;1524   				 drv_Cmd_Send2Pte(0x0a,0,0);
;;;1525   				break;	
;;;1526   				
;;;1527   				case 0x0b:
;;;1528   				 printf("PTE enter FM mode\n");
;;;1529   				 Global_datas.inputmessage = IN_KEY_FM_MODE_S;
;;;1530   				 drv_Cmd_Send2Pte(0x0b,0,0);
;;;1531   				break;	
;;;1532   
;;;1533   				case 0x0c:
;;;1534   				 printf("PTE set fm freq\n"); // 1: 8750, 2:9800,3:10800
;;;1535   
;;;1536   				 if(Global_datas.state == SYS_PLAY_STATE_FM)
;;;1537   				 {
;;;1538   					if(temp_param0 == 1)
;;;1539   					{
;;;1540   						temp_freq = 8750;
;;;1541   					}
;;;1542   					else if(temp_param0 == 2)
;;;1543   					{
;;;1544   						temp_freq = 9800;
;;;1545   					}
;;;1546   					else if(temp_param0 == 3)
;;;1547   					{
;;;1548   						temp_freq = 10800;
;;;1549   					}
;;;1550   
;;;1551   					si47xxFMRX_tune(temp_freq); 
;;;1552   				 	
;;;1553   				 	drv_Cmd_Send2Pte(0x0c,temp_param0,RSSI);
;;;1554   				 }
;;;1555   				break;	
;;;1556   
;;;1557   				case 0x0d:
;;;1558   				 printf("PTE set volume\n");
;;;1559   				
;;;1560   				if(temp_param0)
;;;1561   				{
;;;1562   					Global_datas.volume = temp_param0;
;;;1563   					Drv_Dap_vol_set(Global_datas.volume);
;;;1564   					Global_datas.mute = 0;
;;;1565   					drv_5825_mute_pin_set(1);
;;;1566   				}
;;;1567   				else
;;;1568   				{
;;;1569   					Global_datas.volume = 0;
;;;1570   					Drv_Dap_vol_set(Global_datas.volume);
;;;1571   					Global_datas.mute = 1;
;;;1572   					drv_5825_mute_pin_set(0);
;;;1573   				}
;;;1574   
;;;1575   				
;;;1576   				drv_Cmd_Send2Pte(0x0d,temp_param0,0);
;;;1577   				break;	
;;;1578   
;;;1579   				case 0x0e:
;;;1580   				 printf("PTE read volume\n"); 
;;;1581   				 drv_Cmd_Send2Pte(0x0e,Global_datas.volume,0);
;;;1582   				break;	
;;;1583   
;;;1584   
;;;1585   				case 0x0f: // 1,white , 2 green,3 orange ,4 red,5 purple,6,blue, 7 red_2, 8 green_2
;;;1586   				 printf("PTE turn on led\n");
;;;1587   				 
;;;1588   				 switch(temp_param0)
;;;1589   				 {
;;;1590   					case 1:PA13 = LED_ON;break; //white -- wifi
;;;1591   					case 2:PC15 = LED_ON;break; // green -- fm
;;;1592   					case 3:PA12 = LED_ON;break; // orange --aux
;;;1593   					case 4:PA2  = LED_ON;break; // red  -- err
;;;1594   					case 5:PF6  = LED_ON;break; // purple -- 4G
;;;1595   					case 6:PA1  = LED_ON;break; // blue -- bt		
;;;1596   					case 7:drv_led_state1_onoff_red(1);break;
;;;1597   					case 8:drv_led_state1_onoff_green(1);break;
;;;1598   					default:break;
;;;1599   				 }
;;;1600   				 
;;;1601   				 drv_Cmd_Send2Pte(0x0f,temp_param0,0);
;;;1602   				break;	
;;;1603   				
;;;1604   				case 0x10: //
;;;1605   				 printf("PTE led all off\n");
;;;1606   				 
;;;1607   				 drv_all_led_on(0);
;;;1608   				 drv_led_state1_onoff_red(0);
;;;1609   				 drv_led_state1_onoff_green(0);
;;;1610   				 
;;;1611   				 drv_Cmd_Send2Pte(0x10,0,0);
;;;1612   				break;	
;;;1613   
;;;1614   				case 0x11: // read SN NUM
;;;1615   				 printf("PTE read sn\n");
;;;1616   				 drv_Cmd_Send2Pte(0x11,Global_datas.sn_len,0);
00000e  9002              STR      r0,[sp,#8]
000010  30ff              ADDS     r0,r0,#0xff
000012  3001              ADDS     r0,#1
000014  37e0              ADDS     r7,r7,#0xe0           ;1457
000016  2600              MOVS     r6,#0                 ;1457
000018  3420              ADDS     r4,r4,#0x20
00001a  9001              STR      r0,[sp,#4]            ;1436
                  |L9.28|
00001c  e1d0              B        |L9.960|
                  |L9.30|
00001e  1e40              SUBS     r0,r0,#1              ;1436
000020  b2c0              UXTB     r0,r0                 ;1449
000022  7008              STRB     r0,[r1,#0]            ;1449
000024  210c              MOVS     r1,#0xc               ;1450
000026  4bf0              LDR      r3,|L9.1000|
000028  4348              MULS     r0,r1,r0              ;1450
00002a  18c1              ADDS     r1,r0,r3              ;1450
00002c  5c18              LDRB     r0,[r3,r0]            ;1453
00002e  784a              LDRB     r2,[r1,#1]            ;1450
000030  788d              LDRB     r5,[r1,#2]            ;1451
000032  2801              CMP      r0,#1                 ;1453
000034  d1f2              BNE      |L9.28|
000036  0013              MOVS     r3,r2                 ;1455
000038  f7fffffe          BL       __ARM_common_switch8
00003c  29201621          DCB      0x29,0x20,0x16,0x21
000040  282f3d45          DCB      0x28,0x2f,0x3d,0x45
000044  4d68737f          DCB      0x4d,0x68,0x73,0x7f
000048  8790abc4          DCB      0x87,0x90,0xab,0xc4
00004c  cbefeeed          DCB      0xcb,0xef,0xee,0xed
000050  ecebeae9          DCB      0xec,0xeb,0xea,0xe9
000054  20e8e7e6          DCB      0x20,0xe8,0xe7,0xe6
000058  e5e4e3e2          DCB      0xe5,0xe4,0xe3,0xe2
00005c  e1e0dfde          DCB      0xe1,0xe0,0xdf,0xde
000060  20dddcdb          DCB      0x20,0xdd,0xdc,0xdb
000064  20da2000          DCB      0x20,0xda,0x20,0x00
000068  a0e0              ADR      r0,|L9.1004|
00006a  f7fffffe          BL       __2printf
00006e  2200              MOVS     r2,#0                 ;1457
000070  4611              MOV      r1,r2                 ;1457
000072  2001              MOVS     r0,#1                 ;1457
000074  f7fffffe          BL       drv_Cmd_Send2Pte
000078  2001              MOVS     r0,#1                 ;1457
00007a  7178              STRB     r0,[r7,#5]            ;1457
                  |L9.124|
00007c  e1a0              B        |L9.960|
00007e  a0e0              ADR      r0,|L9.1024|
000080  f7fffffe          BL       __2printf
000084  2200              MOVS     r2,#0                 ;1458
000086  2106              MOVS     r1,#6                 ;1458
000088  2002              MOVS     r0,#2                 ;1458
00008a  e197              B        |L9.956|
00008c  a0e1              ADR      r0,|L9.1044|
00008e  f7fffffe          BL       __2printf
000092  2200              MOVS     r2,#0                 ;1459
000094  2106              MOVS     r1,#6                 ;1459
000096  2003              MOVS     r0,#3                 ;1459
000098  e190              B        |L9.956|
00009a  a0e3              ADR      r0,|L9.1064|
00009c  f7fffffe          BL       __2printf
0000a0  2d00              CMP      r5,#0                 ;1462
0000a2  d002              BEQ      |L9.170|
0000a4  f7fffffe          BL       battery_charge_enable
0000a8  e001              B        |L9.174|
                  |L9.170|
0000aa  f7fffffe          BL       battery_charge_disable
                  |L9.174|
0000ae  2200              MOVS     r2,#0                 ;1470
0000b0  4629              MOV      r1,r5                 ;1470
0000b2  2004              MOVS     r0,#4                 ;1470
0000b4  e182              B        |L9.956|
0000b6  a0e0              ADR      r0,|L9.1080|
0000b8  f7fffffe          BL       __2printf
0000bc  9802              LDR      r0,[sp,#8]            ;1475
0000be  2200              MOVS     r2,#0                 ;1475
0000c0  7c81              LDRB     r1,[r0,#0x12]         ;1475  ; Global_datas
0000c2  2005              MOVS     r0,#5                 ;1475
0000c4  e17a              B        |L9.956|
0000c6  a0e0              ADR      r0,|L9.1096|
0000c8  f7fffffe          BL       __2printf
0000cc  9802              LDR      r0,[sp,#8]            ;1480
0000ce  2200              MOVS     r2,#0                 ;1480
0000d0  7c01              LDRB     r1,[r0,#0x10]         ;1480  ; Global_datas
0000d2  2006              MOVS     r0,#6                 ;1480
0000d4  e172              B        |L9.956|
0000d6  a0e1              ADR      r0,|L9.1116|
0000d8  f7fffffe          BL       __2printf
0000dc  7e60              LDRB     r0,[r4,#0x19]         ;1486  ; Global_datas
0000de  2805              CMP      r0,#5                 ;1486
0000e0  d19c              BNE      |L9.28|
0000e2  2d00              CMP      r5,#0                 ;1488
0000e4  d006              BEQ      |L9.244|
0000e6  2200              MOVS     r2,#0                 ;1490
0000e8  2163              MOVS     r1,#0x63              ;1490
0000ea  2003              MOVS     r0,#3                 ;1490
0000ec  f7fffffe          BL       Cmd_Send2FourG
0000f0  a0de              ADR      r0,|L9.1132|
0000f2  e005              B        |L9.256|
                  |L9.244|
0000f4  2200              MOVS     r2,#0                 ;1495
0000f6  2164              MOVS     r1,#0x64              ;1495
0000f8  2003              MOVS     r0,#3                 ;1495
0000fa  f7fffffe          BL       Cmd_Send2FourG
0000fe  a0e1              ADR      r0,|L9.1156|
                  |L9.256|
000100  f7fffffe          BL       __2printf
000104  2200              MOVS     r2,#0                 ;1499
000106  4629              MOV      r1,r5                 ;1499
000108  2007              MOVS     r0,#7                 ;1499
00010a  e157              B        |L9.956|
00010c  a0e4              ADR      r0,|L9.1184|
00010e  f7fffffe          BL       __2printf
000112  2200              MOVS     r2,#0                 ;1506
000114  4611              MOV      r1,r2                 ;1506
000116  2008              MOVS     r0,#8                 ;1506
000118  f7fffffe          BL       drv_Cmd_Send2Pte
00011c  2008              MOVS     r0,#8                 ;1507
00011e  75e0              STRB     r0,[r4,#0x17]         ;1507
000120  e14e              B        |L9.960|
000122  a0e4              ADR      r0,|L9.1204|
000124  f7fffffe          BL       __2printf
000128  7e60              LDRB     r0,[r4,#0x19]         ;1512  ; Global_datas
00012a  2805              CMP      r0,#5                 ;1512
00012c  d001              BEQ      |L9.306|
00012e  2009              MOVS     r0,#9                 ;1514
000130  75e0              STRB     r0,[r4,#0x17]         ;1514
                  |L9.306|
000132  2200              MOVS     r2,#0                 ;1517
000134  4611              MOV      r1,r2                 ;1517
000136  2009              MOVS     r0,#9                 ;1517
000138  e140              B        |L9.956|
00013a  a0e5              ADR      r0,|L9.1232|
00013c  f7fffffe          BL       __2printf
000140  200a              MOVS     r0,#0xa               ;1523
000142  2200              MOVS     r2,#0                 ;1524
000144  75e0              STRB     r0,[r4,#0x17]         ;1523
000146  4611              MOV      r1,r2                 ;1524
000148  e138              B        |L9.956|
00014a  a0e6              ADR      r0,|L9.1252|
00014c  f7fffffe          BL       __2printf
000150  2007              MOVS     r0,#7                 ;1529
000152  2200              MOVS     r2,#0                 ;1530
000154  75e0              STRB     r0,[r4,#0x17]         ;1529
000156  4611              MOV      r1,r2                 ;1530
000158  200b              MOVS     r0,#0xb               ;1530
00015a  e12f              B        |L9.956|
00015c  a0e6              ADR      r0,|L9.1272|
00015e  f7fffffe          BL       __2printf
000162  7e60              LDRB     r0,[r4,#0x19]         ;1536  ; Global_datas
000164  2807              CMP      r0,#7                 ;1536
000166  d189              BNE      |L9.124|
000168  2d01              CMP      r5,#1                 ;1538
00016a  d005              BEQ      |L9.376|
00016c  2d02              CMP      r5,#2                 ;1542
00016e  d005              BEQ      |L9.380|
000170  2d03              CMP      r5,#3                 ;1546
000172  d005              BEQ      |L9.384|
000174  9800              LDR      r0,[sp,#0]            ;1548
000176  e005              B        |L9.388|
                  |L9.376|
000178  48e4              LDR      r0,|L9.1292|
00017a  e002              B        |L9.386|
                  |L9.380|
00017c  48e4              LDR      r0,|L9.1296|
00017e  e000              B        |L9.386|
                  |L9.384|
000180  48e4              LDR      r0,|L9.1300|
                  |L9.386|
000182  9000              STR      r0,[sp,#0]            ;1548
                  |L9.388|
000184  f7fffffe          BL       si47xxFMRX_tune
000188  48e3              LDR      r0,|L9.1304|
00018a  4629              MOV      r1,r5                 ;1553
00018c  7802              LDRB     r2,[r0,#0]            ;1553  ; RSSI
00018e  200c              MOVS     r0,#0xc               ;1553
000190  e114              B        |L9.956|
000192  a0e2              ADR      r0,|L9.1308|
000194  f7fffffe          BL       __2printf
000198  2d00              CMP      r5,#0                 ;1560
00019a  d006              BEQ      |L9.426|
00019c  74e5              STRB     r5,[r4,#0x13]         ;1562
00019e  4628              MOV      r0,r5                 ;1563
0001a0  f7fffffe          BL       Drv_Dap_vol_set
0001a4  7566              STRB     r6,[r4,#0x15]         ;1564
0001a6  2001              MOVS     r0,#1                 ;1565
0001a8  e006              B        |L9.440|
                  |L9.426|
0001aa  4630              MOV      r0,r6                 ;1569
0001ac  74e6              STRB     r6,[r4,#0x13]         ;1569
0001ae  f7fffffe          BL       Drv_Dap_vol_set
0001b2  2001              MOVS     r0,#1                 ;1571
0001b4  7560              STRB     r0,[r4,#0x15]         ;1571
0001b6  2000              MOVS     r0,#0                 ;1572
                  |L9.440|
0001b8  f7fffffe          BL       drv_5825_mute_pin_set
0001bc  2200              MOVS     r2,#0                 ;1576
0001be  4629              MOV      r1,r5                 ;1576
0001c0  200d              MOVS     r0,#0xd               ;1576
0001c2  e0fb              B        |L9.956|
0001c4  a0d9              ADR      r0,|L9.1324|
0001c6  f7fffffe          BL       __2printf
0001ca  2200              MOVS     r2,#0                 ;1581
0001cc  7ce1              LDRB     r1,[r4,#0x13]         ;1581  ; Global_datas
0001ce  200e              MOVS     r0,#0xe               ;1581
0001d0  e0f4              B        |L9.956|
0001d2  a0db              ADR      r0,|L9.1344|
0001d4  f7fffffe          BL       __2printf
0001d8  002b              MOVS     r3,r5                 ;1588
0001da  f7fffffe          BL       __ARM_common_switch8
0001de  0936              DCB      0x09,0x36
0001e0  061f2326          DCB      0x06,0x1f,0x23,0x26
0001e4  292c2f33          DCB      0x29,0x2c,0x2f,0x33
0001e8  3600              DCB      0x36,0x00
0001ea  48da              LDR      r0,|L9.1364|
0001ec  6346              STR      r6,[r0,#0x34]         ;1590
0001ee  e02c              B        |L9.586|
0001f0  e249              B        |L9.1670|
0001f2  e0eb              B        |L9.972|
0001f4  e0db              B        |L9.942|
0001f6  e0d1              B        |L9.924|
0001f8  e0c9              B        |L9.910|
0001fa  e0c1              B        |L9.896|
0001fc  e0b7              B        |L9.878|
0001fe  e0aa              B        |L9.854|
000200  e09d              B        |L9.830|
000202  e090              B        |L9.806|
000204  e083              B        |L9.782|
000206  e07c              B        |L9.770|
000208  e075              B        |L9.758|
00020a  e06e              B        |L9.746|
00020c  e067              B        |L9.734|
00020e  e061              B        |L9.724|
000210  e05a              B        |L9.712|
000212  e050              B        |L9.694|
000214  e040              B        |L9.664|
000216  e034              B        |L9.642|
000218  e02b              B        |L9.626|
00021a  e01a              B        |L9.594|
00021c  48cd              LDR      r0,|L9.1364|
00021e  3080              ADDS     r0,r0,#0x80           ;1591
000220  63c6              STR      r6,[r0,#0x3c]         ;1591
000222  e012              B        |L9.586|
000224  48cb              LDR      r0,|L9.1364|
000226  6306              STR      r6,[r0,#0x30]         ;1592
000228  e00f              B        |L9.586|
00022a  48ca              LDR      r0,|L9.1364|
00022c  6086              STR      r6,[r0,#8]            ;1593
00022e  e00c              B        |L9.586|
000230  48c9              LDR      r0,|L9.1368|
000232  6186              STR      r6,[r0,#0x18]         ;1594
000234  e009              B        |L9.586|
000236  48c7              LDR      r0,|L9.1364|
000238  6046              STR      r6,[r0,#4]            ;1595
00023a  e006              B        |L9.586|
00023c  2001              MOVS     r0,#1                 ;1596
00023e  f7fffffe          BL       drv_led_state1_onoff_red
000242  e002              B        |L9.586|
000244  2001              MOVS     r0,#1                 ;1597
000246  f7fffffe          BL       drv_led_state1_onoff_green
                  |L9.586|
00024a  2200              MOVS     r2,#0                 ;1601
00024c  4629              MOV      r1,r5                 ;1601
00024e  200f              MOVS     r0,#0xf               ;1601
000250  e0b4              B        |L9.956|
                  |L9.594|
000252  a0c2              ADR      r0,|L9.1372|
000254  f7fffffe          BL       __2printf
000258  2000              MOVS     r0,#0                 ;1607
00025a  f7fffffe          BL       drv_all_led_on
00025e  2000              MOVS     r0,#0                 ;1608
000260  f7fffffe          BL       drv_led_state1_onoff_red
000264  2000              MOVS     r0,#0                 ;1609
000266  f7fffffe          BL       drv_led_state1_onoff_green
00026a  2200              MOVS     r2,#0                 ;1611
00026c  4611              MOV      r1,r2                 ;1611
00026e  2010              MOVS     r0,#0x10              ;1611
000270  e0a4              B        |L9.956|
                  |L9.626|
000272  a0bf              ADR      r0,|L9.1392|
000274  f7fffffe          BL       __2printf
000278  9801              LDR      r0,[sp,#4]
00027a  2200              MOVS     r2,#0
00027c  7bc1              LDRB     r1,[r0,#0xf]  ; Global_datas
00027e  2011              MOVS     r0,#0x11
;;;1617   				break;	
000280  e09c              B        |L9.956|
                  |L9.642|
;;;1618   
;;;1619   				case 0x12: // write SN NUM
;;;1620   				printf("PTE write sn\n");
000282  a0bf              ADR      r0,|L9.1408|
000284  f7fffffe          BL       __2printf
;;;1621   				drv_Cmd_Send2Pte(0x12,0,0);
000288  2200              MOVS     r2,#0
00028a  4611              MOV      r1,r2
00028c  2012              MOVS     r0,#0x12
00028e  f7fffffe          BL       drv_Cmd_Send2Pte
;;;1622   				DataStore();
000292  f7fffffe          BL       DataStore
;;;1623   				break;	
000296  e093              B        |L9.960|
                  |L9.664|
;;;1624   
;;;1625   				case 0x13:// get current net type     // 1 wifi ,2 4G 3 NONE
;;;1626   
;;;1627   				if(Global_datas.MW_radio_net_type == NET_TYPE_WIFI)
000298  7ee0              LDRB     r0,[r4,#0x1b]  ; Global_datas
00029a  2801              CMP      r0,#1
00029c  d005              BEQ      |L9.682|
;;;1628   				{
;;;1629   					drv_Cmd_Send2Pte(0x13,1,0);
;;;1630   				}
;;;1631   				else if(Global_datas.MW_radio_net_type == NET_TYPE_4G)
00029e  2802              CMP      r0,#2
0002a0  d006              BEQ      |L9.688|
;;;1632   				{
;;;1633   					drv_Cmd_Send2Pte(0x13,2,0);
;;;1634   				}
;;;1635   				else 
;;;1636   				{
;;;1637   					drv_Cmd_Send2Pte(0x13,0,0);
0002a2  2200              MOVS     r2,#0
0002a4  4611              MOV      r1,r2
                  |L9.678|
0002a6  2013              MOVS     r0,#0x13              ;1633
0002a8  e088              B        |L9.956|
                  |L9.682|
0002aa  2200              MOVS     r2,#0                 ;1629
0002ac  2101              MOVS     r1,#1                 ;1629
0002ae  e7fa              B        |L9.678|
                  |L9.688|
0002b0  2200              MOVS     r2,#0                 ;1633
0002b2  2102              MOVS     r1,#2                 ;1633
0002b4  e7f7              B        |L9.678|
                  |L9.694|
;;;1638   				}
;;;1639   				break;
;;;1640   
;;;1641   				case 0x14:// switch  net type	  // 
;;;1642   				
;;;1643   					if(Global_datas.state == SYS_PLAY_STATE_MW_RADIO)
0002b6  7e60              LDRB     r0,[r4,#0x19]  ; Global_datas
0002b8  2805              CMP      r0,#5
0002ba  d101              BNE      |L9.704|
;;;1644   					{
;;;1645   						Global_datas.inputmessage = IN_KEY_RADIO_NET_SWITCH_S;
0002bc  2018              MOVS     r0,#0x18
0002be  75e0              STRB     r0,[r4,#0x17]
                  |L9.704|
;;;1646   					}
;;;1647   					drv_Cmd_Send2Pte(0x14,0,0);
0002c0  2200              MOVS     r2,#0
0002c2  4611              MOV      r1,r2
0002c4  2014              MOVS     r0,#0x14
;;;1648   
;;;1649   					break;
0002c6  e079              B        |L9.956|
                  |L9.712|
;;;1650   
;;;1651   				
;;;1652   
;;;1653   				case 0x15: // Enter Key test mode
;;;1654   
;;;1655   				Global_datas.PteKeyTestMode = 1;
0002c8  2001              MOVS     r0,#1
;;;1656   				drv_Cmd_Send2Pte(0x15,0,0);
0002ca  2200              MOVS     r2,#0
0002cc  71b8              STRB     r0,[r7,#6]            ;1655
0002ce  4611              MOV      r1,r2
0002d0  2015              MOVS     r0,#0x15
;;;1657   				break;
0002d2  e073              B        |L9.956|
                  |L9.724|
;;;1658   
;;;1659   				case 0x16: // exit key test mode
;;;1660   
;;;1661   				
;;;1662   				Global_datas.PteKeyTestMode = 0;
;;;1663   				drv_Cmd_Send2Pte(0x16,0,0);
0002d4  2200              MOVS     r2,#0
0002d6  71be              STRB     r6,[r7,#6]            ;1662
0002d8  4611              MOV      r1,r2
0002da  2016              MOVS     r0,#0x16
;;;1664   				break;
0002dc  e06e              B        |L9.956|
                  |L9.734|
;;;1665   
;;;1666   
;;;1667   					
;;;1668   
;;;1669   				case 0x18: printf("GetBtmac\n");		Cmd_Send2FourG( 0x10,0x01,0x00); break;//Get Bt mac 
0002de  a0ac              ADR      r0,|L9.1424|
0002e0  f7fffffe          BL       __2printf
0002e4  2200              MOVS     r2,#0
0002e6  2101              MOVS     r1,#1
0002e8  e046              B        |L9.888|
                  |L9.746|
;;;1670   				case 0x19: printf("GetBtName\n");		Cmd_Send2FourG( 0x10,0x02,0x00); break;//Get Bt name 
0002ea  a0ac              ADR      r0,|L9.1436|
0002ec  f7fffffe          BL       __2printf
0002f0  2200              MOVS     r2,#0
0002f2  2102              MOVS     r1,#2
0002f4  e040              B        |L9.888|
                  |L9.758|
;;;1671   				case 0x1a: printf("Get4Gversion\n");	Cmd_Send2FourG( 0x10,0x03,0x00); break;//Get 4g version
0002f6  a0ac              ADR      r0,|L9.1448|
0002f8  f7fffffe          BL       __2printf
0002fc  2200              MOVS     r2,#0
0002fe  2103              MOVS     r1,#3
000300  e03a              B        |L9.888|
                  |L9.770|
;;;1672   				case 0x1b: printf("Get4G mac\n");		Cmd_Send2FourG( 0x10,0x04,0x00); break;//Get 4g mac
000302  a0ad              ADR      r0,|L9.1464|
000304  f7fffffe          BL       __2printf
000308  2200              MOVS     r2,#0
00030a  2104              MOVS     r1,#4
00030c  e034              B        |L9.888|
                  |L9.782|
;;;1673   				
;;;1674   				case 0x1c: printf("factroy rest\n");	Cmd_Send2FourG( 0x10,0x05,0x00); drv_Cmd_Send2Pte(0x1c,0, 0); break;//factory
00030e  a0ad              ADR      r0,|L9.1476|
000310  f7fffffe          BL       __2printf
000314  2200              MOVS     r2,#0
000316  2105              MOVS     r1,#5
000318  2010              MOVS     r0,#0x10
00031a  f7fffffe          BL       Cmd_Send2FourG
00031e  2200              MOVS     r2,#0
000320  4611              MOV      r1,r2
000322  201c              MOVS     r0,#0x1c
000324  e04a              B        |L9.956|
                  |L9.806|
;;;1675   				case 0x1d: printf("bt tone\n");			Cmd_Send2FourG( 0x10,0x06,0x00); drv_Cmd_Send2Pte(0x1d,0, 0); break;//bt tone
000326  a0ab              ADR      r0,|L9.1492|
000328  f7fffffe          BL       __2printf
00032c  2200              MOVS     r2,#0
00032e  2106              MOVS     r1,#6
000330  2010              MOVS     r0,#0x10
000332  f7fffffe          BL       Cmd_Send2FourG
000336  2200              MOVS     r2,#0
000338  4611              MOV      r1,r2
00033a  201d              MOVS     r0,#0x1d
00033c  e03e              B        |L9.956|
                  |L9.830|
;;;1676   				case 0x1e: printf("bt pairing\n");		Cmd_Send2FourG( 0x10,0x07,0x00); drv_Cmd_Send2Pte(0x1e,0, 0); break;//start pairing
00033e  a0a8              ADR      r0,|L9.1504|
000340  f7fffffe          BL       __2printf
000344  2200              MOVS     r2,#0
000346  2107              MOVS     r1,#7
000348  2010              MOVS     r0,#0x10
00034a  f7fffffe          BL       Cmd_Send2FourG
00034e  2200              MOVS     r2,#0
000350  4611              MOV      r1,r2
000352  201e              MOVS     r0,#0x1e
000354  e032              B        |L9.956|
                  |L9.854|
;;;1677   				case 0x1f: printf("bt record clear\n");	Cmd_Send2FourG( 0x10,0x08,0x00); drv_Cmd_Send2Pte(0x1f,0, 0); break;//bt record clear
000356  a0a5              ADR      r0,|L9.1516|
000358  f7fffffe          BL       __2printf
00035c  2200              MOVS     r2,#0
00035e  2108              MOVS     r1,#8
000360  2010              MOVS     r0,#0x10
000362  f7fffffe          BL       Cmd_Send2FourG
000366  2200              MOVS     r2,#0
000368  4611              MOV      r1,r2
00036a  201f              MOVS     r0,#0x1f
00036c  e026              B        |L9.956|
                  |L9.878|
;;;1678   				
;;;1679   				case 0x20: printf("get 4G mobileDbm\n");Cmd_Send2FourG( 0x10,0x09,0x00); break;//get 4G mobileDbm 
00036e  a0a4              ADR      r0,|L9.1536|
000370  f7fffffe          BL       __2printf
000374  2200              MOVS     r2,#0
000376  2109              MOVS     r1,#9
                  |L9.888|
000378  2010              MOVS     r0,#0x10
00037a  f7fffffe          BL       Cmd_Send2FourG
00037e  e01f              B        |L9.960|
                  |L9.896|
;;;1680   				case 0x21: printf("GetBuildDate\n");	drv_Cmd_Send2Pte( 0x21,sizeof(__DATE__),0); break;//build date
000380  a0a4              ADR      r0,|L9.1556|
000382  f7fffffe          BL       __2printf
000386  2200              MOVS     r2,#0
000388  210c              MOVS     r1,#0xc
00038a  2021              MOVS     r0,#0x21
00038c  e016              B        |L9.956|
                  |L9.910|
;;;1681   				case 0x22: printf("GetBuildTime\n");	drv_Cmd_Send2Pte( 0x22,sizeof(__TIME__),0); break;// build time 
00038e  a0a5              ADR      r0,|L9.1572|
000390  f7fffffe          BL       __2printf
000394  2200              MOVS     r2,#0
000396  2109              MOVS     r1,#9
000398  2022              MOVS     r0,#0x22
00039a  e00f              B        |L9.956|
                  |L9.924|
;;;1682   				
;;;1683   				case 0x24: 
;;;1684   					printf("power on/off\n");
00039c  a0a5              ADR      r0,|L9.1588|
00039e  f7fffffe          BL       __2printf
;;;1685   				    Global_datas.inputmessage = IR_KEY_POWER;
0003a2  2065              MOVS     r0,#0x65
;;;1686   				    drv_Cmd_Send2Pte( 0x24,0,0); break;
0003a4  2200              MOVS     r2,#0
0003a6  75e0              STRB     r0,[r4,#0x17]         ;1685
0003a8  4611              MOV      r1,r2
0003aa  2024              MOVS     r0,#0x24
0003ac  e006              B        |L9.956|
                  |L9.942|
;;;1687   				    break;
;;;1688   					
;;;1689   				case 0x25: 
;;;1690   					printf("exit pte test mode\n");
0003ae  a0a5              ADR      r0,|L9.1604|
0003b0  f7fffffe          BL       __2printf
;;;1691   				    Global_datas.PteTestMode = 0;
;;;1692   				    drv_Cmd_Send2Pte( 0x25,0,0); break;
0003b4  2200              MOVS     r2,#0
0003b6  717e              STRB     r6,[r7,#5]            ;1691
0003b8  4611              MOV      r1,r2
0003ba  2025              MOVS     r0,#0x25
                  |L9.956|
0003bc  f7fffffe          BL       drv_Cmd_Send2Pte
                  |L9.960|
0003c0  49a5              LDR      r1,|L9.1624|
0003c2  7808              LDRB     r0,[r1,#0]            ;1446  ; RxMsgCount_PTE
0003c4  2800              CMP      r0,#0                 ;1446
0003c6  d000              BEQ      |L9.970|
0003c8  e629              B        |L9.30|
                  |L9.970|
;;;1693   				    break;
;;;1694   
;;;1695   				case 0x26: 
;;;1696   					
;;;1697   					if(temp_param0)
;;;1698   					{
;;;1699   				    	Global_datas.LedTestMode = 1;
;;;1700   						printf("enter led test mode\n");
;;;1701   						drv_Cmd_Send2Pte( 0x26,1,0);
;;;1702   					}
;;;1703   					else
;;;1704   					{
;;;1705   				   	 	Global_datas.LedTestMode = 0;
;;;1706   						printf("exit led test mode\n");
;;;1707   						drv_Cmd_Send2Pte( 0x26,0,0);
;;;1708   					}
;;;1709   				    
;;;1710   				    break;		
;;;1711   
;;;1712   				case 0x28:
;;;1713   					
;;;1714   					drv_Cmd_Send2Pte( 0x28,Global_datas.state,Global_datas.g_4g_initing);
;;;1715   
;;;1716   				default:break;
;;;1717   			}
;;;1718   		}
;;;1719   	}
;;;1720   }
0003ca  bdfe              POP      {r1-r7,pc}
                  |L9.972|
0003cc  2d00              CMP      r5,#0                 ;1697
0003ce  d008              BEQ      |L9.994|
0003d0  9901              LDR      r1,[sp,#4]            ;1699
0003d2  2001              MOVS     r0,#1                 ;1699
0003d4  7408              STRB     r0,[r1,#0x10]         ;1699
0003d6  a0a1              ADR      r0,|L9.1628|
0003d8  f7fffffe          BL       __2printf
0003dc  2200              MOVS     r2,#0                 ;1701
0003de  2101              MOVS     r1,#1                 ;1701
0003e0  e14f              B        |L9.1666|
                  |L9.994|
0003e2  e147              B        |L9.1652|
                  |L9.996|
                          DCD      Global_datas
                  |L9.1000|
                          DCD      RxBuff
                  |L9.1004|
0003ec  456e7465          DCB      "Enter test mode\n",0
0003f0  72207465
0003f4  7374206d
0003f8  6f64650a
0003fc  00      
0003fd  00                DCB      0
0003fe  00                DCB      0
0003ff  00                DCB      0
                  |L9.1024|
000400  52656164          DCB      "Read mcu version\n",0
000404  206d6375
000408  20766572
00040c  73696f6e
000410  0a00    
000412  00                DCB      0
000413  00                DCB      0
                  |L9.1044|
000414  52656164          DCB      "Read dsp version\n",0
000418  20647370
00041c  20766572
000420  73696f6e
000424  0a00    
000426  00                DCB      0
000427  00                DCB      0
                  |L9.1064|
000428  696e7465          DCB      "internal bat\n",0
00042c  726e616c
000430  20626174
000434  0a00    
000436  00                DCB      0
000437  00                DCB      0
                  |L9.1080|
000438  72656164          DCB      "read ntc value\n",0
00043c  206e7463
000440  2076616c
000444  75650a00
                  |L9.1096|
000448  72656164          DCB      "read battery value\n",0
00044c  20626174
000450  74657279
000454  2076616c
000458  75650a00
                  |L9.1116|
00045c  50544520          DCB      "PTE mic mode\n",0
000460  6d696320
000464  6d6f6465
000468  0a00    
00046a  00                DCB      0
00046b  00                DCB      0
                  |L9.1132|
00046c  50544520          DCB      "PTE mic key long press\n",0
000470  6d696320
000474  6b657920
000478  6c6f6e67
00047c  20707265
000480  73730a00
                  |L9.1156|
000484  50544520          DCB      "PTE mic key long release\n",0
000488  6d696320
00048c  6b657920
000490  6c6f6e67
000494  2072656c
000498  65617365
00049c  0a00    
00049e  00                DCB      0
00049f  00                DCB      0
                  |L9.1184|
0004a0  50544520          DCB      "PTE enter aux mode\n",0
0004a4  656e7465
0004a8  72206175
0004ac  78206d6f
0004b0  64650a00
                  |L9.1204|
0004b4  50544520          DCB      "PTE enter mw radio mode\n",0
0004b8  656e7465
0004bc  72206d77
0004c0  20726164
0004c4  696f206d
0004c8  6f64650a
0004cc  00      
0004cd  00                DCB      0
0004ce  00                DCB      0
0004cf  00                DCB      0
                  |L9.1232|
0004d0  50544520          DCB      "PTE enter BT mode\n",0
0004d4  656e7465
0004d8  72204254
0004dc  206d6f64
0004e0  650a00  
0004e3  00                DCB      0
                  |L9.1252|
0004e4  50544520          DCB      "PTE enter FM mode\n",0
0004e8  656e7465
0004ec  7220464d
0004f0  206d6f64
0004f4  650a00  
0004f7  00                DCB      0
                  |L9.1272|
0004f8  50544520          DCB      "PTE set fm freq\n",0
0004fc  73657420
000500  666d2066
000504  7265710a
000508  00      
000509  00                DCB      0
00050a  00                DCB      0
00050b  00                DCB      0
                  |L9.1292|
                          DCD      0x0000222e
                  |L9.1296|
                          DCD      0x00002648
                  |L9.1300|
                          DCD      0x00002a30
                  |L9.1304|
                          DCD      RSSI
                  |L9.1308|
00051c  50544520          DCB      "PTE set volume\n",0
000520  73657420
000524  766f6c75
000528  6d650a00
                  |L9.1324|
00052c  50544520          DCB      "PTE read volume\n",0
000530  72656164
000534  20766f6c
000538  756d650a
00053c  00      
00053d  00                DCB      0
00053e  00                DCB      0
00053f  00                DCB      0
                  |L9.1344|
000540  50544520          DCB      "PTE turn on led\n",0
000544  7475726e
000548  206f6e20
00054c  6c65640a
000550  00      
000551  00                DCB      0
000552  00                DCB      0
000553  00                DCB      0
                  |L9.1364|
                          DCD      0x50004200
                  |L9.1368|
                          DCD      0x50004340
                  |L9.1372|
00055c  50544520          DCB      "PTE led all off\n",0
000560  6c656420
000564  616c6c20
000568  6f66660a
00056c  00      
00056d  00                DCB      0
00056e  00                DCB      0
00056f  00                DCB      0
                  |L9.1392|
000570  50544520          DCB      "PTE read sn\n",0
000574  72656164
000578  20736e0a
00057c  00      
00057d  00                DCB      0
00057e  00                DCB      0
00057f  00                DCB      0
                  |L9.1408|
000580  50544520          DCB      "PTE write sn\n",0
000584  77726974
000588  6520736e
00058c  0a00    
00058e  00                DCB      0
00058f  00                DCB      0
                  |L9.1424|
000590  47657442          DCB      "GetBtmac\n",0
000594  746d6163
000598  0a00    
00059a  00                DCB      0
00059b  00                DCB      0
                  |L9.1436|
00059c  47657442          DCB      "GetBtName\n",0
0005a0  744e616d
0005a4  650a00  
0005a7  00                DCB      0
                  |L9.1448|
0005a8  47657434          DCB      "Get4Gversion\n",0
0005ac  47766572
0005b0  73696f6e
0005b4  0a00    
0005b6  00                DCB      0
0005b7  00                DCB      0
                  |L9.1464|
0005b8  47657434          DCB      "Get4G mac\n",0
0005bc  47206d61
0005c0  630a00  
0005c3  00                DCB      0
                  |L9.1476|
0005c4  66616374          DCB      "factroy rest\n",0
0005c8  726f7920
0005cc  72657374
0005d0  0a00    
0005d2  00                DCB      0
0005d3  00                DCB      0
                  |L9.1492|
0005d4  62742074          DCB      "bt tone\n",0
0005d8  6f6e650a
0005dc  00      
0005dd  00                DCB      0
0005de  00                DCB      0
0005df  00                DCB      0
                  |L9.1504|
0005e0  62742070          DCB      "bt pairing\n",0
0005e4  61697269
0005e8  6e670a00
                  |L9.1516|
0005ec  62742072          DCB      "bt record clear\n",0
0005f0  65636f72
0005f4  6420636c
0005f8  6561720a
0005fc  00      
0005fd  00                DCB      0
0005fe  00                DCB      0
0005ff  00                DCB      0
                  |L9.1536|
000600  67657420          DCB      "get 4G mobileDbm\n",0
000604  3447206d
000608  6f62696c
00060c  6544626d
000610  0a00    
000612  00                DCB      0
000613  00                DCB      0
                  |L9.1556|
000614  47657442          DCB      "GetBuildDate\n",0
000618  75696c64
00061c  44617465
000620  0a00    
000622  00                DCB      0
000623  00                DCB      0
                  |L9.1572|
000624  47657442          DCB      "GetBuildTime\n",0
000628  75696c64
00062c  54696d65
000630  0a00    
000632  00                DCB      0
000633  00                DCB      0
                  |L9.1588|
000634  706f7765          DCB      "power on/off\n",0
000638  72206f6e
00063c  2f6f6666
000640  0a00    
000642  00                DCB      0
000643  00                DCB      0
                  |L9.1604|
000644  65786974          DCB      "exit pte test mode\n",0
000648  20707465
00064c  20746573
000650  74206d6f
000654  64650a00
                  |L9.1624|
                          DCD      RxMsgCount_PTE
                  |L9.1628|
00065c  656e7465          DCB      "enter led test mode\n",0
000660  72206c65
000664  64207465
000668  7374206d
00066c  6f64650a
000670  00      
000671  00                DCB      0
000672  00                DCB      0
000673  00                DCB      0
                  |L9.1652|
000674  9801              LDR      r0,[sp,#4]            ;1705
000676  7406              STRB     r6,[r0,#0x10]         ;1705
000678  a005              ADR      r0,|L9.1680|
00067a  f7fffffe          BL       __2printf
00067e  2200              MOVS     r2,#0                 ;1707
000680  4611              MOV      r1,r2                 ;1707
                  |L9.1666|
000682  2026              MOVS     r0,#0x26              ;1701
000684  e69a              B        |L9.956|
                  |L9.1670|
000686  7a22              LDRB     r2,[r4,#8]            ;1714  ; Global_datas
000688  7e61              LDRB     r1,[r4,#0x19]         ;1714  ; Global_datas
00068a  2028              MOVS     r0,#0x28              ;1714
00068c  e696              B        |L9.956|
;;;1721   
                          ENDP

00068e  0000              DCW      0x0000
                  |L9.1680|
000690  65786974          DCB      "exit led test mode\n",0
000694  206c6564
000698  20746573
00069c  74206d6f
0006a0  64650a00

                          AREA ||i.SYS_BusInit||, CODE, READONLY, ALIGN=1

                  SYS_BusInit PROC
;;;152    
;;;153    void SYS_BusInit(void)
000000  b510              PUSH     {r4,lr}
;;;154    {
;;;155    	// uart0 PTE, uart1 4G, uart2 debug printf, usic0 suboard.
;;;156    	PTE_Uart0_Init(); // this port use for PTE uart
000002  f7fffffe          BL       PTE_Uart0_Init
;;;157    	
;;;158    	Transfer_Uart_Init();
000006  f7fffffe          BL       Transfer_Uart_Init
;;;159    	
;;;160    	USCI_Uart_Init();
00000a  f7fffffe          BL       USCI_Uart_Init
;;;161    	
;;;162    	Hal_I2c_Init();
00000e  f7fffffe          BL       Hal_I2c_Init
;;;163    	
;;;164    }
000012  bd10              POP      {r4,pc}
;;;165    
                          ENDP


                          AREA ||i.SYS_Clock_Disable||, CODE, READONLY, ALIGN=2

                  SYS_Clock_Disable PROC
;;;166    
;;;167    void SYS_Clock_Disable(void)
000000  b510              PUSH     {r4,lr}
;;;168    {
;;;169    	/* Enable UART module clock */
;;;170    	  CLK_DisableModuleClock(UART0_MODULE);
000002  480c              LDR      r0,|L11.52|
000004  f7fffffe          BL       CLK_DisableModuleClock
;;;171    	  /* Enable UART module clock */
;;;172    	  CLK_DisableModuleClock(UART1_MODULE);
000008  480a              LDR      r0,|L11.52|
00000a  1c40              ADDS     r0,r0,#1
00000c  f7fffffe          BL       CLK_DisableModuleClock
;;;173    	  
;;;174    	  /* Enable USCI module clock */
;;;175    	  CLK_DisableModuleClock(UART2_MODULE);
000010  4808              LDR      r0,|L11.52|
000012  1c80              ADDS     r0,r0,#2
000014  f7fffffe          BL       CLK_DisableModuleClock
;;;176    	  
;;;177    	  /* Enable USCI module clock */
;;;178    	  CLK_DisableModuleClock(USCI0_MODULE);
000018  4807              LDR      r0,|L11.56|
00001a  f7fffffe          BL       CLK_DisableModuleClock
;;;179    	  
;;;180    	  /* Enable I2C0 module clock */
;;;181    	  CLK_DisableModuleClock(I2C0_MODULE);
00001e  4807              LDR      r0,|L11.60|
000020  f7fffffe          BL       CLK_DisableModuleClock
;;;182    	  
;;;183    	  /* Enable I2C1 module clock */
;;;184    	  CLK_DisableModuleClock(I2C1_MODULE);
000024  4805              LDR      r0,|L11.60|
000026  1c40              ADDS     r0,r0,#1
000028  f7fffffe          BL       CLK_DisableModuleClock
;;;185    	
;;;186    	  /* Enable ADC module clock */
;;;187    	 // CLK_EnableModuleClock(ADC_MODULE);
;;;188    	
;;;189    	  /* Enable PWM0 module clock */
;;;190    	  CLK_DisableModuleClock(PWM0_MODULE);
00002c  4804              LDR      r0,|L11.64|
00002e  f7fffffe          BL       CLK_DisableModuleClock
;;;191    
;;;192    	
;;;193    }
000032  bd10              POP      {r4,pc}
;;;194    
                          ENDP

                  |L11.52|
                          DCD      0x57803d10
                  |L11.56|
                          DCD      0x80000008
                  |L11.60|
                          DCD      0x40000008
                  |L11.64|
                          DCD      0x53c00014

                          AREA ||i.SYS_Clock_Enable||, CODE, READONLY, ALIGN=2

                  SYS_Clock_Enable PROC
;;;194    
;;;195    void SYS_Clock_Enable(void)
000000  b510              PUSH     {r4,lr}
;;;196    {
;;;197    	/* Enable UART module clock */
;;;198    	  CLK_EnableModuleClock(UART0_MODULE);
000002  480c              LDR      r0,|L12.52|
000004  f7fffffe          BL       CLK_EnableModuleClock
;;;199    	  /* Enable UART module clock */
;;;200    	  CLK_EnableModuleClock(UART1_MODULE);
000008  480a              LDR      r0,|L12.52|
00000a  1c40              ADDS     r0,r0,#1
00000c  f7fffffe          BL       CLK_EnableModuleClock
;;;201    	  
;;;202    	  /* Enable USCI module clock */
;;;203    	  CLK_EnableModuleClock(UART2_MODULE);
000010  4808              LDR      r0,|L12.52|
000012  1c80              ADDS     r0,r0,#2
000014  f7fffffe          BL       CLK_EnableModuleClock
;;;204    	  
;;;205    	  /* Enable USCI module clock */
;;;206    	  CLK_EnableModuleClock(USCI0_MODULE);
000018  4807              LDR      r0,|L12.56|
00001a  f7fffffe          BL       CLK_EnableModuleClock
;;;207    	  
;;;208    	  /* Enable I2C0 module clock */
;;;209    	  CLK_EnableModuleClock(I2C0_MODULE);
00001e  4807              LDR      r0,|L12.60|
000020  f7fffffe          BL       CLK_EnableModuleClock
;;;210    	  
;;;211    	  /* Enable I2C1 module clock */
;;;212    	  CLK_EnableModuleClock(I2C1_MODULE);
000024  4805              LDR      r0,|L12.60|
000026  1c40              ADDS     r0,r0,#1
000028  f7fffffe          BL       CLK_EnableModuleClock
;;;213    	
;;;214    	  /* Enable ADC module clock */
;;;215    	 // CLK_EnableModuleClock(ADC_MODULE);
;;;216    	
;;;217    	  /* Enable PWM0 module clock */
;;;218    	  CLK_EnableModuleClock(PWM0_MODULE);
00002c  4804              LDR      r0,|L12.64|
00002e  f7fffffe          BL       CLK_EnableModuleClock
;;;219    
;;;220    	
;;;221    }
000032  bd10              POP      {r4,pc}
;;;222    
                          ENDP

                  |L12.52|
                          DCD      0x57803d10
                  |L12.56|
                          DCD      0x80000008
                  |L12.60|
                          DCD      0x40000008
                  |L12.64|
                          DCD      0x53c00014

                          AREA ||i.SYS_Clock_init||, CODE, READONLY, ALIGN=2

                  SYS_Clock_init PROC
;;;53     
;;;54     void SYS_Clock_init(void)
000000  b5f8              PUSH     {r3-r7,lr}
;;;55     {
;;;56     
;;;57       #if 0
;;;58        // SYS->GPF_MFPL = SYS_GPF_MFPL_PF4MFP_XT1_IN | SYS_GPF_MFPL_PF3MFP_XT1_OUT | SYS_GPF_MFPL_PF1MFP_X32_IN | SYS_GPF_MFPL_PF0MFP_X32_OUT;
;;;59     	/* Enable HIRC clock (Internal RC 22.1184MHz) */
;;;60         CLK_EnableXtalRC(CLK_PWRCTL_HIRCEN_Msk);
;;;61     
;;;62         /* Wait for HIRC clock ready */
;;;63         CLK_WaitClockReady(CLK_STATUS_HIRCSTB_Msk);
;;;64     	    /* Select HCLK clock source as HIRC and HCLK clock divider as 1 */
;;;65         CLK_SetHCLK(CLK_CLKSEL0_HCLKSEL_HIRC, CLK_CLKDIV0_HCLK(1));
;;;66     
;;;67     
;;;68         /* Enable HXT clock (external XTAL 12MHz) */
;;;69         CLK_EnableXtalRC(CLK_PWRCTL_HXTEN_Msk | CLK_PWRCTL_LXTEN_Msk);
;;;70     //    CLK_EnableXtalRC(CLK_PWRCTL_HXTEN_Msk);
;;;71         /* Wait for HXT clock ready */
;;;72         CLK_WaitClockReady(CLK_STATUS_HXTSTB_Msk | CLK_STATUS_LXTSTB_Msk);
;;;73     //    CLK_WaitClockReady(CLK_STATUS_HXTSTB_Msk);
;;;74         /* Set core clock as PLL_CLOCK from PLL and SysTick source to HCLK/2*/
;;;75         CLK_SetCoreClock(PLL_CLOCK);
;;;76         CLK_SetSysTickClockSrc(CLK_CLKSEL0_STCLKSEL_HCLK_DIV2);	
;;;77     
;;;78     	#else
;;;79     
;;;80     	/* Enable HIRC clock (Internal RC 22.1184MHz) */
;;;81         CLK_EnableXtalRC(CLK_PWRCTL_HIRCEN_Msk);
000002  2004              MOVS     r0,#4
000004  f7fffffe          BL       CLK_EnableXtalRC
;;;82     
;;;83         /* Wait for HIRC clock ready */
;;;84         CLK_WaitClockReady(CLK_STATUS_HIRCSTB_Msk);	
000008  2010              MOVS     r0,#0x10
00000a  f7fffffe          BL       CLK_WaitClockReady
;;;85     
;;;86         /* Select HCLK clock source as HIRC and HCLK clock divider as 1 */
;;;87         CLK_SetHCLK(CLK_CLKSEL0_HCLKSEL_HIRC, CLK_CLKDIV0_HCLK(1));	
00000e  2100              MOVS     r1,#0
000010  2007              MOVS     r0,#7
000012  f7fffffe          BL       CLK_SetHCLK
;;;88     
;;;89     
;;;90         /* Enable HXT clock (external XTAL 12MHz) */
;;;91         CLK_EnableXtalRC(CLK_PWRCTL_HXTEN_Msk);
000016  2001              MOVS     r0,#1
000018  f7fffffe          BL       CLK_EnableXtalRC
;;;92         /* Wait for HXT clock ready */
;;;93         CLK_WaitClockReady(CLK_STATUS_HXTSTB_Msk);
00001c  2001              MOVS     r0,#1
00001e  f7fffffe          BL       CLK_WaitClockReady
;;;94         /* Set core clock as PLL_CLOCK from PLL and SysTick source to HCLK/2*/
;;;95         CLK_SetCoreClock(PLL_CLOCK);
000022  481d              LDR      r0,|L13.152|
000024  f7fffffe          BL       CLK_SetCoreClock
;;;96         
;;;97        // CLK_SetCoreClock(FREQ_25MHZ);
;;;98         CLK_SetSysTickClockSrc(CLK_CLKSEL0_STCLKSEL_HCLK_DIV2);	
000028  2018              MOVS     r0,#0x18
00002a  f7fffffe          BL       CLK_SetSysTickClockSrc
;;;99     	#endif
;;;100    
;;;101    
;;;102    
;;;103    
;;;104    
;;;105        /* Enable UART module clock */
;;;106        CLK_EnableModuleClock(UART0_MODULE);
00002e  4c1b              LDR      r4,|L13.156|
000030  4620              MOV      r0,r4
000032  f7fffffe          BL       CLK_EnableModuleClock
;;;107    	/* Enable UART module clock */
;;;108        CLK_EnableModuleClock(UART1_MODULE);
000036  1c65              ADDS     r5,r4,#1
000038  4628              MOV      r0,r5
00003a  f7fffffe          BL       CLK_EnableModuleClock
;;;109    	
;;;110        /* Enable USCI module clock */
;;;111        CLK_EnableModuleClock(UART2_MODULE);
00003e  1ca6              ADDS     r6,r4,#2
000040  4630              MOV      r0,r6
000042  f7fffffe          BL       CLK_EnableModuleClock
;;;112    	
;;;113        /* Enable USCI module clock */
;;;114        CLK_EnableModuleClock(USCI0_MODULE);
000046  4f16              LDR      r7,|L13.160|
000048  4638              MOV      r0,r7
00004a  f7fffffe          BL       CLK_EnableModuleClock
;;;115    	
;;;116    	/* Enable I2C0 module clock */
;;;117        CLK_EnableModuleClock(I2C0_MODULE);
00004e  4815              LDR      r0,|L13.164|
000050  f7fffffe          BL       CLK_EnableModuleClock
;;;118    	
;;;119    	/* Enable I2C1 module clock */
;;;120        CLK_EnableModuleClock(I2C1_MODULE);
000054  4813              LDR      r0,|L13.164|
000056  1c40              ADDS     r0,r0,#1
000058  f7fffffe          BL       CLK_EnableModuleClock
;;;121    
;;;122    	/* Enable ADC module clock */
;;;123       // CLK_EnableModuleClock(ADC_MODULE);
;;;124    
;;;125        /* Enable PWM0 module clock */
;;;126        CLK_EnableModuleClock(PWM0_MODULE);
00005c  4812              LDR      r0,|L13.168|
00005e  f7fffffe          BL       CLK_EnableModuleClock
;;;127    
;;;128    	/* Enable timer clock */
;;;129    	CLK_EnableModuleClock(TMR0_MODULE);
000062  4812              LDR      r0,|L13.172|
000064  f7fffffe          BL       CLK_EnableModuleClock
;;;130        CLK_EnableModuleClock(RTC_MODULE);
000068  4811              LDR      r0,|L13.176|
00006a  f7fffffe          BL       CLK_EnableModuleClock
;;;131    
;;;132        /* Select UART module clock source as HXT and UART module clock divider as 1 */
;;;133        CLK_SetModuleClock(UART0_MODULE, CLK_CLKSEL1_UARTSEL_HXT, CLK_CLKDIV0_UART(1));
00006e  2200              MOVS     r2,#0
000070  4611              MOV      r1,r2
000072  4620              MOV      r0,r4
000074  f7fffffe          BL       CLK_SetModuleClock
;;;134    	
;;;135    	CLK_SetModuleClock(UART1_MODULE, CLK_CLKSEL1_UARTSEL_HXT, CLK_CLKDIV0_UART(1));
000078  2200              MOVS     r2,#0
00007a  4611              MOV      r1,r2
00007c  4628              MOV      r0,r5
00007e  f7fffffe          BL       CLK_SetModuleClock
;;;136    
;;;137    	CLK_SetModuleClock(UART2_MODULE, CLK_CLKSEL1_UARTSEL_HXT, CLK_CLKDIV0_UART(1));
000082  2200              MOVS     r2,#0
000084  4611              MOV      r1,r2
000086  4630              MOV      r0,r6
000088  f7fffffe          BL       CLK_SetModuleClock
;;;138    	CLK_SetModuleClock(USCI0_MODULE, CLK_CLKSEL1_UARTSEL_HXT, CLK_CLKDIV0_UART(1));
00008c  2200              MOVS     r2,#0
00008e  4611              MOV      r1,r2
000090  4638              MOV      r0,r7
000092  f7fffffe          BL       CLK_SetModuleClock
;;;139    
;;;140        /* ADC clock source is 22.1184MHz, set divider to 7, ADC clock is 22.1184/7 MHz */
;;;141       // CLK_SetModuleClock(ADC_MODULE, CLK_CLKSEL1_ADCSEL_HIRC, CLK_CLKDIV0_ADC(7));
;;;142    
;;;143    	/* Configure the GPB6-,GPB7 ADC analog input pins */
;;;144      //  SYS->GPB_MFPL &= ~(SYS_GPB_MFPL_PB6MFP_Msk | SYS_GPB_MFPL_PB7MFP_Msk);
;;;145       // SYS->GPB_MFPL |= SYS_GPB_MFPL_PB6MFP_ADC0_CH14 | SYS_GPB_MFPL_PB7MFP_ADC0_CH15 ;
;;;146    	
;;;147        /* Select PWM01 module clock source */
;;;148       // CLK_SetModuleClock(PWM0_MODULE, CLK_CLKSEL1_PWM0SEL_PCLK0, 0);
;;;149    
;;;150    }
000096  bdf8              POP      {r3-r7,pc}
;;;151    
                          ENDP

                  |L13.152|
                          DCD      0x044aa200
                  |L13.156|
                          DCD      0x57803d10
                  |L13.160|
                          DCD      0x80000008
                  |L13.164|
                          DCD      0x40000008
                  |L13.168|
                          DCD      0x53c00014
                  |L13.172|
                          DCD      0x5e800002
                  |L13.176|
                          DCD      0x63200001

                          AREA ||i.SYS_Init||, CODE, READONLY, ALIGN=2

                  SYS_Init PROC
;;;253    /*---------------------------------------------------------------------------------------------------------*/
;;;254    void SYS_Init(void)
000000  b510              PUSH     {r4,lr}
;;;255    {
;;;256        /* Unlock protected registers */
;;;257        SYS_UnlockReg();
000002  f7fffffe          BL       SYS_UnlockReg
;;;258    	
;;;259    	SYS_Clock_init();
000006  f7fffffe          BL       SYS_Clock_init
;;;260    	TYM_gpio_init();
00000a  f7fffffe          BL       TYM_gpio_init
;;;261    	hal_adc_init();
00000e  f7fffffe          BL       hal_adc_init
000012  490b              LDR      r1,|L14.64|
000014  2000              MOVS     r0,#0
000016  6008              STR      r0,[r1,#0]
;;;262    
;;;263    	/* Lock protected registers */
;;;264        SYS_LockReg();
;;;265    
;;;266        /* Start Timer1 to measure delay period of TIMER_Delay API is reasonable or not */
;;;267       // TIMER1->CTL = TIMER_PERIODIC_MODE | (12 - 1);	
;;;268    
;;;269    	TYM_sys_PowerManger_init();
000018  f7fffffe          BL       TYM_sys_PowerManger_init
;;;270    	
;;;271    	drv_led_init();
00001c  f7fffffe          BL       drv_led_init
;;;272    
;;;273    	Drv_FourG_Gpio_Init();
000020  f7fffffe          BL       Drv_FourG_Gpio_Init
;;;274    	
;;;275    	SYS_BusInit();
000024  f7fffffe          BL       SYS_BusInit
;;;276    	
;;;277    	Hal_Timer1_Init(); // kim
000028  f7fffffe          BL       Hal_Timer1_Init
;;;278    
;;;279    	TYM_DriverInit();
00002c  f7fffffe          BL       TYM_DriverInit
;;;280    	
;;;281    	Core_Msg_Init();
000030  f7fffffe          BL       Core_Msg_Init
;;;282    
;;;283    	hal_fmc_init();
000034  f7fffffe          BL       hal_fmc_init
;;;284    
;;;285    	AMP_FaultPinDetectInit();
000038  f7fffffe          BL       AMP_FaultPinDetectInit
;;;286    
;;;287    	//srv_rtc_init();
;;;288    
;;;289    }
00003c  bd10              POP      {r4,pc}
;;;290    
                          ENDP

00003e  0000              DCW      0x0000
                  |L14.64|
                          DCD      0x50000100

                          AREA ||i.SYS_Status||, CODE, READONLY, ALIGN=2

                  SYS_Status PROC
;;;320    
;;;321    void SYS_Status(void)
000000  b570              PUSH     {r4-r6,lr}
;;;322    {
;;;323    	TYM_SysPower12V_3V3_onoff(1);
000002  2001              MOVS     r0,#1
000004  f7fffffe          BL       TYM_SysPower12V_3V3_onoff
;;;324    	Global_datas.g_mode_status = POWER_ON_MODE;	
000008  4c0d              LDR      r4,|L15.64|
00000a  2500              MOVS     r5,#0
00000c  71e5              STRB     r5,[r4,#7]
;;;325    	Global_datas.g_4g_initing = 1;
00000e  2001              MOVS     r0,#1
000010  7220              STRB     r0,[r4,#8]
;;;326    	Global_datas.eq_mode = EQ_MODE_INDOOR;
000012  74a0              STRB     r0,[r4,#0x12]
;;;327    	Global_datas.volume = VOLUME_DEFAULT;
000014  2005              MOVS     r0,#5
000016  74e0              STRB     r0,[r4,#0x13]
;;;328    	TYM_drv_powerkeepon(1);
000018  2001              MOVS     r0,#1
00001a  f7fffffe          BL       TYM_drv_powerkeepon
;;;329    	Drv_4GMoudle_PowerUp(1);
00001e  2001              MOVS     r0,#1
000020  f7fffffe          BL       Drv_4GMoudle_PowerUp
;;;330    	drv_FourGmodel_power_key_SetHi();
000024  f7fffffe          BL       drv_FourGmodel_power_key_SetHi
;;;331    	TimeOutSet(&ModulePowerUpPinTimer,3000);
000028  4906              LDR      r1,|L15.68|
00002a  4807              LDR      r0,|L15.72|
00002c  f7fffffe          BL       TimeOutSet
;;;332    	TimeOutSet(&PoweroffLedTimer, 100);
000030  2164              MOVS     r1,#0x64
000032  4806              LDR      r0,|L15.76|
000034  f7fffffe          BL       TimeOutSet
;;;333    	Drv_audio_init();
000038  f7fffffe          BL       Drv_audio_init
;;;334    	Global_datas.shoutting_down = 0;
00003c  7465              STRB     r5,[r4,#0x11]
;;;335    	
;;;336    	//drv_Cmd_Send2NCU031(0x70, 0x16,0x00);// power on cmd to LCD board
;;;337    	
;;;338    }
00003e  bd70              POP      {r4-r6,pc}
;;;339    
                          ENDP

                  |L15.64|
                          DCD      Global_datas+0x20
                  |L15.68|
                          DCD      0x00000bb8
                  |L15.72|
                          DCD      ModulePowerUpPinTimer
                  |L15.76|
                          DCD      PoweroffLedTimer

                          AREA ||i.SYS_UnlockReg||, CODE, READONLY, ALIGN=2

                  SYS_UnlockReg PROC
;;;1786     */
;;;1787   __STATIC_INLINE void SYS_UnlockReg(void)
000000  b510              PUSH     {r4,lr}
;;;1788   {
;;;1789       do
;;;1790       {
;;;1791           SYS->REGLCTL = 0x59;
000002  2159              MOVS     r1,#0x59
000004  4804              LDR      r0,|L16.24|
;;;1792           SYS->REGLCTL = 0x16;
000006  2216              MOVS     r2,#0x16
;;;1793           SYS->REGLCTL = 0x88;
000008  2388              MOVS     r3,#0x88
                  |L16.10|
00000a  6001              STR      r1,[r0,#0]            ;1791
00000c  6002              STR      r2,[r0,#0]            ;1792
00000e  6003              STR      r3,[r0,#0]
;;;1794       }
;;;1795       while(SYS->REGLCTL == 0);
000010  6804              LDR      r4,[r0,#0]
000012  2c00              CMP      r4,#0
000014  d0f9              BEQ      |L16.10|
;;;1796   }
000016  bd10              POP      {r4,pc}
;;;1797   
                          ENDP

                  |L16.24|
                          DCD      0x50000100

                          AREA ||i.SendFmFreqToSubBoard||, CODE, READONLY, ALIGN=2

                  SendFmFreqToSubBoard PROC
;;;1277   
;;;1278   void SendFmFreqToSubBoard(void)
000000  b510              PUSH     {r4,lr}
;;;1279   {
;;;1280   	uint8_t freq_hi = 0, freq_low = 0;
;;;1281   
;;;1282   	freq_hi = Global_datas.FmData.Frequency>>8;
000002  4804              LDR      r0,|L17.20|
000004  6c00              LDR      r0,[r0,#0x40]  ; Global_datas
000006  0401              LSLS     r1,r0,#16
;;;1283   	freq_low = Global_datas.FmData.Frequency & 0xff;
000008  b2c2              UXTB     r2,r0
00000a  0e09              LSRS     r1,r1,#24             ;1282
;;;1284   	
;;;1285   	drv_Cmd_Send2NCU031(0x72,freq_hi,freq_low);
00000c  2072              MOVS     r0,#0x72
00000e  f7fffffe          BL       drv_Cmd_Send2NCU031
;;;1286   }
000012  bd10              POP      {r4,pc}
;;;1287   
                          ENDP

                  |L17.20|
                          DCD      Global_datas

                          AREA ||i.SysIdle||, CODE, READONLY, ALIGN=2

                  SysIdle PROC
;;;290    
;;;291    void SysIdle(void)
000000  b570              PUSH     {r4-r6,lr}
;;;292    {
;;;293    	Global_datas.state = SYS_PLAY_STATE_IDLE;
000002  4d15              LDR      r5,|L18.88|
000004  2001              MOVS     r0,#1
000006  7668              STRB     r0,[r5,#0x19]
;;;294    	Global_datas.g_4g_initing = 0;
000008  2400              MOVS     r4,#0
00000a  722c              STRB     r4,[r5,#8]
;;;295    	Global_datas.mode_switching = 0;
00000c  752c              STRB     r4,[r5,#0x14]
;;;296    	Global_datas.power_4g = 0;
00000e  726c              STRB     r4,[r5,#9]
;;;297    	Global_datas.mute = 0;
;;;298    	Global_datas.PteKeyTestMode = 0;
000010  4812              LDR      r0,|L18.92|
000012  756c              STRB     r4,[r5,#0x15]         ;297
000014  7184              STRB     r4,[r0,#6]
;;;299    	Global_datas.PteTestMode = 0;
000016  7144              STRB     r4,[r0,#5]
;;;300    	Global_datas.LedTestMode = 0;
000018  3020              ADDS     r0,r0,#0x20
00001a  7404              STRB     r4,[r0,#0x10]
;;;301    	
;;;302    	Global_datas.bt_name_len = 0;
00001c  38c0              SUBS     r0,r0,#0xc0
00001e  7044              STRB     r4,[r0,#1]
;;;303    	Global_datas.bt_mac_len = 0;
000020  3020              ADDS     r0,r0,#0x20
000022  7284              STRB     r4,[r0,#0xa]
;;;304    	Global_datas.FourG_version_len = 0;
000024  3020              ADDS     r0,r0,#0x20
000026  74c4              STRB     r4,[r0,#0x13]
;;;305    	Global_datas.FourG_mac_len = 0;
000028  3020              ADDS     r0,r0,#0x20
00002a  7704              STRB     r4,[r0,#0x1c]
;;;306    	
;;;307    	
;;;308    	drv_FourGmodel_power_key_SetLow();  // when powerup , need to pull hi 3 second then pull down.
00002c  f7fffffe          BL       drv_FourGmodel_power_key_SetLow
;;;309    	TimeOutSet(&SysTimer_1s,1000);
000030  217d              MOVS     r1,#0x7d
000032  00c9              LSLS     r1,r1,#3
000034  480a              LDR      r0,|L18.96|
000036  f7fffffe          BL       TimeOutSet
;;;310    	Global_datas.SubBoard.subboard_online = 0;	
;;;311    
;;;312    	Global_datas.FmData.Frequency = 8750;
00003a  4629              MOV      r1,r5
00003c  772c              STRB     r4,[r5,#0x1c]         ;310
00003e  4809              LDR      r0,|L18.100|
000040  3920              SUBS     r1,r1,#0x20
;;;313    	Global_datas.FmData.station_num = 0;
000042  6408              STR      r0,[r1,#0x40]  ; Global_datas
000044  4608              MOV      r0,r1
000046  3080              ADDS     r0,r0,#0x80
000048  7104              STRB     r4,[r0,#4]
;;;314    	Global_datas.ir_bak_key = IN_KEY_NONE;
00004a  7604              STRB     r4,[r0,#0x18]
;;;315    	Global_datas.MW_radio_net_type = NET_TYPE_NONE;
00004c  76ec              STRB     r4,[r5,#0x1b]
;;;316    
;;;317    	DataRead();
00004e  f7fffffe          BL       DataRead
;;;318    	SendFmFreqToSubBoard();
000052  f7fffffe          BL       SendFmFreqToSubBoard
;;;319    }
000056  bd70              POP      {r4-r6,pc}
;;;320    
                          ENDP

                  |L18.88|
                          DCD      Global_datas+0x20
                  |L18.92|
                          DCD      Global_datas+0x160
                  |L18.96|
                          DCD      SysTimer_1s
                  |L18.100|
                          DCD      0x0000222e

                          AREA ||i.Sysctrl||, CODE, READONLY, ALIGN=2

                  Sysctrl PROC
;;;2011   
;;;2012   void Sysctrl(void)
000000  b5f0              PUSH     {r4-r7,lr}
;;;2013   {
;;;2014   	uint8_t temp_fm = 0;
;;;2015   	uint8_t temp_valid = 0;
;;;2016   	
;;;2017   	switch(Global_datas.inputmessage)
000002  4cff              LDR      r4,|L19.1024|
000004  b087              SUB      sp,sp,#0x1c           ;2013
000006  7de6              LDRB     r6,[r4,#0x17]  ; Global_datas
;;;2018   	{
;;;2019   		case IN_KEY_POWER_SP:
;;;2020   		case IR_KEY_MODE:
;;;2021   
;;;2022   			if(Global_datas.state != SYS_PLAY_STATE_IDLE)
000008  9600              STR      r6,[sp,#0]
00000a  2100              MOVS     r1,#0                 ;2014
00000c  2217              MOVS     r2,#0x17              ;2017
;;;2023   			{
;;;2024   			   Global_datas.event = SYS_PLAY_EVENT_MODE_SWITCH;
;;;2025   			}
;;;2026   			
;;;2027   			break;
;;;2028   
;;;2029   		case IN_KEY_POWER_CP:
;;;2030   		case IR_KEY_POWER:
;;;2031   					
;;;2032   			 if(Global_datas.state == SYS_PLAY_STATE_IDLE)
;;;2033   			 {
;;;2034   				Global_datas.event = SYS_PLAY_EVENT_POWERING_UP;
;;;2035   			 }
;;;2036   			 else if(Global_datas.state != SYS_PLAY_STATE_SHUTTING_DOWN)
;;;2037   			 {
;;;2038   			 	Global_datas.event = SYS_PLAY_EVENT_SHUTTING_DOWN;
;;;2039   			 }
;;;2040   			break;
;;;2041   
;;;2042   		case IR_KEY_VOLUME_DOWN:
;;;2043   		case IR_KEY_VOLUME_DOWN_CP:
;;;2044   		case IN_KEY_VOL_SUB_S:
;;;2045   	
;;;2046   			Global_datas.event = SYS_PLAY_EVENT_VOL_DOWN;
;;;2047   			break;
;;;2048   
;;;2049   		case IR_KEY_VOLUME_UP:
;;;2050   		case IR_KEY_VOLUME_UP_CP:
;;;2051   		case IN_KEY_VOL_ADD_S:
;;;2052   			
;;;2053   			Global_datas.event = SYS_PLAY_EVENT_VOL_UP;
;;;2054   			break;
;;;2055   
;;;2056   		case IN_KEY_DEFAULT_VOLUME_SET:
;;;2057   			Global_datas.event = SYS_PLAY_EVENT_DEFAULT_VOLUME_SET;
;;;2058   			break;
;;;2059   
;;;2060   		case IN_KEY_NEXT_SONG_S:
;;;2061   		case IR_KEY_NEXT_SONG:
;;;2062   
;;;2063   		if(Global_datas.state == SYS_PLAY_STATE_FM)
;;;2064   		{
;;;2065   			Global_datas.event = SYS_PLAY_EVENT_FM_NEXT_STATION;
;;;2066   		}
;;;2067   		else 
;;;2068   		{
;;;2069   			Global_datas.event = SYS_PLAY_EVENT_NEXT_SONG;
;;;2070   		}
;;;2071   
;;;2072   		
;;;2073   		break;
;;;2074   
;;;2075   		case IN_KEY_PREV_SONG_S:
;;;2076   		case IR_KEY_PREV_SONG:
;;;2077   
;;;2078   			if(Global_datas.state == SYS_PLAY_STATE_FM)
;;;2079   			{
;;;2080   				Global_datas.event = SYS_PLAY_EVENT_FM_PREV_STATION;
;;;2081   			}
;;;2082   			else 
;;;2083   			{
;;;2084   				Global_datas.event = SYS_PLAY_EVENT_PREV_SONG;
;;;2085   			}
;;;2086   
;;;2087   		break;		
;;;2088   		
;;;2089   		case IN_KEY_PLAY_S:
;;;2090   		case IR_KEY_PLAY_PAUSE:
;;;2091   
;;;2092   			Global_datas.event = SYS_PLAY_EVENT_PLAY_PAUSE;
;;;2093   
;;;2094   		break;	
;;;2095   
;;;2096   		case IN_KEY_RADIO_NEXT_S:
;;;2097   		case IR_KEY_NEXT_STATION:
;;;2098   			
;;;2099   
;;;2100   			if(Global_datas.state == SYS_PLAY_STATE_MW_RADIO)
;;;2101   			{
;;;2102   				Global_datas.event = SYS_PLAY_EVENT_MW_RADIO_NEXT_STATION;
;;;2103   			}
;;;2104   			else if(Global_datas.state == SYS_PLAY_STATE_FM)
;;;2105   			{
;;;2106   				Global_datas.event = SYS_PLAY_EVENT_FM_SEEK_UP;
;;;2107   			}
;;;2108   
;;;2109   		break;
;;;2110   
;;;2111   		case IN_KEY_RADIO_PREV_S:
;;;2112   		case IR_KEY_PREV_STATION:
;;;2113   			
;;;2114   
;;;2115   			if(Global_datas.state == SYS_PLAY_STATE_MW_RADIO)
;;;2116   			{
;;;2117   				Global_datas.event = SYS_PLAY_EVENT_MW_RADIO_PREV_STATION;
;;;2118   			}
;;;2119   			else if(Global_datas.state == SYS_PLAY_STATE_FM)
;;;2120   			{
;;;2121   				Global_datas.event = SYS_PLAY_EVENT_FM_SEEK_DOWN;
;;;2122   			}
;;;2123   
;;;2124   		break;		
;;;2125   
;;;2126   		case IN_KEY_EQ_INDOOR_S:
;;;2127   		case IR_KEY_EQ_INDOOR:
;;;2128   
;;;2129   		
;;;2130   			Global_datas.event = SYS_PLAY_EVENT_EQ_INDOOR_SET;
;;;2131   
;;;2132   			if(Global_datas.state == SYS_PLAY_STATE_FM) Global_datas.event = SYS_PLAY_EVENT_FM_PREV_STEP;
00000e  251b              MOVS     r5,#0x1b
000010  7e60              LDRB     r0,[r4,#0x19]         ;2022
000012  2701              MOVS     r7,#1                 ;2017
000014  2e18              CMP      r6,#0x18              ;2017
000016  d076              BEQ      |L19.262|
000018  dc0f              BGT      |L19.58|
00001a  0033              MOVS     r3,r6                 ;2017
00001c  f7fffffe          BL       __ARM_common_switch8
000020  188c3438          DCB      0x18,0x8c,0x34,0x38
000024  8c73758c          DCB      0x8c,0x73,0x75,0x8c
000028  797b7e80          DCB      0x79,0x7b,0x7e,0x80
00002c  4240666d          DCB      0x42,0x40,0x66,0x6d
000030  8c52464c          DCB      0x8c,0x52,0x46,0x4c
000034  cac6c05d          DCB      0xca,0xc6,0xc0,0x5d
000038  548c              DCB      0x54,0x8c
                  |L19.58|
00003a  2e6b              CMP      r6,#0x6b              ;2017
00003c  d030              BEQ      |L19.160|
00003e  dc18              BGT      |L19.114|
000040  2e66              CMP      r6,#0x66              ;2017
000042  d079              BEQ      |L19.312|
000044  dc0c              BGT      |L19.96|
000046  2e1b              CMP      r6,#0x1b              ;2017
000048  d06e              BEQ      |L19.296|
00004a  dc04              BGT      |L19.86|
00004c  2e19              CMP      r6,#0x19              ;2017
00004e  d05c              BEQ      |L19.266|
000050  2e1a              CMP      r6,#0x1a              ;2017
000052  d171              BNE      |L19.312|
000054  e066              B        |L19.292|
                  |L19.86|
000056  2e1c              CMP      r6,#0x1c              ;2017
000058  d026              BEQ      |L19.168|
00005a  2e65              CMP      r6,#0x65              ;2017
00005c  d16c              BNE      |L19.312|
00005e  e017              B        |L19.144|
                  |L19.96|
000060  2e67              CMP      r6,#0x67              ;2017
000062  d011              BEQ      |L19.136|
000064  2e68              CMP      r6,#0x68              ;2017
000066  d01d              BEQ      |L19.164|
000068  2e69              CMP      r6,#0x69              ;2017
00006a  d01b              BEQ      |L19.164|
00006c  2e6a              CMP      r6,#0x6a              ;2017
00006e  d163              BNE      |L19.312|
000070  e016              B        |L19.160|
                  |L19.114|
000072  3e6c              SUBS     r6,r6,#0x6c           ;2017
000074  0033              MOVS     r3,r6                 ;2017
000076  f7fffffe          BL       __ARM_common_switch8
00007a  0c1f              DCB      0x0c,0x1f
00007c  5f195f25          DCB      0x5f,0x19,0x5f,0x25
000080  59302739          DCB      0x59,0x30,0x27,0x39
000084  405f4a5f          DCB      0x40,0x5f,0x4a,0x5f
                  |L19.136|
000088  2801              CMP      r0,#1                 ;2022
00008a  d055              BEQ      |L19.312|
00008c  2204              MOVS     r2,#4                 ;2024
00008e  e052              B        |L19.310|
                  |L19.144|
000090  2801              CMP      r0,#1                 ;2032
000092  d003              BEQ      |L19.156|
000094  2804              CMP      r0,#4                 ;2036
000096  d04f              BEQ      |L19.312|
000098  2202              MOVS     r2,#2                 ;2038
00009a  e04c              B        |L19.310|
                  |L19.156|
00009c  76a7              STRB     r7,[r4,#0x1a]         ;2034
00009e  e04b              B        |L19.312|
                  |L19.160|
0000a0  2206              MOVS     r2,#6                 ;2046
0000a2  e048              B        |L19.310|
                  |L19.164|
0000a4  2205              MOVS     r2,#5                 ;2053
0000a6  e046              B        |L19.310|
                  |L19.168|
0000a8  2207              MOVS     r2,#7                 ;2057
0000aa  e044              B        |L19.310|
0000ac  2807              CMP      r0,#7                 ;2063
0000ae  d001              BEQ      |L19.180|
0000b0  2208              MOVS     r2,#8                 ;2069
0000b2  e040              B        |L19.310|
                  |L19.180|
0000b4  221d              MOVS     r2,#0x1d              ;2065
0000b6  e03e              B        |L19.310|
0000b8  2807              CMP      r0,#7                 ;2078
0000ba  d001              BEQ      |L19.192|
0000bc  2209              MOVS     r2,#9                 ;2084
0000be  e03a              B        |L19.310|
                  |L19.192|
0000c0  221e              MOVS     r2,#0x1e              ;2080
0000c2  e038              B        |L19.310|
0000c4  220a              MOVS     r2,#0xa               ;2092
0000c6  e036              B        |L19.310|
0000c8  2805              CMP      r0,#5                 ;2100
0000ca  d002              BEQ      |L19.210|
0000cc  2807              CMP      r0,#7                 ;2104
0000ce  d002              BEQ      |L19.214|
0000d0  e032              B        |L19.312|
                  |L19.210|
0000d2  220b              MOVS     r2,#0xb               ;2102
0000d4  e02f              B        |L19.310|
                  |L19.214|
0000d6  2219              MOVS     r2,#0x19              ;2106
0000d8  e02d              B        |L19.310|
0000da  2805              CMP      r0,#5                 ;2115
0000dc  d002              BEQ      |L19.228|
0000de  2807              CMP      r0,#7                 ;2119
0000e0  d002              BEQ      |L19.232|
0000e2  e029              B        |L19.312|
                  |L19.228|
0000e4  220c              MOVS     r2,#0xc               ;2117
0000e6  e026              B        |L19.310|
                  |L19.232|
0000e8  221a              MOVS     r2,#0x1a              ;2121
0000ea  e024              B        |L19.310|
0000ec  220d              MOVS     r2,#0xd               ;2130
0000ee  76a2              STRB     r2,[r4,#0x1a]         ;2130
0000f0  2807              CMP      r0,#7
0000f2  d121              BNE      |L19.312|
0000f4  76a5              STRB     r5,[r4,#0x1a]
0000f6  e01f              B        |L19.312|
0000f8  e005              B        |L19.262|
;;;2133   		    
;;;2134   			break;		
;;;2135   		
;;;2136   		case IN_KEY_EQ_OUTDOOR_S:
;;;2137   		case IR_KEY_EQ_OUTDOOR:
;;;2138   
;;;2139   		
;;;2140   			Global_datas.event = SYS_PLAY_EVENT_EQ_OUTDOOR_SET;
0000fa  220e              MOVS     r2,#0xe
0000fc  76a2              STRB     r2,[r4,#0x1a]
;;;2141   		
;;;2142   			if(Global_datas.state == SYS_PLAY_STATE_FM) Global_datas.event = SYS_PLAY_EVENT_FM_NEXT_STEP;
0000fe  2807              CMP      r0,#7
000100  d11a              BNE      |L19.312|
000102  221c              MOVS     r2,#0x1c
000104  e017              B        |L19.310|
                  |L19.262|
;;;2143   			
;;;2144   			break;	
;;;2145   
;;;2146   			
;;;2147   
;;;2148   		case IN_KEY_PAIR_SP:
;;;2149   		case IN_KEY_RADIO_NET_SWITCH_S:
;;;2150   
;;;2151   		
;;;2152   			Global_datas.event = SYS_PLAY_EVENT_RADIO_NET_SWITCH;
000106  220f              MOVS     r2,#0xf
;;;2153   			
;;;2154   			break;		
000108  e015              B        |L19.310|
                  |L19.266|
;;;2155   
;;;2156   
;;;2157   		case IN_KEY_PAIR_CP:
;;;2158   		case IN_KEY_RADIO_NET_PARIING_S:
;;;2159   
;;;2160   			Global_datas.event = SYS_PLAY_EVENT_RADIO_NET_PAIRING;
00010a  2210              MOVS     r2,#0x10
;;;2161   			break;
00010c  e013              B        |L19.310|
;;;2162   
;;;2163   
;;;2164   		case IR_KEY_POWER_CP:
;;;2165   			break;
;;;2166   
;;;2167   		case IN_KEY_INIT_FINISH_CMD:
;;;2168   
;;;2169   			Global_datas.event = SYS_PLAY_EVENT_INIT_FINISH;
00010e  2203              MOVS     r2,#3
;;;2170   
;;;2171   			break;
000110  e011              B        |L19.310|
;;;2172   
;;;2173   		case IN_KEY_FM_MODE_S: 
;;;2174   			
;;;2175   			Global_datas.event = SYS_PLAY_EVENT_SW_TO_FM_MODE;
000112  2211              MOVS     r2,#0x11
;;;2176   			break;
000114  e000              B        |L19.280|
;;;2177   		case IN_KEY_AUX_MODE_S: 
;;;2178   			
;;;2179   			Global_datas.event = SYS_PLAY_EVENT_SW_TO_AUX_MODE;
000116  2212              MOVS     r2,#0x12
                  |L19.280|
000118  76a2              STRB     r2,[r4,#0x1a]         ;2175
00011a  e010              B        |L19.318|
;;;2180   			break;		
;;;2181   		
;;;2182   		case IN_KEY_MW_RADIO_MODE_S: 
;;;2183   			
;;;2184   			Global_datas.event = SYS_PLAY_EVENT_SW_TO_MW_RADIO_MODE;
00011c  2214              MOVS     r2,#0x14
;;;2185   			break;
00011e  e7fb              B        |L19.280|
;;;2186   
;;;2187   		case IN_KEY_BT_MODE_S: 
;;;2188   			
;;;2189   			Global_datas.event = SYS_PLAY_EVENT_SW_TO_BT_MODE;
000120  2213              MOVS     r2,#0x13
;;;2190   			break;		
000122  e7f9              B        |L19.280|
                  |L19.292|
;;;2191   
;;;2192   		case IN_KEY_TURNOFF_4G_MOUDLE:
;;;2193   			Global_datas.event = SYS_PLAY_EVENT_TURN_OFF_4G_MOUDLE;
000124  2215              MOVS     r2,#0x15
;;;2194   			break;
000126  e006              B        |L19.310|
                  |L19.296|
;;;2195   		case IN_KEY_REBOOT_4G_MOUDLE:
;;;2196   
;;;2197   			Global_datas.event = SYS_PLAY_EVENT_REBOOT_4G_MOUDLE;
000128  2216              MOVS     r2,#0x16
;;;2198   			
;;;2199   			break;
00012a  e004              B        |L19.310|
;;;2200   
;;;2201   		case IR_KEY_PLAY_PAUSE_CP:
;;;2202   
;;;2203   			if(Global_datas.state == SYS_PLAY_STATE_FM)
00012c  2807              CMP      r0,#7
00012e  d002              BEQ      |L19.310|
;;;2204   			{
;;;2205   				Global_datas.event = SYS_PLAY_EVENT_AUTO_SEARCH;
;;;2206   			}
;;;2207   			else if(Global_datas.state == SYS_PLAY_STATE_BT)
000130  2806              CMP      r0,#6
000132  d033              BEQ      |L19.412|
000134  e000              B        |L19.312|
                  |L19.310|
000136  76a2              STRB     r2,[r4,#0x1a]         ;2205
                  |L19.312|
;;;2208   			{
;;;2209   				Global_datas.event = SYS_PLAY_EVENT_BT_PAIRING;			
;;;2210   			}
;;;2211   			break;
;;;2212   			
;;;2213   
;;;2214   		case IN_KEY_AUTO_SEARCH_S:
;;;2215   
;;;2216   			if(Global_datas.state == SYS_PLAY_STATE_FM)
;;;2217   			{
;;;2218   				Global_datas.event = SYS_PLAY_EVENT_AUTO_SEARCH;
;;;2219   			}
;;;2220   			else if(Global_datas.state == SYS_PLAY_STATE_BT)
;;;2221   			{
;;;2222   				Global_datas.event = SYS_PLAY_EVENT_BT_PAIRING;
;;;2223   			}
;;;2224   			
;;;2225   			break;
;;;2226   
;;;2227   			
;;;2228   
;;;2229   		case IN_KEY_FM_PREV_FREQ_S:
;;;2230   
;;;2231   		    if(Global_datas.state == SYS_PLAY_STATE_FM)	Global_datas.event = SYS_PLAY_EVENT_FM_PREV_STEP; 		
;;;2232   			
;;;2233   			break;
;;;2234   
;;;2235   		case IN_KEY_FM_NEXT_FREQ_S:
;;;2236   
;;;2237   			if(Global_datas.state == SYS_PLAY_STATE_FM) Global_datas.event = SYS_PLAY_EVENT_FM_NEXT_STEP; 		
;;;2238   		
;;;2239   			break;
;;;2240   			
;;;2241   		default:break;
;;;2242   			
;;;2243   	}
;;;2244   
;;;2245   	if(Global_datas.inputmessage)
000138  9a00              LDR      r2,[sp,#0]
00013a  2a00              CMP      r2,#0
00013c  d002              BEQ      |L19.324|
                  |L19.318|
;;;2246   	{
;;;2247   		Global_datas.inputmessage = 0;
00013e  2200              MOVS     r2,#0
000140  75e2              STRB     r2,[r4,#0x17]
;;;2248   		Global_datas.key_led_blink = 1;
000142  7427              STRB     r7,[r4,#0x10]
                  |L19.324|
000144  4bae              LDR      r3,|L19.1024|
000146  4dae              LDR      r5,|L19.1024|
000148  469c              MOV      r12,r3                ;2017
00014a  3560              ADDS     r5,r5,#0x60           ;2017
;;;2249   	}
;;;2250   
;;;2251   
;;;2252   	switch(Global_datas.event)
00014c  7ea2              LDRB     r2,[r4,#0x1a]  ; Global_datas
00014e  7c9b              LDRB     r3,[r3,#0x12]         ;2017
;;;2253   	{
;;;2254   	
;;;2255   		case SYS_PLAY_EVENT_POWERING_UP:
;;;2256   
;;;2257   
;;;2258   	//	SYS_UnlockReg();
;;;2259   
;;;2260   		
;;;2261   		/* Set core clock as PLL_CLOCK from PLL and SysTick source to HCLK/2*/
;;;2262       //	CLK_SetCoreClock(PLL_CLOCK);
;;;2263       //	CLK_SetSysTickClockSrc(CLK_CLKSEL0_STCLKSEL_HCLK_DIV2);	
;;;2264   
;;;2265   	//	SYS_LockReg();
;;;2266   
;;;2267   
;;;2268   
;;;2269   
;;;2270   		
;;;2271   		   // SYS_Clock_Enable();
;;;2272   		   
;;;2273   			PllSetMode(1); // hi 72Mhz
;;;2274   			WaitMs(500);
;;;2275   			TYM_SysPower12V_3V3_onoff(1);
;;;2276   			WaitMs(500);
;;;2277   			Global_datas.state = SYS_PLAY_STATE_POWERUP;	
;;;2278   			Global_datas.g_4g_initing = 1;
;;;2279   			Global_datas.eq_mode = EQ_MODE_INDOOR;
;;;2280   			Global_datas.volume = VOLUME_DEFAULT;
;;;2281   			TYM_drv_powerkeepon(1);
;;;2282   			Drv_4GMoudle_PowerUp(1);
;;;2283   			
;;;2284   			AdapterPowerModeCtrl(1);
;;;2285   			
;;;2286   			Global_datas.power_4g = 1;
;;;2287   			drv_FourGmodel_power_key_SetHi();
;;;2288   			TimeOutSet(&ModulePowerUpPinTimer,3000);
;;;2289   			TimeOutSet(&PoweroffLedTimer, 100);
;;;2290   			Drv_audio_init();
;;;2291   			Global_datas.shoutting_down = 0;	
;;;2292   
;;;2293   			drv_Cmd_Send2NCU031(0x70, 0x16,0x00);// power on cmd to LCD board
;;;2294   
;;;2295   			Fm_Rest();
;;;2296   
;;;2297               
;;;2298   		/*	WaitMs(500);
;;;2299   			Global_datas.FmData.Frequency = 9710;	
;;;2300   			drv_audio_FM_Channel();
;;;2301   			test_FMRXtune();
;;;2302   			Global_datas.g_4g_initing = 0;
;;;2303   			Global_datas.state = SYS_PLAY_STATE_FM;	*/
;;;2304   				
;;;2305   			
;;;2306   			break;
;;;2307   			
;;;2308   		case SYS_PLAY_EVENT_REBOOT_4G_MOUDLE:
;;;2309   
;;;2310   			TYM_SysPower12V_3V3_onoff(1);
;;;2311   			Global_datas.state = SYS_PLAY_STATE_REBOOT;	
;;;2312   			Global_datas.g_4g_initing = 1;
;;;2313   			
;;;2314   			Drv_4GMoudle_PowerUp(1);
;;;2315   			Global_datas.power_4g = 1;
;;;2316   			drv_FourGmodel_power_key_SetHi();
;;;2317   			TimeOutSet(&ModulePowerUpPinTimer,3000);
;;;2318   			TimeOutSet(&PoweroffLedTimer, 100);
;;;2319   			Global_datas.shoutting_down = 0;	
;;;2320   			drv_audio_4G_Channel();
;;;2321   			break;
;;;2322   
;;;2323   			
;;;2324   
;;;2325   		case SYS_PLAY_EVENT_SHUTTING_DOWN:
;;;2326   
;;;2327   			//PowerOff();
;;;2328   			//SysIdle();	
;;;2329   
;;;2330   			drv_Cmd_Send2NCU031(0x70, 0x15,0x00);// power off cmd to LCD board
;;;2331   			Cmd_Send2FourG( 0x03,0x55,0x00); // poweroff cmd to 4G
;;;2332   			//Drv_4GMoudle_PowerUp(0);  // wait for 4g modle ready ,than turn off power, don't off here.
;;;2333   			drv_led_init();// led all off
;;;2334   			Drv_audio_powerdown();
;;;2335   			Global_datas.shoutting_down = 1;
;;;2336   			TimeOutSet(&PoweroffLedTimer, 5000);
;;;2337   
;;;2338   			Global_datas.state = SYS_PLAY_STATE_SHUTTING_DOWN;
;;;2339   			Global_datas.g_4g_initing = 0;
;;;2340   			Global_datas.mode_switching = 0;
;;;2341   			Global_datas.mute = 0;
;;;2342   			drv_FourGmodel_power_key_SetLow();  // when powerup , need to pull hi 3 second then pull down.
;;;2343   			Global_datas.SubBoard.subboard_online = 0;				
;;;2344   			
;;;2345   			break;			
;;;2346   
;;;2347   		case SYS_PLAY_EVENT_INIT_FINISH:
;;;2348   			
;;;2349   			Global_datas.g_4g_initing = 0;
;;;2350   			// send start cmd to sub board
;;;2351   			if(Global_datas.SubBoard.subboard_online && (Global_datas.state != SYS_PLAY_STATE_REBOOT))
;;;2352   			{
;;;2353   				drv_Cmd_Send2NCU031(0x03,0x71,19); // system init finish state send to sub board.
;;;2354   				drv_Cmd_Send2NCU031(0x07, Global_datas.volume,0x00);// send volume
;;;2355   				
;;;2356   				switch(Global_datas.SubBoard.playmode)
;;;2357   				{
;;;2358   					case PLAY_MODE_WIFI:
;;;2359   						Cmd_Send2FourG(0x03,0x15,0);
;;;2360   						drv_Cmd_Send2NCU031(0x70, 0x11,0x00);
;;;2361   					
;;;2362   						Global_datas.state = SYS_PLAY_STATE_MW_RADIO;
;;;2363   					    drv_audio_4G_Channel();
;;;2364   						break;
;;;2365   
;;;2366   					case PLAY_MODE_BT:
;;;2367   						Cmd_Send2FourG(0x03,0x16,0);
;;;2368   						drv_Cmd_Send2NCU031(0x70, 0x10,0x00);
;;;2369   						Global_datas.state = SYS_PLAY_STATE_BT;
;;;2370   					    drv_audio_4G_Channel();
;;;2371   						break;
;;;2372   
;;;2373   					case PLAY_MODE_AUX:
;;;2374   						Cmd_Send2FourG(0x03,0x17,0);
;;;2375   						drv_Cmd_Send2NCU031(0x70, 0x12,0x00);
;;;2376   						Global_datas.state = SYS_PLAY_STATE_AUX;
;;;2377   					    drv_audio_AuxIn_Channel();
;;;2378   						break;
;;;2379   
;;;2380   					case PLAY_MODE_FM:
;;;2381   						Global_datas.state = SYS_PLAY_STATE_FM;
;;;2382   						Global_datas.fm_delay_time = FM_DELAY_TIME;
;;;2383   						Global_datas.FmData.fmstate = FM_STATE_ON;
;;;2384   									
;;;2385   						drv_Cmd_Send2NCU031(0x70, 0x13,0x00);// change to fm mode	
;;;2386   						Cmd_Send2FourG(0x03 ,0x18,0x00);
;;;2387   						//si47xxFMRX_powerup();
;;;2388   						//si47xxFMRX_tune(Global_datas.FmData.Frequency);
;;;2389   						test_FMRXtune();
;;;2390   						drv_audio_FM_Channel(); 
;;;2391   						SendFmFreqToSubBoard();
;;;2392   
;;;2393   						break;
;;;2394   
;;;2395   					default:
;;;2396   						Cmd_Send2FourG(0x03,0x15,0);
;;;2397   						Global_datas.state = SYS_PLAY_STATE_MW_RADIO;	
;;;2398   						drv_audio_4G_Channel();
;;;2399   						break;
;;;2400   				}
;;;2401   
;;;2402   				Drv_Dap_vol_set(Global_datas.volume);
;;;2403   			}
;;;2404   			else
;;;2405   			{
;;;2406   				if((Global_datas.PteTestMode) && ((Global_datas.state == SYS_PLAY_STATE_AUX) || (Global_datas.state == SYS_PLAY_STATE_FM)))
;;;2407   				{
;;;2408   					  // DO NOT CHANGE MODE
;;;2409   				}
;;;2410   				else
;;;2411   				{
;;;2412   					Cmd_Send2FourG(0x03,0x15,0);
;;;2413   					Global_datas.state = SYS_PLAY_STATE_MW_RADIO;
;;;2414   					drv_audio_4G_Channel();
;;;2415   					Drv_Dap_vol_set(Global_datas.volume);
;;;2416   				}
;;;2417   
;;;2418   			}
;;;2419   
;;;2420   			//drv_Cmd_Send2NCU031(0x08,0,0); send start CMD to sub board
;;;2421   			
;;;2422   			break;
;;;2423   
;;;2424   		case SYS_PLAY_EVENT_MODE_SWITCH:
;;;2425   			srv_key_mode_handler();
;;;2426   			Drv_Dap_vol_set(Global_datas.volume);
;;;2427   			break;
;;;2428   
;;;2429   		case SYS_PLAY_EVENT_SW_TO_AUX_MODE:
;;;2430   			
;;;2431   			srv_key_mode_switch_to(SYS_PLAY_STATE_AUX);	
;;;2432   			Drv_Dap_vol_set(Global_datas.volume);
;;;2433   				
;;;2434   			break;
;;;2435   
;;;2436   		case SYS_PLAY_EVENT_SW_TO_FM_MODE:
;;;2437   			
;;;2438   			srv_key_mode_switch_to(SYS_PLAY_STATE_FM);	
;;;2439   			Drv_Dap_vol_set(Global_datas.volume);
;;;2440   			
;;;2441   			break;
;;;2442   			
;;;2443   		case SYS_PLAY_EVENT_SW_TO_BT_MODE:
;;;2444   			
;;;2445   			srv_key_mode_switch_to(SYS_PLAY_STATE_BT);	
;;;2446   			Drv_Dap_vol_set(Global_datas.volume);
;;;2447   			
;;;2448   			break;	
;;;2449   			
;;;2450   		case SYS_PLAY_EVENT_SW_TO_MW_RADIO_MODE:
;;;2451   			
;;;2452   			srv_key_mode_switch_to(SYS_PLAY_STATE_MW_RADIO);
;;;2453   			Drv_Dap_vol_set(Global_datas.volume);
;;;2454   		
;;;2455   			break;		
;;;2456   
;;;2457   
;;;2458   		case SYS_PLAY_EVENT_DEFAULT_VOLUME_SET:
;;;2459   			
;;;2460   				Global_datas.volume = 8;
;;;2461   				Drv_Dap_vol_set(Global_datas.volume);
;;;2462   				Cmd_Send2FourG(0x03,0x04,Global_datas.volume); // send volume  to 4G moudle
;;;2463   				drv_Cmd_Send2NCU031(0x07, Global_datas.volume,0x00);// send volume
;;;2464   
;;;2465   			break;
;;;2466   
;;;2467   			
;;;2468   
;;;2469   		case SYS_PLAY_EVENT_VOL_UP:
;;;2470   			
;;;2471   			Global_datas.mute = 0;
;;;2472   			if (Global_datas.volume < VOLUME_MAX)
;;;2473   			{
;;;2474   				Global_datas.volume++;
;;;2475   				Drv_Dap_vol_set(Global_datas.volume);
;;;2476   				Cmd_Send2FourG(0x03,0x04,Global_datas.volume); // send volume  to 4G moudle
;;;2477   
;;;2478   				drv_Cmd_Send2NCU031(0x07, Global_datas.volume,0x00);// send volume
;;;2479   			}
;;;2480   
;;;2481   			break;
;;;2482   
;;;2483   		case SYS_PLAY_EVENT_VOL_DOWN:
;;;2484   			
;;;2485   			if (Global_datas.volume > VOLUME_MIN)
;;;2486   			{
;;;2487   				Global_datas.volume--;
;;;2488   				Drv_Dap_vol_set(Global_datas.volume);
;;;2489   				if(Global_datas.volume == 0)
;;;2490   				{
;;;2491   					Global_datas.mute = 1;
;;;2492   					drv_5825_mute_pin_set(0); 
;;;2493   				}
;;;2494   				Cmd_Send2FourG(0x03,0x04,Global_datas.volume); // send volume  to 4G moudle
;;;2495   				drv_Cmd_Send2NCU031(0x07, Global_datas.volume,0x00);// send volume
;;;2496   			}
;;;2497   			break;
;;;2498   
;;;2499   		case SYS_PLAY_EVENT_NEXT_SONG:
;;;2500   
;;;2501   			Cmd_Send2FourG(0x03,0x0d,0); // 
;;;2502   			
;;;2503   			break;			
;;;2504   			
;;;2505   		case SYS_PLAY_EVENT_PREV_SONG:
;;;2506   			
;;;2507   			Cmd_Send2FourG(0x03,0x0e,0); // 
;;;2508   			
;;;2509   			break;
;;;2510   		
;;;2511   		case SYS_PLAY_EVENT_PLAY_PAUSE:
;;;2512   			
;;;2513   			Cmd_Send2FourG(0x03,0x56,0); // 
;;;2514   			
;;;2515   			break;	
;;;2516   
;;;2517   		case SYS_PLAY_EVENT_MW_RADIO_NEXT_STATION:
;;;2518   			
;;;2519   			Cmd_Send2FourG(0x03,0x31,0); // 
;;;2520   			
;;;2521   			break;	
;;;2522   		
;;;2523   		case SYS_PLAY_EVENT_MW_RADIO_PREV_STATION:
;;;2524   			
;;;2525   			Cmd_Send2FourG(0x03,0x32,0); // 
;;;2526   			
;;;2527   			break;
;;;2528   
;;;2529   		case SYS_PLAY_EVENT_EQ_OUTDOOR_SET:
;;;2530   			
;;;2531   			if(Global_datas.eq_mode != EQ_MODE_OUTDOOR)
;;;2532   			{
;;;2533   				Global_datas.eq_mode = EQ_MODE_OUTDOOR;
;;;2534   				srv_key_eq_outdoor_switch_handler();
;;;2535   				Drv_audio_channel_switch();
;;;2536   			}
;;;2537   			
;;;2538   			break;	
;;;2539   			
;;;2540   		case SYS_PLAY_EVENT_EQ_INDOOR_SET:
;;;2541   			
;;;2542   			if(Global_datas.eq_mode != EQ_MODE_INDOOR)
;;;2543   			{
;;;2544   				Global_datas.eq_mode = EQ_MODE_INDOOR;
;;;2545   				srv_key_eq_outdoor_switch_handler();
;;;2546   				Drv_audio_channel_switch();
;;;2547   			}
;;;2548   			
;;;2549   			break;
;;;2550   
;;;2551   		case SYS_PLAY_EVENT_RADIO_NET_SWITCH:
;;;2552   			
;;;2553   
;;;2554   			Cmd_Send2FourG(0x03,0x50,0); 
;;;2555   			
;;;2556   			break;			
;;;2557   
;;;2558   		case SYS_PLAY_EVENT_RADIO_NET_PAIRING:
;;;2559   			
;;;2560   
;;;2561   			Cmd_Send2FourG(0x03,0x21,0); 
;;;2562   			
;;;2563   			break;	
;;;2564   
;;;2565   		case SYS_PLAY_EVENT_TURN_OFF_4G_MOUDLE:
;;;2566   
;;;2567   			Global_datas.power_4g = 0;
;;;2568   
;;;2569   		    printf("\nTURN OFF 4G MOUDLE\n");
;;;2570   
;;;2571   			AdapterPowerModeCtrl(0);
;;;2572   
;;;2573   			if(Global_datas.state == SYS_PLAY_STATE_SHUTTING_DOWN)
;;;2574   			{
;;;2575   				Drv_4GMoudle_PowerUp(0);  // wait for 4g modle ready ,than turn off power
;;;2576   				TYM_drv_powerkeepon(0); 
;;;2577   				TYM_SysPower12V_3V3_onoff(0);		
;;;2578   				Global_datas.state = SYS_PLAY_STATE_IDLE;
;;;2579   				drv_all_led_on(0);
;;;2580   
;;;2581   			/* Unlock protected registers */
;;;2582   			//   SYS_UnlockReg();
;;;2583   			/* Disable PLL first to avoid unstable when setting PLL */
;;;2584       		//	CLK_DisablePLL();
;;;2585   			//    SYS_LockReg();
;;;2586   
;;;2587   			
;;;2588   			PllSetMode(0); // 25Mhz
;;;2589   
;;;2590   
;;;2591   				
;;;2592   			}
;;;2593   			else if(Global_datas.state == SYS_PLAY_STATE_FM)
;;;2594   			{
;;;2595   				Drv_4GMoudle_PowerUp(0);  // wait for 4g modle ready ,than turn off power
;;;2596   			}
;;;2597   		
;;;2598   			break;
;;;2599   
;;;2600   		case SYS_PLAY_EVENT_AUTO_SEARCH:
;;;2601   
;;;2602   			if(Global_datas.FmData.fmstate == FM_STATE_ON)
;;;2603   			{
;;;2604   				Global_datas.FmData.fmstate = FM_STATE_AUTO_SEARCH;
;;;2605   				Global_datas.FmData.index_station = 0;
;;;2606   				
;;;2607   				for(temp_fm=0;temp_fm<FM_MAX_STATION_NUM;temp_fm++)
;;;2608   				{
;;;2609   					Global_datas.FmData.station_table[temp_fm] = 0;
;;;2610   				}
;;;2611   				Global_datas.FmData.Frequency = 8750;			
;;;2612   			}
;;;2613   			else if(Global_datas.FmData.fmstate == FM_STATE_AUTO_SEARCH)
;;;2614   			{
;;;2615   				Global_datas.FmData.fmstate = FM_STATE_ON;
;;;2616   			}
;;;2617   				
;;;2618   			break;
;;;2619   
;;;2620   		case SYS_PLAY_EVENT_FM_SEEK_DOWN:
;;;2621   
;;;2622   			if(Global_datas.FmData.fmstate == FM_STATE_ON)
;;;2623   			{
;;;2624   				Global_datas.FmData.fmstate = FM_STATE_SEEK_DOWN;
;;;2625   			}
;;;2626   			else if(Global_datas.FmData.fmstate == FM_STATE_SEEK_DOWN)
;;;2627   			{
;;;2628   				Global_datas.FmData.fmstate = FM_STATE_ON;
;;;2629   				Global_datas.FmData.FmNeedToStore = 1;
;;;2630   			}
;;;2631   			break;
;;;2632   
;;;2633   		
;;;2634   		case SYS_PLAY_EVENT_FM_SEEK_UP:
;;;2635   			
;;;2636   			if(Global_datas.FmData.fmstate == FM_STATE_ON)
;;;2637   			{
;;;2638   				Global_datas.FmData.fmstate = FM_STATE_SEEK_UP;
;;;2639   			}
;;;2640   			else if(Global_datas.FmData.fmstate == FM_STATE_SEEK_UP)
;;;2641   			{
;;;2642   				Global_datas.FmData.fmstate = FM_STATE_ON;
;;;2643   				Global_datas.FmData.FmNeedToStore = 1;
;;;2644   			}
;;;2645   			
;;;2646   			break;
;;;2647   
;;;2648   		case SYS_PLAY_EVENT_FM_NEXT_STEP:
;;;2649   			
;;;2650   			if(Global_datas.state == SYS_PLAY_STATE_FM)
;;;2651   			{
;;;2652   				if(Global_datas.FmData.Frequency <= 10790)	Global_datas.FmData.Frequency += 10;
;;;2653   				else Global_datas.FmData.Frequency = 8750;
;;;2654   				Global_datas.FmData.FmNeedToStore = 1;
;;;2655   				TimeOutSet(&FmStoreTimer, 2000);
;;;2656   				temp_valid = si47xxFMRX_tune(Global_datas.FmData.Frequency);
;;;2657   				SendFmFreqToSubBoard();
;;;2658   				printf("FM UP\n");
;;;2659   
;;;2660   			}
;;;2661   
;;;2662   			break;
;;;2663   
;;;2664   		case SYS_PLAY_EVENT_FM_PREV_STEP:
;;;2665   			
;;;2666   			if(Global_datas.state == SYS_PLAY_STATE_FM)
;;;2667   			{
;;;2668   				if(Global_datas.FmData.Frequency >= 8760)	Global_datas.FmData.Frequency -= 10;
;;;2669   				else Global_datas.FmData.Frequency = 10800;
;;;2670   				Global_datas.FmData.FmNeedToStore = 1;
;;;2671   				TimeOutSet(&FmStoreTimer, 2000);
;;;2672   				temp_valid = si47xxFMRX_tune(Global_datas.FmData.Frequency);
;;;2673   				
;;;2674   				SendFmFreqToSubBoard();
;;;2675   				printf("FM DOWN\n");
;;;2676   
;;;2677   			}
;;;2678   
;;;2679   			break;
;;;2680   
;;;2681   			case SYS_PLAY_EVENT_FM_PREV_STATION:
;;;2682   				
;;;2683   			if(Global_datas.FmData.station_num)
000150  9306              STR      r3,[sp,#0x18]
000152  792b              LDRB     r3,[r5,#4]
000154  9305              STR      r3,[sp,#0x14]
000156  1e5b              SUBS     r3,r3,#1
000158  9301              STR      r3,[sp,#4]            ;2383
00015a  79eb              LDRB     r3,[r5,#7]            ;2383
;;;2684   			{
;;;2685   				if(Global_datas.FmData.current_station > 0)
00015c  9302              STR      r3,[sp,#8]
00015e  79ab              LDRB     r3,[r5,#6]
000160  9300              STR      r3,[sp,#0]
000162  462b              MOV      r3,r5
000164  3b80              SUBS     r3,r3,#0x80
000166  6c1b              LDR      r3,[r3,#0x40]         ;2017
000168  9304              STR      r3,[sp,#0x10]         ;2017
00016a  4663              MOV      r3,r12                ;2017
00016c  7cdb              LDRB     r3,[r3,#0x13]         ;2017
00016e  462e              MOV      r6,r5
000170  9303              STR      r3,[sp,#0xc]          ;2252
000172  3e40              SUBS     r6,r6,#0x40
000174  0013              MOVS     r3,r2                 ;2252
000176  f7fffffe          BL       __ARM_common_switch8
00017a  1f51              DCB      0x1f,0x51
00017c  216b89fe          DCB      0x21,0x6b,0x89,0xfe
000180  fdfcfbfa          DCB      0xfd,0xfc,0xfb,0xfa
000184  f9f8f7f6          DCB      0xf9,0xf8,0xf7,0xf6
000188  f5f4f3f2          DCB      0xf5,0xf4,0xf3,0xf2
00018c  f1f0efee          DCB      0xf1,0xf0,0xef,0xee
000190  ed52eceb          DCB      0xed,0x52,0xec,0xeb
000194  eae9e8e7          DCB      0xea,0xe9,0xe8,0xe7
000198  e6e55100          DCB      0xe6,0xe5,0x51,0x00
                  |L19.412|
00019c  2218              MOVS     r2,#0x18              ;2209
00019e  e7ca              B        |L19.310|
0001a0  2807              CMP      r0,#7                 ;2216
0001a2  d0b9              BEQ      |L19.280|
0001a4  2806              CMP      r0,#6                 ;2220
0001a6  d1ca              BNE      |L19.318|
0001a8  2218              MOVS     r2,#0x18              ;2222
0001aa  e7b5              B        |L19.280|
0001ac  2807              CMP      r0,#7                 ;2231
0001ae  d1c6              BNE      |L19.318|
0001b0  76a5              STRB     r5,[r4,#0x1a]         ;2231
0001b2  e7c4              B        |L19.318|
0001b4  2807              CMP      r0,#7                 ;2237
0001b6  d1c2              BNE      |L19.318|
0001b8  221c              MOVS     r2,#0x1c              ;2237
0001ba  e7ad              B        |L19.280|
0001bc  20ff              MOVS     r0,#0xff              ;2274
0001be  30f5              ADDS     r0,r0,#0xf5           ;2274
0001c0  f7fffffe          BL       WaitMs
0001c4  2001              MOVS     r0,#1                 ;2275
0001c6  f7fffffe          BL       TYM_SysPower12V_3V3_onoff
0001ca  20ff              MOVS     r0,#0xff              ;2276
0001cc  30f5              ADDS     r0,r0,#0xf5           ;2276
0001ce  f7fffffe          BL       WaitMs
0001d2  2002              MOVS     r0,#2                 ;2277
0001d4  7660              STRB     r0,[r4,#0x19]         ;2277
0001d6  7227              STRB     r7,[r4,#8]            ;2278
0001d8  74a7              STRB     r7,[r4,#0x12]         ;2279
0001da  2005              MOVS     r0,#5                 ;2280
0001dc  74e0              STRB     r0,[r4,#0x13]         ;2280
0001de  2001              MOVS     r0,#1                 ;2281
0001e0  f7fffffe          BL       TYM_drv_powerkeepon
0001e4  2001              MOVS     r0,#1                 ;2282
0001e6  f7fffffe          BL       Drv_4GMoudle_PowerUp
0001ea  2001              MOVS     r0,#1                 ;2284
0001ec  f7fffffe          BL       AdapterPowerModeCtrl
0001f0  7267              STRB     r7,[r4,#9]            ;2286
0001f2  f7fffffe          BL       drv_FourGmodel_power_key_SetHi
0001f6  4983              LDR      r1,|L19.1028|
0001f8  4883              LDR      r0,|L19.1032|
0001fa  f7fffffe          BL       TimeOutSet
0001fe  2164              MOVS     r1,#0x64              ;2289
000200  4882              LDR      r0,|L19.1036|
000202  f7fffffe          BL       TimeOutSet
000206  f7fffffe          BL       Drv_audio_init
00020a  2000              MOVS     r0,#0                 ;2291
00020c  7460              STRB     r0,[r4,#0x11]         ;2291
00020e  4602              MOV      r2,r0                 ;2293
000210  2116              MOVS     r1,#0x16              ;2293
000212  2070              MOVS     r0,#0x70              ;2293
000214  f7fffffe          BL       drv_Cmd_Send2NCU031
000218  f7fffffe          BL       Fm_Rest
00021c  e1d4              B        |L19.1480|
00021e  2001              MOVS     r0,#1                 ;2310
000220  f7fffffe          BL       TYM_SysPower12V_3V3_onoff
000224  2003              MOVS     r0,#3                 ;2311
000226  7660              STRB     r0,[r4,#0x19]         ;2311
000228  7227              STRB     r7,[r4,#8]            ;2312
00022a  2001              MOVS     r0,#1                 ;2314
00022c  f7fffffe          BL       Drv_4GMoudle_PowerUp
000230  7267              STRB     r7,[r4,#9]            ;2315
000232  f7fffffe          BL       drv_FourGmodel_power_key_SetHi
000236  4973              LDR      r1,|L19.1028|
000238  4873              LDR      r0,|L19.1032|
00023a  f7fffffe          BL       TimeOutSet
00023e  2164              MOVS     r1,#0x64              ;2318
000240  4872              LDR      r0,|L19.1036|
000242  f7fffffe          BL       TimeOutSet
000246  2000              MOVS     r0,#0                 ;2319
000248  7460              STRB     r0,[r4,#0x11]         ;2319
00024a  f7fffffe          BL       drv_audio_4G_Channel
00024e  e1bb              B        |L19.1480|
000250  2200              MOVS     r2,#0                 ;2330
000252  2115              MOVS     r1,#0x15              ;2330
000254  2070              MOVS     r0,#0x70              ;2330
000256  f7fffffe          BL       drv_Cmd_Send2NCU031
00025a  2200              MOVS     r2,#0                 ;2331
00025c  2155              MOVS     r1,#0x55              ;2331
00025e  2003              MOVS     r0,#3                 ;2331
000260  f7fffffe          BL       Cmd_Send2FourG
000264  f7fffffe          BL       drv_led_init
000268  f7fffffe          BL       Drv_audio_powerdown
00026c  7467              STRB     r7,[r4,#0x11]         ;2335
00026e  4968              LDR      r1,|L19.1040|
000270  4866              LDR      r0,|L19.1036|
000272  f7fffffe          BL       TimeOutSet
000276  2004              MOVS     r0,#4                 ;2338
000278  7660              STRB     r0,[r4,#0x19]         ;2338
00027a  2000              MOVS     r0,#0                 ;2339
00027c  7220              STRB     r0,[r4,#8]            ;2339
00027e  7520              STRB     r0,[r4,#0x14]         ;2340
000280  7560              STRB     r0,[r4,#0x15]         ;2341
000282  f7fffffe          BL       drv_FourGmodel_power_key_SetLow
000286  2000              MOVS     r0,#0                 ;2343
000288  7720              STRB     r0,[r4,#0x1c]         ;2343
00028a  e19d              B        |L19.1480|
00028c  2100              MOVS     r1,#0                 ;2349
00028e  7221              STRB     r1,[r4,#8]            ;2349
000290  7f21              LDRB     r1,[r4,#0x1c]         ;2351  ; Global_datas
000292  2900              CMP      r1,#0                 ;2351
000294  d074              BEQ      |L19.896|
000296  2803              CMP      r0,#3                 ;2351
000298  d072              BEQ      |L19.896|
00029a  2213              MOVS     r2,#0x13              ;2353
00029c  2171              MOVS     r1,#0x71              ;2353
00029e  2003              MOVS     r0,#3                 ;2353
0002a0  f7fffffe          BL       drv_Cmd_Send2NCU031
0002a4  7ce1              LDRB     r1,[r4,#0x13]         ;2354  ; Global_datas
0002a6  2200              MOVS     r2,#0                 ;2354
0002a8  2007              MOVS     r0,#7                 ;2354
0002aa  f7fffffe          BL       drv_Cmd_Send2NCU031
0002ae  7fa0              LDRB     r0,[r4,#0x1e]         ;2356  ; Global_datas
0002b0  2801              CMP      r0,#1                 ;2356
0002b2  d006              BEQ      |L19.706|
0002b4  2802              CMP      r0,#2                 ;2356
0002b6  d02e              BEQ      |L19.790|
0002b8  2803              CMP      r0,#3                 ;2356
0002ba  d00e              BEQ      |L19.730|
0002bc  2804              CMP      r0,#4                 ;2356
0002be  d167              BNE      |L19.912|
0002c0  e01a              B        |L19.760|
                  |L19.706|
0002c2  2200              MOVS     r2,#0                 ;2359
0002c4  2115              MOVS     r1,#0x15              ;2359
0002c6  2003              MOVS     r0,#3                 ;2359
0002c8  f7fffffe          BL       Cmd_Send2FourG
0002cc  2200              MOVS     r2,#0                 ;2360
0002ce  2111              MOVS     r1,#0x11              ;2360
0002d0  2070              MOVS     r0,#0x70              ;2360
0002d2  f7fffffe          BL       drv_Cmd_Send2NCU031
                  |L19.726|
0002d6  2005              MOVS     r0,#5                 ;2397
0002d8  e00a              B        |L19.752|
                  |L19.730|
0002da  2200              MOVS     r2,#0                 ;2367
0002dc  2116              MOVS     r1,#0x16              ;2367
0002de  2003              MOVS     r0,#3                 ;2367
0002e0  f7fffffe          BL       Cmd_Send2FourG
0002e4  2200              MOVS     r2,#0                 ;2368
0002e6  2110              MOVS     r1,#0x10              ;2368
0002e8  2070              MOVS     r0,#0x70              ;2368
0002ea  f7fffffe          BL       drv_Cmd_Send2NCU031
0002ee  2006              MOVS     r0,#6                 ;2369
                  |L19.752|
0002f0  7660              STRB     r0,[r4,#0x19]         ;2362
0002f2  f7fffffe          BL       drv_audio_4G_Channel
0002f6  e023              B        |L19.832|
                  |L19.760|
0002f8  2200              MOVS     r2,#0                 ;2374
0002fa  2117              MOVS     r1,#0x17              ;2374
0002fc  2003              MOVS     r0,#3                 ;2374
0002fe  f7fffffe          BL       Cmd_Send2FourG
000302  2200              MOVS     r2,#0                 ;2375
000304  2112              MOVS     r1,#0x12              ;2375
000306  2070              MOVS     r0,#0x70              ;2375
000308  f7fffffe          BL       drv_Cmd_Send2NCU031
00030c  2008              MOVS     r0,#8                 ;2376
00030e  7660              STRB     r0,[r4,#0x19]         ;2376
000310  f7fffffe          BL       drv_audio_AuxIn_Channel
000314  e014              B        |L19.832|
                  |L19.790|
000316  2007              MOVS     r0,#7                 ;2381
000318  7660              STRB     r0,[r4,#0x19]         ;2381
00031a  200a              MOVS     r0,#0xa               ;2382
00031c  7620              STRB     r0,[r4,#0x18]         ;2382
00031e  71ef              STRB     r7,[r5,#7]            ;2383
000320  2200              MOVS     r2,#0                 ;2385
000322  2113              MOVS     r1,#0x13              ;2385
000324  2070              MOVS     r0,#0x70              ;2385
000326  f7fffffe          BL       drv_Cmd_Send2NCU031
00032a  2200              MOVS     r2,#0                 ;2386
00032c  2118              MOVS     r1,#0x18              ;2386
00032e  2003              MOVS     r0,#3                 ;2386
000330  f7fffffe          BL       Cmd_Send2FourG
000334  f7fffffe          BL       test_FMRXtune
000338  f7fffffe          BL       drv_audio_FM_Channel
00033c  f7fffffe          BL       SendFmFreqToSubBoard
                  |L19.832|
000340  7ce0              LDRB     r0,[r4,#0x13]         ;2402  ; Global_datas
000342  e01a              B        |L19.890|
000344  e117              B        |L19.1398|
000346  e131              B        |L19.1452|
000348  e0db              B        |L19.1282|
00034a  e0f4              B        |L19.1334|
00034c  e0c5              B        |L19.1242|
00034e  e0cc              B        |L19.1258|
000350  e137              B        |L19.1474|
000352  e0ab              B        |L19.1196|
000354  e08a              B        |L19.1132|
000356  e02a              B        |L19.942|
000358  e027              B        |L19.938|
00035a  e022              B        |L19.930|
00035c  e023              B        |L19.934|
00035e  e082              B        |L19.1126|
000360  e07e              B        |L19.1120|
000362  e06e              B        |L19.1090|
000364  e073              B        |L19.1102|
000366  e069              B        |L19.1084|
000368  e065              B        |L19.1078|
00036a  e061              B        |L19.1072|
00036c  e05a              B        |L19.1060|
00036e  e056              B        |L19.1054|
000370  e021              B        |L19.950|
000372  e02d              B        |L19.976|
000374  e021              B        |L19.954|
000376  e011              B        |L19.924|
000378  e002              B        |L19.896|
                  |L19.890|
00037a  f7fffffe          BL       Drv_Dap_vol_set
                  |L19.894|
00037e  e123              B        |L19.1480|
                  |L19.896|
000380  4924              LDR      r1,|L19.1044|
000382  7949              LDRB     r1,[r1,#5]            ;2406  ; Global_datas
000384  2900              CMP      r1,#0                 ;2406
000386  d003              BEQ      |L19.912|
000388  2808              CMP      r0,#8                 ;2406
00038a  d0f8              BEQ      |L19.894|
00038c  2807              CMP      r0,#7                 ;2406
00038e  d0f6              BEQ      |L19.894|
                  |L19.912|
000390  2200              MOVS     r2,#0                 ;2412
000392  2115              MOVS     r1,#0x15              ;2412
000394  2003              MOVS     r0,#3                 ;2412
000396  f7fffffe          BL       Cmd_Send2FourG
00039a  e79c              B        |L19.726|
                  |L19.924|
00039c  f7fffffe          BL       srv_key_mode_handler
0003a0  e7ce              B        |L19.832|
                  |L19.930|
0003a2  2008              MOVS     r0,#8                 ;2431
0003a4  e004              B        |L19.944|
                  |L19.934|
0003a6  2007              MOVS     r0,#7                 ;2438
0003a8  e002              B        |L19.944|
                  |L19.938|
0003aa  2006              MOVS     r0,#6                 ;2445
0003ac  e000              B        |L19.944|
                  |L19.942|
0003ae  2005              MOVS     r0,#5                 ;2452
                  |L19.944|
0003b0  f7fffffe          BL       srv_key_mode_switch_to
0003b4  e7c4              B        |L19.832|
                  |L19.950|
0003b6  2008              MOVS     r0,#8                 ;2460
0003b8  e006              B        |L19.968|
                  |L19.954|
0003ba  2000              MOVS     r0,#0                 ;2471
0003bc  7560              STRB     r0,[r4,#0x15]         ;2471
0003be  9803              LDR      r0,[sp,#0xc]          ;2472
0003c0  2810              CMP      r0,#0x10              ;2472
0003c2  d22b              BCS      |L19.1052|
0003c4  1c40              ADDS     r0,r0,#1              ;2472
0003c6  b2c0              UXTB     r0,r0                 ;2474
                  |L19.968|
0003c8  74e0              STRB     r0,[r4,#0x13]         ;2460
0003ca  f7fffffe          BL       Drv_Dap_vol_set
0003ce  e00d              B        |L19.1004|
                  |L19.976|
0003d0  9803              LDR      r0,[sp,#0xc]          ;2485
0003d2  2800              CMP      r0,#0                 ;2485
0003d4  d022              BEQ      |L19.1052|
0003d6  1e40              SUBS     r0,r0,#1              ;2485
0003d8  b2c0              UXTB     r0,r0                 ;2487
0003da  74e0              STRB     r0,[r4,#0x13]         ;2487
0003dc  f7fffffe          BL       Drv_Dap_vol_set
0003e0  7ce0              LDRB     r0,[r4,#0x13]         ;2489  ; Global_datas
0003e2  2800              CMP      r0,#0                 ;2489
0003e4  d102              BNE      |L19.1004|
0003e6  7567              STRB     r7,[r4,#0x15]         ;2491
0003e8  f7fffffe          BL       drv_5825_mute_pin_set
                  |L19.1004|
0003ec  7ce2              LDRB     r2,[r4,#0x13]         ;2494  ; Global_datas
0003ee  2104              MOVS     r1,#4                 ;2494
0003f0  2003              MOVS     r0,#3                 ;2494
0003f2  f7fffffe          BL       Cmd_Send2FourG
0003f6  2200              MOVS     r2,#0                 ;2495
0003f8  7ce1              LDRB     r1,[r4,#0x13]         ;2495  ; Global_datas
0003fa  2007              MOVS     r0,#7                 ;2495
0003fc  e00c              B        |L19.1048|
0003fe  0000              DCW      0x0000
                  |L19.1024|
                          DCD      Global_datas+0x20
                  |L19.1028|
                          DCD      0x00000bb8
                  |L19.1032|
                          DCD      ModulePowerUpPinTimer
                  |L19.1036|
                          DCD      PoweroffLedTimer
                  |L19.1040|
                          DCD      0x00001388
                  |L19.1044|
                          DCD      Global_datas+0x160
                  |L19.1048|
000418  f7fffffe          BL       drv_Cmd_Send2NCU031
                  |L19.1052|
00041c  e0d4              B        |L19.1480|
                  |L19.1054|
00041e  2200              MOVS     r2,#0                 ;2501
000420  210d              MOVS     r1,#0xd               ;2501
000422  e001              B        |L19.1064|
                  |L19.1060|
000424  2200              MOVS     r2,#0                 ;2507
000426  210e              MOVS     r1,#0xe               ;2507
                  |L19.1064|
000428  2003              MOVS     r0,#3                 ;2501
00042a  f7fffffe          BL       Cmd_Send2FourG
00042e  e0cb              B        |L19.1480|
                  |L19.1072|
000430  2200              MOVS     r2,#0                 ;2513
000432  2156              MOVS     r1,#0x56              ;2513
000434  e7f8              B        |L19.1064|
                  |L19.1078|
000436  2200              MOVS     r2,#0                 ;2519
000438  2131              MOVS     r1,#0x31              ;2519
00043a  e7f5              B        |L19.1064|
                  |L19.1084|
00043c  2200              MOVS     r2,#0                 ;2525
00043e  2132              MOVS     r1,#0x32              ;2525
000440  e7f2              B        |L19.1064|
                  |L19.1090|
000442  9806              LDR      r0,[sp,#0x18]         ;2531
000444  2802              CMP      r0,#2                 ;2531
000446  d00a              BEQ      |L19.1118|
000448  2002              MOVS     r0,#2                 ;2533
00044a  74a0              STRB     r0,[r4,#0x12]         ;2533
00044c  e003              B        |L19.1110|
                  |L19.1102|
00044e  9806              LDR      r0,[sp,#0x18]         ;2542
000450  2801              CMP      r0,#1                 ;2542
000452  d004              BEQ      |L19.1118|
000454  74a7              STRB     r7,[r4,#0x12]         ;2544
                  |L19.1110|
000456  f7fffffe          BL       srv_key_eq_outdoor_switch_handler
00045a  f7fffffe          BL       Drv_audio_channel_switch
                  |L19.1118|
00045e  e0b3              B        |L19.1480|
                  |L19.1120|
000460  2200              MOVS     r2,#0                 ;2554
000462  2150              MOVS     r1,#0x50              ;2554
000464  e7e0              B        |L19.1064|
                  |L19.1126|
000466  2200              MOVS     r2,#0                 ;2561
000468  2121              MOVS     r1,#0x21              ;2561
00046a  e7dd              B        |L19.1064|
                  |L19.1132|
00046c  2000              MOVS     r0,#0                 ;2567
00046e  7260              STRB     r0,[r4,#9]            ;2567
000470  a0a8              ADR      r0,|L19.1812|
000472  f7fffffe          BL       __2printf
000476  2000              MOVS     r0,#0                 ;2571
000478  f7fffffe          BL       AdapterPowerModeCtrl
00047c  7e60              LDRB     r0,[r4,#0x19]         ;2573  ; Global_datas
00047e  2804              CMP      r0,#4                 ;2573
000480  d002              BEQ      |L19.1160|
000482  2807              CMP      r0,#7                 ;2593
000484  d00e              BEQ      |L19.1188|
000486  e09f              B        |L19.1480|
                  |L19.1160|
000488  2000              MOVS     r0,#0                 ;2575
00048a  f7fffffe          BL       Drv_4GMoudle_PowerUp
00048e  2000              MOVS     r0,#0                 ;2576
000490  f7fffffe          BL       TYM_drv_powerkeepon
000494  2000              MOVS     r0,#0                 ;2577
000496  f7fffffe          BL       TYM_SysPower12V_3V3_onoff
00049a  7667              STRB     r7,[r4,#0x19]         ;2578
00049c  2000              MOVS     r0,#0                 ;2579
00049e  f7fffffe          BL       drv_all_led_on
0004a2  e091              B        |L19.1480|
                  |L19.1188|
0004a4  2000              MOVS     r0,#0                 ;2595
0004a6  f7fffffe          BL       Drv_4GMoudle_PowerUp
0004aa  e08d              B        |L19.1480|
                  |L19.1196|
0004ac  9802              LDR      r0,[sp,#8]            ;2602
0004ae  2801              CMP      r0,#1                 ;2602
0004b0  d002              BEQ      |L19.1208|
0004b2  2804              CMP      r0,#4                 ;2613
0004b4  d00f              BEQ      |L19.1238|
0004b6  e087              B        |L19.1480|
                  |L19.1208|
0004b8  2004              MOVS     r0,#4                 ;2604
0004ba  71e8              STRB     r0,[r5,#7]            ;2604
0004bc  2000              MOVS     r0,#0                 ;2605
0004be  4a9b              LDR      r2,|L19.1836|
0004c0  7168              STRB     r0,[r5,#5]            ;2605
                  |L19.1218|
0004c2  008b              LSLS     r3,r1,#2              ;2609
0004c4  189b              ADDS     r3,r3,r2              ;2609
0004c6  1c49              ADDS     r1,r1,#1              ;2609
0004c8  b2c9              UXTB     r1,r1                 ;2607
0004ca  6498              STR      r0,[r3,#0x48]         ;2607
0004cc  290f              CMP      r1,#0xf               ;2607
0004ce  d3f8              BCC      |L19.1218|
0004d0  4897              LDR      r0,|L19.1840|
0004d2  6410              STR      r0,[r2,#0x40]         ;2611  ; Global_datas
0004d4  e078              B        |L19.1480|
                  |L19.1238|
0004d6  71ef              STRB     r7,[r5,#7]            ;2615
0004d8  e076              B        |L19.1480|
                  |L19.1242|
0004da  9802              LDR      r0,[sp,#8]            ;2622
0004dc  2801              CMP      r0,#1                 ;2622
0004de  d002              BEQ      |L19.1254|
0004e0  2803              CMP      r0,#3                 ;2626
0004e2  d00b              BEQ      |L19.1276|
0004e4  e070              B        |L19.1480|
                  |L19.1254|
0004e6  2003              MOVS     r0,#3                 ;2624
0004e8  e006              B        |L19.1272|
                  |L19.1258|
0004ea  9802              LDR      r0,[sp,#8]            ;2636
0004ec  2801              CMP      r0,#1                 ;2636
0004ee  d002              BEQ      |L19.1270|
0004f0  2802              CMP      r0,#2                 ;2640
0004f2  d003              BEQ      |L19.1276|
0004f4  e068              B        |L19.1480|
                  |L19.1270|
0004f6  2002              MOVS     r0,#2                 ;2638
                  |L19.1272|
0004f8  71e8              STRB     r0,[r5,#7]            ;2638
0004fa  e065              B        |L19.1480|
                  |L19.1276|
0004fc  71ef              STRB     r7,[r5,#7]            ;2642
0004fe  7177              STRB     r7,[r6,#5]            ;2643
000500  e062              B        |L19.1480|
                  |L19.1282|
000502  2807              CMP      r0,#7                 ;2650
000504  d160              BNE      |L19.1480|
000506  498b              LDR      r1,|L19.1844|
000508  9804              LDR      r0,[sp,#0x10]         ;2652
00050a  4288              CMP      r0,r1                 ;2652
00050c  d802              BHI      |L19.1300|
00050e  4987              LDR      r1,|L19.1836|
000510  300a              ADDS     r0,r0,#0xa            ;2652
000512  e001              B        |L19.1304|
                  |L19.1300|
000514  4886              LDR      r0,|L19.1840|
000516  4985              LDR      r1,|L19.1836|
                  |L19.1304|
000518  6408              STR      r0,[r1,#0x40]         ;2654  ; Global_datas
00051a  217d              MOVS     r1,#0x7d              ;2655
00051c  7177              STRB     r7,[r6,#5]            ;2654
00051e  0109              LSLS     r1,r1,#4              ;2655
000520  4885              LDR      r0,|L19.1848|
000522  f7fffffe          BL       TimeOutSet
000526  4881              LDR      r0,|L19.1836|
000528  6c00              LDR      r0,[r0,#0x40]         ;2656  ; Global_datas
00052a  f7fffffe          BL       si47xxFMRX_tune
00052e  f7fffffe          BL       SendFmFreqToSubBoard
000532  a082              ADR      r0,|L19.1852|
000534  e01c              B        |L19.1392|
                  |L19.1334|
000536  2807              CMP      r0,#7                 ;2666
000538  d146              BNE      |L19.1480|
00053a  497d              LDR      r1,|L19.1840|
00053c  9804              LDR      r0,[sp,#0x10]         ;2668
00053e  310a              ADDS     r1,r1,#0xa            ;2668
000540  4288              CMP      r0,r1                 ;2668
000542  d304              BCC      |L19.1358|
000544  9904              LDR      r1,[sp,#0x10]         ;2668
000546  4879              LDR      r0,|L19.1836|
000548  390a              SUBS     r1,r1,#0xa            ;2668
00054a  6401              STR      r1,[r0,#0x40]         ;2668  ; Global_datas
00054c  e003              B        |L19.1366|
                  |L19.1358|
00054e  4879              LDR      r0,|L19.1844|
000550  4976              LDR      r1,|L19.1836|
000552  300a              ADDS     r0,r0,#0xa            ;2669
000554  6408              STR      r0,[r1,#0x40]         ;2669  ; Global_datas
                  |L19.1366|
000556  217d              MOVS     r1,#0x7d              ;2671
000558  7177              STRB     r7,[r6,#5]            ;2670
00055a  0109              LSLS     r1,r1,#4              ;2671
00055c  4876              LDR      r0,|L19.1848|
00055e  f7fffffe          BL       TimeOutSet
000562  4872              LDR      r0,|L19.1836|
000564  6c00              LDR      r0,[r0,#0x40]         ;2672  ; Global_datas
000566  f7fffffe          BL       si47xxFMRX_tune
00056a  f7fffffe          BL       SendFmFreqToSubBoard
00056e  a075              ADR      r0,|L19.1860|
                  |L19.1392|
000570  f7fffffe          BL       __2printf
000574  e028              B        |L19.1480|
                  |L19.1398|
000576  9805              LDR      r0,[sp,#0x14]         ;2683
000578  2800              CMP      r0,#0                 ;2683
00057a  d025              BEQ      |L19.1480|
00057c  9800              LDR      r0,[sp,#0]
00057e  2800              CMP      r0,#0
000580  d001              BEQ      |L19.1414|
000582  1e40              SUBS     r0,r0,#1
;;;2686   				{
;;;2687   					Global_datas.FmData.current_station--;
000584  e000              B        |L19.1416|
                  |L19.1414|
000586  9801              LDR      r0,[sp,#4]
                  |L19.1416|
;;;2688   				}
;;;2689   				else
;;;2690   				{
;;;2691   					Global_datas.FmData.current_station = (Global_datas.FmData.station_num - 1);
000588  71a8              STRB     r0,[r5,#6]
;;;2692   				}
;;;2693   			
;;;2694   				Global_datas.FmData.Frequency = Global_datas.FmData.station_table[Global_datas.FmData.current_station];
;;;2695   				//dis_mic(1);
;;;2696   				si47xxFMRX_tune(Global_datas.FmData.Frequency);
;;;2697   				SendFmFreqToSubBoard();
;;;2698   				//FreqDisplay(Frequency); 	
;;;2699   			
;;;2700   				Global_datas.FmData.FmNeedToStore = 1;
;;;2701   				TimeOutSet(&FmStoreTimer, 2000);
;;;2702   			}
;;;2703   
;;;2704   			break;
;;;2705   
;;;2706   			case SYS_PLAY_EVENT_FM_NEXT_STATION:
;;;2707   				
;;;2708   			if(Global_datas.FmData.station_num)
;;;2709   			{
;;;2710   				if(Global_datas.FmData.current_station < (Global_datas.FmData.station_num-1))
;;;2711   				{
;;;2712   					Global_datas.FmData.current_station++;
;;;2713   				}
;;;2714   				else
;;;2715   				{
;;;2716   					Global_datas.FmData.current_station = 0;
;;;2717   				}
;;;2718   			
;;;2719   				Global_datas.FmData.Frequency = Global_datas.FmData.station_table[Global_datas.FmData.current_station];
00058a  0600              LSLS     r0,r0,#24
00058c  4967              LDR      r1,|L19.1836|
00058e  0d80              LSRS     r0,r0,#22
000590  1840              ADDS     r0,r0,r1
000592  6c80              LDR      r0,[r0,#0x48]
;;;2720   				//dis_mic(1);
;;;2721   				si47xxFMRX_tune(Global_datas.FmData.Frequency);
000594  6408              STR      r0,[r1,#0x40]  ; Global_datas
000596  f7fffffe          BL       si47xxFMRX_tune
;;;2722   				//FreqDisplay(Frequency); 	
;;;2723   				SendFmFreqToSubBoard();
00059a  f7fffffe          BL       SendFmFreqToSubBoard
;;;2724   			
;;;2725   				Global_datas.FmData.FmNeedToStore = 1;
;;;2726   				TimeOutSet(&FmStoreTimer, 2000);
00059e  217d              MOVS     r1,#0x7d
0005a0  7177              STRB     r7,[r6,#5]            ;2725
0005a2  0109              LSLS     r1,r1,#4
0005a4  4864              LDR      r0,|L19.1848|
0005a6  f7fffffe          BL       TimeOutSet
0005aa  e00d              B        |L19.1480|
                  |L19.1452|
0005ac  9805              LDR      r0,[sp,#0x14]         ;2708
0005ae  2800              CMP      r0,#0                 ;2708
0005b0  d00a              BEQ      |L19.1480|
0005b2  9901              LDR      r1,[sp,#4]            ;2710
0005b4  9800              LDR      r0,[sp,#0]            ;2710
0005b6  4288              CMP      r0,r1                 ;2710
0005b8  da01              BGE      |L19.1470|
0005ba  1c40              ADDS     r0,r0,#1              ;2710
0005bc  e7e4              B        |L19.1416|
                  |L19.1470|
0005be  2000              MOVS     r0,#0                 ;2716
0005c0  e7e2              B        |L19.1416|
                  |L19.1474|
;;;2727   			
;;;2728   			}
;;;2729   
;;;2730   
;;;2731   			break;			
;;;2732   
;;;2733   		case SYS_PLAY_EVENT_BT_PAIRING:
;;;2734   
;;;2735   			Cmd_Send2FourG(0x03,0x4f,0);  // BT enter pairing mode
0005c2  2200              MOVS     r2,#0
0005c4  214f              MOVS     r1,#0x4f
;;;2736   			break;
0005c6  e72f              B        |L19.1064|
                  |L19.1480|
;;;2737   
;;;2738   		default:break;
;;;2739   	}
;;;2740   
;;;2741   	Global_datas.event = SYS_PLAY_EVENT_NONE;
0005c8  2000              MOVS     r0,#0
0005ca  76a0              STRB     r0,[r4,#0x1a]
;;;2742   
;;;2743   	switch(Global_datas.state)
0005cc  7e60              LDRB     r0,[r4,#0x19]  ; Global_datas
0005ce  0003              MOVS     r3,r0
0005d0  f7fffffe          BL       __ARM_common_switch8
0005d4  08474747          DCB      0x08,0x47,0x47,0x47
0005d8  47474747          DCB      0x47,0x47,0x47,0x47
0005dc  0547              DCB      0x05,0x47
;;;2744   	{
;;;2745   		case SYS_PLAY_STATE_IDLE:
;;;2746   			break;
;;;2747   
;;;2748   	
;;;2749   		case SYS_PLAY_STATE_POWERUP:
;;;2750   			
;;;2751   			break;
;;;2752   
;;;2753   		case SYS_PLAY_STATE_MW_RADIO:
;;;2754   			
;;;2755   			break;		
;;;2756   
;;;2757   		case SYS_PLAY_STATE_BT:
;;;2758   			
;;;2759   			break;
;;;2760   			
;;;2761   		case SYS_PLAY_STATE_AUX:
;;;2762   			
;;;2763   			break;	
;;;2764   
;;;2765   		case SYS_PLAY_STATE_SHUTTING_DOWN:
;;;2766   			
;;;2767   			break;	
;;;2768   
;;;2769   		case SYS_PLAY_STATE_FM:
;;;2770   
;;;2771   			if(IsTimeOut(&FmLoopTimer))
0005de  485c              LDR      r0,|L19.1872|
0005e0  f7fffffe          BL       IsTimeOut
0005e4  2800              CMP      r0,#0
0005e6  d011              BEQ      |L19.1548|
;;;2772   			{
;;;2773   				TimeOutSet(&FmLoopTimer,1000);
0005e8  217d              MOVS     r1,#0x7d
0005ea  00c9              LSLS     r1,r1,#3
0005ec  4858              LDR      r0,|L19.1872|
0005ee  f7fffffe          BL       TimeOutSet
;;;2774   
;;;2775   				if(Global_datas.fm_delay_time)
0005f2  7e20              LDRB     r0,[r4,#0x18]  ; Global_datas
0005f4  2800              CMP      r0,#0
0005f6  d009              BEQ      |L19.1548|
0005f8  1e40              SUBS     r0,r0,#1
;;;2776   				{
;;;2777   
;;;2778   				    
;;;2779   					Global_datas.fm_delay_time--;
0005fa  0600              LSLS     r0,r0,#24
0005fc  0e00              LSRS     r0,r0,#24
0005fe  7620              STRB     r0,[r4,#0x18]
;;;2780   					if(Global_datas.fm_delay_time == 0)
000600  d104              BNE      |L19.1548|
;;;2781   					{
;;;2782   						Cmd_Send2FourG( 0x03,0x55,0x00); // poweroff cmd to 4G
000602  2200              MOVS     r2,#0
000604  2155              MOVS     r1,#0x55
000606  2003              MOVS     r0,#3
000608  f7fffffe          BL       Cmd_Send2FourG
                  |L19.1548|
;;;2783   						//Drv_4GMoudle_PowerUp(0); 
;;;2784   						//Global_datas.power_4g = 0;
;;;2785   						//TimeOutSet(&PoweroffLedTimer, 5000);
;;;2786   					}
;;;2787   				}
;;;2788   			}
;;;2789   
;;;2790   			if(IsTimeOut(&FmStoreTimer))
00060c  484a              LDR      r0,|L19.1848|
00060e  f7fffffe          BL       IsTimeOut
000612  2800              CMP      r0,#0
000614  d006              BEQ      |L19.1572|
;;;2791   			{
;;;2792   				if(Global_datas.FmData.FmNeedToStore)
000616  7970              LDRB     r0,[r6,#5]  ; Global_datas
000618  2800              CMP      r0,#0
00061a  d003              BEQ      |L19.1572|
;;;2793   				{
;;;2794   					Global_datas.FmData.FmNeedToStore = 0;
00061c  2000              MOVS     r0,#0
00061e  7170              STRB     r0,[r6,#5]
;;;2795   					DataStore();
000620  f7fffffe          BL       DataStore
                  |L19.1572|
;;;2796   				}
;;;2797   			}
;;;2798   
;;;2799   			switch(Global_datas.FmData.fmstate)
000624  79e8              LDRB     r0,[r5,#7]  ; Global_datas
000626  0003              MOVS     r3,r0
000628  f7fffffe          BL       __ARM_common_switch8
00062c  051b1b04          DCB      0x05,0x1b,0x1b,0x04
000630  1d281b00          DCB      0x1d,0x28,0x1b,0x00
;;;2800   			{
;;;2801   				case FM_STATE_OFF:
;;;2802   
;;;2803   				break;
;;;2804   
;;;2805   				case FM_STATE_ON:
;;;2806   
;;;2807   				break;
;;;2808   
;;;2809   				case FM_STATE_SEEK_UP:
;;;2810   
;;;2811   					if(Global_datas.FmData.Frequency <= 10790)
000634  4c3d              LDR      r4,|L19.1836|
000636  493f              LDR      r1,|L19.1844|
000638  6c20              LDR      r0,[r4,#0x40]  ; Global_datas
00063a  4288              CMP      r0,r1
00063c  d801              BHI      |L19.1602|
00063e  300a              ADDS     r0,r0,#0xa
;;;2812   					{
;;;2813   						Global_datas.FmData.Frequency += 10;
000640  e000              B        |L19.1604|
                  |L19.1602|
;;;2814   					}
;;;2815   					else
;;;2816   					{
;;;2817   						Global_datas.FmData.Frequency = 8750;
000642  483b              LDR      r0,|L19.1840|
                  |L19.1604|
;;;2818   					}
;;;2819   
;;;2820   					SendFmFreqToSubBoard();
;;;2821   					temp_valid = si47xxFMRX_tune(Global_datas.FmData.Frequency);
;;;2822   					//FreqDisplay(Frequency);
;;;2823   					
;;;2824   					if(temp_valid)
;;;2825   					{
;;;2826   						//dis_mic(1);
;;;2827   						Global_datas.FmData.fmstate = FM_STATE_ON;		
;;;2828   						
;;;2829   						Global_datas.FmData.FmNeedToStore = 1;
;;;2830   						TimeOutSet(&FmStoreTimer, 2000);
;;;2831   					}
;;;2832   
;;;2833   				
;;;2834   
;;;2835   				break;
;;;2836   
;;;2837   				case FM_STATE_SEEK_DOWN:
;;;2838   
;;;2839   					if(Global_datas.FmData.Frequency >= 8760)  Global_datas.FmData.Frequency -= 10;
;;;2840   					else 
;;;2841   					{
;;;2842   						Global_datas.FmData.Frequency = 10800;
;;;2843   						//Global_datas.FmData.fmstate = FM_STATE_ON;		
;;;2844   					}
;;;2845   
;;;2846   					
;;;2847   					SendFmFreqToSubBoard();
000644  6420              STR      r0,[r4,#0x40]  ; Global_datas
000646  f7fffffe          BL       SendFmFreqToSubBoard
;;;2848   					temp_valid = si47xxFMRX_tune(Global_datas.FmData.Frequency);
00064a  6c20              LDR      r0,[r4,#0x40]  ; Global_datas
00064c  f7fffffe          BL       si47xxFMRX_tune
;;;2849   					
;;;2850   					if(temp_valid)
000650  2800              CMP      r0,#0
000652  d006              BEQ      |L19.1634|
;;;2851   					{
;;;2852   						//dis_mic(1);
;;;2853   						Global_datas.FmData.fmstate = FM_STATE_ON;		
000654  71ef              STRB     r7,[r5,#7]
;;;2854   						Global_datas.FmData.FmNeedToStore = 1;
;;;2855   						TimeOutSet(&FmStoreTimer, 2000);					
000656  217d              MOVS     r1,#0x7d
000658  7177              STRB     r7,[r6,#5]            ;2854
00065a  0109              LSLS     r1,r1,#4
00065c  4836              LDR      r0,|L19.1848|
00065e  f7fffffe          BL       TimeOutSet
                  |L19.1634|
;;;2856   					}					 
;;;2857   
;;;2858   				break;
;;;2859   
;;;2860   				case FM_STATE_AUTO_SEARCH:
;;;2861   
;;;2862   				
;;;2863   				SendFmFreqToSubBoard();
;;;2864   				temp_valid = si47xxFMRX_tune(Global_datas.FmData.Frequency);
;;;2865   				
;;;2866   				if(temp_valid)
;;;2867   				{
;;;2868   					//dis_mic(1);
;;;2869   					WaitMs(2000);
;;;2870   					
;;;2871   					Global_datas.FmData.station_table[Global_datas.FmData.index_station] = Global_datas.FmData.Frequency;
;;;2872   					if(Global_datas.FmData.index_station < (FM_MAX_STATION_NUM -1)) Global_datas.FmData.index_station++;
;;;2873   					if(Global_datas.FmData.Frequency <= 10790)
;;;2874   					{
;;;2875   						Global_datas.FmData.Frequency += 10;
;;;2876   					}
;;;2877   					else
;;;2878   					{
;;;2879   						Global_datas.FmData.station_num = Global_datas.FmData.index_station;
;;;2880   						if(Global_datas.FmData.station_num)
;;;2881   						{
;;;2882   							Global_datas.FmData.Frequency = Global_datas.FmData.station_table[0];
;;;2883   							//dis_mic(1);		
;;;2884   							Global_datas.FmData.current_station = 0;
;;;2885   						}
;;;2886   						else
;;;2887   						{
;;;2888   							Global_datas.FmData.Frequency = 8750;
;;;2889   							//dis_mic(0);
;;;2890   						}
;;;2891   
;;;2892   
;;;2893   						Global_datas.FmData.FmNeedToStore = 1;
;;;2894   						TimeOutSet(&FmStoreTimer, 1000);
;;;2895   						SendFmFreqToSubBoard();
;;;2896   						si47xxFMRX_tune(Global_datas.FmData.Frequency);	
;;;2897   						Global_datas.FmData.fmstate = FM_STATE_ON;		
;;;2898   					}
;;;2899   				}	
;;;2900   				else
;;;2901   				{
;;;2902   					if(Global_datas.FmData.Frequency <= 10790)	Global_datas.FmData.Frequency += 10;
;;;2903   					else
;;;2904   					{
;;;2905   						Global_datas.FmData.station_num = Global_datas.FmData.index_station;
;;;2906   						if(Global_datas.FmData.station_num)
;;;2907   						{
;;;2908   							Global_datas.FmData.Frequency = Global_datas.FmData.station_table[0];
;;;2909   							//dis_mic(1);		
;;;2910   							Global_datas.FmData.current_station = 0;
;;;2911   						}
;;;2912   						else
;;;2913   						{
;;;2914   							Global_datas.FmData.Frequency = 8750;
;;;2915   							//dis_mic(0);
;;;2916   						}
;;;2917   
;;;2918   						
;;;2919   						SendFmFreqToSubBoard();
;;;2920   						si47xxFMRX_tune(Global_datas.FmData.Frequency);
;;;2921   						//DataStore();
;;;2922   						Global_datas.FmData.FmNeedToStore = 1;
;;;2923   						Global_datas.FmData.fmstate = FM_STATE_ON;		
;;;2924   					}
;;;2925   				}					
;;;2926   
;;;2927   				break;
;;;2928   			}
;;;2929   			
;;;2930   			break;		
;;;2931   			
;;;2932   		default:break;
;;;2933   	}
;;;2934   }
000662  b007              ADD      sp,sp,#0x1c
000664  bdf0              POP      {r4-r7,pc}
000666  4c31              LDR      r4,|L19.1836|
000668  4931              LDR      r1,|L19.1840|
00066a  6c20              LDR      r0,[r4,#0x40]         ;2839  ; Global_datas
00066c  310a              ADDS     r1,r1,#0xa            ;2839
00066e  4288              CMP      r0,r1                 ;2839
000670  d301              BCC      |L19.1654|
000672  380a              SUBS     r0,r0,#0xa            ;2839
000674  e7e6              B        |L19.1604|
                  |L19.1654|
000676  482f              LDR      r0,|L19.1844|
000678  300a              ADDS     r0,r0,#0xa            ;2842
00067a  e7e3              B        |L19.1604|
00067c  f7fffffe          BL       SendFmFreqToSubBoard
000680  4c2a              LDR      r4,|L19.1836|
000682  6c20              LDR      r0,[r4,#0x40]         ;2864  ; Global_datas
000684  f7fffffe          BL       si47xxFMRX_tune
000688  2800              CMP      r0,#0                 ;2866
00068a  d028              BEQ      |L19.1758|
00068c  207d              MOVS     r0,#0x7d              ;2869
00068e  0100              LSLS     r0,r0,#4              ;2869
000690  f7fffffe          BL       WaitMs
000694  7969              LDRB     r1,[r5,#5]            ;2871  ; Global_datas
000696  6c20              LDR      r0,[r4,#0x40]         ;2871  ; Global_datas
000698  0089              LSLS     r1,r1,#2              ;2871
00069a  1909              ADDS     r1,r1,r4              ;2871
00069c  6488              STR      r0,[r1,#0x48]         ;2872
00069e  7968              LDRB     r0,[r5,#5]            ;2872  ; Global_datas
0006a0  280e              CMP      r0,#0xe               ;2872
0006a2  d201              BCS      |L19.1704|
0006a4  1c40              ADDS     r0,r0,#1              ;2872
0006a6  7168              STRB     r0,[r5,#5]            ;2872
                  |L19.1704|
0006a8  4922              LDR      r1,|L19.1844|
0006aa  6c20              LDR      r0,[r4,#0x40]         ;2873  ; Global_datas
0006ac  4288              CMP      r0,r1                 ;2873
0006ae  d91a              BLS      |L19.1766|
0006b0  7968              LDRB     r0,[r5,#5]            ;2879  ; Global_datas
0006b2  7128              STRB     r0,[r5,#4]            ;2879
0006b4  2800              CMP      r0,#0                 ;2880
0006b6  d004              BEQ      |L19.1730|
0006b8  6ca0              LDR      r0,[r4,#0x48]         ;2882  ; Global_datas
0006ba  6420              STR      r0,[r4,#0x40]         ;2884  ; Global_datas
0006bc  2000              MOVS     r0,#0                 ;2884
0006be  71a8              STRB     r0,[r5,#6]            ;2884
0006c0  e001              B        |L19.1734|
                  |L19.1730|
0006c2  481b              LDR      r0,|L19.1840|
0006c4  6420              STR      r0,[r4,#0x40]         ;2888  ; Global_datas
                  |L19.1734|
0006c6  217d              MOVS     r1,#0x7d              ;2894
0006c8  7177              STRB     r7,[r6,#5]            ;2893
0006ca  00c9              LSLS     r1,r1,#3              ;2894
0006cc  481a              LDR      r0,|L19.1848|
0006ce  f7fffffe          BL       TimeOutSet
0006d2  f7fffffe          BL       SendFmFreqToSubBoard
0006d6  6c20              LDR      r0,[r4,#0x40]         ;2896  ; Global_datas
0006d8  f7fffffe          BL       si47xxFMRX_tune
0006dc  e017              B        |L19.1806|
                  |L19.1758|
0006de  4915              LDR      r1,|L19.1844|
0006e0  6c20              LDR      r0,[r4,#0x40]         ;2902  ; Global_datas
0006e2  4288              CMP      r0,r1                 ;2902
0006e4  d802              BHI      |L19.1772|
                  |L19.1766|
0006e6  300a              ADDS     r0,r0,#0xa            ;2902
0006e8  6420              STR      r0,[r4,#0x40]         ;2902  ; Global_datas
0006ea  e7ba              B        |L19.1634|
                  |L19.1772|
0006ec  7968              LDRB     r0,[r5,#5]            ;2905  ; Global_datas
0006ee  7128              STRB     r0,[r5,#4]            ;2905
0006f0  2800              CMP      r0,#0                 ;2906
0006f2  d004              BEQ      |L19.1790|
0006f4  6ca0              LDR      r0,[r4,#0x48]         ;2908  ; Global_datas
0006f6  6420              STR      r0,[r4,#0x40]         ;2910  ; Global_datas
0006f8  2000              MOVS     r0,#0                 ;2910
0006fa  71a8              STRB     r0,[r5,#6]            ;2910
0006fc  e001              B        |L19.1794|
                  |L19.1790|
0006fe  480c              LDR      r0,|L19.1840|
000700  6420              STR      r0,[r4,#0x40]         ;2914  ; Global_datas
                  |L19.1794|
000702  f7fffffe          BL       SendFmFreqToSubBoard
000706  6c20              LDR      r0,[r4,#0x40]         ;2920  ; Global_datas
000708  f7fffffe          BL       si47xxFMRX_tune
00070c  7177              STRB     r7,[r6,#5]            ;2922
                  |L19.1806|
00070e  71ef              STRB     r7,[r5,#7]            ;2923
000710  e7a7              B        |L19.1634|
;;;2935   
                          ENDP

000712  0000              DCW      0x0000
                  |L19.1812|
000714  0a545552          DCB      "\nTURN OFF 4G MOUDLE\n",0
000718  4e204f46
00071c  46203447
000720  204d4f55
000724  444c450a
000728  00      
000729  00                DCB      0
00072a  00                DCB      0
00072b  00                DCB      0
                  |L19.1836|
                          DCD      Global_datas
                  |L19.1840|
                          DCD      0x0000222e
                  |L19.1844|
                          DCD      0x00002a26
                  |L19.1848|
                          DCD      FmStoreTimer
                  |L19.1852|
00073c  464d2055          DCB      "FM UP\n",0
000740  500a00  
000743  00                DCB      0
                  |L19.1860|
000744  464d2044          DCB      "FM DOWN\n",0
000748  4f574e0a
00074c  00      
00074d  00                DCB      0
00074e  00                DCB      0
00074f  00                DCB      0
                  |L19.1872|
                          DCD      FmLoopTimer

                          AREA ||i.TYM_DriverInit||, CODE, READONLY, ALIGN=1

                  TYM_DriverInit PROC
;;;243    
;;;244    void TYM_DriverInit(void)
000000  b510              PUSH     {r4,lr}
;;;245    {
;;;246    	//Drv_audio_init();
;;;247    	Drv_IrKey_init(); // kim
000002  f7fffffe          BL       Drv_IrKey_init
;;;248    	drv_gipo_key_init();
000006  f7fffffe          BL       drv_gipo_key_init
;;;249    }
00000a  bd10              POP      {r4,pc}
;;;250    
                          ENDP


                          AREA ||i.drv_Cmd_Send2Pte||, CODE, READONLY, ALIGN=2

                  drv_Cmd_Send2Pte PROC
;;;1288   
;;;1289   void drv_Cmd_Send2Pte(uint8_t cmd, uint8_t param0, uint8_t param1)
000000  b5f8              PUSH     {r3-r7,lr}
;;;1290   {
000002  4606              MOV      r6,r0
000004  460d              MOV      r5,r1
;;;1291   	uint8_t checksum;
;;;1292   	uint8_t count = 0;
000006  2400              MOVS     r4,#0
;;;1293   	uint8_t tx_data = 0;
;;;1294   	uint8_t *p_tx;
;;;1295   
;;;1296   	UART_WRITE(UART0,0x5a);
000008  4871              LDR      r0,|L21.464|
00000a  215a              MOVS     r1,#0x5a
00000c  4617              MOV      r7,r2                 ;1290
00000e  6001              STR      r1,[r0,#0]
;;;1297   	TIMER_Delay(TIMER0, 1000);
000010  217d              MOVS     r1,#0x7d
000012  00c9              LSLS     r1,r1,#3
000014  486f              LDR      r0,|L21.468|
000016  f7fffffe          BL       TIMER_Delay
;;;1298   	UART_WRITE(UART0,0xa5);
00001a  486d              LDR      r0,|L21.464|
00001c  21a5              MOVS     r1,#0xa5
00001e  6001              STR      r1,[r0,#0]
;;;1299   	TIMER_Delay(TIMER0, 1000);
000020  217d              MOVS     r1,#0x7d
000022  00c9              LSLS     r1,r1,#3
000024  486b              LDR      r0,|L21.468|
000026  f7fffffe          BL       TIMER_Delay
;;;1300   	UART_WRITE(UART0,0x04);
00002a  4869              LDR      r0,|L21.464|
00002c  2104              MOVS     r1,#4
00002e  6001              STR      r1,[r0,#0]
;;;1301   	TIMER_Delay(TIMER0, 1000);
000030  217d              MOVS     r1,#0x7d
000032  00c9              LSLS     r1,r1,#3
000034  4867              LDR      r0,|L21.468|
000036  f7fffffe          BL       TIMER_Delay
;;;1302   	UART_WRITE(UART0,0x02);
00003a  4865              LDR      r0,|L21.464|
00003c  2102              MOVS     r1,#2
00003e  6001              STR      r1,[r0,#0]
;;;1303   	TIMER_Delay(TIMER0, 1000);
000040  217d              MOVS     r1,#0x7d
000042  00c9              LSLS     r1,r1,#3
000044  4863              LDR      r0,|L21.468|
000046  f7fffffe          BL       TIMER_Delay
;;;1304   	UART_WRITE(UART0,cmd);
00004a  4861              LDR      r0,|L21.464|
00004c  6006              STR      r6,[r0,#0]
;;;1305   	TIMER_Delay(TIMER0, 1000);
00004e  217d              MOVS     r1,#0x7d
000050  00c9              LSLS     r1,r1,#3
000052  4860              LDR      r0,|L21.468|
000054  f7fffffe          BL       TIMER_Delay
;;;1306   	UART_WRITE(UART0,param0);
000058  485d              LDR      r0,|L21.464|
00005a  6005              STR      r5,[r0,#0]
;;;1307   	TIMER_Delay(TIMER0, 1000);
00005c  217d              MOVS     r1,#0x7d
00005e  00c9              LSLS     r1,r1,#3
000060  485c              LDR      r0,|L21.468|
000062  f7fffffe          BL       TIMER_Delay
;;;1308   	UART_WRITE(UART0,param1);
000066  485a              LDR      r0,|L21.464|
000068  6007              STR      r7,[r0,#0]
;;;1309   	TIMER_Delay(TIMER0, 1000);
00006a  217d              MOVS     r1,#0x7d
00006c  00c9              LSLS     r1,r1,#3
00006e  4859              LDR      r0,|L21.468|
000070  f7fffffe          BL       TIMER_Delay
;;;1310   	checksum = 0 -( 0x04 + 0x02 + cmd + param0 + param1);
000074  1970              ADDS     r0,r6,r5
000076  19c0              ADDS     r0,r0,r7
000078  1d80              ADDS     r0,r0,#6
00007a  4240              RSBS     r0,r0,#0
;;;1311   	UART_WRITE(UART0,checksum);
00007c  4954              LDR      r1,|L21.464|
00007e  b2c0              UXTB     r0,r0                 ;1310
000080  6008              STR      r0,[r1,#0]
;;;1312   
;;;1313   	if(cmd == 0x18)  // bt_mac
000082  2e18              CMP      r6,#0x18
000084  d006              BEQ      |L21.148|
;;;1314   	{
;;;1315   		p_tx = &Global_datas.bt_mac[0];
;;;1316   		
;;;1317   		for(count = 0; count < param0;count++)
;;;1318   		{ 
;;;1319   			tx_data = *p_tx;
;;;1320   			UART_WRITE(UART0,tx_data);
;;;1321   			TIMER_Delay(TIMER0, 1000);	
;;;1322   			p_tx++;
;;;1323   		}
;;;1324   	}
;;;1325   
;;;1326   	
;;;1327   	else if(cmd == 0x19)  // bt_name
000086  2e19              CMP      r6,#0x19
000088  d014              BEQ      |L21.180|
;;;1328   	{
;;;1329   		
;;;1330   		p_tx = &Global_datas.bt_name[0];
;;;1331   		for(count = 0; count < param0;count++)
;;;1332   		{ 
;;;1333   			tx_data = *p_tx;
;;;1334   			UART_WRITE(UART0,tx_data);
;;;1335   			TIMER_Delay(TIMER0, 1000);	
;;;1336   			p_tx++;
;;;1337   
;;;1338   		}
;;;1339   	}	
;;;1340   	else if(cmd == 0x1a)  // 4G verson
00008a  2e1a              CMP      r6,#0x1a
00008c  d023              BEQ      |L21.214|
;;;1341   	{
;;;1342   		p_tx = &Global_datas.FourG_version[0];
;;;1343   		for(count = 0; count < param0;count++)
;;;1344   		{ 
;;;1345   			tx_data = *p_tx;
;;;1346   			UART_WRITE(UART0,tx_data);
;;;1347   			TIMER_Delay(TIMER0, 1000);	
;;;1348   			p_tx++;
;;;1349   
;;;1350   		}
;;;1351   
;;;1352   	}
;;;1353   	else if(cmd == 0x1b)  // 4G mac
00008e  2e1b              CMP      r6,#0x1b
000090  d032              BEQ      |L21.248|
000092  e041              B        |L21.280|
                  |L21.148|
000094  4f50              LDR      r7,|L21.472|
000096  e00a              B        |L21.174|
                  |L21.152|
000098  494d              LDR      r1,|L21.464|
00009a  7838              LDRB     r0,[r7,#0]            ;1319
00009c  6008              STR      r0,[r1,#0]            ;1320
00009e  217d              MOVS     r1,#0x7d              ;1321
0000a0  00c9              LSLS     r1,r1,#3              ;1321
0000a2  484c              LDR      r0,|L21.468|
0000a4  f7fffffe          BL       TIMER_Delay
0000a8  1c64              ADDS     r4,r4,#1              ;1321
0000aa  b2e4              UXTB     r4,r4                 ;1317
0000ac  1c7f              ADDS     r7,r7,#1              ;1317
                  |L21.174|
0000ae  42ac              CMP      r4,r5                 ;1317
0000b0  d3f2              BCC      |L21.152|
0000b2  e031              B        |L21.280|
                  |L21.180|
0000b4  4f48              LDR      r7,|L21.472|
0000b6  3f29              SUBS     r7,r7,#0x29           ;1330
0000b8  e00a              B        |L21.208|
                  |L21.186|
0000ba  4945              LDR      r1,|L21.464|
0000bc  7838              LDRB     r0,[r7,#0]            ;1333
0000be  6008              STR      r0,[r1,#0]            ;1334
0000c0  217d              MOVS     r1,#0x7d              ;1335
0000c2  00c9              LSLS     r1,r1,#3              ;1335
0000c4  4843              LDR      r0,|L21.468|
0000c6  f7fffffe          BL       TIMER_Delay
0000ca  1c64              ADDS     r4,r4,#1              ;1335
0000cc  b2e4              UXTB     r4,r4                 ;1331
0000ce  1c7f              ADDS     r7,r7,#1              ;1331
                  |L21.208|
0000d0  42ac              CMP      r4,r5                 ;1331
0000d2  d3f2              BCC      |L21.186|
0000d4  e020              B        |L21.280|
                  |L21.214|
0000d6  4f40              LDR      r7,|L21.472|
0000d8  3729              ADDS     r7,r7,#0x29           ;1342
0000da  e00a              B        |L21.242|
                  |L21.220|
0000dc  493c              LDR      r1,|L21.464|
0000de  7838              LDRB     r0,[r7,#0]            ;1345
0000e0  6008              STR      r0,[r1,#0]            ;1346
0000e2  217d              MOVS     r1,#0x7d              ;1347
0000e4  00c9              LSLS     r1,r1,#3              ;1347
0000e6  483b              LDR      r0,|L21.468|
0000e8  f7fffffe          BL       TIMER_Delay
0000ec  1c64              ADDS     r4,r4,#1              ;1347
0000ee  b2e4              UXTB     r4,r4                 ;1343
0000f0  1c7f              ADDS     r7,r7,#1              ;1343
                  |L21.242|
0000f2  42ac              CMP      r4,r5                 ;1343
0000f4  d3f2              BCC      |L21.220|
0000f6  e00f              B        |L21.280|
                  |L21.248|
;;;1354   	{
;;;1355   		p_tx = &Global_datas.FourG_mac[0];
0000f8  4f37              LDR      r7,|L21.472|
0000fa  3752              ADDS     r7,r7,#0x52
;;;1356   		for(count = 0; count < param0;count++)
0000fc  e00a              B        |L21.276|
                  |L21.254|
;;;1357   		{ 
;;;1358   			tx_data = *p_tx;
;;;1359   			UART_WRITE(UART0,tx_data);
0000fe  4934              LDR      r1,|L21.464|
000100  7838              LDRB     r0,[r7,#0]            ;1358
000102  6008              STR      r0,[r1,#0]
;;;1360   			TIMER_Delay(TIMER0, 1000);	
000104  217d              MOVS     r1,#0x7d
000106  00c9              LSLS     r1,r1,#3
000108  4832              LDR      r0,|L21.468|
00010a  f7fffffe          BL       TIMER_Delay
00010e  1c64              ADDS     r4,r4,#1
000110  b2e4              UXTB     r4,r4                 ;1356
000112  1c7f              ADDS     r7,r7,#1              ;1356
                  |L21.276|
000114  42ac              CMP      r4,r5                 ;1356
000116  d3f2              BCC      |L21.254|
                  |L21.280|
;;;1361   			p_tx++;
;;;1362   
;;;1363   		}
;;;1364   
;;;1365   	}
;;;1366   	if(cmd == 0x02)  // read mcu version
000118  2e02              CMP      r6,#2
00011a  d10f              BNE      |L21.316|
;;;1367   	{
;;;1368   		p_tx = &mcu_version[0];
00011c  4f2f              LDR      r7,|L21.476|
;;;1369   		
;;;1370   		for(count = 0; count < param0;count++)
00011e  2400              MOVS     r4,#0
000120  e00a              B        |L21.312|
                  |L21.290|
;;;1371   		{ 
;;;1372   			tx_data = *p_tx;
;;;1373   			UART_WRITE(UART0,tx_data);
000122  492b              LDR      r1,|L21.464|
000124  7838              LDRB     r0,[r7,#0]            ;1372
000126  6008              STR      r0,[r1,#0]
;;;1374   			TIMER_Delay(TIMER0, 1000);	
000128  217d              MOVS     r1,#0x7d
00012a  00c9              LSLS     r1,r1,#3
00012c  4829              LDR      r0,|L21.468|
00012e  f7fffffe          BL       TIMER_Delay
000132  1c64              ADDS     r4,r4,#1
000134  b2e4              UXTB     r4,r4                 ;1370
000136  1c7f              ADDS     r7,r7,#1              ;1370
                  |L21.312|
000138  42ac              CMP      r4,r5                 ;1370
00013a  d3f2              BCC      |L21.290|
                  |L21.316|
;;;1375   			p_tx++;
;;;1376   		}
;;;1377   	}	
;;;1378   
;;;1379   	if(cmd == 0x03)  // read dsp version
00013c  2e03              CMP      r6,#3
00013e  d10f              BNE      |L21.352|
;;;1380   	{
;;;1381   		p_tx = &dsp_version[0];
000140  4f27              LDR      r7,|L21.480|
;;;1382   		
;;;1383   		for(count = 0; count < param0;count++)
000142  2400              MOVS     r4,#0
000144  e00a              B        |L21.348|
                  |L21.326|
;;;1384   		{ 
;;;1385   			tx_data = *p_tx;
;;;1386   			UART_WRITE(UART0,tx_data);
000146  4922              LDR      r1,|L21.464|
000148  7838              LDRB     r0,[r7,#0]            ;1385
00014a  6008              STR      r0,[r1,#0]
;;;1387   			TIMER_Delay(TIMER0, 1000);	
00014c  217d              MOVS     r1,#0x7d
00014e  00c9              LSLS     r1,r1,#3
000150  4820              LDR      r0,|L21.468|
000152  f7fffffe          BL       TIMER_Delay
000156  1c64              ADDS     r4,r4,#1
000158  b2e4              UXTB     r4,r4                 ;1383
00015a  1c7f              ADDS     r7,r7,#1              ;1383
                  |L21.348|
00015c  42ac              CMP      r4,r5                 ;1383
00015e  d3f2              BCC      |L21.326|
                  |L21.352|
;;;1388   			p_tx++;
;;;1389   		}
;;;1390   	}
;;;1391   	if(cmd == 0x21)  // read dsp version
000160  2e21              CMP      r6,#0x21
000162  d10f              BNE      |L21.388|
;;;1392   	{
;;;1393   		p_tx = __DATE__;
000164  a71f              ADR      r7,|L21.484|
;;;1394   		
;;;1395   		for(count = 0; count < param0;count++)
000166  2400              MOVS     r4,#0
000168  e00a              B        |L21.384|
                  |L21.362|
;;;1396   		{ 
;;;1397   			tx_data = *p_tx;
;;;1398   			UART_WRITE(UART0,tx_data);
00016a  4919              LDR      r1,|L21.464|
00016c  7838              LDRB     r0,[r7,#0]            ;1397
00016e  6008              STR      r0,[r1,#0]
;;;1399   			TIMER_Delay(TIMER0, 1000);	
000170  217d              MOVS     r1,#0x7d
000172  00c9              LSLS     r1,r1,#3
000174  4817              LDR      r0,|L21.468|
000176  f7fffffe          BL       TIMER_Delay
00017a  1c64              ADDS     r4,r4,#1
00017c  b2e4              UXTB     r4,r4                 ;1395
00017e  1c7f              ADDS     r7,r7,#1              ;1395
                  |L21.384|
000180  42ac              CMP      r4,r5                 ;1395
000182  d3f2              BCC      |L21.362|
                  |L21.388|
;;;1400   			p_tx++;
;;;1401   		}
;;;1402   	}
;;;1403   
;;;1404   	if(cmd == 0x22)  // read dsp version
000184  2e22              CMP      r6,#0x22
000186  d10f              BNE      |L21.424|
;;;1405   	{
;;;1406   		p_tx = __TIME__;
000188  a719              ADR      r7,|L21.496|
;;;1407   		
;;;1408   		for(count = 0; count < param0;count++)
00018a  2400              MOVS     r4,#0
00018c  e00a              B        |L21.420|
                  |L21.398|
;;;1409   		{ 
;;;1410   			tx_data = *p_tx;
;;;1411   			UART_WRITE(UART0,tx_data);
00018e  4910              LDR      r1,|L21.464|
000190  7838              LDRB     r0,[r7,#0]            ;1410
000192  6008              STR      r0,[r1,#0]
;;;1412   			TIMER_Delay(TIMER0, 1000);	
000194  217d              MOVS     r1,#0x7d
000196  00c9              LSLS     r1,r1,#3
000198  480e              LDR      r0,|L21.468|
00019a  f7fffffe          BL       TIMER_Delay
00019e  1c64              ADDS     r4,r4,#1
0001a0  b2e4              UXTB     r4,r4                 ;1408
0001a2  1c7f              ADDS     r7,r7,#1              ;1408
                  |L21.420|
0001a4  42ac              CMP      r4,r5                 ;1408
0001a6  d3f2              BCC      |L21.398|
                  |L21.424|
;;;1413   			p_tx++;
;;;1414   		}
;;;1415   	}
;;;1416   	
;;;1417   	if(cmd == 0x11)  // read sn
0001a8  2e11              CMP      r6,#0x11
0001aa  d110              BNE      |L21.462|
;;;1418   	{
;;;1419   		p_tx = Global_datas.SN;
0001ac  4e0a              LDR      r6,|L21.472|
0001ae  4f08              LDR      r7,|L21.464|
0001b0  36a5              ADDS     r6,r6,#0xa5
;;;1420   		
;;;1421   		for(count = 0; count < param0;count++)
0001b2  2400              MOVS     r4,#0
0001b4  e009              B        |L21.458|
                  |L21.438|
;;;1422   		{ 
;;;1423   			tx_data = *p_tx;
0001b6  7830              LDRB     r0,[r6,#0]
;;;1424   			UART_WRITE(UART0,tx_data);
0001b8  6038              STR      r0,[r7,#0]
;;;1425   			TIMER_Delay(TIMER0, 1000);	
0001ba  217d              MOVS     r1,#0x7d
0001bc  00c9              LSLS     r1,r1,#3
0001be  4805              LDR      r0,|L21.468|
0001c0  f7fffffe          BL       TIMER_Delay
0001c4  1c64              ADDS     r4,r4,#1
0001c6  b2e4              UXTB     r4,r4                 ;1421
0001c8  1c76              ADDS     r6,r6,#1              ;1421
                  |L21.458|
0001ca  42ac              CMP      r4,r5                 ;1421
0001cc  d3f3              BCC      |L21.438|
                  |L21.462|
;;;1426   			p_tx++;
;;;1427   		}
;;;1428   	}	
;;;1429   	
;;;1430   }
0001ce  bdf8              POP      {r3-r7,pc}
;;;1431   
                          ENDP

                  |L21.464|
                          DCD      0x40050000
                  |L21.468|
                          DCD      0x40010000
                  |L21.472|
                          DCD      Global_datas+0xc2
                  |L21.476|
                          DCD      mcu_version
                  |L21.480|
                          DCD      dsp_version
                  |L21.484|
0001e4  41756720          DCB      "Aug 19 2020",0
0001e8  31392032
0001ec  30323000
                  |L21.496|
0001f0  31353a32          DCB      "15:25:29",0
0001f4  353a3239
0001f8  00      
0001f9  00                DCB      0
0001fa  00                DCB      0
0001fb  00                DCB      0

                          AREA ||i.main||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                  main PROC
;;;1750   /*---------------------------------------------------------------------------------------------------------*/
;;;1751   int32_t main(void)
000000  b50e              PUSH     {r1-r3,lr}
;;;1752   {
;;;1753   	uint8_t ledtimecount = 0;
000002  2000              MOVS     r0,#0
;;;1754   	uint8_t resume_timecount = 0;
;;;1755   	uint8_t pte_rest_test_count = 3;
000004  9001              STR      r0,[sp,#4]
000006  2003              MOVS     r0,#3
;;;1756   	
;;;1757   	/* Init System, peripheral clock and multi-function I/O */
;;;1758   
;;;1759   	SYS_Init();
000008  9000              STR      r0,[sp,#0]
00000a  f7fffffe          BL       SYS_Init
;;;1760    	SysIdle();
00000e  f7fffffe          BL       SysIdle
;;;1761   
;;;1762   	
;;;1763   	PllSetMode(0); // low 25Mhz
;;;1764   
;;;1765   
;;;1766   	//SYS_Clock_Disable();
;;;1767   
;;;1768     	printf("\nmain\n");
000012  a092              ADR      r0,|L22.604|
000014  f7fffffe          BL       __2printf
;;;1769   
;;;1770   	printf("compile time: %s %s\r\n", __DATE__, __TIME__);
000018  a292              ADR      r2,|L22.612|
00001a  a195              ADR      r1,|L22.624|
00001c  a097              ADR      r0,|L22.636|
00001e  f7fffffe          BL       __2printf
;;;1771   
;;;1772   	
;;;1773   	printf("compile time: %d %s\r\n", Global_datas.sn_len, Global_datas.SN);
000022  4f9c              LDR      r7,|L22.660|
000024  a09c              ADR      r0,|L22.664|
000026  463a              MOV      r2,r7
000028  7bf9              LDRB     r1,[r7,#0xf]  ; Global_datas
00002a  3a19              SUBS     r2,r2,#0x19
00002c  f7fffffe          BL       __2printf
000030  4c9f              LDR      r4,|L22.688|
;;;1774   
;;;1775   	
;;;1776   	//Global_datas.inputmessage = IN_KEY_POWER_CP;
;;;1777   
;;;1778   	//Global_datas.bt_mac= "bt mac:12345678";
;;;1779   	//Global_datas.bt_name = s"bt name:MW-V";
;;;1780   	//Global_datas.name = "bt mac:12345678";
;;;1781   	//Global_datas.builddate = __DATE__;
;;;1782   
;;;1783   	
;;;1784   //	printf("compile time: %s\r\n", Global_datas.name);
;;;1785   
;;;1786   	
;;;1787   	//drv_Cmd_Send2Pte(0x19, 10, 0);
;;;1788   
;;;1789   	
;;;1790   	
;;;1791       while(1)
;;;1792       {
;;;1793   
;;;1794   		if(IsTimeOut(&IrLongPressTimer))
;;;1795   		{
;;;1796   			Global_datas.ir_bak_key = IN_KEY_NONE;
;;;1797   		}
;;;1798       	if(IsTimeOut(&SysTimer_50ms))
;;;1799       	{
;;;1800       		TimeOutSet(&SysTimer_50ms, 2000);
;;;1801   			ADC_FunctionTest();
;;;1802   			DcInDetect();
;;;1803   			BatteryChargeStateChcek();
;;;1804   			
;;;1805   			printf("volume = %d \n",Global_datas.volume);
;;;1806   
;;;1807   			if(Global_datas.PowerState.AdapterIn)
;;;1808   			{
;;;1809   				switch(Global_datas.PowerState.charge_state)
;;;1810   				{
;;;1811   					case CHARGE_STATE_ON:
;;;1812   						 drv_led_state1_onoff_red(1);
;;;1813   						 drv_led_state1_onoff_green(0);
;;;1814   						 break;
;;;1815   					case CHARGE_STATE_COMPLETE:
;;;1816   						 drv_led_state1_onoff_red(0);
;;;1817   						 drv_led_state1_onoff_green(1);	
;;;1818   						 break;
;;;1819   
;;;1820   					case CHARGE_STATE_NG:
;;;1821   						break;
;;;1822   					default:break;
;;;1823   				}
;;;1824   			}
;;;1825   			
;;;1826   			if((Global_datas.PowerState.battery_level == 0) && (Global_datas.state > SYS_PLAY_STATE_POWERUP) && (Global_datas.PowerState.AdapterIn == 0))
;;;1827   			{
;;;1828   				//Global_datas.inputmessage =  IN_KEY_POWER_CP;
;;;1829   			}
;;;1830   			else if((Global_datas.PowerState.battery_level < BAT_LEVEL_20_PERCENT) && (Global_datas.PowerState.battery_data >  batlevel_table[0])  && (Global_datas.volume > 8) && (Global_datas.PowerState.AdapterIn == 0))
;;;1831   			{
;;;1832   			 	Global_datas.inputmessage =  IN_KEY_DEFAULT_VOLUME_SET;
;;;1833   			}
;;;1834   
;;;1835   		}
;;;1836   
;;;1837   		if(IsTimeOut(&SysTimer_1s))
;;;1838   		{
;;;1839   			TimeOutSet(&SysTimer_1s, 500);
;;;1840   
;;;1841   			if(Global_datas.LedTestMode == 0)
;;;1842   			{
;;;1843   		       // if(Global_datas.g_4g_initing)
;;;1844   		       if((Global_datas.state == SYS_PLAY_STATE_POWERUP) || (Global_datas.state == SYS_PLAY_STATE_REBOOT))
;;;1845   				{
;;;1846   					srv_led_sys_initing();
;;;1847   				}
;;;1848   				else
;;;1849   				{
;;;1850   					srv_led_change_handler();
;;;1851   				}
;;;1852   			}
;;;1853   
;;;1854   
;;;1855   			if(IsTimeOut(&ModulePowerUpPinTimer))
;;;1856   			{
;;;1857   				drv_FourGmodel_power_key_SetLow();
;;;1858   			}
;;;1859   
;;;1860   			if(Global_datas.state == SYS_PLAY_STATE_SHUTTING_DOWN)
;;;1861   			{
;;;1862   				if(!IsTimeOut(&PoweroffLedTimer))
;;;1863   				{			
;;;1864   					if(ledtimecount)
;;;1865   					{
;;;1866   						PA12 = 1;
;;;1867   						PA13 = 1;
;;;1868   						PA1 = 1;
;;;1869   						ledtimecount = 0;
;;;1870   					}
;;;1871   					else
;;;1872   					{
;;;1873   						PA12 = 0;
;;;1874   						PA13 = 0;
;;;1875   						PA1 = 0;
;;;1876   						ledtimecount = 1;
;;;1877   					}
;;;1878   				}
;;;1879   				else
;;;1880   				{
;;;1881   					PA12 = 1;
;;;1882   					PA13 = 1;
;;;1883   					PA1 = 1;
;;;1884   					Drv_4GMoudle_PowerUp(0); // if timeout,turn off.
;;;1885   					TYM_drv_powerkeepon(0); 
;;;1886   					TYM_SysPower12V_3V3_onoff(0);
;;;1887   
;;;1888   					Global_datas.shoutting_down = 0;
;;;1889   					Global_datas.state = SYS_PLAY_STATE_IDLE;
;;;1890   
;;;1891   				    /* Unlock protected registers */
;;;1892   			    //	SYS_UnlockReg();
;;;1893   					/* Disable PLL first to avoid unstable when setting PLL */
;;;1894       			//	CLK_DisablePLL();
;;;1895   			   	// 	SYS_LockReg();
;;;1896   
;;;1897   					
;;;1898   					PllSetMode(0); // 25Mhz
;;;1899   				}
;;;1900   				
;;;1901   			}
;;;1902   
;;;1903   			if(IsTimeOut(&SubBoardHandshakeTimer))
;;;1904   			{
;;;1905   				Global_datas.SubBoard.subboard_online = 0;
;;;1906   				printf("SUB BOARD OFF\n");
;;;1907   			}			
;;;1908   		}
;;;1909   		
;;;1910   		if(Global_datas.key_led_blink)
;;;1911   		{
;;;1912   			Global_datas.key_led_blink = 0;
;;;1913   			if(Global_datas.LedTestMode == 0)
;;;1914   			{
;;;1915   				drv_err_led_on(1);
;;;1916   				TimeOutSet(&LedKeyBlinkTimer, 100);
;;;1917   			}
;;;1918   		}
;;;1919   
;;;1920   		if(IsTimeOut(&LedKeyBlinkTimer) && (Global_datas.LedTestMode == 0))
;;;1921   		{
;;;1922   			drv_err_led_on(0);
;;;1923   		}
;;;1924   
;;;1925   		if(Global_datas.mode_switching)
;;;1926   		{
;;;1927   			Global_datas.mode_switching = 0;
;;;1928   			drv_5825_mute_pin_set(0);  // mute
;;;1929   			TimeOutSet(&ModeSwitchTimer, 1000);
;;;1930   		}
;;;1931   
;;;1932   		if(IsTimeOut(&ModeSwitchTimer))
;;;1933   		{
;;;1934   			if(Global_datas.mute == 0)
;;;1935   			{
;;;1936   				drv_5825_mute_pin_set(1);  // unmute
;;;1937   			}
;;;1938   		}
;;;1939   
;;;1940   		if(Global_datas.inputmessage == IN_KEY_NONE)  // read IR key
;;;1941   		{
;;;1942   			Global_datas.inputmessage = GetIrKey();
;;;1943   			if(Global_datas.PteKeyTestMode)
000032  2600              MOVS     r6,#0
000034  4625              MOV      r5,r4                 ;1796
000036  3580              ADDS     r5,r5,#0x80           ;1796
000038  4628              MOV      r0,r5
00003a  30e0              ADDS     r0,r0,#0xe0
00003c  3420              ADDS     r4,r4,#0x20
00003e  9002              STR      r0,[sp,#8]
                  |L22.64|
000040  489c              LDR      r0,|L22.692|
000042  f7fffffe          BL       IsTimeOut
000046  2800              CMP      r0,#0                 ;1794
000048  d000              BEQ      |L22.76|
00004a  762e              STRB     r6,[r5,#0x18]         ;1796
                  |L22.76|
00004c  489a              LDR      r0,|L22.696|
00004e  f7fffffe          BL       IsTimeOut
000052  2800              CMP      r0,#0                 ;1798
000054  d03c              BEQ      |L22.208|
000056  217d              MOVS     r1,#0x7d              ;1800
000058  0109              LSLS     r1,r1,#4              ;1800
00005a  4897              LDR      r0,|L22.696|
00005c  f7fffffe          BL       TimeOutSet
000060  f7fffffe          BL       ADC_FunctionTest
000064  f7fffffe          BL       DcInDetect
000068  f7fffffe          BL       BatteryChargeStateChcek
00006c  7ce1              LDRB     r1,[r4,#0x13]         ;1805  ; Global_datas
00006e  a093              ADR      r0,|L22.700|
000070  f7fffffe          BL       __2printf
000074  7ce8              LDRB     r0,[r5,#0x13]         ;1807  ; Global_datas
000076  2800              CMP      r0,#0                 ;1807
000078  d010              BEQ      |L22.156|
00007a  7c68              LDRB     r0,[r5,#0x11]         ;1809  ; Global_datas
00007c  2801              CMP      r0,#1                 ;1809
00007e  d002              BEQ      |L22.134|
000080  2802              CMP      r0,#2                 ;1809
000082  d10b              BNE      |L22.156|
000084  e004              B        |L22.144|
                  |L22.134|
000086  2001              MOVS     r0,#1                 ;1812
000088  f7fffffe          BL       drv_led_state1_onoff_red
00008c  2000              MOVS     r0,#0                 ;1813
00008e  e003              B        |L22.152|
                  |L22.144|
000090  2000              MOVS     r0,#0                 ;1816
000092  f7fffffe          BL       drv_led_state1_onoff_red
000096  2001              MOVS     r0,#1                 ;1817
                  |L22.152|
000098  f7fffffe          BL       drv_led_state1_onoff_green
                  |L22.156|
00009c  7c28              LDRB     r0,[r5,#0x10]         ;1826  ; Global_datas
00009e  2800              CMP      r0,#0                 ;1826
0000a0  d00d              BEQ      |L22.190|
0000a2  2802              CMP      r0,#2                 ;1830
0000a4  d214              BCS      |L22.208|
                  |L22.166|
0000a6  4989              LDR      r1,|L22.716|
0000a8  68a8              LDR      r0,[r5,#8]            ;1830  ; Global_datas
0000aa  6809              LDR      r1,[r1,#0]            ;1830  ; batlevel_table
0000ac  4288              CMP      r0,r1                 ;1830
0000ae  d90f              BLS      |L22.208|
0000b0  7ce0              LDRB     r0,[r4,#0x13]         ;1830  ; Global_datas
0000b2  2808              CMP      r0,#8                 ;1830
0000b4  d90c              BLS      |L22.208|
0000b6  7ce8              LDRB     r0,[r5,#0x13]         ;1830  ; Global_datas
0000b8  2800              CMP      r0,#0                 ;1830
0000ba  d007              BEQ      |L22.204|
0000bc  e008              B        |L22.208|
                  |L22.190|
0000be  7e60              LDRB     r0,[r4,#0x19]         ;1826  ; Global_datas
0000c0  2802              CMP      r0,#2                 ;1826
0000c2  d9f0              BLS      |L22.166|
0000c4  7ce8              LDRB     r0,[r5,#0x13]         ;1826  ; Global_datas
0000c6  2800              CMP      r0,#0                 ;1826
0000c8  d002              BEQ      |L22.208|
0000ca  e7ec              B        |L22.166|
                  |L22.204|
0000cc  201c              MOVS     r0,#0x1c              ;1832
0000ce  75e0              STRB     r0,[r4,#0x17]         ;1832
                  |L22.208|
0000d0  487f              LDR      r0,|L22.720|
0000d2  f7fffffe          BL       IsTimeOut
0000d6  2800              CMP      r0,#0                 ;1837
0000d8  d03b              BEQ      |L22.338|
0000da  21ff              MOVS     r1,#0xff              ;1839
0000dc  31f5              ADDS     r1,r1,#0xf5           ;1839
0000de  487c              LDR      r0,|L22.720|
0000e0  f7fffffe          BL       TimeOutSet
0000e4  7c38              LDRB     r0,[r7,#0x10]         ;1841  ; Global_datas
0000e6  2800              CMP      r0,#0                 ;1841
0000e8  d106              BNE      |L22.248|
0000ea  7e60              LDRB     r0,[r4,#0x19]         ;1844  ; Global_datas
0000ec  2802              CMP      r0,#2                 ;1844
0000ee  d00e              BEQ      |L22.270|
0000f0  2803              CMP      r0,#3                 ;1844
0000f2  d00c              BEQ      |L22.270|
0000f4  f7fffffe          BL       srv_led_change_handler
                  |L22.248|
0000f8  4876              LDR      r0,|L22.724|
0000fa  f7fffffe          BL       IsTimeOut
0000fe  2800              CMP      r0,#0                 ;1855
000100  d001              BEQ      |L22.262|
000102  f7fffffe          BL       drv_FourGmodel_power_key_SetLow
                  |L22.262|
000106  7e60              LDRB     r0,[r4,#0x19]         ;1860  ; Global_datas
000108  2804              CMP      r0,#4                 ;1860
00010a  d003              BEQ      |L22.276|
00010c  e018              B        |L22.320|
                  |L22.270|
00010e  f7fffffe          BL       srv_led_sys_initing
000112  e7f1              B        |L22.248|
                  |L22.276|
000114  4870              LDR      r0,|L22.728|
000116  f7fffffe          BL       IsTimeOut
00011a  2800              CMP      r0,#0                 ;1862
00011c  d021              BEQ      |L22.354|
00011e  486f              LDR      r0,|L22.732|
000120  2101              MOVS     r1,#1                 ;1881
000122  6301              STR      r1,[r0,#0x30]         ;1881
000124  6341              STR      r1,[r0,#0x34]         ;1882
000126  6041              STR      r1,[r0,#4]            ;1883
000128  2000              MOVS     r0,#0                 ;1884
00012a  f7fffffe          BL       Drv_4GMoudle_PowerUp
00012e  2000              MOVS     r0,#0                 ;1885
000130  f7fffffe          BL       TYM_drv_powerkeepon
000134  2000              MOVS     r0,#0                 ;1886
000136  f7fffffe          BL       TYM_SysPower12V_3V3_onoff
00013a  7466              STRB     r6,[r4,#0x11]         ;1888
00013c  2001              MOVS     r0,#1                 ;1889
00013e  7660              STRB     r0,[r4,#0x19]         ;1889
                  |L22.320|
000140  4867              LDR      r0,|L22.736|
000142  f7fffffe          BL       IsTimeOut
000146  2800              CMP      r0,#0                 ;1903
000148  d003              BEQ      |L22.338|
00014a  7726              STRB     r6,[r4,#0x1c]         ;1905
00014c  a065              ADR      r0,|L22.740|
00014e  f7fffffe          BL       __2printf
                  |L22.338|
000152  7c20              LDRB     r0,[r4,#0x10]         ;1910  ; Global_datas
000154  2800              CMP      r0,#0                 ;1910
000156  d01c              BEQ      |L22.402|
000158  7426              STRB     r6,[r4,#0x10]         ;1912
00015a  7c38              LDRB     r0,[r7,#0x10]         ;1913  ; Global_datas
00015c  2800              CMP      r0,#0                 ;1913
00015e  d011              BEQ      |L22.388|
000160  e017              B        |L22.402|
                  |L22.354|
000162  9801              LDR      r0,[sp,#4]            ;1864
000164  2800              CMP      r0,#0                 ;1864
000166  d006              BEQ      |L22.374|
000168  495c              LDR      r1,|L22.732|
00016a  2001              MOVS     r0,#1                 ;1866
00016c  6308              STR      r0,[r1,#0x30]         ;1866
00016e  6348              STR      r0,[r1,#0x34]         ;1867
000170  6048              STR      r0,[r1,#4]            ;1868
000172  2000              MOVS     r0,#0                 ;1869
000174  e004              B        |L22.384|
                  |L22.374|
000176  4859              LDR      r0,|L22.732|
000178  6306              STR      r6,[r0,#0x30]         ;1873
00017a  6346              STR      r6,[r0,#0x34]         ;1874
00017c  6046              STR      r6,[r0,#4]            ;1875
00017e  2001              MOVS     r0,#1                 ;1876
                  |L22.384|
000180  9001              STR      r0,[sp,#4]            ;1876
000182  e7dd              B        |L22.320|
                  |L22.388|
000184  2001              MOVS     r0,#1                 ;1915
000186  f7fffffe          BL       drv_err_led_on
00018a  2164              MOVS     r1,#0x64              ;1916
00018c  4859              LDR      r0,|L22.756|
00018e  f7fffffe          BL       TimeOutSet
                  |L22.402|
000192  4858              LDR      r0,|L22.756|
000194  f7fffffe          BL       IsTimeOut
000198  2800              CMP      r0,#0                 ;1920
00019a  d004              BEQ      |L22.422|
00019c  7c38              LDRB     r0,[r7,#0x10]         ;1920  ; Global_datas
00019e  2800              CMP      r0,#0                 ;1920
0001a0  d101              BNE      |L22.422|
0001a2  f7fffffe          BL       drv_err_led_on
                  |L22.422|
0001a6  7d20              LDRB     r0,[r4,#0x14]         ;1925  ; Global_datas
0001a8  2800              CMP      r0,#0                 ;1925
0001aa  d008              BEQ      |L22.446|
0001ac  7526              STRB     r6,[r4,#0x14]         ;1927
0001ae  2000              MOVS     r0,#0                 ;1928
0001b0  f7fffffe          BL       drv_5825_mute_pin_set
0001b4  217d              MOVS     r1,#0x7d              ;1929
0001b6  00c9              LSLS     r1,r1,#3              ;1929
0001b8  484f              LDR      r0,|L22.760|
0001ba  f7fffffe          BL       TimeOutSet
                  |L22.446|
0001be  484e              LDR      r0,|L22.760|
0001c0  f7fffffe          BL       IsTimeOut
0001c4  2800              CMP      r0,#0                 ;1932
0001c6  d005              BEQ      |L22.468|
0001c8  7d60              LDRB     r0,[r4,#0x15]         ;1934  ; Global_datas
0001ca  2800              CMP      r0,#0                 ;1934
0001cc  d102              BNE      |L22.468|
0001ce  2001              MOVS     r0,#1                 ;1936
0001d0  f7fffffe          BL       drv_5825_mute_pin_set
                  |L22.468|
0001d4  7de0              LDRB     r0,[r4,#0x17]         ;1940  ; Global_datas
0001d6  2800              CMP      r0,#0                 ;1940
0001d8  d13d              BNE      |L22.598|
0001da  f7fffffe          BL       GetIrKey
0001de  75e0              STRB     r0,[r4,#0x17]         ;1942
0001e0  4601              MOV      r1,r0                 ;1942
0001e2  9802              LDR      r0,[sp,#8]
0001e4  7980              LDRB     r0,[r0,#6]  ; Global_datas
0001e6  2800              CMP      r0,#0
0001e8  d009              BEQ      |L22.510|
;;;1944   			{
;;;1945   				if((Global_datas.inputmessage >= IR_KEY_POWER) && (Global_datas.inputmessage <= IR_KEY_EQ))
0001ea  4608              MOV      r0,r1
0001ec  3865              SUBS     r0,r0,#0x65
0001ee  2811              CMP      r0,#0x11
0001f0  d805              BHI      |L22.510|
;;;1946   				{
;;;1947   					drv_Cmd_Send2Pte(0x27,Global_datas.inputmessage,0x00);
0001f2  2200              MOVS     r2,#0
0001f4  2027              MOVS     r0,#0x27
0001f6  f7fffffe          BL       drv_Cmd_Send2Pte
;;;1948   
;;;1949   					Global_datas.inputmessage  = IN_KEY_NONE;
0001fa  75e6              STRB     r6,[r4,#0x17]
0001fc  e001              B        |L22.514|
                  |L22.510|
;;;1950   				}
;;;1951   			}
;;;1952   		}
;;;1953   		
;;;1954   		if( Global_datas.inputmessage == IN_KEY_NONE)  // read gpio key
0001fe  2900              CMP      r1,#0
000200  d129              BNE      |L22.598|
                  |L22.514|
;;;1955   		{
;;;1956   			GetKeyEvent();
000202  f7fffffe          BL       GetKeyEvent
;;;1957   
;;;1958   			if(Global_datas.PteKeyTestMode)
000206  9802              LDR      r0,[sp,#8]
000208  7980              LDRB     r0,[r0,#6]  ; Global_datas
00020a  2800              CMP      r0,#0
00020c  d004              BEQ      |L22.536|
;;;1959   			{
;;;1960   				if(Global_datas.inputmessage == IN_KEY_POWER_SP)
00020e  7de0              LDRB     r0,[r4,#0x17]  ; Global_datas
000210  2801              CMP      r0,#1
000212  d005              BEQ      |L22.544|
;;;1961   				{
;;;1962   					drv_Cmd_Send2Pte(0x15,0x01,0x00);
;;;1963   					Global_datas.inputmessage = IN_KEY_NONE;
;;;1964   				}
;;;1965   				else if(Global_datas.inputmessage == IN_KEY_PAIR_SP)
000214  2804              CMP      r0,#4
000216  d006              BEQ      |L22.550|
                  |L22.536|
;;;1966   				{
;;;1967   					drv_Cmd_Send2Pte(0x15,0x02,0x00);
;;;1968   					Global_datas.inputmessage = IN_KEY_NONE;
;;;1969   				}
;;;1970   			}
;;;1971   
;;;1972   			
;;;1973   			if(((Global_datas.state == SYS_PLAY_STATE_IDLE || Global_datas.state == SYS_PLAY_STATE_POWERUP )&&(IN_KEY_POWER_CP != Global_datas.inputmessage)) || \
;;;1974   				(Global_datas.state == SYS_PLAY_STATE_SHUTTING_DOWN))
;;;1975   			{
;;;1976   				//Global_datas.inputmessage = IN_KEY_NONE;
;;;1977   			}
;;;1978   		}
;;;1979   		
;;;1980   		if(Global_datas.inputmessage == IN_KEY_NONE) // message deal
000218  7de0              LDRB     r0,[r4,#0x17]  ; Global_datas
00021a  2800              CMP      r0,#0
00021c  d009              BEQ      |L22.562|
00021e  e01a              B        |L22.598|
                  |L22.544|
000220  2200              MOVS     r2,#0                 ;1962
000222  2101              MOVS     r1,#1                 ;1962
000224  e001              B        |L22.554|
                  |L22.550|
000226  2200              MOVS     r2,#0                 ;1967
000228  2102              MOVS     r1,#2                 ;1967
                  |L22.554|
00022a  2015              MOVS     r0,#0x15              ;1962
00022c  f7fffffe          BL       drv_Cmd_Send2Pte
000230  75e6              STRB     r6,[r4,#0x17]         ;1963
                  |L22.562|
;;;1981   		{
;;;1982   			MessageProcess();
000232  f7fffffe          BL       MessageProcess
;;;1983   		}
;;;1984   
;;;1985   
;;;1986   		if(Global_datas.inputmessage == IN_KEY_NONE) // message deal
000236  7de0              LDRB     r0,[r4,#0x17]  ; Global_datas
000238  2800              CMP      r0,#0
00023a  d10c              BNE      |L22.598|
;;;1987   		{
;;;1988   			Pte_ProcessData();
00023c  f7fffffe          BL       Pte_ProcessData
;;;1989   			if(pte_rest_test_count)
000240  9800              LDR      r0,[sp,#0]
000242  2800              CMP      r0,#0
000244  d007              BEQ      |L22.598|
000246  1e40              SUBS     r0,r0,#1
;;;1990   			{
;;;1991   				pte_rest_test_count--;
000248  b2c0              UXTB     r0,r0
;;;1992   				drv_Cmd_Send2Pte(0x23,0,0); // REST CMD TO PTE
00024a  2200              MOVS     r2,#0
00024c  9000              STR      r0,[sp,#0]
00024e  4611              MOV      r1,r2
000250  2023              MOVS     r0,#0x23
000252  f7fffffe          BL       drv_Cmd_Send2Pte
                  |L22.598|
;;;1993   			}
;;;1994   		}		
;;;1995   
;;;1996   
;;;1997   
;;;1998   		Sysctrl();
000256  f7fffffe          BL       Sysctrl
00025a  e6f1              B        |L22.64|
;;;1999   
;;;2000   		
;;;2001   	}
;;;2002   
;;;2003   }
;;;2004   
                          ENDP

                  |L22.604|
00025c  0a6d6169          DCB      "\nmain\n",0
000260  6e0a00  
000263  00                DCB      0
                  |L22.612|
000264  31353a32          DCB      "15:25:29",0
000268  353a3239
00026c  00      
00026d  00                DCB      0
00026e  00                DCB      0
00026f  00                DCB      0
                  |L22.624|
000270  41756720          DCB      "Aug 19 2020",0
000274  31392032
000278  30323000
                  |L22.636|
00027c  636f6d70          DCB      "compile time: %s %s\r\n",0
000280  696c6520
000284  74696d65
000288  3a202573
00028c  2025730d
000290  0a00    
000292  00                DCB      0
000293  00                DCB      0
                  |L22.660|
                          DCD      Global_datas+0x180
                  |L22.664|
000298  636f6d70          DCB      "compile time: %d %s\r\n",0
00029c  696c6520
0002a0  74696d65
0002a4  3a202564
0002a8  2025730d
0002ac  0a00    
0002ae  00                DCB      0
0002af  00                DCB      0
                  |L22.688|
                          DCD      Global_datas
                  |L22.692|
                          DCD      IrLongPressTimer
                  |L22.696|
                          DCD      SysTimer_50ms
                  |L22.700|
0002bc  766f6c75          DCB      "volume = %d \n",0
0002c0  6d65203d
0002c4  20256420
0002c8  0a00    
0002ca  00                DCB      0
0002cb  00                DCB      0
                  |L22.716|
                          DCD      batlevel_table
                  |L22.720|
                          DCD      SysTimer_1s
                  |L22.724|
                          DCD      ModulePowerUpPinTimer
                  |L22.728|
                          DCD      PoweroffLedTimer
                  |L22.732|
                          DCD      0x50004200
                  |L22.736|
                          DCD      SubBoardHandshakeTimer
                  |L22.740|
0002e4  53554220          DCB      "SUB BOARD OFF\n",0
0002e8  424f4152
0002ec  44204f46
0002f0  460a00  
0002f3  00                DCB      0
                  |L22.756|
                          DCD      LedKeyBlinkTimer
                  |L22.760|
                          DCD      ModeSwitchTimer

                          AREA ||.data||, DATA, ALIGN=0

                  sys_err
000000  00                DCB      0x00

                          AREA ||i.__ARM_common_switch8||, COMGROUP=__ARM_common_switch8, CODE, READONLY, ALIGN=1

                  __ARM_common_switch8 PROC
000000  b430              PUSH     {r4,r5}
000002  4674              MOV      r4,lr
000004  1e64              SUBS     r4,r4,#1
000006  7825              LDRB     r5,[r4,#0]
000008  1c64              ADDS     r4,r4,#1
00000a  42ab              CMP      r3,r5
00000c  d200              BCS      |L135.16|
00000e  461d              MOV      r5,r3
                  |L135.16|
000010  5d63              LDRB     r3,[r4,r5]
000012  005b              LSLS     r3,r3,#1
000014  18e3              ADDS     r3,r4,r3
000016  bc30              POP      {r4,r5}
000018  4718              BX       r3
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\main.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_sys_err____REV16|
#line 388 "..\\lib\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___6_main_c_sys_err____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_sys_err____REVSH|
#line 402
|__asm___6_main_c_sys_err____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
