; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\main.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\main.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\lib\CMSIS\Include -I..\lib\Device\Nuvoton\NUC029xGE\Include -I..\lib\StdDriver\inc -I..\src\core\include -I..\src\driver\include -I..\src\io\include -I..\src\global -I..\src\server\include -I..\src\driver\audio -D__UVISION_VERSION=522 --omf_browse=.\obj\main.crf ..\main.c]
                          THUMB

                          AREA ||i.AMP_FaultPinDetectInit||, CODE, READONLY, ALIGN=2

                  AMP_FaultPinDetectInit PROC
;;;136    
;;;137    void AMP_FaultPinDetectInit(void)
000000  b510              PUSH     {r4,lr}
;;;138    {
;;;139    	GPIO_SetMode(PF, BIT2, GPIO_MODE_INPUT);	
000002  2200              MOVS     r2,#0
000004  2104              MOVS     r1,#4
000006  4802              LDR      r0,|L1.16|
000008  f7fffffe          BL       GPIO_SetMode
;;;140    }
00000c  bd10              POP      {r4,pc}
;;;141    
                          ENDP

00000e  0000              DCW      0x0000
                  |L1.16|
                          DCD      0x50004140

                          AREA ||i.Amplifier_open||, CODE, READONLY, ALIGN=2

                  Amplifier_open PROC
;;;142    
;;;143    void Amplifier_open(void)
000000  b510              PUSH     {r4,lr}
;;;144    {
;;;145    	GPIO_SetMode(PC, BIT1, GPIO_MODE_OUTPUT);	
000002  4c0c              LDR      r4,|L2.52|
000004  2201              MOVS     r2,#1
000006  2102              MOVS     r1,#2
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       GPIO_SetMode
;;;146    	GPIO_SetMode(PC, BIT13, GPIO_MODE_OUTPUT);
00000e  2201              MOVS     r2,#1
000010  0351              LSLS     r1,r2,#13
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       GPIO_SetMode
;;;147    	GPIO_SetMode(PB, BIT14, GPIO_MODE_OUTPUT);
000018  4806              LDR      r0,|L2.52|
00001a  2201              MOVS     r2,#1
00001c  0391              LSLS     r1,r2,#14
00001e  3840              SUBS     r0,r0,#0x40
000020  f7fffffe          BL       GPIO_SetMode
;;;148    	PC1 = 1;
000024  4904              LDR      r1,|L2.56|
000026  2001              MOVS     r0,#1
000028  6048              STR      r0,[r1,#4]
;;;149    	PC13 = 1;
00002a  6348              STR      r0,[r1,#0x34]
;;;150    	PB14 = 1;
00002c  4902              LDR      r1,|L2.56|
00002e  3940              SUBS     r1,r1,#0x40
000030  6388              STR      r0,[r1,#0x38]
;;;151    }
000032  bd10              POP      {r4,pc}
;;;152    
                          ENDP

                  |L2.52|
                          DCD      0x50004080
                  |L2.56|
                          DCD      0x50004280

                          AREA ||i.IoKeyProcess||, CODE, READONLY, ALIGN=2

                  IoKeyProcess PROC
;;;294    
;;;295    void IoKeyProcess(void)
000000  b570              PUSH     {r4-r6,lr}
;;;296    {
;;;297    
;;;298    	if(((Global_datas.g_mode_status == POWER_IDLE_MODE || Global_datas.g_mode_status == POWER_ON_MODE )&&(IN_KEY_POWER_CP != IoKeyInputmessage)) || (Global_datas.shoutting_down))
000002  4c1d              LDR      r4,|L3.120|
000004  4d1d              LDR      r5,|L3.124|
000006  79e1              LDRB     r1,[r4,#7]  ; Global_datas
000008  7828              LDRB     r0,[r5,#0]
00000a  290e              CMP      r1,#0xe
00000c  d001              BEQ      |L3.18|
00000e  2900              CMP      r1,#0
000010  d101              BNE      |L3.22|
                  |L3.18|
000012  2802              CMP      r0,#2
000014  d12b              BNE      |L3.110|
                  |L3.22|
000016  7c61              LDRB     r1,[r4,#0x11]  ; Global_datas
000018  2900              CMP      r1,#0
00001a  d128              BNE      |L3.110|
;;;299        {
;;;300    		return;
;;;301    	}
;;;302    
;;;303    	if(IoKeyInputmessage)
00001c  2800              CMP      r0,#0
00001e  d024              BEQ      |L3.106|
;;;304    	{
;;;305    		switch(IoKeyInputmessage)
000020  2801              CMP      r0,#1
000022  d012              BEQ      |L3.74|
000024  2802              CMP      r0,#2
000026  d016              BEQ      |L3.86|
000028  2804              CMP      r0,#4
00002a  d002              BEQ      |L3.50|
00002c  2805              CMP      r0,#5
00002e  d11c              BNE      |L3.106|
000030  e005              B        |L3.62|
                  |L3.50|
;;;306    		{
;;;307    			case IN_KEY_PAIR_SP:
;;;308    				printf("pari key sp\n");
000032  a013              ADR      r0,|L3.128|
000034  f7fffffe          BL       __2printf
;;;309    				drv_wifi_4g_switch_cmd_send();
000038  f7fffffe          BL       drv_wifi_4g_switch_cmd_send
;;;310    				break;
00003c  e015              B        |L3.106|
                  |L3.62|
;;;311    			case IN_KEY_PAIR_CP:
;;;312    				printf("pari key cp\n");
00003e  a014              ADR      r0,|L3.144|
000040  f7fffffe          BL       __2printf
;;;313    				drv_pairing_cmd_send();
000044  f7fffffe          BL       drv_pairing_cmd_send
;;;314    				
;;;315    				break;
000048  e00f              B        |L3.106|
                  |L3.74|
;;;316    			case IN_KEY_POWER_SP:
;;;317    				printf("power key sp\n");
00004a  a015              ADR      r0,|L3.160|
00004c  f7fffffe          BL       __2printf
;;;318    				srv_key_mode_handler();
000050  f7fffffe          BL       srv_key_mode_handler
;;;319    				break;
000054  e009              B        |L3.106|
                  |L3.86|
;;;320    			case IN_KEY_POWER_CP:
;;;321    				printf("power key cp\n");	
000056  a016              ADR      r0,|L3.176|
000058  f7fffffe          BL       __2printf
;;;322    				if(Global_datas.g_mode_status == POWER_IDLE_MODE)
00005c  79e0              LDRB     r0,[r4,#7]  ; Global_datas
00005e  280e              CMP      r0,#0xe
000060  d006              BEQ      |L3.112|
;;;323    				{
;;;324    					SYS_Status();
;;;325    				}
;;;326    
;;;327    				else
;;;328    				{
;;;329    					PowerOff();
000062  f7fffffe          BL       PowerOff
;;;330    					SysIdle();
000066  f7fffffe          BL       SysIdle
                  |L3.106|
;;;331    				}
;;;332    				break;
;;;333    
;;;334    		  	default:break;
;;;335    		}
;;;336    	}
;;;337    
;;;338    	IoKeyInputmessage = 0;
00006a  2000              MOVS     r0,#0
00006c  7028              STRB     r0,[r5,#0]
                  |L3.110|
;;;339    		
;;;340    }
00006e  bd70              POP      {r4-r6,pc}
                  |L3.112|
000070  f7fffffe          BL       SYS_Status
000074  e7f9              B        |L3.106|
;;;341    
                          ENDP

000076  0000              DCW      0x0000
                  |L3.120|
                          DCD      Global_datas+0x20
                  |L3.124|
                          DCD      IoKeyInputmessage
                  |L3.128|
000080  70617269          DCB      "pari key sp\n",0
000084  206b6579
000088  2073700a
00008c  00      
00008d  00                DCB      0
00008e  00                DCB      0
00008f  00                DCB      0
                  |L3.144|
000090  70617269          DCB      "pari key cp\n",0
000094  206b6579
000098  2063700a
00009c  00      
00009d  00                DCB      0
00009e  00                DCB      0
00009f  00                DCB      0
                  |L3.160|
0000a0  706f7765          DCB      "power key sp\n",0
0000a4  72206b65
0000a8  79207370
0000ac  0a00    
0000ae  00                DCB      0
0000af  00                DCB      0
                  |L3.176|
0000b0  706f7765          DCB      "power key cp\n",0
0000b4  72206b65
0000b8  79206370
0000bc  0a00    
0000be  00                DCB      0
0000bf  00                DCB      0

                          AREA ||i.MessageProcess||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  MessageProcess PROC
;;;847    #endif
;;;848    void MessageProcess(void)
000000  b5f0              PUSH     {r4-r7,lr}
;;;849    {
000002  b085              SUB      sp,sp,#0x14
;;;850    	sCoreMsg msg;
;;;851    	
;;;852      	uint8_t bat_val[2];
;;;853    
;;;854    	if(Core_Msg_Get(&msg))
000004  4668              MOV      r0,sp
000006  f7fffffe          BL       Core_Msg_Get
00000a  2800              CMP      r0,#0
00000c  d024              BEQ      |L4.88|
;;;855    		{
;;;856            // deal with message
;;;857            switch(msg.msg)
00000e  9800              LDR      r0,[sp,#0]
000010  2501              MOVS     r5,#1
;;;858    	        {
;;;859    	            case MSG_4G_SYS_STATE_IND:
;;;860    					
;;;861    					printf("MSG_4G_SYS_STATE_IND:msg.param0 = %x, msg.param1 = %x \n",msg.param0,msg.param1);
000012  2607              MOVS     r6,#7
000014  270b              MOVS     r7,#0xb
;;;862    					
;;;863    	                if((msg.param0 == 0x08) && (msg.param1 == 0x00))   // 4G handshake
;;;864    	                {
;;;865    						Global_datas.inputmessage = IN_KEY_INIT_FINISH_CMD;
000016  4cb9              LDR      r4,|L4.764|
000018  2801              CMP      r0,#1                 ;857
00001a  d005              BEQ      |L4.40|
00001c  2802              CMP      r0,#2                 ;857
00001e  d11b              BNE      |L4.88|
;;;866    					} 
;;;867    					else if((msg.param0 == 0x09) && (msg.param1 == 0x01))  // check battery level  
;;;868    				    {
;;;869    						//Cmd_Send2FourG(0x09,Global_datas.PowerState.battery_level, Global_datas.PowerState.AdapterIn);  //Param0: barrery level (1-10)  1到10 对应 10%～ 100%  十个等级   ;Param1： 1 适配器插入，0 未插
;;;870    						//printf("battery_level = %x \n",Global_datas.PowerState.battery_level);
;;;871    						//printf("AdapterIn     = %x \n",Global_datas.PowerState.AdapterIn);
;;;872    					}
;;;873    					
;;;874    					else if(msg.param0 == 0x07)   // set volume
;;;875    	        		{
;;;876    	                	// vol
;;;877    						printf("0x07, msg.param1 = %x \n",msg.param1);
;;;878    						
;;;879    						if(msg.param1)
;;;880    						{
;;;881    							Global_datas.volume = msg.param1;
;;;882    							Drv_Dap_vol_set(Global_datas.volume);
;;;883    							Global_datas.mute = 0;
;;;884    							drv_5825_mute_pin_set(1);
;;;885    						}
;;;886    						else
;;;887    						{
;;;888    							Global_datas.volume = 0;
;;;889    							Drv_Dap_vol_set(Global_datas.volume);
;;;890    							Global_datas.mute = 1;
;;;891    							drv_5825_mute_pin_set(0);
;;;892    						}
;;;893    						
;;;894    					}
;;;895    					else if(msg.param0 == 0x04 ) // mute set
;;;896    					{
;;;897    	                	
;;;898    					}
;;;899    					else if(msg.param0 == 0x0d)  // 4G GO TO POWER OFF , NEED TO POWER DOWN 4G VCC
;;;900    					{
;;;901    						Global_datas.inputmessage = IN_KEY_TURNOFF_4G_MOUDLE;
;;;902    						printf("IN_KEY_TURNOFF_4G_MOUDLE \n");
;;;903    					}
;;;904    					else if(msg.param0 == 0x06)  // sys status
;;;905    					{
;;;906    						if(msg.param1 == 0x06)
;;;907    						{
;;;908    		                	Global_datas.g_mode_status = BT_MODE;
;;;909    							printf("0x06, msg.param1 = %x \n",msg.param1);
;;;910    							//Drv_Dap_vol_set(VOLUME_DEFAULT);
;;;911    							
;;;912    						}
;;;913    					
;;;914    						if (msg.param1 == 0x07)
;;;915    						{
;;;916    		                	Global_datas.g_mode_status = BT_CONNECTED_MODE;
;;;917    							printf("0x06, msg.param1 = %x \n",msg.param1);
;;;918    						}
;;;919    						if (msg.param1 == 0x02)
;;;920    						{
;;;921    		                	Global_datas.g_mode_status = WIFI_CONNECTED_MODE;
;;;922    							printf("0x06, msg.param1 = %x \n",msg.param1);
;;;923    						}
;;;924    						if (msg.param1 == 0x04)
;;;925    						{
;;;926    		                	Global_datas.g_mode_status = WIFI_MODE;
;;;927    		                	
;;;928    						printf("0x06, msg.param1 = %x \n",msg.param1);
;;;929    						}
;;;930    						if (msg.param1 == 0x05)
;;;931    						{
;;;932    		                	Global_datas.g_mode_status = WIFI_CONNECTING_MODE;
;;;933    		                	
;;;934    						printf("0x06, msg.param1 = %x \n",msg.param1);
;;;935    						}
;;;936    						if (msg.param1 == 0x011)
;;;937    						{
;;;938    		                	Global_datas.g_mode_status = FOURG_CONNECTED_MODE;
;;;939    							printf("0x06, msg.param1 = %x \n",msg.param1);
;;;940    						}
;;;941    						if (msg.param1 == 0x012)
;;;942    						{
;;;943    		                	Global_datas.g_mode_status = FOURG_MODE;
;;;944    							printf("0x06, msg.param1 = %x \n",msg.param1);
;;;945    						}
;;;946    						if (msg.param1 == 0x0B)
;;;947    						{
;;;948    		                	Global_datas.g_mode_status = SYSTEM_UPDATING;
;;;949    		                	
;;;950    						printf("0x06, msg.param1 = %x \n",msg.param1);
;;;951    						}
;;;952    						if ((msg.param1 == 0x09) || (msg.param1 == 0x08) || (msg.param1 == 0x16))
;;;953    						{
;;;954    		                	Global_datas.g_mode_status = SYS_LOW_POWER;
;;;955    		                	
;;;956    						printf("0x06, msg.param1 = %x \n",msg.param1);
;;;957    						}
;;;958    						
;;;959    					}
;;;960    					else if(msg.param0 == 0x20) // check version
;;;961    					{
;;;962    						Cmd_Send2FourG(0x20,0x0,0x1);  //version 0.0.1
;;;963    					}
;;;964    	            break;
;;;965    
;;;966    				
;;;967    
;;;968    			 	case MSG_MCU1_SYS_STATE_IND:
;;;969    					//printf("MSG_MCU1_SYS_STATE_IND:msg.param0 = %x, msg.param1 = %x \n",msg.param0,msg.param1);
;;;970    					if((msg.param0 == 0x01) && (msg.param1 == 0x00))  // check power state
000020  9801              LDR      r0,[sp,#4]
000022  2801              CMP      r0,#1
000024  d07e              BEQ      |L4.292|
000026  e097              B        |L4.344|
                  |L4.40|
000028  a0b5              ADR      r0,|L4.768|
00002a  9a02              LDR      r2,[sp,#8]            ;861
00002c  9901              LDR      r1,[sp,#4]            ;861
00002e  f7fffffe          BL       __2printf
000032  9801              LDR      r0,[sp,#4]            ;863
000034  2808              CMP      r0,#8                 ;863
000036  d011              BEQ      |L4.92|
000038  2809              CMP      r0,#9                 ;867
00003a  d00d              BEQ      |L4.88|
00003c  2807              CMP      r0,#7                 ;874
00003e  d012              BEQ      |L4.102|
000040  2804              CMP      r0,#4                 ;895
000042  d009              BEQ      |L4.88|
000044  280d              CMP      r0,#0xd               ;899
000046  d026              BEQ      |L4.150|
000048  2806              CMP      r0,#6                 ;904
00004a  d02a              BEQ      |L4.162|
00004c  2820              CMP      r0,#0x20              ;960
00004e  d103              BNE      |L4.88|
000050  2201              MOVS     r2,#1                 ;962
000052  2100              MOVS     r1,#0                 ;962
000054  f7fffffe          BL       Cmd_Send2FourG
                  |L4.88|
;;;971    					{
;;;972    						drv_Cmd_Send2NCU031(0x01,Global_datas.g_PowerStatus.bat_status,Global_datas.g_PowerStatus.bat_value);
;;;973    					}
;;;974    
;;;975    					if((msg.param0 == 0x03) && (msg.param1 == 0x03)) // VOL--
;;;976    					{
;;;977    						Global_datas.inputmessage = IN_KEY_VOL_SUB_S;
;;;978    						printf("VOL-\n");
;;;979    					}
;;;980    					
;;;981    					if((msg.param0 == 0x03) && (msg.param1 == 0x02))  // V+
;;;982    					{
;;;983    						Global_datas.inputmessage = IN_KEY_VOL_ADD_S;
;;;984    						printf("VOL+\n");
;;;985    					}
;;;986    
;;;987    					if((msg.param0 == 0x03) && (msg.param1 == 0x15)) //wifi mode
;;;988    					{
;;;989    
;;;990    						printf("FourG_WIFI_CHANNEL\n");
;;;991    						Global_datas.inputmessage = IN_KEY_MW_RADIO_MODE_S;
;;;992    					}
;;;993    					if((msg.param0 == 0x03) && (msg.param1 == 0x16)) //BT mode
;;;994    					{
;;;995    						printf("BT_CHANNEL\n");
;;;996    						Global_datas.inputmessage = IN_KEY_BT_MODE_S;
;;;997    					}
;;;998    					if((msg.param0 == 0x03) && (msg.param1 == 0x17)) //AUX mode
;;;999    					{
;;;1000   						printf("AUXIN_CHANNEL\n");
;;;1001   						Global_datas.inputmessage = IN_KEY_AUX_MODE_S;
;;;1002   					
;;;1003   					}
;;;1004   					if((msg.param0 == 0x03) && (msg.param1 == 0x18)) //FM mode
;;;1005   					{
;;;1006   						printf("FM_CHANNEL\n");
;;;1007   						Global_datas.inputmessage = IN_KEY_FM_MODE_S;
;;;1008   											}
;;;1009   					if((msg.param0 == 0x03) && (msg.param1 == 0x31)) // NEXT CHANNEL
;;;1010   					{
;;;1011   						Global_datas.inputmessage = IN_KEY_RADIO_NEXT_S;
;;;1012   								
;;;1013   					}
;;;1014   					if((msg.param0 == 0x03) && (msg.param1 == 0x32))// PRE CHANNEL
;;;1015   					{
;;;1016   						Global_datas.inputmessage = IN_KEY_RADIO_PREV_S;
;;;1017   					
;;;1018   					}
;;;1019   					if((msg.param0 == 0x03) && (msg.param1 == 0x56)) // PLAY/PAUSE
;;;1020   					{
;;;1021   						Global_datas.inputmessage = IN_KEY_PLAY_S;
;;;1022   					}
;;;1023   					
;;;1024   					if((msg.param0 == 0x03) && (msg.param1 == 0x0d)) // NEXT SONG
;;;1025   					{
;;;1026   						Global_datas.inputmessage = IN_KEY_NEXT_SONG_S;
;;;1027   								
;;;1028   					}
;;;1029   					if((msg.param0 == 0x03) && (msg.param1 == 0x0e))// PREV SONG
;;;1030   					{
;;;1031   						Global_datas.inputmessage = IN_KEY_PREV_SONG_S;
;;;1032   					
;;;1033   					}
;;;1034   
;;;1035   					
;;;1036   					
;;;1037   					if((msg.param0 == 0x03) && (msg.param1 == 0xC1)) //inside
;;;1038   					{
;;;1039   						printf("inside\n");
;;;1040   						Global_datas.inputmessage = IN_KEY_EQ_INDOOR_S;
;;;1041   					}
;;;1042   					if((msg.param0 == 0x03) && (msg.param1 == 0xC2)) //outside
;;;1043   					{
;;;1044   
;;;1045   						printf("outside\n");
;;;1046   						Global_datas.inputmessage = IN_KEY_EQ_OUTDOOR_S;
;;;1047   					}
;;;1048   					
;;;1049   					if((msg.param0 == 0x03) && (msg.param1 == 0xC8))
;;;1050   					{
;;;1051   
;;;1052   						printf("FM UP\n");
;;;1053   						Global_datas.inputmessage = IN_KEY_FM_NEXT_FREQ_S;
;;;1054   					}
;;;1055   
;;;1056   					if((msg.param0 == 0x03) && (msg.param1 == 0xC9))
;;;1057   					{
;;;1058   
;;;1059   						printf("FM DOWN\n");
;;;1060   						Global_datas.inputmessage = IN_KEY_FM_PREV_FREQ_S;
;;;1061   					}	
;;;1062   					
;;;1063   					if((msg.param0 == 0x03) && (msg.param1 == 0xCB))
;;;1064   					{
;;;1065   
;;;1066   						printf("FM LONG PRESS\n");
;;;1067   						Global_datas.inputmessage = IN_KEY_AUTO_SEARCH_S;
;;;1068   					}	
;;;1069   
;;;1070   
;;;1071   					
;;;1072   
;;;1073   					if((msg.param0 == 0x03) && (msg.param1 == 0x62)) // MIC key  single press
;;;1074   					{
;;;1075   						Cmd_Send2FourG(0x03,0x62,0);
;;;1076   
;;;1077   						printf("mic key press\n");
;;;1078   					}
;;;1079   					else if((msg.param0 == 0x03) && (msg.param1 == 0x63)) // MIC long press
;;;1080   					{
;;;1081   						Cmd_Send2FourG(0x03,0x63,0);
;;;1082   						
;;;1083   						printf("mic key long press\n");
;;;1084   					}
;;;1085   					else if((msg.param0 == 0x03) && (msg.param1 == 0x64)) // MIC long press release
;;;1086   					{
;;;1087   						Cmd_Send2FourG(0x03,0x64,0);					
;;;1088   						printf("mic key long release\n");
;;;1089   					}					
;;;1090   
;;;1091   
;;;1092   /*
;;;1093     	控制盒每3秒向主机发送一次握手信号，主机返回当前机器状态。
;;;1094     	0XCA + XX    其中XX包含当前控制盒硬开关位置:
;;;1095   	BIT 0~3 代表模式为， 0 = 空； 1 WIFI ; 2 FM; 3 BT; 4 AUX.
;;;1096   	BIT 4~7 代表EQ模式，0 = 空，1 INDOOR;  2 OUTDOOR
;;;1097   
;;;1098   */
;;;1099   					if((msg.param0 == 0x03) && (msg.param1 == 0xCA)) // handshake
;;;1100   					{
;;;1101   						if(Global_datas.SubBoard.subboard_online == 0)  // first in
;;;1102   						{
;;;1103   						 	//drv_SendAllstateToSubboard();
;;;1104   							SendFmFreqToSubBoard();
;;;1105   							printf("SUB BOARD ON\n");
;;;1106   
;;;1107   							Global_datas.SubBoard.eq_mode = msg.param2 >> 4;
;;;1108   							Global_datas.SubBoard.playmode = msg.param2 & 0x0f;
;;;1109   							Global_datas.SubBoard.subboard_online = 1;
;;;1110   							printf("msg.param1 = %d \n",msg.param2);
;;;1111   							printf("play_mode = %d \n",Global_datas.SubBoard.playmode);							
;;;1112   						}
;;;1113   						
;;;1114   
;;;1115   
;;;1116   						
;;;1117   						TimeOutSet(&SubBoardHandshakeTimer, 4000);
;;;1118   						//drv_Cmd_Send2NCU031(msg.param0,msg.param1,msg.param2);//
;;;1119   					}					
;;;1120   					
;;;1121   	            break;
;;;1122   					
;;;1123   	            default:
;;;1124   	             break;
;;;1125   	        }
;;;1126       	}	
;;;1127   }
000058  b005              ADD      sp,sp,#0x14
00005a  bdf0              POP      {r4-r7,pc}
                  |L4.92|
00005c  9802              LDR      r0,[sp,#8]            ;863
00005e  2800              CMP      r0,#0                 ;863
000060  d1fa              BNE      |L4.88|
000062  202f              MOVS     r0,#0x2f              ;865
000064  e0ca              B        |L4.508|
                  |L4.102|
000066  a0b4              ADR      r0,|L4.824|
000068  9902              LDR      r1,[sp,#8]            ;877
00006a  f7fffffe          BL       __2printf
00006e  9802              LDR      r0,[sp,#8]            ;879
000070  2600              MOVS     r6,#0                 ;879
000072  2800              CMP      r0,#0                 ;879
000074  d006              BEQ      |L4.132|
000076  b2c0              UXTB     r0,r0                 ;881
000078  74e0              STRB     r0,[r4,#0x13]         ;881
00007a  f7fffffe          BL       Drv_Dap_vol_set
00007e  7566              STRB     r6,[r4,#0x15]         ;883
000080  2001              MOVS     r0,#1                 ;884
000082  e005              B        |L4.144|
                  |L4.132|
000084  4630              MOV      r0,r6                 ;888
000086  74e6              STRB     r6,[r4,#0x13]         ;888
000088  f7fffffe          BL       Drv_Dap_vol_set
00008c  7565              STRB     r5,[r4,#0x15]         ;890
00008e  2000              MOVS     r0,#0                 ;891
                  |L4.144|
000090  f7fffffe          BL       drv_5825_mute_pin_set
                  |L4.148|
000094  e7e0              B        |L4.88|
                  |L4.150|
000096  201a              MOVS     r0,#0x1a              ;901
000098  75e0              STRB     r0,[r4,#0x17]         ;901
00009a  a0ad              ADR      r0,|L4.848|
00009c  f7fffffe          BL       __2printf
0000a0  e7da              B        |L4.88|
                  |L4.162|
0000a2  9802              LDR      r0,[sp,#8]            ;906
0000a4  2806              CMP      r0,#6                 ;906
0000a6  d104              BNE      |L4.178|
0000a8  2106              MOVS     r1,#6                 ;908
0000aa  71e1              STRB     r1,[r4,#7]            ;908
0000ac  a0af              ADR      r0,|L4.876|
0000ae  f7fffffe          BL       __2printf
                  |L4.178|
0000b2  9802              LDR      r0,[sp,#8]            ;914
0000b4  2807              CMP      r0,#7                 ;914
0000b6  d104              BNE      |L4.194|
0000b8  4631              MOV      r1,r6                 ;916
0000ba  71e6              STRB     r6,[r4,#7]            ;916
0000bc  a0ab              ADR      r0,|L4.876|
0000be  f7fffffe          BL       __2printf
                  |L4.194|
0000c2  9802              LDR      r0,[sp,#8]            ;919
0000c4  2802              CMP      r0,#2                 ;919
0000c6  d104              BNE      |L4.210|
0000c8  2102              MOVS     r1,#2                 ;921
0000ca  71e1              STRB     r1,[r4,#7]            ;921
0000cc  a0a7              ADR      r0,|L4.876|
0000ce  f7fffffe          BL       __2printf
                  |L4.210|
0000d2  9802              LDR      r0,[sp,#8]            ;924
0000d4  2804              CMP      r0,#4                 ;924
0000d6  d104              BNE      |L4.226|
0000d8  4601              MOV      r1,r0                 ;928
0000da  71e5              STRB     r5,[r4,#7]            ;926
0000dc  a0a3              ADR      r0,|L4.876|
0000de  f7fffffe          BL       __2printf
                  |L4.226|
0000e2  9802              LDR      r0,[sp,#8]            ;930
0000e4  2805              CMP      r0,#5                 ;930
0000e6  d105              BNE      |L4.244|
0000e8  2003              MOVS     r0,#3                 ;932
0000ea  71e0              STRB     r0,[r4,#7]            ;932
0000ec  a09f              ADR      r0,|L4.876|
0000ee  9902              LDR      r1,[sp,#8]            ;934
0000f0  f7fffffe          BL       __2printf
                  |L4.244|
0000f4  9802              LDR      r0,[sp,#8]            ;936
0000f6  2811              CMP      r0,#0x11              ;936
0000f8  d105              BNE      |L4.262|
0000fa  2005              MOVS     r0,#5                 ;938
0000fc  71e0              STRB     r0,[r4,#7]            ;938
0000fe  a09b              ADR      r0,|L4.876|
000100  9902              LDR      r1,[sp,#8]            ;939
000102  f7fffffe          BL       __2printf
                  |L4.262|
000106  9802              LDR      r0,[sp,#8]            ;941
000108  2812              CMP      r0,#0x12              ;941
00010a  d105              BNE      |L4.280|
00010c  2004              MOVS     r0,#4                 ;943
00010e  71e0              STRB     r0,[r4,#7]            ;943
000110  a096              ADR      r0,|L4.876|
000112  9902              LDR      r1,[sp,#8]            ;944
000114  f7fffffe          BL       __2printf
                  |L4.280|
000118  9802              LDR      r0,[sp,#8]            ;946
00011a  280b              CMP      r0,#0xb               ;946
00011c  d106              BNE      |L4.300|
00011e  4639              MOV      r1,r7                 ;948
000120  71e7              STRB     r7,[r4,#7]            ;948
000122  e000              B        |L4.294|
                  |L4.292|
000124  e010              B        |L4.328|
                  |L4.294|
000126  a091              ADR      r0,|L4.876|
000128  f7fffffe          BL       __2printf
                  |L4.300|
00012c  9802              LDR      r0,[sp,#8]            ;952
00012e  2809              CMP      r0,#9                 ;952
000130  d003              BEQ      |L4.314|
000132  2808              CMP      r0,#8                 ;952
000134  d001              BEQ      |L4.314|
000136  2816              CMP      r0,#0x16              ;952
000138  d18e              BNE      |L4.88|
                  |L4.314|
00013a  200c              MOVS     r0,#0xc               ;954
00013c  71e0              STRB     r0,[r4,#7]            ;954
00013e  a08b              ADR      r0,|L4.876|
000140  9902              LDR      r1,[sp,#8]            ;956
000142  f7fffffe          BL       __2printf
                  |L4.326|
000146  e787              B        |L4.88|
                  |L4.328|
000148  9802              LDR      r0,[sp,#8]            ;970
00014a  2800              CMP      r0,#0                 ;970
00014c  d184              BNE      |L4.88|
00014e  7922              LDRB     r2,[r4,#4]            ;972  ; Global_datas
000150  78e1              LDRB     r1,[r4,#3]            ;972  ; Global_datas
000152  2001              MOVS     r0,#1                 ;972
000154  f7fffffe          BL       drv_Cmd_Send2NCU031
                  |L4.344|
000158  9801              LDR      r0,[sp,#4]            ;975
00015a  2803              CMP      r0,#3                 ;975
00015c  d19a              BNE      |L4.148|
00015e  9802              LDR      r0,[sp,#8]            ;975
000160  2803              CMP      r0,#3                 ;975
000162  d107              BNE      |L4.372|
000164  200c              MOVS     r0,#0xc               ;977
000166  75e0              STRB     r0,[r4,#0x17]         ;977
000168  a086              ADR      r0,|L4.900|
00016a  f7fffffe          BL       __2printf
00016e  9801              LDR      r0,[sp,#4]            ;981
000170  2803              CMP      r0,#3                 ;981
000172  d18f              BNE      |L4.148|
                  |L4.372|
000174  9802              LDR      r0,[sp,#8]            ;981
000176  2802              CMP      r0,#2                 ;981
000178  d106              BNE      |L4.392|
00017a  75e7              STRB     r7,[r4,#0x17]         ;983
00017c  a083              ADR      r0,|L4.908|
00017e  f7fffffe          BL       __2printf
000182  9801              LDR      r0,[sp,#4]            ;987
000184  2803              CMP      r0,#3                 ;987
000186  d185              BNE      |L4.148|
                  |L4.392|
000188  9802              LDR      r0,[sp,#8]            ;987
00018a  2815              CMP      r0,#0x15              ;987
00018c  d107              BNE      |L4.414|
00018e  a081              ADR      r0,|L4.916|
000190  f7fffffe          BL       __2printf
000194  2009              MOVS     r0,#9                 ;991
000196  75e0              STRB     r0,[r4,#0x17]         ;991
000198  9801              LDR      r0,[sp,#4]            ;993
00019a  2803              CMP      r0,#3                 ;993
00019c  d1d3              BNE      |L4.326|
                  |L4.414|
00019e  9802              LDR      r0,[sp,#8]            ;993
0001a0  2816              CMP      r0,#0x16              ;993
0001a2  d107              BNE      |L4.436|
0001a4  a080              ADR      r0,|L4.936|
0001a6  f7fffffe          BL       __2printf
0001aa  200a              MOVS     r0,#0xa               ;996
0001ac  75e0              STRB     r0,[r4,#0x17]         ;996
0001ae  9801              LDR      r0,[sp,#4]            ;998
0001b0  2803              CMP      r0,#3                 ;998
0001b2  d1c8              BNE      |L4.326|
                  |L4.436|
0001b4  9802              LDR      r0,[sp,#8]            ;998
0001b6  2817              CMP      r0,#0x17              ;998
0001b8  d107              BNE      |L4.458|
0001ba  a07e              ADR      r0,|L4.948|
0001bc  f7fffffe          BL       __2printf
0001c0  2008              MOVS     r0,#8                 ;1001
0001c2  75e0              STRB     r0,[r4,#0x17]         ;1001
0001c4  9801              LDR      r0,[sp,#4]            ;1004
0001c6  2803              CMP      r0,#3                 ;1004
0001c8  d1bd              BNE      |L4.326|
                  |L4.458|
0001ca  9802              LDR      r0,[sp,#8]            ;1004
0001cc  2818              CMP      r0,#0x18              ;1004
0001ce  d106              BNE      |L4.478|
0001d0  a07c              ADR      r0,|L4.964|
0001d2  f7fffffe          BL       __2printf
0001d6  75e6              STRB     r6,[r4,#0x17]         ;1007
0001d8  9801              LDR      r0,[sp,#4]            ;1009
0001da  2803              CMP      r0,#3                 ;1009
0001dc  d1b3              BNE      |L4.326|
                  |L4.478|
0001de  9802              LDR      r0,[sp,#8]            ;1009
0001e0  2831              CMP      r0,#0x31              ;1009
0001e2  d00a              BEQ      |L4.506|
0001e4  2832              CMP      r0,#0x32              ;1014
0001e6  d00b              BEQ      |L4.512|
0001e8  2856              CMP      r0,#0x56              ;1019
0001ea  d00b              BEQ      |L4.516|
0001ec  280d              CMP      r0,#0xd               ;1024
0001ee  d00b              BEQ      |L4.520|
0001f0  280e              CMP      r0,#0xe               ;1029
0001f2  d00b              BEQ      |L4.524|
0001f4  28c1              CMP      r0,#0xc1              ;1037
0001f6  d00b              BEQ      |L4.528|
0001f8  e012              B        |L4.544|
                  |L4.506|
0001fa  2017              MOVS     r0,#0x17              ;1011
                  |L4.508|
0001fc  75e0              STRB     r0,[r4,#0x17]         ;865
                  |L4.510|
0001fe  e72b              B        |L4.88|
                  |L4.512|
000200  2016              MOVS     r0,#0x16              ;1016
000202  e7fb              B        |L4.508|
                  |L4.516|
000204  2010              MOVS     r0,#0x10              ;1021
000206  e7f9              B        |L4.508|
                  |L4.520|
000208  2011              MOVS     r0,#0x11              ;1026
00020a  e7f7              B        |L4.508|
                  |L4.524|
00020c  2012              MOVS     r0,#0x12              ;1031
00020e  e7f5              B        |L4.508|
                  |L4.528|
000210  a06f              ADR      r0,|L4.976|
000212  f7fffffe          BL       __2printf
000216  200d              MOVS     r0,#0xd               ;1040
000218  75e0              STRB     r0,[r4,#0x17]         ;1040
00021a  9801              LDR      r0,[sp,#4]            ;1042
00021c  2803              CMP      r0,#3                 ;1042
00021e  d192              BNE      |L4.326|
                  |L4.544|
000220  9802              LDR      r0,[sp,#8]            ;1042
000222  28c2              CMP      r0,#0xc2              ;1042
000224  d107              BNE      |L4.566|
000226  a06c              ADR      r0,|L4.984|
000228  f7fffffe          BL       __2printf
00022c  200e              MOVS     r0,#0xe               ;1046
00022e  75e0              STRB     r0,[r4,#0x17]         ;1046
000230  9801              LDR      r0,[sp,#4]            ;1049
000232  2803              CMP      r0,#3                 ;1049
000234  d187              BNE      |L4.326|
                  |L4.566|
000236  9802              LDR      r0,[sp,#8]            ;1049
000238  28c8              CMP      r0,#0xc8              ;1049
00023a  d107              BNE      |L4.588|
00023c  a069              ADR      r0,|L4.996|
00023e  f7fffffe          BL       __2printf
000242  2013              MOVS     r0,#0x13              ;1053
000244  75e0              STRB     r0,[r4,#0x17]         ;1053
000246  9801              LDR      r0,[sp,#4]            ;1056
000248  2803              CMP      r0,#3                 ;1056
00024a  d1d8              BNE      |L4.510|
                  |L4.588|
00024c  9802              LDR      r0,[sp,#8]            ;1056
00024e  28c9              CMP      r0,#0xc9              ;1056
000250  d107              BNE      |L4.610|
000252  a066              ADR      r0,|L4.1004|
000254  f7fffffe          BL       __2printf
000258  2014              MOVS     r0,#0x14              ;1060
00025a  75e0              STRB     r0,[r4,#0x17]         ;1060
00025c  9801              LDR      r0,[sp,#4]            ;1063
00025e  2803              CMP      r0,#3                 ;1063
000260  d1cd              BNE      |L4.510|
                  |L4.610|
000262  9802              LDR      r0,[sp,#8]            ;1063
000264  28cb              CMP      r0,#0xcb              ;1063
000266  d107              BNE      |L4.632|
000268  a063              ADR      r0,|L4.1016|
00026a  f7fffffe          BL       __2printf
00026e  2015              MOVS     r0,#0x15              ;1067
000270  75e0              STRB     r0,[r4,#0x17]         ;1067
000272  9801              LDR      r0,[sp,#4]            ;1073
000274  2803              CMP      r0,#3                 ;1073
000276  d1c2              BNE      |L4.510|
                  |L4.632|
000278  9802              LDR      r0,[sp,#8]            ;1073
00027a  2862              CMP      r0,#0x62              ;1073
00027c  d004              BEQ      |L4.648|
00027e  2863              CMP      r0,#0x63              ;1079
000280  d009              BEQ      |L4.662|
000282  2864              CMP      r0,#0x64              ;1085
000284  d00e              BEQ      |L4.676|
000286  e018              B        |L4.698|
                  |L4.648|
000288  2200              MOVS     r2,#0                 ;1075
00028a  2162              MOVS     r1,#0x62              ;1075
00028c  2003              MOVS     r0,#3                 ;1075
00028e  f7fffffe          BL       Cmd_Send2FourG
000292  a05d              ADR      r0,|L4.1032|
000294  e00c              B        |L4.688|
                  |L4.662|
000296  2200              MOVS     r2,#0                 ;1081
000298  2163              MOVS     r1,#0x63              ;1081
00029a  2003              MOVS     r0,#3                 ;1081
00029c  f7fffffe          BL       Cmd_Send2FourG
0002a0  a05d              ADR      r0,|L4.1048|
0002a2  e005              B        |L4.688|
                  |L4.676|
0002a4  2200              MOVS     r2,#0                 ;1087
0002a6  2164              MOVS     r1,#0x64              ;1087
0002a8  2003              MOVS     r0,#3                 ;1087
0002aa  f7fffffe          BL       Cmd_Send2FourG
0002ae  a05f              ADR      r0,|L4.1068|
                  |L4.688|
0002b0  f7fffffe          BL       __2printf
0002b4  9801              LDR      r0,[sp,#4]            ;1099
0002b6  2803              CMP      r0,#3                 ;1099
0002b8  d1a1              BNE      |L4.510|
                  |L4.698|
0002ba  9802              LDR      r0,[sp,#8]            ;1099
0002bc  28ca              CMP      r0,#0xca              ;1099
0002be  d19e              BNE      |L4.510|
0002c0  7ee0              LDRB     r0,[r4,#0x1b]         ;1101  ; Global_datas
0002c2  2800              CMP      r0,#0                 ;1101
0002c4  d114              BNE      |L4.752|
0002c6  f7fffffe          BL       SendFmFreqToSubBoard
0002ca  a05e              ADR      r0,|L4.1092|
0002cc  f7fffffe          BL       __2printf
0002d0  9803              LDR      r0,[sp,#0xc]          ;1107
0002d2  0900              LSRS     r0,r0,#4              ;1107
0002d4  7720              STRB     r0,[r4,#0x1c]         ;1107
0002d6  9803              LDR      r0,[sp,#0xc]          ;1108
0002d8  0700              LSLS     r0,r0,#28             ;1108
0002da  0f00              LSRS     r0,r0,#28             ;1108
0002dc  7760              STRB     r0,[r4,#0x1d]         ;1108
0002de  76e5              STRB     r5,[r4,#0x1b]         ;1109
0002e0  a05c              ADR      r0,|L4.1108|
0002e2  9903              LDR      r1,[sp,#0xc]          ;1110
0002e4  f7fffffe          BL       __2printf
0002e8  7f61              LDRB     r1,[r4,#0x1d]         ;1111  ; Global_datas
0002ea  a05f              ADR      r0,|L4.1128|
0002ec  f7fffffe          BL       __2printf
                  |L4.752|
0002f0  217d              MOVS     r1,#0x7d              ;1117
0002f2  0149              LSLS     r1,r1,#5              ;1117
0002f4  4861              LDR      r0,|L4.1148|
0002f6  f7fffffe          BL       TimeOutSet
0002fa  e6ad              B        |L4.88|
;;;1128   
                          ENDP

                  |L4.764|
                          DCD      Global_datas+0x20
                  |L4.768|
000300  4d53475f          DCB      "MSG_4G_SYS_STATE_IND:msg.param0 = %x, msg.param1 = %x \n"
000304  34475f53
000308  59535f53
00030c  54415445
000310  5f494e44
000314  3a6d7367
000318  2e706172
00031c  616d3020
000320  3d202578
000324  2c206d73
000328  672e7061
00032c  72616d31
000330  203d2025
000334  78200a  
000337  00                DCB      0
                  |L4.824|
000338  30783037          DCB      "0x07, msg.param1 = %x \n",0
00033c  2c206d73
000340  672e7061
000344  72616d31
000348  203d2025
00034c  78200a00
                  |L4.848|
000350  494e5f4b          DCB      "IN_KEY_TURNOFF_4G_MOUDLE \n",0
000354  45595f54
000358  55524e4f
00035c  46465f34
000360  475f4d4f
000364  55444c45
000368  200a00  
00036b  00                DCB      0
                  |L4.876|
00036c  30783036          DCB      "0x06, msg.param1 = %x \n",0
000370  2c206d73
000374  672e7061
000378  72616d31
00037c  203d2025
000380  78200a00
                  |L4.900|
000384  564f4c2d          DCB      "VOL-\n",0
000388  0a00    
00038a  00                DCB      0
00038b  00                DCB      0
                  |L4.908|
00038c  564f4c2b          DCB      "VOL+\n",0
000390  0a00    
000392  00                DCB      0
000393  00                DCB      0
                  |L4.916|
000394  466f7572          DCB      "FourG_WIFI_CHANNEL\n",0
000398  475f5749
00039c  46495f43
0003a0  48414e4e
0003a4  454c0a00
                  |L4.936|
0003a8  42545f43          DCB      "BT_CHANNEL\n",0
0003ac  48414e4e
0003b0  454c0a00
                  |L4.948|
0003b4  41555849          DCB      "AUXIN_CHANNEL\n",0
0003b8  4e5f4348
0003bc  414e4e45
0003c0  4c0a00  
0003c3  00                DCB      0
                  |L4.964|
0003c4  464d5f43          DCB      "FM_CHANNEL\n",0
0003c8  48414e4e
0003cc  454c0a00
                  |L4.976|
0003d0  696e7369          DCB      "inside\n",0
0003d4  64650a00
                  |L4.984|
0003d8  6f757473          DCB      "outside\n",0
0003dc  6964650a
0003e0  00      
0003e1  00                DCB      0
0003e2  00                DCB      0
0003e3  00                DCB      0
                  |L4.996|
0003e4  464d2055          DCB      "FM UP\n",0
0003e8  500a00  
0003eb  00                DCB      0
                  |L4.1004|
0003ec  464d2044          DCB      "FM DOWN\n",0
0003f0  4f574e0a
0003f4  00      
0003f5  00                DCB      0
0003f6  00                DCB      0
0003f7  00                DCB      0
                  |L4.1016|
0003f8  464d204c          DCB      "FM LONG PRESS\n",0
0003fc  4f4e4720
000400  50524553
000404  530a00  
000407  00                DCB      0
                  |L4.1032|
000408  6d696320          DCB      "mic key press\n",0
00040c  6b657920
000410  70726573
000414  730a00  
000417  00                DCB      0
                  |L4.1048|
000418  6d696320          DCB      "mic key long press\n",0
00041c  6b657920
000420  6c6f6e67
000424  20707265
000428  73730a00
                  |L4.1068|
00042c  6d696320          DCB      "mic key long release\n",0
000430  6b657920
000434  6c6f6e67
000438  2072656c
00043c  65617365
000440  0a00    
000442  00                DCB      0
000443  00                DCB      0
                  |L4.1092|
000444  53554220          DCB      "SUB BOARD ON\n",0
000448  424f4152
00044c  44204f4e
000450  0a00    
000452  00                DCB      0
000453  00                DCB      0
                  |L4.1108|
000454  6d73672e          DCB      "msg.param1 = %d \n",0
000458  70617261
00045c  6d31203d
000460  20256420
000464  0a00    
000466  00                DCB      0
000467  00                DCB      0
                  |L4.1128|
000468  706c6179          DCB      "play_mode = %d \n",0
00046c  5f6d6f64
000470  65203d20
000474  2564200a
000478  00      
000479  00                DCB      0
00047a  00                DCB      0
00047b  00                DCB      0
                  |L4.1148|
                          DCD      SubBoardHandshakeTimer

                          AREA ||i.PowerDownFunction||, CODE, READONLY, ALIGN=2

                  PowerDownFunction PROC
;;;254    /*---------------------------------------------------------------------------------------------------------*/
;;;255    void PowerDownFunction(void)
000000  b510              PUSH     {r4,lr}
;;;256    {
;;;257        /* Check if all the debug messages are finished */
;;;258        UART_WAIT_TX_EMPTY(UART0);
000002  4803              LDR      r0,|L5.16|
                  |L5.4|
000004  6981              LDR      r1,[r0,#0x18]
000006  00c9              LSLS     r1,r1,#3
000008  d5fc              BPL      |L5.4|
;;;259    
;;;260        /* Enter to Power-down mode */
;;;261        CLK_PowerDown();
00000a  f7fffffe          BL       CLK_PowerDown
;;;262    }
00000e  bd10              POP      {r4,pc}
;;;263    
                          ENDP

                  |L5.16|
                          DCD      0x40050000

                          AREA ||i.PowerDown_deepsleep||, CODE, READONLY, ALIGN=2

                  PowerDown_deepsleep PROC
;;;265    
;;;266    void PowerDown_deepsleep(void)
000000  b510              PUSH     {r4,lr}
;;;267    {
;;;268    	drv_Cmd_Send2NCU031(0x70, 0x15,0x00);// power off cmd to LCD board
000002  2200              MOVS     r2,#0
000004  2115              MOVS     r1,#0x15
000006  2070              MOVS     r0,#0x70
000008  f7fffffe          BL       drv_Cmd_Send2NCU031
;;;269    	
;;;270    	Cmd_Send2FourG( 0x03,0x55,0x00); // poweroff cmd to 4G
00000c  2200              MOVS     r2,#0
00000e  2155              MOVS     r1,#0x55
000010  2003              MOVS     r0,#3
000012  f7fffffe          BL       Cmd_Send2FourG
;;;271    	//Drv_4GMoudle_PowerUp(0);  // wait for 4g modle ready ,than turn off power, don't off here.
;;;272    	drv_led_init();// led all off
000016  f7fffffe          BL       drv_led_init
;;;273    	Drv_audio_powerdown();
00001a  f7fffffe          BL       Drv_audio_powerdown
;;;274    	Global_datas.shoutting_down = 1;
00001e  480d              LDR      r0,|L6.84|
000020  2101              MOVS     r1,#1
000022  7441              STRB     r1,[r0,#0x11]
;;;275    	TimeOutSet(&PoweroffLedTimer, 5000);
000024  490c              LDR      r1,|L6.88|
000026  480d              LDR      r0,|L6.92|
000028  f7fffffe          BL       TimeOutSet
;;;276    	
;;;277    	Drv_4GMoudle_PowerUp(0); // if timeout,turn off.
00002c  2000              MOVS     r0,#0
00002e  f7fffffe          BL       Drv_4GMoudle_PowerUp
;;;278    	TYM_drv_powerkeepon(0); 		
000032  2000              MOVS     r0,#0
000034  f7fffffe          BL       TYM_drv_powerkeepon
;;;279    	TYM_SysPower12V_3V3_onoff(0);
000038  2000              MOVS     r0,#0
00003a  f7fffffe          BL       TYM_SysPower12V_3V3_onoff
;;;280    
;;;281    	//Unlock protected registers before entering Power-down mode 
;;;282      SYS_UnlockReg();
00003e  f7fffffe          BL       SYS_UnlockReg
;;;283    	printf("Enter to Power-Down ......\n");
000042  a007              ADR      r0,|L6.96|
000044  f7fffffe          BL       __2printf
;;;284        /* Enter to Power-down mode */
;;;285    	
;;;286        PowerDownFunction();
000048  f7fffffe          BL       PowerDownFunction
;;;287    	
;;;288        printf("System waken-up done.\n\n");
00004c  a00b              ADR      r0,|L6.124|
00004e  f7fffffe          BL       __2printf
;;;289    
;;;290    	
;;;291    }
000052  bd10              POP      {r4,pc}
;;;292    
                          ENDP

                  |L6.84|
                          DCD      Global_datas+0x20
                  |L6.88|
                          DCD      0x00001388
                  |L6.92|
                          DCD      PoweroffLedTimer
                  |L6.96|
000060  456e7465          DCB      "Enter to Power-Down ......\n",0
000064  7220746f
000068  20506f77
00006c  65722d44
000070  6f776e20
000074  2e2e2e2e
000078  2e2e0a00
                  |L6.124|
00007c  53797374          DCB      "System waken-up done.\n\n",0
000080  656d2077
000084  616b656e
000088  2d757020
00008c  646f6e65
000090  2e0a0a00

                          AREA ||i.PowerOff||, CODE, READONLY, ALIGN=2

                  PowerOff PROC
;;;238    
;;;239    void PowerOff(void)
000000  b510              PUSH     {r4,lr}
;;;240    {
;;;241    	drv_Cmd_Send2NCU031(0x70, 0x15,0x00);// power off cmd to LCD board
000002  2200              MOVS     r2,#0
000004  2115              MOVS     r1,#0x15
000006  2070              MOVS     r0,#0x70
000008  f7fffffe          BL       drv_Cmd_Send2NCU031
;;;242    	
;;;243    	Cmd_Send2FourG( 0x03,0x55,0x00); // poweroff cmd to 4G
00000c  2200              MOVS     r2,#0
00000e  2155              MOVS     r1,#0x55
000010  2003              MOVS     r0,#3
000012  f7fffffe          BL       Cmd_Send2FourG
;;;244    	//Drv_4GMoudle_PowerUp(0);  // wait for 4g modle ready ,than turn off power, don't off here.
;;;245    	drv_led_init();// led all off
000016  f7fffffe          BL       drv_led_init
;;;246    	Drv_audio_powerdown();
00001a  f7fffffe          BL       Drv_audio_powerdown
;;;247    	Global_datas.shoutting_down = 1;
00001e  4804              LDR      r0,|L7.48|
000020  2101              MOVS     r1,#1
000022  7441              STRB     r1,[r0,#0x11]
;;;248    	TimeOutSet(&PoweroffLedTimer, 5000);
000024  4903              LDR      r1,|L7.52|
000026  4804              LDR      r0,|L7.56|
000028  f7fffffe          BL       TimeOutSet
;;;249    }
00002c  bd10              POP      {r4,pc}
;;;250    
                          ENDP

00002e  0000              DCW      0x0000
                  |L7.48|
                          DCD      Global_datas+0x20
                  |L7.52|
                          DCD      0x00001388
                  |L7.56|
                          DCD      PoweroffLedTimer

                          AREA ||i.SYS_BusInit||, CODE, READONLY, ALIGN=1

                  SYS_BusInit PROC
;;;121    
;;;122    void SYS_BusInit(void)
000000  b510              PUSH     {r4,lr}
;;;123    {
;;;124    	Debug_Uart_Init();
000002  f7fffffe          BL       Debug_Uart_Init
;;;125    	
;;;126    	Transfer_Uart_Init();
000006  f7fffffe          BL       Transfer_Uart_Init
;;;127    	
;;;128    	USCI_Uart_Init();
00000a  f7fffffe          BL       USCI_Uart_Init
;;;129    	
;;;130    	Hal_I2c_Init();
00000e  f7fffffe          BL       Hal_I2c_Init
;;;131    	
;;;132    }
000012  bd10              POP      {r4,pc}
;;;133    
                          ENDP


                          AREA ||i.SYS_Clock_init||, CODE, READONLY, ALIGN=2

                  SYS_Clock_init PROC
;;;49     
;;;50     void SYS_Clock_init(void)
000000  b5f8              PUSH     {r3-r7,lr}
;;;51     {
;;;52     
;;;53         
;;;54        // SYS->GPF_MFPL = SYS_GPF_MFPL_PF4MFP_XT1_IN | SYS_GPF_MFPL_PF3MFP_XT1_OUT | SYS_GPF_MFPL_PF1MFP_X32_IN | SYS_GPF_MFPL_PF0MFP_X32_OUT;
;;;55     	/* Enable HIRC clock (Internal RC 22.1184MHz) */
;;;56         CLK_EnableXtalRC(CLK_PWRCTL_HIRCEN_Msk);
000002  2004              MOVS     r0,#4
000004  f7fffffe          BL       CLK_EnableXtalRC
;;;57     
;;;58         /* Wait for HIRC clock ready */
;;;59         CLK_WaitClockReady(CLK_STATUS_HIRCSTB_Msk);
000008  2010              MOVS     r0,#0x10
00000a  f7fffffe          BL       CLK_WaitClockReady
;;;60     
;;;61         /* Select HCLK clock source as HIRC and HCLK clock divider as 1 */
;;;62         CLK_SetHCLK(CLK_CLKSEL0_HCLKSEL_HIRC, CLK_CLKDIV0_HCLK(1));
00000e  2100              MOVS     r1,#0
000010  2007              MOVS     r0,#7
000012  f7fffffe          BL       CLK_SetHCLK
;;;63     
;;;64         /* Enable HXT clock (external XTAL 12MHz) */
;;;65         CLK_EnableXtalRC(CLK_PWRCTL_HXTEN_Msk | CLK_PWRCTL_LXTEN_Msk);
000016  2003              MOVS     r0,#3
000018  f7fffffe          BL       CLK_EnableXtalRC
;;;66     //    CLK_EnableXtalRC(CLK_PWRCTL_HXTEN_Msk);
;;;67         /* Wait for HXT clock ready */
;;;68         CLK_WaitClockReady(CLK_STATUS_HXTSTB_Msk | CLK_STATUS_LXTSTB_Msk);
00001c  2003              MOVS     r0,#3
00001e  f7fffffe          BL       CLK_WaitClockReady
;;;69     //    CLK_WaitClockReady(CLK_STATUS_HXTSTB_Msk);
;;;70         /* Set core clock as PLL_CLOCK from PLL and SysTick source to HCLK/2*/
;;;71         CLK_SetCoreClock(PLL_CLOCK);
000022  481d              LDR      r0,|L9.152|
000024  f7fffffe          BL       CLK_SetCoreClock
;;;72         CLK_SetSysTickClockSrc(CLK_CLKSEL0_STCLKSEL_HCLK_DIV2);
000028  2018              MOVS     r0,#0x18
00002a  f7fffffe          BL       CLK_SetSysTickClockSrc
;;;73     
;;;74         /* Enable UART module clock */
;;;75         CLK_EnableModuleClock(UART0_MODULE);
00002e  4c1b              LDR      r4,|L9.156|
000030  4620              MOV      r0,r4
000032  f7fffffe          BL       CLK_EnableModuleClock
;;;76     	/* Enable UART module clock */
;;;77         CLK_EnableModuleClock(UART1_MODULE);
000036  1c65              ADDS     r5,r4,#1
000038  4628              MOV      r0,r5
00003a  f7fffffe          BL       CLK_EnableModuleClock
;;;78     	
;;;79         /* Enable USCI module clock */
;;;80         CLK_EnableModuleClock(UART2_MODULE);
00003e  1ca6              ADDS     r6,r4,#2
000040  4630              MOV      r0,r6
000042  f7fffffe          BL       CLK_EnableModuleClock
;;;81     	
;;;82         /* Enable USCI module clock */
;;;83         CLK_EnableModuleClock(USCI0_MODULE);
000046  4f16              LDR      r7,|L9.160|
000048  4638              MOV      r0,r7
00004a  f7fffffe          BL       CLK_EnableModuleClock
;;;84     	
;;;85     	/* Enable I2C0 module clock */
;;;86         CLK_EnableModuleClock(I2C0_MODULE);
00004e  4815              LDR      r0,|L9.164|
000050  f7fffffe          BL       CLK_EnableModuleClock
;;;87     	
;;;88     	/* Enable I2C1 module clock */
;;;89         CLK_EnableModuleClock(I2C1_MODULE);
000054  4813              LDR      r0,|L9.164|
000056  1c40              ADDS     r0,r0,#1
000058  f7fffffe          BL       CLK_EnableModuleClock
;;;90     
;;;91     	/* Enable ADC module clock */
;;;92        // CLK_EnableModuleClock(ADC_MODULE);
;;;93     
;;;94         /* Enable PWM0 module clock */
;;;95         CLK_EnableModuleClock(PWM0_MODULE);
00005c  4812              LDR      r0,|L9.168|
00005e  f7fffffe          BL       CLK_EnableModuleClock
;;;96     
;;;97     	/* Enable timer clock */
;;;98     	CLK_EnableModuleClock(TMR0_MODULE);
000062  4812              LDR      r0,|L9.172|
000064  f7fffffe          BL       CLK_EnableModuleClock
;;;99         CLK_EnableModuleClock(RTC_MODULE);
000068  4811              LDR      r0,|L9.176|
00006a  f7fffffe          BL       CLK_EnableModuleClock
;;;100    
;;;101        /* Select UART module clock source as HXT and UART module clock divider as 1 */
;;;102        CLK_SetModuleClock(UART0_MODULE, CLK_CLKSEL1_UARTSEL_HXT, CLK_CLKDIV0_UART(1));
00006e  2200              MOVS     r2,#0
000070  4611              MOV      r1,r2
000072  4620              MOV      r0,r4
000074  f7fffffe          BL       CLK_SetModuleClock
;;;103    	
;;;104    	CLK_SetModuleClock(UART1_MODULE, CLK_CLKSEL1_UARTSEL_HXT, CLK_CLKDIV0_UART(1));
000078  2200              MOVS     r2,#0
00007a  4611              MOV      r1,r2
00007c  4628              MOV      r0,r5
00007e  f7fffffe          BL       CLK_SetModuleClock
;;;105    
;;;106    	CLK_SetModuleClock(UART2_MODULE, CLK_CLKSEL1_UARTSEL_HXT, CLK_CLKDIV0_UART(1));
000082  2200              MOVS     r2,#0
000084  4611              MOV      r1,r2
000086  4630              MOV      r0,r6
000088  f7fffffe          BL       CLK_SetModuleClock
;;;107    	CLK_SetModuleClock(USCI0_MODULE, CLK_CLKSEL1_UARTSEL_HXT, CLK_CLKDIV0_UART(1));
00008c  2200              MOVS     r2,#0
00008e  4611              MOV      r1,r2
000090  4638              MOV      r0,r7
000092  f7fffffe          BL       CLK_SetModuleClock
;;;108    
;;;109        /* ADC clock source is 22.1184MHz, set divider to 7, ADC clock is 22.1184/7 MHz */
;;;110       // CLK_SetModuleClock(ADC_MODULE, CLK_CLKSEL1_ADCSEL_HIRC, CLK_CLKDIV0_ADC(7));
;;;111    
;;;112    	/* Configure the GPB6-,GPB7 ADC analog input pins */
;;;113      //  SYS->GPB_MFPL &= ~(SYS_GPB_MFPL_PB6MFP_Msk | SYS_GPB_MFPL_PB7MFP_Msk);
;;;114       // SYS->GPB_MFPL |= SYS_GPB_MFPL_PB6MFP_ADC0_CH14 | SYS_GPB_MFPL_PB7MFP_ADC0_CH15 ;
;;;115    	
;;;116        /* Select PWM01 module clock source */
;;;117       // CLK_SetModuleClock(PWM0_MODULE, CLK_CLKSEL1_PWM0SEL_PCLK0, 0);
;;;118    
;;;119    }
000096  bdf8              POP      {r3-r7,pc}
;;;120    
                          ENDP

                  |L9.152|
                          DCD      0x044aa200
                  |L9.156|
                          DCD      0x57803d10
                  |L9.160|
                          DCD      0x80000008
                  |L9.164|
                          DCD      0x40000008
                  |L9.168|
                          DCD      0x53c00014
                  |L9.172|
                          DCD      0x5e800002
                  |L9.176|
                          DCD      0x63200001

                          AREA ||i.SYS_Init||, CODE, READONLY, ALIGN=2

                  SYS_Init PROC
;;;162    /*---------------------------------------------------------------------------------------------------------*/
;;;163    void SYS_Init(void)
000000  b510              PUSH     {r4,lr}
;;;164    {
;;;165        /* Unlock protected registers */
;;;166        SYS_UnlockReg();
000002  f7fffffe          BL       SYS_UnlockReg
;;;167    	
;;;168    	SYS_Clock_init();
000006  f7fffffe          BL       SYS_Clock_init
;;;169    	TYM_gpio_init();
00000a  f7fffffe          BL       TYM_gpio_init
;;;170    	hal_adc_init();
00000e  f7fffffe          BL       hal_adc_init
000012  490b              LDR      r1,|L10.64|
000014  2000              MOVS     r0,#0
000016  6008              STR      r0,[r1,#0]
;;;171    
;;;172    	/* Lock protected registers */
;;;173        SYS_LockReg();
;;;174    
;;;175        /* Start Timer1 to measure delay period of TIMER_Delay API is reasonable or not */
;;;176       // TIMER1->CTL = TIMER_PERIODIC_MODE | (12 - 1);	
;;;177    
;;;178    	TYM_sys_PowerManger_init();
000018  f7fffffe          BL       TYM_sys_PowerManger_init
;;;179    	
;;;180    	drv_led_init();
00001c  f7fffffe          BL       drv_led_init
;;;181    
;;;182    	Drv_FourG_Gpio_Init();
000020  f7fffffe          BL       Drv_FourG_Gpio_Init
;;;183    	
;;;184    	SYS_BusInit();
000024  f7fffffe          BL       SYS_BusInit
;;;185    	
;;;186    	Hal_Timer1_Init(); // kim
000028  f7fffffe          BL       Hal_Timer1_Init
;;;187    
;;;188    	TYM_DriverInit();
00002c  f7fffffe          BL       TYM_DriverInit
;;;189    	
;;;190    	Core_Msg_Init();
000030  f7fffffe          BL       Core_Msg_Init
;;;191    
;;;192    	hal_fmc_init();
000034  f7fffffe          BL       hal_fmc_init
;;;193    
;;;194    	AMP_FaultPinDetectInit();
000038  f7fffffe          BL       AMP_FaultPinDetectInit
;;;195    
;;;196    	//srv_rtc_init();
;;;197    
;;;198    }
00003c  bd10              POP      {r4,pc}
;;;199    
                          ENDP

00003e  0000              DCW      0x0000
                  |L10.64|
                          DCD      0x50000100

                          AREA ||i.SYS_Status||, CODE, READONLY, ALIGN=2

                  SYS_Status PROC
;;;219    
;;;220    void SYS_Status(void)
000000  b570              PUSH     {r4-r6,lr}
;;;221    {
;;;222    	TYM_SysPower12V_3V3_onoff(1);
000002  2001              MOVS     r0,#1
000004  f7fffffe          BL       TYM_SysPower12V_3V3_onoff
;;;223    	Global_datas.g_mode_status = POWER_ON_MODE;	
000008  4c0d              LDR      r4,|L11.64|
00000a  2500              MOVS     r5,#0
00000c  71e5              STRB     r5,[r4,#7]
;;;224    	Global_datas.g_4g_initing = 1;
00000e  2001              MOVS     r0,#1
000010  7220              STRB     r0,[r4,#8]
;;;225    	Global_datas.eq_mode = EQ_MODE_INDOOR;
000012  74a0              STRB     r0,[r4,#0x12]
;;;226    	Global_datas.volume = VOLUME_DEFAULT;
000014  2005              MOVS     r0,#5
000016  74e0              STRB     r0,[r4,#0x13]
;;;227    	TYM_drv_powerkeepon(1);
000018  2001              MOVS     r0,#1
00001a  f7fffffe          BL       TYM_drv_powerkeepon
;;;228    	Drv_4GMoudle_PowerUp(1);
00001e  2001              MOVS     r0,#1
000020  f7fffffe          BL       Drv_4GMoudle_PowerUp
;;;229    	drv_FourGmodel_power_key_SetHi();
000024  f7fffffe          BL       drv_FourGmodel_power_key_SetHi
;;;230    	TimeOutSet(&ModulePowerUpPinTimer,3000);
000028  4906              LDR      r1,|L11.68|
00002a  4807              LDR      r0,|L11.72|
00002c  f7fffffe          BL       TimeOutSet
;;;231    	TimeOutSet(&PoweroffLedTimer, 100);
000030  2164              MOVS     r1,#0x64
000032  4806              LDR      r0,|L11.76|
000034  f7fffffe          BL       TimeOutSet
;;;232    	Drv_audio_init();
000038  f7fffffe          BL       Drv_audio_init
;;;233    	Global_datas.shoutting_down = 0;
00003c  7465              STRB     r5,[r4,#0x11]
;;;234    	
;;;235    	//drv_Cmd_Send2NCU031(0x70, 0x16,0x00);// power on cmd to LCD board
;;;236    	
;;;237    }
00003e  bd70              POP      {r4-r6,pc}
;;;238    
                          ENDP

                  |L11.64|
                          DCD      Global_datas+0x20
                  |L11.68|
                          DCD      0x00000bb8
                  |L11.72|
                          DCD      ModulePowerUpPinTimer
                  |L11.76|
                          DCD      PoweroffLedTimer

                          AREA ||i.SYS_UnlockReg||, CODE, READONLY, ALIGN=2

                  SYS_UnlockReg PROC
;;;1786     */
;;;1787   __STATIC_INLINE void SYS_UnlockReg(void)
000000  b510              PUSH     {r4,lr}
;;;1788   {
;;;1789       do
;;;1790       {
;;;1791           SYS->REGLCTL = 0x59;
000002  2159              MOVS     r1,#0x59
000004  4804              LDR      r0,|L12.24|
;;;1792           SYS->REGLCTL = 0x16;
000006  2216              MOVS     r2,#0x16
;;;1793           SYS->REGLCTL = 0x88;
000008  2388              MOVS     r3,#0x88
                  |L12.10|
00000a  6001              STR      r1,[r0,#0]            ;1791
00000c  6002              STR      r2,[r0,#0]            ;1792
00000e  6003              STR      r3,[r0,#0]
;;;1794       }
;;;1795       while(SYS->REGLCTL == 0);
000010  6804              LDR      r4,[r0,#0]
000012  2c00              CMP      r4,#0
000014  d0f9              BEQ      |L12.10|
;;;1796   }
000016  bd10              POP      {r4,pc}
;;;1797   
                          ENDP

                  |L12.24|
                          DCD      0x50000100

                          AREA ||i.SendFmFreqToSubBoard||, CODE, READONLY, ALIGN=2

                  SendFmFreqToSubBoard PROC
;;;1129   
;;;1130   void SendFmFreqToSubBoard(void)
000000  b510              PUSH     {r4,lr}
;;;1131   {
;;;1132   	uint8_t freq_hi = 0, freq_low = 0;
;;;1133   
;;;1134   	freq_hi = Global_datas.FmData.Frequency>>8;
000002  4804              LDR      r0,|L13.20|
000004  6c00              LDR      r0,[r0,#0x40]  ; Global_datas
000006  0401              LSLS     r1,r0,#16
;;;1135   	freq_low = Global_datas.FmData.Frequency & 0xff;
000008  b2c2              UXTB     r2,r0
00000a  0e09              LSRS     r1,r1,#24             ;1134
;;;1136   	
;;;1137   	drv_Cmd_Send2NCU031(0x72,freq_hi,freq_low);
00000c  2072              MOVS     r0,#0x72
00000e  f7fffffe          BL       drv_Cmd_Send2NCU031
;;;1138   }
000012  bd10              POP      {r4,pc}
;;;1139   
                          ENDP

                  |L13.20|
                          DCD      Global_datas

                          AREA ||i.SysIdle||, CODE, READONLY, ALIGN=2

                  SysIdle PROC
;;;199    
;;;200    void SysIdle(void)
000000  b570              PUSH     {r4-r6,lr}
;;;201    {
;;;202    	Global_datas.state = SYS_PLAY_STATE_IDLE;
000002  4c0e              LDR      r4,|L14.60|
000004  2001              MOVS     r0,#1
000006  7660              STRB     r0,[r4,#0x19]
;;;203    	Global_datas.g_4g_initing = 0;
000008  2500              MOVS     r5,#0
00000a  7225              STRB     r5,[r4,#8]
;;;204    	Global_datas.mode_switching = 0;
00000c  7525              STRB     r5,[r4,#0x14]
;;;205    	Global_datas.power_4g = 0;
00000e  7265              STRB     r5,[r4,#9]
;;;206    	Global_datas.mute = 0;
000010  7565              STRB     r5,[r4,#0x15]
;;;207    	
;;;208    	drv_FourGmodel_power_key_SetLow();  // when powerup , need to pull hi 3 second then pull down.
000012  f7fffffe          BL       drv_FourGmodel_power_key_SetLow
;;;209    	TimeOutSet(&SysTimer_1s,1000);
000016  217d              MOVS     r1,#0x7d
000018  00c9              LSLS     r1,r1,#3
00001a  4809              LDR      r0,|L14.64|
00001c  f7fffffe          BL       TimeOutSet
;;;210    	Global_datas.SubBoard.subboard_online = 0;	
;;;211    
;;;212    	Global_datas.FmData.Frequency = 8750;
000020  4621              MOV      r1,r4
000022  76e5              STRB     r5,[r4,#0x1b]         ;210
000024  4807              LDR      r0,|L14.68|
000026  3920              SUBS     r1,r1,#0x20
;;;213    	Global_datas.FmData.station_num = 0;
000028  6408              STR      r0,[r1,#0x40]  ; Global_datas
00002a  4608              MOV      r0,r1
00002c  3080              ADDS     r0,r0,#0x80
00002e  7105              STRB     r5,[r0,#4]
;;;214    
;;;215    	DataRead();
000030  f7fffffe          BL       DataRead
;;;216    	SendFmFreqToSubBoard();
000034  f7fffffe          BL       SendFmFreqToSubBoard
;;;217    	
;;;218    }
000038  bd70              POP      {r4-r6,pc}
;;;219    
                          ENDP

00003a  0000              DCW      0x0000
                  |L14.60|
                          DCD      Global_datas+0x20
                  |L14.64|
                          DCD      SysTimer_1s
                  |L14.68|
                          DCD      0x0000222e

                          AREA ||i.Sysctrl||, CODE, READONLY, ALIGN=2

                  Sysctrl PROC
;;;1309   
;;;1310   void Sysctrl(void)
000000  b5f0              PUSH     {r4-r7,lr}
;;;1311   {
;;;1312   	uint8_t temp_fm = 0;
;;;1313   	uint8_t temp_valid = 0;
;;;1314   	
;;;1315   	switch(Global_datas.inputmessage)
000002  4cf9              LDR      r4,|L15.1000|
000004  b087              SUB      sp,sp,#0x1c           ;1311
000006  7de2              LDRB     r2,[r4,#0x17]  ; Global_datas
000008  2100              MOVS     r1,#0                 ;1312
00000a  261c              MOVS     r6,#0x1c
;;;1316   	{
;;;1317   		case IN_KEY_POWER_SP:
;;;1318   		case IR_KEY_MODE:
;;;1319   
;;;1320   			if(Global_datas.state != SYS_PLAY_STATE_IDLE)
;;;1321   			{
;;;1322   			   Global_datas.event = SYS_PLAY_EVENT_MODE_SWITCH;
;;;1323   			}
;;;1324   			
;;;1325   			break;
;;;1326   
;;;1327   		case IN_KEY_POWER_CP:
;;;1328   		case IR_KEY_POWER:
;;;1329   					
;;;1330   			 if(Global_datas.state == SYS_PLAY_STATE_IDLE)
;;;1331   			 {
;;;1332   				Global_datas.event = SYS_PLAY_EVENT_POWERING_UP;
;;;1333   			 }
;;;1334   			 else if(Global_datas.state != SYS_PLAY_STATE_SHUTTING_DOWN)
;;;1335   			 {
;;;1336   			 	Global_datas.event = SYS_PLAY_EVENT_SHUTTING_DOWN;
;;;1337   			 }
;;;1338   			break;
;;;1339   
;;;1340   		case IR_KEY_VOLUME_DOWN:
;;;1341   		case IR_KEY_VOLUME_DOWN_CP:
;;;1342   		case IN_KEY_VOL_SUB_S:
;;;1343   	
;;;1344   			Global_datas.event = SYS_PLAY_EVENT_VOL_DOWN;
;;;1345   			break;
;;;1346   
;;;1347   		case IR_KEY_VOLUME_UP:
;;;1348   		case IR_KEY_VOLUME_UP_CP:
;;;1349   		case IN_KEY_VOL_ADD_S:
;;;1350   			
;;;1351   			Global_datas.event = SYS_PLAY_EVENT_VOL_UP;
;;;1352   			break;
;;;1353   
;;;1354   		case IN_KEY_DEFAULT_VOLUME_SET:
;;;1355   			Global_datas.event = SYS_PLAY_EVENT_DEFAULT_VOLUME_SET;
;;;1356   			break;
;;;1357   
;;;1358   		case IN_KEY_NEXT_SONG_S:
;;;1359   		case IR_KEY_NEXT_SONG:
;;;1360   
;;;1361   		if(Global_datas.state == SYS_PLAY_STATE_FM)
;;;1362   		{
;;;1363   			Global_datas.event = SYS_PLAY_EVENT_FM_NEXT_STATION;
;;;1364   		}
;;;1365   		else 
;;;1366   		{
;;;1367   			Global_datas.event = SYS_PLAY_EVENT_NEXT_SONG;
;;;1368   		}
;;;1369   
;;;1370   		
;;;1371   		break;
;;;1372   
;;;1373   		case IN_KEY_PREV_SONG_S:
;;;1374   		case IR_KEY_PREV_SONG:
;;;1375   
;;;1376   			if(Global_datas.state == SYS_PLAY_STATE_FM)
;;;1377   			{
;;;1378   				Global_datas.event = SYS_PLAY_EVENT_FM_PREV_STATION;
;;;1379   			}
;;;1380   			else 
;;;1381   			{
;;;1382   				Global_datas.event = SYS_PLAY_EVENT_PREV_SONG;
;;;1383   			}
;;;1384   
;;;1385   		break;		
;;;1386   		
;;;1387   		case IN_KEY_PLAY_S:
;;;1388   		case IR_KEY_PLAY_PAUSE:
;;;1389   
;;;1390   			Global_datas.event = SYS_PLAY_EVENT_PLAY_PAUSE;
;;;1391   
;;;1392   		break;	
;;;1393   
;;;1394   		case IN_KEY_RADIO_NEXT_S:
;;;1395   		case IR_KEY_NEXT_STATION:
;;;1396   			
;;;1397   
;;;1398   			if(Global_datas.state == SYS_PLAY_STATE_MW_RADIO)
;;;1399   			{
;;;1400   				Global_datas.event = SYS_PLAY_EVENT_MW_RADIO_NEXT_STATION;
;;;1401   			}
;;;1402   			else if(Global_datas.state == SYS_PLAY_STATE_FM)
;;;1403   			{
;;;1404   				Global_datas.event = SYS_PLAY_EVENT_FM_SEEK_UP;
;;;1405   			}
;;;1406   
;;;1407   		break;
;;;1408   
;;;1409   		case IN_KEY_RADIO_PREV_S:
;;;1410   		case IR_KEY_PREV_STATION:
;;;1411   			
;;;1412   
;;;1413   			if(Global_datas.state == SYS_PLAY_STATE_MW_RADIO)
;;;1414   			{
;;;1415   				Global_datas.event = SYS_PLAY_EVENT_MW_RADIO_PREV_STATION;
;;;1416   			}
;;;1417   			else if(Global_datas.state == SYS_PLAY_STATE_FM)
;;;1418   			{
;;;1419   				Global_datas.event = SYS_PLAY_EVENT_FM_SEEK_DOWN;
;;;1420   			}
;;;1421   
;;;1422   		break;		
;;;1423   
;;;1424   		case IN_KEY_EQ_INDOOR_S:
;;;1425   		case IR_KEY_EQ_INDOOR:
;;;1426   
;;;1427   		
;;;1428   			Global_datas.event = SYS_PLAY_EVENT_EQ_INDOOR_SET;
;;;1429   
;;;1430   			if(Global_datas.state == SYS_PLAY_STATE_FM) Global_datas.event = SYS_PLAY_EVENT_FM_PREV_STEP;
;;;1431   		    
;;;1432   			break;		
;;;1433   		
;;;1434   		case IN_KEY_EQ_OUTDOOR_S:
;;;1435   		case IR_KEY_EQ_OUTDOOR:
;;;1436   
;;;1437   		
;;;1438   			Global_datas.event = SYS_PLAY_EVENT_EQ_OUTDOOR_SET;
;;;1439   		
;;;1440   			if(Global_datas.state == SYS_PLAY_STATE_FM) Global_datas.event = SYS_PLAY_EVENT_FM_NEXT_STEP;
;;;1441   			
;;;1442   			break;	
;;;1443   
;;;1444   			
;;;1445   
;;;1446   		case IN_KEY_PAIR_SP:
;;;1447   		case IN_KEY_RADIO_NET_SWITCH_S:
;;;1448   
;;;1449   		
;;;1450   			Global_datas.event = SYS_PLAY_EVENT_RADIO_NET_SWITCH;
;;;1451   			
;;;1452   			break;		
;;;1453   
;;;1454   
;;;1455   		case IN_KEY_PAIR_CP:
;;;1456   		case IN_KEY_RADIO_NET_PARIING_S:
;;;1457   
;;;1458   			Global_datas.event = SYS_PLAY_EVENT_RADIO_NET_PAIRING;
;;;1459   			break;
;;;1460   
;;;1461   
;;;1462   		case IR_KEY_POWER_CP:
;;;1463   			break;
;;;1464   
;;;1465   		case IN_KEY_INIT_FINISH_CMD:
;;;1466   
;;;1467   			Global_datas.event = SYS_PLAY_EVENT_INIT_FINISH;
;;;1468   
;;;1469   			break;
;;;1470   
;;;1471   		case IN_KEY_FM_MODE_S: 
;;;1472   			
;;;1473   			Global_datas.event = SYS_PLAY_EVENT_SW_TO_FM_MODE;
;;;1474   			break;
;;;1475   		case IN_KEY_AUX_MODE_S: 
;;;1476   			
;;;1477   			Global_datas.event = SYS_PLAY_EVENT_SW_TO_AUX_MODE;
;;;1478   			break;		
;;;1479   		
;;;1480   		case IN_KEY_MW_RADIO_MODE_S: 
;;;1481   			
;;;1482   			Global_datas.event = SYS_PLAY_EVENT_SW_TO_MW_RADIO_MODE;
;;;1483   			break;
;;;1484   
;;;1485   		case IN_KEY_BT_MODE_S: 
;;;1486   			
;;;1487   			Global_datas.event = SYS_PLAY_EVENT_SW_TO_BT_MODE;
;;;1488   			break;		
;;;1489   
;;;1490   		case IN_KEY_TURNOFF_4G_MOUDLE:
;;;1491   			Global_datas.event = SYS_PLAY_EVENT_TURN_OFF_4G_MOUDLE;
;;;1492   			break;
;;;1493   		case IN_KEY_REBOOT_4G_MOUDLE:
;;;1494   
;;;1495   			Global_datas.event = SYS_PLAY_EVENT_REBOOT_4G_MOUDLE;
;;;1496   			
;;;1497   			break;
;;;1498   
;;;1499   		case IR_KEY_PLAY_PAUSE_CP:
;;;1500   
;;;1501   			if(Global_datas.state == SYS_PLAY_STATE_FM)
;;;1502   			{
;;;1503   				Global_datas.event = SYS_PLAY_EVENT_AUTO_SEARCH;
00000c  2517              MOVS     r5,#0x17
00000e  7e60              LDRB     r0,[r4,#0x19]         ;1320
000010  2701              MOVS     r7,#1                 ;1320
000012  0013              MOVS     r3,r2                 ;1315
000014  f7fffffe          BL       __ARM_common_switch8
000018  3057191d          DCB      0x30,0x57,0x19,0x1d
00001c  57888a57          DCB      0x57,0x88,0x8a,0x57
000020  8f919395          DCB      0x8f,0x91,0x93,0x95
000024  27254b52          DCB      0x27,0x25,0x4b,0x52
000028  57372b31          DCB      0x57,0x37,0x2b,0x31
00002c  aaa6a342          DCB      0xaa,0xa6,0xa3,0x42
000030  39888a97          DCB      0x39,0x88,0x8a,0x97
000034  99291d57          DCB      0x99,0x29,0x1d,0x57
000038  19272725          DCB      0x19,0x27,0x27,0x25
00003c  2531572b          DCB      0x25,0x31,0x57,0x2b
000040  57379b42          DCB      0x57,0x37,0x9b,0x42
000044  394b5257          DCB      0x39,0x4b,0x52,0x57
000048  8c57              DCB      0x8c,0x57
00004a  2801              CMP      r0,#1                 ;1320
00004c  d03b              BEQ      |L15.198|
00004e  2304              MOVS     r3,#4                 ;1322
000050  e032              B        |L15.184|
000052  2801              CMP      r0,#1                 ;1330
000054  d003              BEQ      |L15.94|
000056  2804              CMP      r0,#4                 ;1334
000058  d035              BEQ      |L15.198|
00005a  2302              MOVS     r3,#2                 ;1336
00005c  e02c              B        |L15.184|
                  |L15.94|
00005e  76a7              STRB     r7,[r4,#0x1a]         ;1332
000060  e031              B        |L15.198|
000062  2306              MOVS     r3,#6                 ;1344
000064  e028              B        |L15.184|
000066  2305              MOVS     r3,#5                 ;1351
000068  e026              B        |L15.184|
00006a  2207              MOVS     r2,#7                 ;1355
00006c  e061              B        |L15.306|
00006e  2807              CMP      r0,#7                 ;1361
000070  d001              BEQ      |L15.118|
000072  2308              MOVS     r3,#8                 ;1367
000074  e020              B        |L15.184|
                  |L15.118|
000076  231d              MOVS     r3,#0x1d              ;1363
000078  e01e              B        |L15.184|
00007a  2807              CMP      r0,#7                 ;1376
00007c  d001              BEQ      |L15.130|
00007e  2309              MOVS     r3,#9                 ;1382
000080  e01a              B        |L15.184|
                  |L15.130|
000082  231e              MOVS     r3,#0x1e              ;1378
000084  e018              B        |L15.184|
000086  230a              MOVS     r3,#0xa               ;1390
000088  e016              B        |L15.184|
00008a  2805              CMP      r0,#5                 ;1398
00008c  d002              BEQ      |L15.148|
00008e  2807              CMP      r0,#7                 ;1402
000090  d002              BEQ      |L15.152|
000092  e018              B        |L15.198|
                  |L15.148|
000094  230b              MOVS     r3,#0xb               ;1400
000096  e00f              B        |L15.184|
                  |L15.152|
000098  2319              MOVS     r3,#0x19              ;1404
00009a  e00d              B        |L15.184|
00009c  2805              CMP      r0,#5                 ;1413
00009e  d002              BEQ      |L15.166|
0000a0  2807              CMP      r0,#7                 ;1417
0000a2  d002              BEQ      |L15.170|
0000a4  e00f              B        |L15.198|
                  |L15.166|
0000a6  230c              MOVS     r3,#0xc               ;1415
0000a8  e006              B        |L15.184|
                  |L15.170|
0000aa  231a              MOVS     r3,#0x1a              ;1419
0000ac  e004              B        |L15.184|
0000ae  230d              MOVS     r3,#0xd               ;1428
0000b0  76a3              STRB     r3,[r4,#0x1a]         ;1428
0000b2  2807              CMP      r0,#7                 ;1430
0000b4  d107              BNE      |L15.198|
0000b6  231b              MOVS     r3,#0x1b              ;1430
                  |L15.184|
0000b8  76a3              STRB     r3,[r4,#0x1a]         ;1430
0000ba  e004              B        |L15.198|
0000bc  230e              MOVS     r3,#0xe               ;1438
0000be  76a3              STRB     r3,[r4,#0x1a]         ;1438
0000c0  2807              CMP      r0,#7                 ;1440
0000c2  d100              BNE      |L15.198|
0000c4  76a6              STRB     r6,[r4,#0x1a]         ;1440
                  |L15.198|
;;;1504   			}
;;;1505   			else if(Global_datas.state == SYS_PLAY_STATE_BT)
;;;1506   			{
;;;1507   				Global_datas.event = SYS_PLAY_EVENT_BT_PAIRING;			
;;;1508   			}
;;;1509   			break;
;;;1510   			
;;;1511   
;;;1512   		case IN_KEY_AUTO_SEARCH_S:
;;;1513   
;;;1514   			if(Global_datas.state == SYS_PLAY_STATE_FM)
;;;1515   			{
;;;1516   				Global_datas.event = SYS_PLAY_EVENT_AUTO_SEARCH;
;;;1517   			}
;;;1518   			
;;;1519   			break;
;;;1520   
;;;1521   			
;;;1522   
;;;1523   		case IN_KEY_FM_PREV_FREQ_S:
;;;1524   
;;;1525   		    if(Global_datas.state == SYS_PLAY_STATE_FM)	Global_datas.event = SYS_PLAY_EVENT_FM_PREV_STEP; 		
;;;1526   			
;;;1527   			break;
;;;1528   
;;;1529   		case IN_KEY_FM_NEXT_FREQ_S:
;;;1530   
;;;1531   			if(Global_datas.state == SYS_PLAY_STATE_FM) Global_datas.event = SYS_PLAY_EVENT_FM_NEXT_STEP; 		
;;;1532   		
;;;1533   			break;
;;;1534   			
;;;1535   		default:break;
;;;1536   			
;;;1537   	}
;;;1538   
;;;1539   	if(Global_datas.inputmessage)
0000c6  2a00              CMP      r2,#0
0000c8  d002              BEQ      |L15.208|
                  |L15.202|
;;;1540   	{
;;;1541   		Global_datas.inputmessage = 0;
0000ca  2200              MOVS     r2,#0
0000cc  75e2              STRB     r2,[r4,#0x17]
;;;1542   		Global_datas.key_led_blink = 1;
0000ce  7427              STRB     r7,[r4,#0x10]
                  |L15.208|
0000d0  4bc5              LDR      r3,|L15.1000|
0000d2  4dc5              LDR      r5,|L15.1000|
0000d4  469c              MOV      r12,r3                ;1315
0000d6  3560              ADDS     r5,r5,#0x60           ;1315
;;;1543   	}
;;;1544   
;;;1545   	switch(Global_datas.event)
0000d8  7ea2              LDRB     r2,[r4,#0x1a]  ; Global_datas
0000da  7c9b              LDRB     r3,[r3,#0x12]         ;1315
;;;1546   	{
;;;1547   	
;;;1548   		case SYS_PLAY_EVENT_POWERING_UP:
;;;1549   
;;;1550   			TYM_SysPower12V_3V3_onoff(1);
;;;1551   			Global_datas.state = SYS_PLAY_STATE_POWERUP;	
;;;1552   			Global_datas.g_4g_initing = 1;
;;;1553   			Global_datas.eq_mode = EQ_MODE_INDOOR;
;;;1554   			Global_datas.volume = VOLUME_DEFAULT;
;;;1555   			TYM_drv_powerkeepon(1);
;;;1556   			Drv_4GMoudle_PowerUp(1);
;;;1557   			Global_datas.power_4g = 1;
;;;1558   			drv_FourGmodel_power_key_SetHi();
;;;1559   			TimeOutSet(&ModulePowerUpPinTimer,3000);
;;;1560   			TimeOutSet(&PoweroffLedTimer, 100);
;;;1561   			Drv_audio_init();
;;;1562   			Global_datas.shoutting_down = 0;	
;;;1563   
;;;1564   			drv_Cmd_Send2NCU031(0x70, 0x16,0x00);// power on cmd to LCD board
;;;1565   
;;;1566   			Fm_Rest();
;;;1567   			
;;;1568   			break;
;;;1569   			
;;;1570   		case SYS_PLAY_EVENT_REBOOT_4G_MOUDLE:
;;;1571   
;;;1572   			TYM_SysPower12V_3V3_onoff(1);
;;;1573   			Global_datas.state = SYS_PLAY_STATE_REBOOT;	
;;;1574   			Global_datas.g_4g_initing = 1;
;;;1575   			
;;;1576   			Drv_4GMoudle_PowerUp(1);
;;;1577   			Global_datas.power_4g = 1;
;;;1578   			drv_FourGmodel_power_key_SetHi();
;;;1579   			TimeOutSet(&ModulePowerUpPinTimer,3000);
;;;1580   			TimeOutSet(&PoweroffLedTimer, 100);
;;;1581   			Global_datas.shoutting_down = 0;	
;;;1582   			break;
;;;1583   
;;;1584   			
;;;1585   
;;;1586   		case SYS_PLAY_EVENT_SHUTTING_DOWN:
;;;1587   
;;;1588   			//PowerOff();
;;;1589   			//SysIdle();	
;;;1590   
;;;1591   			drv_Cmd_Send2NCU031(0x70, 0x15,0x00);// power off cmd to LCD board
;;;1592   			Cmd_Send2FourG( 0x03,0x55,0x00); // poweroff cmd to 4G
;;;1593   			//Drv_4GMoudle_PowerUp(0);  // wait for 4g modle ready ,than turn off power, don't off here.
;;;1594   			drv_led_init();// led all off
;;;1595   			Drv_audio_powerdown();
;;;1596   			Global_datas.shoutting_down = 1;
;;;1597   			TimeOutSet(&PoweroffLedTimer, 5000);
;;;1598   
;;;1599   			Global_datas.state = SYS_PLAY_STATE_SHUTTING_DOWN;
;;;1600   			Global_datas.g_4g_initing = 0;
;;;1601   			Global_datas.mode_switching = 0;
;;;1602   			Global_datas.mute = 0;
;;;1603   			drv_FourGmodel_power_key_SetLow();  // when powerup , need to pull hi 3 second then pull down.
;;;1604   			Global_datas.SubBoard.subboard_online = 0;				
;;;1605   			
;;;1606   			break;			
;;;1607   
;;;1608   		case SYS_PLAY_EVENT_INIT_FINISH:
;;;1609   			
;;;1610   			Global_datas.g_4g_initing = 0;
;;;1611   			// send start cmd to sub board
;;;1612   			if(Global_datas.SubBoard.subboard_online && (Global_datas.state != SYS_PLAY_STATE_REBOOT))
;;;1613   			{
;;;1614   				drv_Cmd_Send2NCU031(0x03,0x71,19); // system init finish state send to sub board.
;;;1615   				drv_Cmd_Send2NCU031(0x07, Global_datas.volume,0x00);// send volume
;;;1616   				
;;;1617   				switch(Global_datas.SubBoard.playmode)
;;;1618   				{
;;;1619   					case PLAY_MODE_WIFI:
;;;1620   						Cmd_Send2FourG(0x03,0x15,0);
;;;1621   						drv_Cmd_Send2NCU031(0x70, 0x11,0x00);
;;;1622   					
;;;1623   						Global_datas.state = SYS_PLAY_STATE_MW_RADIO;
;;;1624   					    drv_audio_4G_Channel();
;;;1625   						break;
;;;1626   
;;;1627   					case PLAY_MODE_BT:
;;;1628   						Cmd_Send2FourG(0x03,0x16,0);
;;;1629   						drv_Cmd_Send2NCU031(0x70, 0x10,0x00);
;;;1630   						Global_datas.state = SYS_PLAY_STATE_BT;
;;;1631   					    drv_audio_4G_Channel();
;;;1632   						break;
;;;1633   
;;;1634   					case PLAY_MODE_AUX:
;;;1635   						Cmd_Send2FourG(0x03,0x17,0);
;;;1636   						drv_Cmd_Send2NCU031(0x70, 0x12,0x00);
;;;1637   						Global_datas.state = SYS_PLAY_STATE_AUX;
;;;1638   					    drv_audio_AuxIn_Channel();
;;;1639   						break;
;;;1640   
;;;1641   					case PLAY_MODE_FM:
;;;1642   						Global_datas.state = SYS_PLAY_STATE_FM;
;;;1643   						Global_datas.fm_delay_time = FM_DELAY_TIME;
;;;1644   						Global_datas.FmData.fmstate = FM_STATE_ON;
;;;1645   									
;;;1646   						drv_Cmd_Send2NCU031(0x70, 0x13,0x00);// change to fm mode	
;;;1647   						Cmd_Send2FourG(0x03 ,0x18,0x00);
;;;1648   						//si47xxFMRX_powerup();
;;;1649   						//si47xxFMRX_tune(Global_datas.FmData.Frequency);
;;;1650   						test_FMRXtune();
;;;1651   						drv_audio_FM_Channel(); 
;;;1652   						SendFmFreqToSubBoard();
;;;1653   
;;;1654   						break;
;;;1655   
;;;1656   					default:
;;;1657   						Cmd_Send2FourG(0x03,0x15,0);
;;;1658   						Global_datas.state = SYS_PLAY_STATE_MW_RADIO;	
;;;1659   						drv_audio_4G_Channel();
;;;1660   						break;
;;;1661   				}
;;;1662   			}
;;;1663   			else
;;;1664   			{
;;;1665   				Cmd_Send2FourG(0x03,0x15,0);
;;;1666   				Global_datas.state = SYS_PLAY_STATE_MW_RADIO;
;;;1667   				drv_audio_4G_Channel();
;;;1668   			}
;;;1669   
;;;1670   			//drv_Cmd_Send2NCU031(0x08,0,0); send start CMD to sub board
;;;1671   			
;;;1672   			break;
;;;1673   
;;;1674   		case SYS_PLAY_EVENT_MODE_SWITCH:
;;;1675   			srv_key_mode_handler();
;;;1676   			break;
;;;1677   
;;;1678   		case SYS_PLAY_EVENT_SW_TO_AUX_MODE:
;;;1679   			
;;;1680   			srv_key_mode_switch_to(SYS_PLAY_STATE_AUX);	
;;;1681   				
;;;1682   			break;
;;;1683   
;;;1684   		case SYS_PLAY_EVENT_SW_TO_FM_MODE:
;;;1685   			
;;;1686   			srv_key_mode_switch_to(SYS_PLAY_STATE_FM);	
;;;1687   			
;;;1688   			break;
;;;1689   			
;;;1690   		case SYS_PLAY_EVENT_SW_TO_BT_MODE:
;;;1691   			
;;;1692   			srv_key_mode_switch_to(SYS_PLAY_STATE_BT);	
;;;1693   			
;;;1694   			break;	
;;;1695   			
;;;1696   		case SYS_PLAY_EVENT_SW_TO_MW_RADIO_MODE:
;;;1697   			
;;;1698   			srv_key_mode_switch_to(SYS_PLAY_STATE_MW_RADIO);	
;;;1699   		
;;;1700   			break;		
;;;1701   
;;;1702   
;;;1703   		case SYS_PLAY_EVENT_DEFAULT_VOLUME_SET:
;;;1704   			
;;;1705   				Global_datas.volume = 8;
;;;1706   				Drv_Dap_vol_set(Global_datas.volume);
;;;1707   				Cmd_Send2FourG(0x03,0x04,Global_datas.volume); // send volume  to 4G moudle
;;;1708   				drv_Cmd_Send2NCU031(0x07, Global_datas.volume,0x00);// send volume
;;;1709   
;;;1710   			break;
;;;1711   
;;;1712   			
;;;1713   
;;;1714   		case SYS_PLAY_EVENT_VOL_UP:
;;;1715   			
;;;1716   			Global_datas.mute = 0;
;;;1717   			if (Global_datas.volume < VOLUME_MAX)
;;;1718   			{
;;;1719   				Global_datas.volume++;
;;;1720   				Drv_Dap_vol_set(Global_datas.volume);
;;;1721   				Cmd_Send2FourG(0x03,0x04,Global_datas.volume); // send volume  to 4G moudle
;;;1722   
;;;1723   				drv_Cmd_Send2NCU031(0x07, Global_datas.volume,0x00);// send volume
;;;1724   			}
;;;1725   
;;;1726   			break;
;;;1727   
;;;1728   		case SYS_PLAY_EVENT_VOL_DOWN:
;;;1729   			
;;;1730   			if (Global_datas.volume > VOLUME_MIN)
;;;1731   			{
;;;1732   				Global_datas.volume--;
;;;1733   				Drv_Dap_vol_set(Global_datas.volume);
;;;1734   				if(Global_datas.volume == 0)
;;;1735   				{
;;;1736   					Global_datas.mute = 1;
;;;1737   					drv_5825_mute_pin_set(0); 
;;;1738   				}
;;;1739   				Cmd_Send2FourG(0x03,0x04,Global_datas.volume); // send volume  to 4G moudle
;;;1740   				drv_Cmd_Send2NCU031(0x07, Global_datas.volume,0x00);// send volume
;;;1741   			}
;;;1742   			break;
;;;1743   
;;;1744   		case SYS_PLAY_EVENT_NEXT_SONG:
;;;1745   
;;;1746   			Cmd_Send2FourG(0x03,0x0d,0); // 
;;;1747   			
;;;1748   			break;			
;;;1749   			
;;;1750   		case SYS_PLAY_EVENT_PREV_SONG:
;;;1751   			
;;;1752   			Cmd_Send2FourG(0x03,0x0e,0); // 
;;;1753   			
;;;1754   			break;
;;;1755   		
;;;1756   		case SYS_PLAY_EVENT_PLAY_PAUSE:
;;;1757   			
;;;1758   			Cmd_Send2FourG(0x03,0x56,0); // 
;;;1759   			
;;;1760   			break;	
;;;1761   
;;;1762   		case SYS_PLAY_EVENT_MW_RADIO_NEXT_STATION:
;;;1763   			
;;;1764   			Cmd_Send2FourG(0x03,0x31,0); // 
;;;1765   			
;;;1766   			break;	
;;;1767   		
;;;1768   		case SYS_PLAY_EVENT_MW_RADIO_PREV_STATION:
;;;1769   			
;;;1770   			Cmd_Send2FourG(0x03,0x32,0); // 
;;;1771   			
;;;1772   			break;
;;;1773   
;;;1774   		case SYS_PLAY_EVENT_EQ_OUTDOOR_SET:
;;;1775   			
;;;1776   			if(Global_datas.eq_mode != EQ_MODE_OUTDOOR)
;;;1777   			{
;;;1778   				Global_datas.eq_mode = EQ_MODE_OUTDOOR;
;;;1779   				srv_key_eq_outdoor_switch_handler();
;;;1780   				Drv_audio_channel_switch();
;;;1781   			}
;;;1782   			
;;;1783   			break;	
;;;1784   			
;;;1785   		case SYS_PLAY_EVENT_EQ_INDOOR_SET:
;;;1786   			
;;;1787   			if(Global_datas.eq_mode != EQ_MODE_INDOOR)
;;;1788   			{
;;;1789   				Global_datas.eq_mode = EQ_MODE_INDOOR;
;;;1790   				srv_key_eq_outdoor_switch_handler();
;;;1791   				Drv_audio_channel_switch();
;;;1792   			}
;;;1793   			
;;;1794   			break;
;;;1795   
;;;1796   		case SYS_PLAY_EVENT_RADIO_NET_SWITCH:
;;;1797   			
;;;1798   
;;;1799   			Cmd_Send2FourG(0x03,0x50,0); 
;;;1800   			
;;;1801   			break;			
;;;1802   
;;;1803   		case SYS_PLAY_EVENT_RADIO_NET_PAIRING:
;;;1804   			
;;;1805   
;;;1806   			Cmd_Send2FourG(0x03,0x21,0); 
;;;1807   			
;;;1808   			break;	
;;;1809   
;;;1810   		case SYS_PLAY_EVENT_TURN_OFF_4G_MOUDLE:
;;;1811   
;;;1812   			Global_datas.power_4g = 0;
;;;1813   
;;;1814   		    printf("\nTURN OFF 4G MOUDLE\n");
;;;1815   
;;;1816   			if(Global_datas.state == SYS_PLAY_STATE_SHUTTING_DOWN)
;;;1817   			{
;;;1818   				Drv_4GMoudle_PowerUp(0);  // wait for 4g modle ready ,than turn off power
;;;1819   				TYM_drv_powerkeepon(0); 
;;;1820   				TYM_SysPower12V_3V3_onoff(0);		
;;;1821   				Global_datas.state = SYS_PLAY_STATE_IDLE;
;;;1822   			}
;;;1823   			else if(Global_datas.state == SYS_PLAY_STATE_FM)
;;;1824   			{
;;;1825   				Drv_4GMoudle_PowerUp(0);  // wait for 4g modle ready ,than turn off power
;;;1826   			}
;;;1827   		
;;;1828   			break;
;;;1829   
;;;1830   		case SYS_PLAY_EVENT_AUTO_SEARCH:
;;;1831   
;;;1832   			if(Global_datas.FmData.fmstate == FM_STATE_ON)
;;;1833   			{
;;;1834   				Global_datas.FmData.fmstate = FM_STATE_AUTO_SEARCH;
;;;1835   				Global_datas.FmData.index_station = 0;
;;;1836   				
;;;1837   				for(temp_fm=0;temp_fm<FM_MAX_STATION_NUM;temp_fm++)
;;;1838   				{
;;;1839   					Global_datas.FmData.station_table[temp_fm] = 0;
;;;1840   				}
;;;1841   				Global_datas.FmData.Frequency = 8750;			
;;;1842   			}
;;;1843   			else if(Global_datas.FmData.fmstate == FM_STATE_AUTO_SEARCH)
;;;1844   			{
;;;1845   				Global_datas.FmData.fmstate = FM_STATE_ON;
;;;1846   			}
;;;1847   				
;;;1848   			break;
;;;1849   
;;;1850   		case SYS_PLAY_EVENT_FM_SEEK_DOWN:
;;;1851   
;;;1852   			if(Global_datas.FmData.fmstate == FM_STATE_ON)
;;;1853   			{
;;;1854   				Global_datas.FmData.fmstate = FM_STATE_SEEK_DOWN;
;;;1855   			}
;;;1856   			break;
;;;1857   
;;;1858   		
;;;1859   		case SYS_PLAY_EVENT_FM_SEEK_UP:
;;;1860   			
;;;1861   			if(Global_datas.FmData.fmstate == FM_STATE_ON)
;;;1862   			{
;;;1863   				Global_datas.FmData.fmstate = FM_STATE_SEEK_UP;
;;;1864   			}			
;;;1865   			
;;;1866   			break;
;;;1867   
;;;1868   		case SYS_PLAY_EVENT_FM_NEXT_STEP:
;;;1869   			
;;;1870   			if(Global_datas.state == SYS_PLAY_STATE_FM)
;;;1871   			{
;;;1872   				if(Global_datas.FmData.Frequency <= 10790)	Global_datas.FmData.Frequency += 10;
;;;1873   				else Global_datas.FmData.Frequency = 8750;
;;;1874   				Global_datas.FmData.FmNeedToStore = 1;
;;;1875   				TimeOutSet(&FmStoreTimer, 2000);
;;;1876   				temp_valid = si47xxFMRX_tune(Global_datas.FmData.Frequency);
;;;1877   				SendFmFreqToSubBoard();
;;;1878   				printf("FM UP\n");
;;;1879   
;;;1880   			}
;;;1881   
;;;1882   			break;
;;;1883   
;;;1884   		case SYS_PLAY_EVENT_FM_PREV_STEP:
;;;1885   			
;;;1886   			if(Global_datas.state == SYS_PLAY_STATE_FM)
;;;1887   			{
;;;1888   				if(Global_datas.FmData.Frequency >= 8760)	Global_datas.FmData.Frequency -= 10;
;;;1889   				else Global_datas.FmData.Frequency = 10080;
;;;1890   				Global_datas.FmData.FmNeedToStore = 1;
;;;1891   				TimeOutSet(&FmStoreTimer, 2000);
;;;1892   				temp_valid = si47xxFMRX_tune(Global_datas.FmData.Frequency);
;;;1893   				
;;;1894   				SendFmFreqToSubBoard();
;;;1895   				printf("FM DOWN\n");
;;;1896   
;;;1897   			}
;;;1898   
;;;1899   			break;
;;;1900   
;;;1901   			case SYS_PLAY_EVENT_FM_PREV_STATION:
;;;1902   				
;;;1903   			if(Global_datas.FmData.station_num)
0000dc  9306              STR      r3,[sp,#0x18]
0000de  792b              LDRB     r3,[r5,#4]
0000e0  9305              STR      r3,[sp,#0x14]
0000e2  1e5b              SUBS     r3,r3,#1
0000e4  9301              STR      r3,[sp,#4]            ;1644
0000e6  79eb              LDRB     r3,[r5,#7]            ;1644
;;;1904   			{
;;;1905   				if(Global_datas.FmData.current_station > 0)
0000e8  9304              STR      r3,[sp,#0x10]
0000ea  79ab              LDRB     r3,[r5,#6]
0000ec  9300              STR      r3,[sp,#0]
0000ee  462b              MOV      r3,r5
0000f0  3b80              SUBS     r3,r3,#0x80
0000f2  6c1b              LDR      r3,[r3,#0x40]         ;1315
0000f4  9303              STR      r3,[sp,#0xc]          ;1315
0000f6  4663              MOV      r3,r12                ;1315
0000f8  7cdb              LDRB     r3,[r3,#0x13]         ;1315
0000fa  462e              MOV      r6,r5
0000fc  9302              STR      r3,[sp,#8]            ;1545
0000fe  3e40              SUBS     r6,r6,#0x40
000100  0013              MOVS     r3,r2                 ;1545
000102  f7fffffe          BL       __ARM_common_switch8
000106  1f5c              DCB      0x1f,0x5c
000108  377492f5          DCB      0x37,0x74,0x92,0xf5
00010c  f4f3f2f1          DCB      0xf4,0xf3,0xf2,0xf1
000110  f0efeeed          DCB      0xf0,0xef,0xee,0xed
000114  ecebeae9          DCB      0xec,0xeb,0xea,0xe9
000118  e8e7e6e5          DCB      0xe8,0xe7,0xe6,0xe5
00011c  e45de3e2          DCB      0xe4,0x5d,0xe3,0xe2
000120  e1e0dfde          DCB      0xe1,0xe0,0xdf,0xde
000124  dddc5c00          DCB      0xdd,0xdc,0x5c,0x00
000128  230f              MOVS     r3,#0xf               ;1450
00012a  e7c5              B        |L15.184|
00012c  2310              MOVS     r3,#0x10              ;1458
00012e  e7c3              B        |L15.184|
000130  2203              MOVS     r2,#3                 ;1467
                  |L15.306|
000132  76a2              STRB     r2,[r4,#0x1a]         ;1355
000134  e7c9              B        |L15.202|
000136  2211              MOVS     r2,#0x11              ;1473
000138  e7fb              B        |L15.306|
00013a  2212              MOVS     r2,#0x12              ;1477
00013c  e7f9              B        |L15.306|
00013e  2214              MOVS     r2,#0x14              ;1482
000140  e7f7              B        |L15.306|
000142  2213              MOVS     r2,#0x13              ;1487
000144  e7f5              B        |L15.306|
000146  2215              MOVS     r2,#0x15              ;1491
000148  e7f3              B        |L15.306|
00014a  2216              MOVS     r2,#0x16              ;1495
00014c  e7f1              B        |L15.306|
00014e  2807              CMP      r0,#7                 ;1501
000150  d003              BEQ      |L15.346|
000152  2806              CMP      r0,#6                 ;1505
000154  d1b9              BNE      |L15.202|
000156  2218              MOVS     r2,#0x18              ;1507
000158  e7eb              B        |L15.306|
                  |L15.346|
00015a  76a5              STRB     r5,[r4,#0x1a]         ;1503
00015c  e7b5              B        |L15.202|
00015e  2807              CMP      r0,#7                 ;1514
000160  d0fb              BEQ      |L15.346|
000162  e7b2              B        |L15.202|
000164  2807              CMP      r0,#7                 ;1525
000166  d1b0              BNE      |L15.202|
000168  221b              MOVS     r2,#0x1b              ;1525
00016a  e7e2              B        |L15.306|
00016c  2807              CMP      r0,#7                 ;1531
00016e  d1ac              BNE      |L15.202|
000170  76a6              STRB     r6,[r4,#0x1a]         ;1531
000172  e7aa              B        |L15.202|
000174  2001              MOVS     r0,#1                 ;1550
000176  f7fffffe          BL       TYM_SysPower12V_3V3_onoff
00017a  2002              MOVS     r0,#2                 ;1551
00017c  7660              STRB     r0,[r4,#0x19]         ;1551
00017e  7227              STRB     r7,[r4,#8]            ;1552
000180  74a7              STRB     r7,[r4,#0x12]         ;1553
000182  2005              MOVS     r0,#5                 ;1554
000184  74e0              STRB     r0,[r4,#0x13]         ;1554
000186  2001              MOVS     r0,#1                 ;1555
000188  f7fffffe          BL       TYM_drv_powerkeepon
00018c  2001              MOVS     r0,#1                 ;1556
00018e  f7fffffe          BL       Drv_4GMoudle_PowerUp
000192  7267              STRB     r7,[r4,#9]            ;1557
000194  f7fffffe          BL       drv_FourGmodel_power_key_SetHi
000198  4994              LDR      r1,|L15.1004|
00019a  4895              LDR      r0,|L15.1008|
00019c  f7fffffe          BL       TimeOutSet
0001a0  2164              MOVS     r1,#0x64              ;1560
0001a2  4894              LDR      r0,|L15.1012|
0001a4  f7fffffe          BL       TimeOutSet
0001a8  f7fffffe          BL       Drv_audio_init
0001ac  2000              MOVS     r0,#0                 ;1562
0001ae  7460              STRB     r0,[r4,#0x11]         ;1562
0001b0  4602              MOV      r2,r0                 ;1564
0001b2  2116              MOVS     r1,#0x16              ;1564
0001b4  2070              MOVS     r0,#0x70              ;1564
0001b6  f7fffffe          BL       drv_Cmd_Send2NCU031
0001ba  f7fffffe          BL       Fm_Rest
0001be  e1bb              B        |L15.1336|
0001c0  2001              MOVS     r0,#1                 ;1572
0001c2  f7fffffe          BL       TYM_SysPower12V_3V3_onoff
0001c6  2003              MOVS     r0,#3                 ;1573
0001c8  7660              STRB     r0,[r4,#0x19]         ;1573
0001ca  7227              STRB     r7,[r4,#8]            ;1574
0001cc  2001              MOVS     r0,#1                 ;1576
0001ce  f7fffffe          BL       Drv_4GMoudle_PowerUp
0001d2  7267              STRB     r7,[r4,#9]            ;1577
0001d4  f7fffffe          BL       drv_FourGmodel_power_key_SetHi
0001d8  4984              LDR      r1,|L15.1004|
0001da  4885              LDR      r0,|L15.1008|
0001dc  f7fffffe          BL       TimeOutSet
0001e0  2164              MOVS     r1,#0x64              ;1580
0001e2  4884              LDR      r0,|L15.1012|
0001e4  f7fffffe          BL       TimeOutSet
0001e8  2000              MOVS     r0,#0                 ;1581
0001ea  7460              STRB     r0,[r4,#0x11]         ;1581
0001ec  e1a4              B        |L15.1336|
0001ee  2200              MOVS     r2,#0                 ;1591
0001f0  2115              MOVS     r1,#0x15              ;1591
0001f2  2070              MOVS     r0,#0x70              ;1591
0001f4  f7fffffe          BL       drv_Cmd_Send2NCU031
0001f8  2200              MOVS     r2,#0                 ;1592
0001fa  2155              MOVS     r1,#0x55              ;1592
0001fc  2003              MOVS     r0,#3                 ;1592
0001fe  f7fffffe          BL       Cmd_Send2FourG
000202  f7fffffe          BL       drv_led_init
000206  f7fffffe          BL       Drv_audio_powerdown
00020a  7467              STRB     r7,[r4,#0x11]         ;1596
00020c  497a              LDR      r1,|L15.1016|
00020e  4879              LDR      r0,|L15.1012|
000210  f7fffffe          BL       TimeOutSet
000214  2004              MOVS     r0,#4                 ;1599
000216  7660              STRB     r0,[r4,#0x19]         ;1599
000218  2000              MOVS     r0,#0                 ;1600
00021a  7220              STRB     r0,[r4,#8]            ;1600
00021c  7520              STRB     r0,[r4,#0x14]         ;1601
00021e  7560              STRB     r0,[r4,#0x15]         ;1602
000220  f7fffffe          BL       drv_FourGmodel_power_key_SetLow
000224  2000              MOVS     r0,#0                 ;1604
000226  76e0              STRB     r0,[r4,#0x1b]         ;1604
000228  e186              B        |L15.1336|
00022a  2100              MOVS     r1,#0                 ;1610
00022c  7221              STRB     r1,[r4,#8]            ;1610
00022e  7ee1              LDRB     r1,[r4,#0x1b]         ;1612  ; Global_datas
000230  2900              CMP      r1,#0                 ;1612
000232  d014              BEQ      |L15.606|
000234  2803              CMP      r0,#3                 ;1612
000236  d012              BEQ      |L15.606|
000238  2213              MOVS     r2,#0x13              ;1614
00023a  2171              MOVS     r1,#0x71              ;1614
00023c  2003              MOVS     r0,#3                 ;1614
00023e  f7fffffe          BL       drv_Cmd_Send2NCU031
000242  7ce1              LDRB     r1,[r4,#0x13]         ;1615  ; Global_datas
000244  2200              MOVS     r2,#0                 ;1615
000246  2007              MOVS     r0,#7                 ;1615
000248  f7fffffe          BL       drv_Cmd_Send2NCU031
00024c  7f60              LDRB     r0,[r4,#0x1d]         ;1617  ; Global_datas
00024e  2801              CMP      r0,#1                 ;1617
000250  d00b              BEQ      |L15.618|
000252  2802              CMP      r0,#2                 ;1617
000254  d04d              BEQ      |L15.754|
000256  2803              CMP      r0,#3                 ;1617
000258  d016              BEQ      |L15.648|
00025a  2804              CMP      r0,#4                 ;1617
00025c  d020              BEQ      |L15.672|
                  |L15.606|
00025e  2200              MOVS     r2,#0                 ;1657
000260  2115              MOVS     r1,#0x15              ;1657
000262  2003              MOVS     r0,#3                 ;1657
000264  f7fffffe          BL       Cmd_Send2FourG
000268  e009              B        |L15.638|
                  |L15.618|
00026a  2200              MOVS     r2,#0                 ;1620
00026c  2115              MOVS     r1,#0x15              ;1620
00026e  2003              MOVS     r0,#3                 ;1620
000270  f7fffffe          BL       Cmd_Send2FourG
000274  2200              MOVS     r2,#0                 ;1621
000276  2111              MOVS     r1,#0x11              ;1621
000278  2070              MOVS     r0,#0x70              ;1621
00027a  f7fffffe          BL       drv_Cmd_Send2NCU031
                  |L15.638|
00027e  2005              MOVS     r0,#5                 ;1666
                  |L15.640|
000280  7660              STRB     r0,[r4,#0x19]         ;1666
000282  f7fffffe          BL       drv_audio_4G_Channel
                  |L15.646|
000286  e157              B        |L15.1336|
                  |L15.648|
000288  2200              MOVS     r2,#0                 ;1628
00028a  2116              MOVS     r1,#0x16              ;1628
00028c  2003              MOVS     r0,#3                 ;1628
00028e  f7fffffe          BL       Cmd_Send2FourG
000292  2200              MOVS     r2,#0                 ;1629
000294  2110              MOVS     r1,#0x10              ;1629
000296  2070              MOVS     r0,#0x70              ;1629
000298  f7fffffe          BL       drv_Cmd_Send2NCU031
00029c  2006              MOVS     r0,#6                 ;1630
00029e  e7ef              B        |L15.640|
                  |L15.672|
0002a0  2200              MOVS     r2,#0                 ;1635
0002a2  2117              MOVS     r1,#0x17              ;1635
0002a4  2003              MOVS     r0,#3                 ;1635
0002a6  f7fffffe          BL       Cmd_Send2FourG
0002aa  2200              MOVS     r2,#0                 ;1636
0002ac  2112              MOVS     r1,#0x12              ;1636
0002ae  2070              MOVS     r0,#0x70              ;1636
0002b0  f7fffffe          BL       drv_Cmd_Send2NCU031
0002b4  2008              MOVS     r0,#8                 ;1637
0002b6  7660              STRB     r0,[r4,#0x19]         ;1637
0002b8  f7fffffe          BL       drv_audio_AuxIn_Channel
0002bc  e13c              B        |L15.1336|
0002be  e112              B        |L15.1254|
0002c0  e12c              B        |L15.1308|
0002c2  e0d8              B        |L15.1142|
0002c4  e0f1              B        |L15.1194|
0002c6  e0cb              B        |L15.1120|
0002c8  e0cf              B        |L15.1130|
0002ca  e132              B        |L15.1330|
0002cc  e0b1              B        |L15.1074|
0002ce  e080              B        |L15.978|
0002d0  e030              B        |L15.820|
0002d2  e02d              B        |L15.816|
0002d4  e026              B        |L15.804|
0002d6  e027              B        |L15.808|
0002d8  e078              B        |L15.972|
0002da  e074              B        |L15.966|
0002dc  e064              B        |L15.936|
0002de  e069              B        |L15.948|
0002e0  e05f              B        |L15.930|
0002e2  e05b              B        |L15.924|
0002e4  e057              B        |L15.918|
0002e6  e050              B        |L15.906|
0002e8  e04c              B        |L15.900|
0002ea  e025              B        |L15.824|
0002ec  e031              B        |L15.850|
0002ee  e025              B        |L15.828|
0002f0  e015              B        |L15.798|
                  |L15.754|
0002f2  2007              MOVS     r0,#7                 ;1642
0002f4  7660              STRB     r0,[r4,#0x19]         ;1642
0002f6  200a              MOVS     r0,#0xa               ;1643
0002f8  7620              STRB     r0,[r4,#0x18]         ;1643
0002fa  71ef              STRB     r7,[r5,#7]            ;1644
0002fc  2200              MOVS     r2,#0                 ;1646
0002fe  2113              MOVS     r1,#0x13              ;1646
000300  2070              MOVS     r0,#0x70              ;1646
000302  f7fffffe          BL       drv_Cmd_Send2NCU031
000306  2200              MOVS     r2,#0                 ;1647
000308  2118              MOVS     r1,#0x18              ;1647
00030a  2003              MOVS     r0,#3                 ;1647
00030c  f7fffffe          BL       Cmd_Send2FourG
000310  f7fffffe          BL       test_FMRXtune
000314  f7fffffe          BL       drv_audio_FM_Channel
000318  f7fffffe          BL       SendFmFreqToSubBoard
00031c  e10c              B        |L15.1336|
                  |L15.798|
00031e  f7fffffe          BL       srv_key_mode_handler
000322  e109              B        |L15.1336|
                  |L15.804|
000324  2008              MOVS     r0,#8                 ;1680
000326  e000              B        |L15.810|
                  |L15.808|
000328  2007              MOVS     r0,#7                 ;1686
                  |L15.810|
00032a  f7fffffe          BL       srv_key_mode_switch_to
00032e  e103              B        |L15.1336|
                  |L15.816|
000330  2006              MOVS     r0,#6                 ;1692
000332  e7fa              B        |L15.810|
                  |L15.820|
000334  2005              MOVS     r0,#5                 ;1698
000336  e7f8              B        |L15.810|
                  |L15.824|
000338  2008              MOVS     r0,#8                 ;1705
00033a  e006              B        |L15.842|
                  |L15.828|
00033c  2000              MOVS     r0,#0                 ;1716
00033e  7560              STRB     r0,[r4,#0x15]         ;1716
000340  9802              LDR      r0,[sp,#8]            ;1717
000342  2810              CMP      r0,#0x10              ;1717
000344  d29f              BCS      |L15.646|
000346  1c40              ADDS     r0,r0,#1              ;1717
000348  b2c0              UXTB     r0,r0                 ;1719
                  |L15.842|
00034a  74e0              STRB     r0,[r4,#0x13]         ;1705
00034c  f7fffffe          BL       Drv_Dap_vol_set
000350  e00d              B        |L15.878|
                  |L15.850|
000352  9802              LDR      r0,[sp,#8]            ;1730
000354  2800              CMP      r0,#0                 ;1730
000356  d014              BEQ      |L15.898|
000358  1e40              SUBS     r0,r0,#1              ;1730
00035a  b2c0              UXTB     r0,r0                 ;1732
00035c  74e0              STRB     r0,[r4,#0x13]         ;1732
00035e  f7fffffe          BL       Drv_Dap_vol_set
000362  7ce0              LDRB     r0,[r4,#0x13]         ;1734  ; Global_datas
000364  2800              CMP      r0,#0                 ;1734
000366  d102              BNE      |L15.878|
000368  7567              STRB     r7,[r4,#0x15]         ;1736
00036a  f7fffffe          BL       drv_5825_mute_pin_set
                  |L15.878|
00036e  7ce2              LDRB     r2,[r4,#0x13]         ;1739  ; Global_datas
000370  2104              MOVS     r1,#4                 ;1739
000372  2003              MOVS     r0,#3                 ;1739
000374  f7fffffe          BL       Cmd_Send2FourG
000378  7ce1              LDRB     r1,[r4,#0x13]         ;1740  ; Global_datas
00037a  2200              MOVS     r2,#0                 ;1740
00037c  2007              MOVS     r0,#7                 ;1740
00037e  f7fffffe          BL       drv_Cmd_Send2NCU031
                  |L15.898|
000382  e0d9              B        |L15.1336|
                  |L15.900|
000384  2200              MOVS     r2,#0                 ;1746
000386  210d              MOVS     r1,#0xd               ;1746
000388  e001              B        |L15.910|
                  |L15.906|
00038a  2200              MOVS     r2,#0                 ;1752
00038c  210e              MOVS     r1,#0xe               ;1752
                  |L15.910|
00038e  2003              MOVS     r0,#3                 ;1746
000390  f7fffffe          BL       Cmd_Send2FourG
000394  e0d0              B        |L15.1336|
                  |L15.918|
000396  2200              MOVS     r2,#0                 ;1758
000398  2156              MOVS     r1,#0x56              ;1758
00039a  e7f8              B        |L15.910|
                  |L15.924|
00039c  2200              MOVS     r2,#0                 ;1764
00039e  2131              MOVS     r1,#0x31              ;1764
0003a0  e7f5              B        |L15.910|
                  |L15.930|
0003a2  2200              MOVS     r2,#0                 ;1770
0003a4  2132              MOVS     r1,#0x32              ;1770
0003a6  e7f2              B        |L15.910|
                  |L15.936|
0003a8  9806              LDR      r0,[sp,#0x18]         ;1776
0003aa  2802              CMP      r0,#2                 ;1776
0003ac  d00a              BEQ      |L15.964|
0003ae  2002              MOVS     r0,#2                 ;1778
0003b0  74a0              STRB     r0,[r4,#0x12]         ;1778
0003b2  e003              B        |L15.956|
                  |L15.948|
0003b4  9806              LDR      r0,[sp,#0x18]         ;1787
0003b6  2801              CMP      r0,#1                 ;1787
0003b8  d004              BEQ      |L15.964|
0003ba  74a7              STRB     r7,[r4,#0x12]         ;1789
                  |L15.956|
0003bc  f7fffffe          BL       srv_key_eq_outdoor_switch_handler
0003c0  f7fffffe          BL       Drv_audio_channel_switch
                  |L15.964|
0003c4  e0b8              B        |L15.1336|
                  |L15.966|
0003c6  2200              MOVS     r2,#0                 ;1799
0003c8  2150              MOVS     r1,#0x50              ;1799
0003ca  e7e0              B        |L15.910|
                  |L15.972|
0003cc  2200              MOVS     r2,#0                 ;1806
0003ce  2121              MOVS     r1,#0x21              ;1806
0003d0  e7dd              B        |L15.910|
                  |L15.978|
0003d2  2000              MOVS     r0,#0                 ;1812
0003d4  7260              STRB     r0,[r4,#9]            ;1812
0003d6  a009              ADR      r0,|L15.1020|
0003d8  f7fffffe          BL       __2printf
0003dc  7e60              LDRB     r0,[r4,#0x19]         ;1816  ; Global_datas
0003de  2804              CMP      r0,#4                 ;1816
0003e0  d018              BEQ      |L15.1044|
0003e2  2807              CMP      r0,#7                 ;1823
0003e4  d021              BEQ      |L15.1066|
0003e6  e0a7              B        |L15.1336|
                  |L15.1000|
                          DCD      Global_datas+0x20
                  |L15.1004|
                          DCD      0x00000bb8
                  |L15.1008|
                          DCD      ModulePowerUpPinTimer
                  |L15.1012|
                          DCD      PoweroffLedTimer
                  |L15.1016|
                          DCD      0x00001388
                  |L15.1020|
0003fc  0a545552          DCB      "\nTURN OFF 4G MOUDLE\n",0
000400  4e204f46
000404  46203447
000408  204d4f55
00040c  444c450a
000410  00      
000411  00                DCB      0
000412  00                DCB      0
000413  00                DCB      0
                  |L15.1044|
000414  2000              MOVS     r0,#0                 ;1818
000416  f7fffffe          BL       Drv_4GMoudle_PowerUp
00041a  2000              MOVS     r0,#0                 ;1819
00041c  f7fffffe          BL       TYM_drv_powerkeepon
000420  2000              MOVS     r0,#0                 ;1820
000422  f7fffffe          BL       TYM_SysPower12V_3V3_onoff
000426  7667              STRB     r7,[r4,#0x19]         ;1821
000428  e086              B        |L15.1336|
                  |L15.1066|
00042a  2000              MOVS     r0,#0                 ;1825
00042c  f7fffffe          BL       Drv_4GMoudle_PowerUp
000430  e082              B        |L15.1336|
                  |L15.1074|
000432  9804              LDR      r0,[sp,#0x10]         ;1832
000434  2801              CMP      r0,#1                 ;1832
000436  d002              BEQ      |L15.1086|
000438  2804              CMP      r0,#4                 ;1843
00043a  d00f              BEQ      |L15.1116|
00043c  e07c              B        |L15.1336|
                  |L15.1086|
00043e  2004              MOVS     r0,#4                 ;1834
000440  71e8              STRB     r0,[r5,#7]            ;1834
000442  2000              MOVS     r0,#0                 ;1835
000444  4a8c              LDR      r2,|L15.1656|
000446  7168              STRB     r0,[r5,#5]            ;1835
                  |L15.1096|
000448  008b              LSLS     r3,r1,#2              ;1839
00044a  189b              ADDS     r3,r3,r2              ;1839
00044c  1c49              ADDS     r1,r1,#1              ;1839
00044e  b2c9              UXTB     r1,r1                 ;1837
000450  6498              STR      r0,[r3,#0x48]         ;1837
000452  290f              CMP      r1,#0xf               ;1837
000454  d3f8              BCC      |L15.1096|
000456  4889              LDR      r0,|L15.1660|
000458  6410              STR      r0,[r2,#0x40]         ;1841  ; Global_datas
00045a  e06d              B        |L15.1336|
                  |L15.1116|
00045c  71ef              STRB     r7,[r5,#7]            ;1845
00045e  e06b              B        |L15.1336|
                  |L15.1120|
000460  9804              LDR      r0,[sp,#0x10]         ;1852
000462  2801              CMP      r0,#1                 ;1852
000464  d168              BNE      |L15.1336|
000466  2003              MOVS     r0,#3                 ;1854
000468  e003              B        |L15.1138|
                  |L15.1130|
00046a  9804              LDR      r0,[sp,#0x10]         ;1861
00046c  2801              CMP      r0,#1                 ;1861
00046e  d163              BNE      |L15.1336|
000470  2002              MOVS     r0,#2                 ;1863
                  |L15.1138|
000472  71e8              STRB     r0,[r5,#7]            ;1863
000474  e060              B        |L15.1336|
                  |L15.1142|
000476  2807              CMP      r0,#7                 ;1870
000478  d15e              BNE      |L15.1336|
00047a  4981              LDR      r1,|L15.1664|
00047c  9803              LDR      r0,[sp,#0xc]          ;1872
00047e  4288              CMP      r0,r1                 ;1872
000480  d802              BHI      |L15.1160|
000482  497d              LDR      r1,|L15.1656|
000484  300a              ADDS     r0,r0,#0xa            ;1872
000486  e001              B        |L15.1164|
                  |L15.1160|
000488  487c              LDR      r0,|L15.1660|
00048a  497b              LDR      r1,|L15.1656|
                  |L15.1164|
00048c  6408              STR      r0,[r1,#0x40]         ;1874  ; Global_datas
00048e  217d              MOVS     r1,#0x7d              ;1875
000490  7177              STRB     r7,[r6,#5]            ;1874
000492  0109              LSLS     r1,r1,#4              ;1875
000494  487b              LDR      r0,|L15.1668|
000496  f7fffffe          BL       TimeOutSet
00049a  4877              LDR      r0,|L15.1656|
00049c  6c00              LDR      r0,[r0,#0x40]         ;1876  ; Global_datas
00049e  f7fffffe          BL       si47xxFMRX_tune
0004a2  f7fffffe          BL       SendFmFreqToSubBoard
0004a6  a078              ADR      r0,|L15.1672|
0004a8  e01a              B        |L15.1248|
                  |L15.1194|
0004aa  2807              CMP      r0,#7                 ;1886
0004ac  d144              BNE      |L15.1336|
0004ae  4973              LDR      r1,|L15.1660|
0004b0  9803              LDR      r0,[sp,#0xc]          ;1888
0004b2  310a              ADDS     r1,r1,#0xa            ;1888
0004b4  4288              CMP      r0,r1                 ;1888
0004b6  d303              BCC      |L15.1216|
0004b8  496f              LDR      r1,|L15.1656|
0004ba  380a              SUBS     r0,r0,#0xa            ;1888
0004bc  6408              STR      r0,[r1,#0x40]         ;1888  ; Global_datas
0004be  e002              B        |L15.1222|
                  |L15.1216|
0004c0  486d              LDR      r0,|L15.1656|
0004c2  4973              LDR      r1,|L15.1680|
0004c4  6401              STR      r1,[r0,#0x40]         ;1889  ; Global_datas
                  |L15.1222|
0004c6  217d              MOVS     r1,#0x7d              ;1891
0004c8  7177              STRB     r7,[r6,#5]            ;1890
0004ca  0109              LSLS     r1,r1,#4              ;1891
0004cc  486d              LDR      r0,|L15.1668|
0004ce  f7fffffe          BL       TimeOutSet
0004d2  4869              LDR      r0,|L15.1656|
0004d4  6c00              LDR      r0,[r0,#0x40]         ;1892  ; Global_datas
0004d6  f7fffffe          BL       si47xxFMRX_tune
0004da  f7fffffe          BL       SendFmFreqToSubBoard
0004de  a06d              ADR      r0,|L15.1684|
                  |L15.1248|
0004e0  f7fffffe          BL       __2printf
0004e4  e028              B        |L15.1336|
                  |L15.1254|
0004e6  9805              LDR      r0,[sp,#0x14]         ;1903
0004e8  2800              CMP      r0,#0                 ;1903
0004ea  d025              BEQ      |L15.1336|
0004ec  9800              LDR      r0,[sp,#0]
0004ee  2800              CMP      r0,#0
0004f0  d001              BEQ      |L15.1270|
0004f2  1e40              SUBS     r0,r0,#1
;;;1906   				{
;;;1907   					Global_datas.FmData.current_station--;
0004f4  e000              B        |L15.1272|
                  |L15.1270|
0004f6  9801              LDR      r0,[sp,#4]
                  |L15.1272|
;;;1908   				}
;;;1909   				else
;;;1910   				{
;;;1911   					Global_datas.FmData.current_station = (Global_datas.FmData.station_num - 1);
0004f8  71a8              STRB     r0,[r5,#6]
;;;1912   				}
;;;1913   			
;;;1914   				Global_datas.FmData.Frequency = Global_datas.FmData.station_table[Global_datas.FmData.current_station];
;;;1915   				//dis_mic(1);
;;;1916   				si47xxFMRX_tune(Global_datas.FmData.Frequency);
;;;1917   				SendFmFreqToSubBoard();
;;;1918   				//FreqDisplay(Frequency); 	
;;;1919   			
;;;1920   				Global_datas.FmData.FmNeedToStore = 1;
;;;1921   				TimeOutSet(&FmStoreTimer, 2000);
;;;1922   			}
;;;1923   
;;;1924   			break;
;;;1925   
;;;1926   			case SYS_PLAY_EVENT_FM_NEXT_STATION:
;;;1927   				
;;;1928   			if(Global_datas.FmData.station_num)
;;;1929   			{
;;;1930   				if(Global_datas.FmData.current_station < (Global_datas.FmData.station_num-1))
;;;1931   				{
;;;1932   					Global_datas.FmData.current_station++;
;;;1933   				}
;;;1934   				else
;;;1935   				{
;;;1936   					Global_datas.FmData.current_station = 0;
;;;1937   				}
;;;1938   			
;;;1939   				Global_datas.FmData.Frequency = Global_datas.FmData.station_table[Global_datas.FmData.current_station];
0004fa  0600              LSLS     r0,r0,#24
0004fc  495e              LDR      r1,|L15.1656|
0004fe  0d80              LSRS     r0,r0,#22
000500  1840              ADDS     r0,r0,r1
000502  6c80              LDR      r0,[r0,#0x48]
;;;1940   				//dis_mic(1);
;;;1941   				si47xxFMRX_tune(Global_datas.FmData.Frequency);
000504  6408              STR      r0,[r1,#0x40]  ; Global_datas
000506  f7fffffe          BL       si47xxFMRX_tune
;;;1942   				//FreqDisplay(Frequency); 	
;;;1943   				SendFmFreqToSubBoard();
00050a  f7fffffe          BL       SendFmFreqToSubBoard
;;;1944   			
;;;1945   				Global_datas.FmData.FmNeedToStore = 1;
;;;1946   				TimeOutSet(&FmStoreTimer, 2000);
00050e  217d              MOVS     r1,#0x7d
000510  7177              STRB     r7,[r6,#5]            ;1945
000512  0109              LSLS     r1,r1,#4
000514  485b              LDR      r0,|L15.1668|
000516  f7fffffe          BL       TimeOutSet
00051a  e00d              B        |L15.1336|
                  |L15.1308|
00051c  9805              LDR      r0,[sp,#0x14]         ;1928
00051e  2800              CMP      r0,#0                 ;1928
000520  d00a              BEQ      |L15.1336|
000522  9901              LDR      r1,[sp,#4]            ;1930
000524  9800              LDR      r0,[sp,#0]            ;1930
000526  4288              CMP      r0,r1                 ;1930
000528  da01              BGE      |L15.1326|
00052a  1c40              ADDS     r0,r0,#1              ;1930
00052c  e7e4              B        |L15.1272|
                  |L15.1326|
00052e  2000              MOVS     r0,#0                 ;1936
000530  e7e2              B        |L15.1272|
                  |L15.1330|
;;;1947   			
;;;1948   			}
;;;1949   
;;;1950   
;;;1951   			break;			
;;;1952   
;;;1953   		case SYS_PLAY_EVENT_BT_PAIRING:
;;;1954   
;;;1955   			Cmd_Send2FourG(0x03,0x4f,0);  // BT enter pairing mode
000532  2200              MOVS     r2,#0
000534  214f              MOVS     r1,#0x4f
;;;1956   			break;
000536  e72a              B        |L15.910|
                  |L15.1336|
;;;1957   
;;;1958   		default:break;
;;;1959   	}
;;;1960   
;;;1961   	Global_datas.event = SYS_PLAY_EVENT_NONE;
000538  2000              MOVS     r0,#0
00053a  76a0              STRB     r0,[r4,#0x1a]
;;;1962   
;;;1963   	switch(Global_datas.state)
00053c  7e60              LDRB     r0,[r4,#0x19]  ; Global_datas
00053e  0003              MOVS     r3,r0
000540  f7fffffe          BL       __ARM_common_switch8
000544  08525252          DCB      0x08,0x52,0x52,0x52
000548  52525252          DCB      0x52,0x52,0x52,0x52
00054c  0552              DCB      0x05,0x52
;;;1964   	{
;;;1965   		case SYS_PLAY_STATE_IDLE:
;;;1966   			break;
;;;1967   
;;;1968   	
;;;1969   		case SYS_PLAY_STATE_POWERUP:
;;;1970   			
;;;1971   			break;
;;;1972   
;;;1973   		case SYS_PLAY_STATE_MW_RADIO:
;;;1974   			
;;;1975   			break;		
;;;1976   
;;;1977   		case SYS_PLAY_STATE_BT:
;;;1978   			
;;;1979   			break;
;;;1980   			
;;;1981   		case SYS_PLAY_STATE_AUX:
;;;1982   			
;;;1983   			break;	
;;;1984   
;;;1985   		case SYS_PLAY_STATE_SHUTTING_DOWN:
;;;1986   			
;;;1987   			break;	
;;;1988   
;;;1989   		case SYS_PLAY_STATE_FM:
;;;1990   
;;;1991   			if(IsTimeOut(&FmLoopTimer))
00054e  4854              LDR      r0,|L15.1696|
000550  f7fffffe          BL       IsTimeOut
000554  2800              CMP      r0,#0
000556  d011              BEQ      |L15.1404|
;;;1992   			{
;;;1993   				TimeOutSet(&FmLoopTimer,1000);
000558  217d              MOVS     r1,#0x7d
00055a  00c9              LSLS     r1,r1,#3
00055c  4850              LDR      r0,|L15.1696|
00055e  f7fffffe          BL       TimeOutSet
;;;1994   
;;;1995   				if(Global_datas.fm_delay_time)
000562  7e20              LDRB     r0,[r4,#0x18]  ; Global_datas
000564  2800              CMP      r0,#0
000566  d009              BEQ      |L15.1404|
000568  1e40              SUBS     r0,r0,#1
;;;1996   				{
;;;1997   
;;;1998   				    
;;;1999   					Global_datas.fm_delay_time--;
00056a  0600              LSLS     r0,r0,#24
00056c  0e00              LSRS     r0,r0,#24
00056e  7620              STRB     r0,[r4,#0x18]
;;;2000   					if(Global_datas.fm_delay_time == 0)
000570  d104              BNE      |L15.1404|
;;;2001   					{
;;;2002   						Cmd_Send2FourG( 0x03,0x55,0x00); // poweroff cmd to 4G
000572  2200              MOVS     r2,#0
000574  2155              MOVS     r1,#0x55
000576  2003              MOVS     r0,#3
000578  f7fffffe          BL       Cmd_Send2FourG
                  |L15.1404|
;;;2003   						//Drv_4GMoudle_PowerUp(0); 
;;;2004   						//Global_datas.power_4g = 0;
;;;2005   						//TimeOutSet(&PoweroffLedTimer, 5000);
;;;2006   					}
;;;2007   				}
;;;2008   			}
;;;2009   
;;;2010   			if(IsTimeOut(&FmStoreTimer))
00057c  4841              LDR      r0,|L15.1668|
00057e  f7fffffe          BL       IsTimeOut
000582  2800              CMP      r0,#0
000584  d006              BEQ      |L15.1428|
;;;2011   			{
;;;2012   				if(Global_datas.FmData.FmNeedToStore)
000586  7970              LDRB     r0,[r6,#5]  ; Global_datas
000588  2800              CMP      r0,#0
00058a  d003              BEQ      |L15.1428|
;;;2013   				{
;;;2014   					Global_datas.FmData.FmNeedToStore = 0;
00058c  2000              MOVS     r0,#0
00058e  7170              STRB     r0,[r6,#5]
;;;2015   					DataStore();
000590  f7fffffe          BL       DataStore
                  |L15.1428|
;;;2016   				}
;;;2017   			}
;;;2018   
;;;2019   			switch(Global_datas.FmData.fmstate)
000594  79e8              LDRB     r0,[r5,#7]  ; Global_datas
000596  0003              MOVS     r3,r0
000598  f7fffffe          BL       __ARM_common_switch8
00059c  05262604          DCB      0x05,0x26,0x26,0x04
0005a0  0e282600          DCB      0x0e,0x28,0x26,0x00
;;;2020   			{
;;;2021   				case FM_STATE_OFF:
;;;2022   
;;;2023   				break;
;;;2024   
;;;2025   				case FM_STATE_ON:
;;;2026   
;;;2027   				break;
;;;2028   
;;;2029   				case FM_STATE_SEEK_UP:
;;;2030   
;;;2031   					if(Global_datas.FmData.Frequency <= 10790)
0005a4  4934              LDR      r1,|L15.1656|
0005a6  4a36              LDR      r2,|L15.1664|
0005a8  6c08              LDR      r0,[r1,#0x40]  ; Global_datas
0005aa  4290              CMP      r0,r2
0005ac  d801              BHI      |L15.1458|
0005ae  300a              ADDS     r0,r0,#0xa
;;;2032   					{
;;;2033   						Global_datas.FmData.Frequency += 10;
0005b0  e009              B        |L15.1478|
                  |L15.1458|
;;;2034   					}
;;;2035   					else
;;;2036   					{
;;;2037   						Global_datas.FmData.Frequency = 10800;
0005b2  4833              LDR      r0,|L15.1664|
0005b4  300a              ADDS     r0,r0,#0xa
;;;2038   						Global_datas.FmData.fmstate = FM_STATE_ON;		
0005b6  e009              B        |L15.1484|
;;;2039   						//dis_mic(0);
;;;2040   					}
;;;2041   
;;;2042   					temp_valid = si47xxFMRX_tune(Global_datas.FmData.Frequency);
;;;2043   					//FreqDisplay(Frequency);
;;;2044   					
;;;2045   					if(temp_valid)
;;;2046   					{
;;;2047   						//dis_mic(1);
;;;2048   						Global_datas.FmData.fmstate = FM_STATE_ON;		
;;;2049   						
;;;2050   						Global_datas.FmData.FmNeedToStore = 1;
;;;2051   						TimeOutSet(&FmStoreTimer, 2000);
;;;2052   					}
;;;2053   
;;;2054   				
;;;2055   
;;;2056   				break;
;;;2057   
;;;2058   				case FM_STATE_SEEK_DOWN:
;;;2059   
;;;2060   					if(Global_datas.FmData.Frequency >= 8760)  Global_datas.FmData.Frequency -= 10;
0005b8  492f              LDR      r1,|L15.1656|
0005ba  4a30              LDR      r2,|L15.1660|
0005bc  6c08              LDR      r0,[r1,#0x40]  ; Global_datas
0005be  320a              ADDS     r2,r2,#0xa
0005c0  4290              CMP      r0,r2
0005c2  d302              BCC      |L15.1482|
0005c4  380a              SUBS     r0,r0,#0xa
                  |L15.1478|
0005c6  6408              STR      r0,[r1,#0x40]         ;2033  ; Global_datas
0005c8  e003              B        |L15.1490|
                  |L15.1482|
;;;2061   					else 
;;;2062   					{
;;;2063   						Global_datas.FmData.Frequency = 8750;
0005ca  482c              LDR      r0,|L15.1660|
                  |L15.1484|
0005cc  6408              STR      r0,[r1,#0x40]         ;2038  ; Global_datas
0005ce  71ef              STRB     r7,[r5,#7]            ;2038
0005d0  6c08              LDR      r0,[r1,#0x40]         ;2042  ; Global_datas
                  |L15.1490|
;;;2064   						Global_datas.FmData.fmstate = FM_STATE_ON;		
;;;2065   						//dis_mic(0);
;;;2066   					}
;;;2067   
;;;2068   					temp_valid = si47xxFMRX_tune(Global_datas.FmData.Frequency);
0005d2  f7fffffe          BL       si47xxFMRX_tune
;;;2069   					//FreqDisplay(Frequency);
;;;2070   					
;;;2071   
;;;2072   					if(temp_valid)
0005d6  2800              CMP      r0,#0
0005d8  d006              BEQ      |L15.1512|
;;;2073   					{
;;;2074   						//dis_mic(1);
;;;2075   						Global_datas.FmData.fmstate = FM_STATE_ON;		
0005da  71ef              STRB     r7,[r5,#7]
;;;2076   						Global_datas.FmData.FmNeedToStore = 1;
;;;2077   						TimeOutSet(&FmStoreTimer, 2000);					
0005dc  217d              MOVS     r1,#0x7d
0005de  7177              STRB     r7,[r6,#5]            ;2076
0005e0  0109              LSLS     r1,r1,#4
0005e2  4828              LDR      r0,|L15.1668|
0005e4  f7fffffe          BL       TimeOutSet
                  |L15.1512|
;;;2078   					}					 
;;;2079   
;;;2080   				break;
;;;2081   
;;;2082   				case FM_STATE_AUTO_SEARCH:
;;;2083    
;;;2084   				temp_valid = si47xxFMRX_tune(Global_datas.FmData.Frequency);
;;;2085   				//FreqDisplay(Global_datas.FmData.Frequency);
;;;2086   				
;;;2087   				if(temp_valid)
;;;2088   				{
;;;2089   					//dis_mic(1);
;;;2090   					WaitMs(2000);
;;;2091   					
;;;2092   					Global_datas.FmData.station_table[Global_datas.FmData.index_station] = Global_datas.FmData.Frequency;
;;;2093   					if(Global_datas.FmData.index_station < (FM_MAX_STATION_NUM -1)) Global_datas.FmData.index_station++;
;;;2094   					if(Global_datas.FmData.Frequency <= 10790)
;;;2095   					{
;;;2096   						Global_datas.FmData.Frequency += 10;
;;;2097   					}
;;;2098   					else
;;;2099   					{
;;;2100   						Global_datas.FmData.station_num = Global_datas.FmData.index_station;
;;;2101   						if(Global_datas.FmData.station_num)
;;;2102   						{
;;;2103   							Global_datas.FmData.Frequency = Global_datas.FmData.station_table[0];
;;;2104   							//dis_mic(1);		
;;;2105   							Global_datas.FmData.current_station = 0;
;;;2106   						}
;;;2107   						else
;;;2108   						{
;;;2109   							Global_datas.FmData.Frequency = 8750;
;;;2110   							//dis_mic(0);
;;;2111   						}
;;;2112   
;;;2113   
;;;2114   						Global_datas.FmData.FmNeedToStore = 1;
;;;2115   						TimeOutSet(&FmStoreTimer, 1000);
;;;2116   						
;;;2117   						si47xxFMRX_tune(Global_datas.FmData.Frequency);
;;;2118   						
;;;2119   						SendFmFreqToSubBoard();
;;;2120   						//FreqDisplay(Frequency);
;;;2121   						Global_datas.FmData.fmstate = FM_STATE_ON;		
;;;2122   					}
;;;2123   				}	
;;;2124   				else
;;;2125   				{
;;;2126   					if(Global_datas.FmData.Frequency <= 10790)	Global_datas.FmData.Frequency += 10;
;;;2127   					else
;;;2128   					{
;;;2129   						Global_datas.FmData.station_num = Global_datas.FmData.index_station;
;;;2130   						if(Global_datas.FmData.station_num)
;;;2131   						{
;;;2132   							Global_datas.FmData.Frequency = Global_datas.FmData.station_table[0];
;;;2133   							//dis_mic(1);		
;;;2134   							Global_datas.FmData.current_station = 0;
;;;2135   						}
;;;2136   						else
;;;2137   						{
;;;2138   							Global_datas.FmData.Frequency = 8750;
;;;2139   							//dis_mic(0);
;;;2140   						}
;;;2141   
;;;2142   						DataStore();
;;;2143   						si47xxFMRX_tune(Global_datas.FmData.Frequency);
;;;2144   						SendFmFreqToSubBoard();
;;;2145   						//FreqDisplay(Frequency);
;;;2146   						Global_datas.FmData.fmstate = FM_STATE_ON;		
;;;2147   					}
;;;2148   				}					
;;;2149   
;;;2150   				break;
;;;2151   			}
;;;2152   			
;;;2153   			break;		
;;;2154   			
;;;2155   		default:break;
;;;2156   	}
;;;2157   }
0005e8  b007              ADD      sp,sp,#0x1c
0005ea  bdf0              POP      {r4-r7,pc}
0005ec  4c22              LDR      r4,|L15.1656|
0005ee  6c20              LDR      r0,[r4,#0x40]         ;2084  ; Global_datas
0005f0  f7fffffe          BL       si47xxFMRX_tune
0005f4  2800              CMP      r0,#0                 ;2087
0005f6  d023              BEQ      |L15.1600|
0005f8  207d              MOVS     r0,#0x7d              ;2090
0005fa  0100              LSLS     r0,r0,#4              ;2090
0005fc  f7fffffe          BL       WaitMs
000600  7969              LDRB     r1,[r5,#5]            ;2092  ; Global_datas
000602  6c20              LDR      r0,[r4,#0x40]         ;2092  ; Global_datas
000604  0089              LSLS     r1,r1,#2              ;2092
000606  1909              ADDS     r1,r1,r4              ;2092
000608  6488              STR      r0,[r1,#0x48]         ;2093
00060a  7968              LDRB     r0,[r5,#5]            ;2093  ; Global_datas
00060c  280e              CMP      r0,#0xe               ;2093
00060e  d201              BCS      |L15.1556|
000610  1c40              ADDS     r0,r0,#1              ;2093
000612  7168              STRB     r0,[r5,#5]            ;2093
                  |L15.1556|
000614  491a              LDR      r1,|L15.1664|
000616  6c20              LDR      r0,[r4,#0x40]         ;2094  ; Global_datas
000618  4288              CMP      r0,r1                 ;2094
00061a  d915              BLS      |L15.1608|
00061c  7968              LDRB     r0,[r5,#5]            ;2100  ; Global_datas
00061e  7128              STRB     r0,[r5,#4]            ;2100
000620  2800              CMP      r0,#0                 ;2101
000622  d004              BEQ      |L15.1582|
000624  6ca0              LDR      r0,[r4,#0x48]         ;2103  ; Global_datas
000626  6420              STR      r0,[r4,#0x40]         ;2105  ; Global_datas
000628  2000              MOVS     r0,#0                 ;2105
00062a  71a8              STRB     r0,[r5,#6]            ;2105
00062c  e001              B        |L15.1586|
                  |L15.1582|
00062e  4813              LDR      r0,|L15.1660|
000630  6420              STR      r0,[r4,#0x40]         ;2109  ; Global_datas
                  |L15.1586|
000632  217d              MOVS     r1,#0x7d              ;2115
000634  7177              STRB     r7,[r6,#5]            ;2114
000636  00c9              LSLS     r1,r1,#3              ;2115
000638  4812              LDR      r0,|L15.1668|
00063a  f7fffffe          BL       TimeOutSet
00063e  e013              B        |L15.1640|
                  |L15.1600|
000640  490f              LDR      r1,|L15.1664|
000642  6c20              LDR      r0,[r4,#0x40]         ;2126  ; Global_datas
000644  4288              CMP      r0,r1                 ;2126
000646  d802              BHI      |L15.1614|
                  |L15.1608|
000648  300a              ADDS     r0,r0,#0xa            ;2126
00064a  6420              STR      r0,[r4,#0x40]         ;2126  ; Global_datas
00064c  e7cc              B        |L15.1512|
                  |L15.1614|
00064e  7968              LDRB     r0,[r5,#5]            ;2129  ; Global_datas
000650  7128              STRB     r0,[r5,#4]            ;2129
000652  2800              CMP      r0,#0                 ;2130
000654  d004              BEQ      |L15.1632|
000656  6ca0              LDR      r0,[r4,#0x48]         ;2132  ; Global_datas
000658  6420              STR      r0,[r4,#0x40]         ;2134  ; Global_datas
00065a  2000              MOVS     r0,#0                 ;2134
00065c  71a8              STRB     r0,[r5,#6]            ;2134
00065e  e001              B        |L15.1636|
                  |L15.1632|
000660  4806              LDR      r0,|L15.1660|
000662  6420              STR      r0,[r4,#0x40]         ;2138  ; Global_datas
                  |L15.1636|
000664  f7fffffe          BL       DataStore
                  |L15.1640|
000668  6c20              LDR      r0,[r4,#0x40]         ;2143  ; Global_datas
00066a  f7fffffe          BL       si47xxFMRX_tune
00066e  f7fffffe          BL       SendFmFreqToSubBoard
000672  71ef              STRB     r7,[r5,#7]            ;2146
000674  e7b8              B        |L15.1512|
;;;2158   
                          ENDP

000676  0000              DCW      0x0000
                  |L15.1656|
                          DCD      Global_datas
                  |L15.1660|
                          DCD      0x0000222e
                  |L15.1664|
                          DCD      0x00002a26
                  |L15.1668|
                          DCD      FmStoreTimer
                  |L15.1672|
000688  464d2055          DCB      "FM UP\n",0
00068c  500a00  
00068f  00                DCB      0
                  |L15.1680|
                          DCD      0x00002760
                  |L15.1684|
000694  464d2044          DCB      "FM DOWN\n",0
000698  4f574e0a
00069c  00      
00069d  00                DCB      0
00069e  00                DCB      0
00069f  00                DCB      0
                  |L15.1696|
                          DCD      FmLoopTimer

                          AREA ||i.TYM_DriverInit||, CODE, READONLY, ALIGN=1

                  TYM_DriverInit PROC
;;;152    
;;;153    void TYM_DriverInit(void)
000000  b510              PUSH     {r4,lr}
;;;154    {
;;;155    	//Drv_audio_init();
;;;156    	Drv_IrKey_init(); // kim
000002  f7fffffe          BL       Drv_IrKey_init
;;;157    	drv_gipo_key_init();
000006  f7fffffe          BL       drv_gipo_key_init
;;;158    }
00000a  bd10              POP      {r4,pc}
;;;159    
                          ENDP


                          AREA ||i.main||, CODE, READONLY, ALIGN=2

                  main PROC
;;;1143   /*---------------------------------------------------------------------------------------------------------*/
;;;1144   int32_t main(void)
000000  2600              MOVS     r6,#0
;;;1145   {
;;;1146   	uint8_t ledtimecount = 0;
;;;1147   	uint8_t resume_timecount = 0;
;;;1148   	
;;;1149   	/* Init System, peripheral clock and multi-function I/O */
;;;1150   
;;;1151   	SYS_Init();
000002  f7fffffe          BL       SYS_Init
;;;1152    	SysIdle();
000006  f7fffffe          BL       SysIdle
;;;1153   
;;;1154     	printf("\nmain\n");
00000a  a067              ADR      r0,|L17.424|
00000c  f7fffffe          BL       __2printf
;;;1155   	
;;;1156       while(1)
;;;1157       {
;;;1158       	if(IsTimeOut(&SysTimer_50ms))
;;;1159       	{
;;;1160       		TimeOutSet(&SysTimer_50ms, 2000);
;;;1161   			ADC_FunctionTest();
;;;1162   			DcInDetect();
;;;1163   			BatteryChargeStateChcek();
;;;1164   
;;;1165   			if(Global_datas.PowerState.AdapterIn)
000010  4c67              LDR      r4,|L17.432|
;;;1166   			{
;;;1167   				switch(Global_datas.PowerState.charge_state)
000012  2701              MOVS     r7,#1
000014  4625              MOV      r5,r4                 ;1165
000016  3580              ADDS     r5,r5,#0x80           ;1165
000018  3420              ADDS     r4,r4,#0x20
                  |L17.26|
00001a  4866              LDR      r0,|L17.436|
00001c  f7fffffe          BL       IsTimeOut
000020  2800              CMP      r0,#0                 ;1158
000022  d039              BEQ      |L17.152|
000024  217d              MOVS     r1,#0x7d              ;1160
000026  0109              LSLS     r1,r1,#4              ;1160
000028  4862              LDR      r0,|L17.436|
00002a  f7fffffe          BL       TimeOutSet
00002e  f7fffffe          BL       ADC_FunctionTest
000032  f7fffffe          BL       DcInDetect
000036  f7fffffe          BL       BatteryChargeStateChcek
00003a  7ce8              LDRB     r0,[r5,#0x13]         ;1165  ; Global_datas
00003c  2800              CMP      r0,#0                 ;1165
00003e  d010              BEQ      |L17.98|
000040  7c68              LDRB     r0,[r5,#0x11]  ; Global_datas
000042  2801              CMP      r0,#1
000044  d002              BEQ      |L17.76|
000046  2802              CMP      r0,#2
000048  d10b              BNE      |L17.98|
00004a  e004              B        |L17.86|
                  |L17.76|
;;;1168   				{
;;;1169   					case CHARGE_STATE_ON:
;;;1170   						 drv_led_state1_onoff_red(1);
00004c  2001              MOVS     r0,#1
00004e  f7fffffe          BL       drv_led_state1_onoff_red
;;;1171   						 drv_led_state1_onoff_green(0);
000052  2000              MOVS     r0,#0
;;;1172   						 break;
000054  e003              B        |L17.94|
                  |L17.86|
;;;1173   					case CHARGE_STATE_COMPLETE:
;;;1174   						 drv_led_state1_onoff_red(0);
000056  2000              MOVS     r0,#0
000058  f7fffffe          BL       drv_led_state1_onoff_red
;;;1175   						 drv_led_state1_onoff_green(1);	
00005c  2001              MOVS     r0,#1
                  |L17.94|
00005e  f7fffffe          BL       drv_led_state1_onoff_green
                  |L17.98|
;;;1176   						 break;
;;;1177   
;;;1178   					case CHARGE_STATE_NG:
;;;1179   						break;
;;;1180   					default:break;
;;;1181   				}
;;;1182   			}
;;;1183   			
;;;1184   			if((Global_datas.PowerState.battery_level == 0) && (Global_datas.state > SYS_PLAY_STATE_POWERUP) && (Global_datas.PowerState.AdapterIn == 0))
000062  7c28              LDRB     r0,[r5,#0x10]  ; Global_datas
000064  2800              CMP      r0,#0
000066  d00d              BEQ      |L17.132|
;;;1185   			{
;;;1186   				Global_datas.inputmessage =  IN_KEY_POWER_CP;
;;;1187   			}
;;;1188   			else if((Global_datas.PowerState.battery_level < BAT_LEVEL_20_PERCENT) && (Global_datas.PowerState.battery_data >  batlevel_table[0])  && (Global_datas.volume > 8) && (Global_datas.PowerState.AdapterIn == 0))
000068  2802              CMP      r0,#2
00006a  d215              BCS      |L17.152|
                  |L17.108|
00006c  4952              LDR      r1,|L17.440|
00006e  68a8              LDR      r0,[r5,#8]  ; Global_datas
000070  6809              LDR      r1,[r1,#0]  ; batlevel_table
000072  4288              CMP      r0,r1
000074  d910              BLS      |L17.152|
000076  7ce0              LDRB     r0,[r4,#0x13]  ; Global_datas
000078  2808              CMP      r0,#8
00007a  d90d              BLS      |L17.152|
00007c  7ce8              LDRB     r0,[r5,#0x13]  ; Global_datas
00007e  2800              CMP      r0,#0
000080  d008              BEQ      |L17.148|
000082  e009              B        |L17.152|
                  |L17.132|
000084  7e60              LDRB     r0,[r4,#0x19]         ;1184  ; Global_datas
000086  2802              CMP      r0,#2                 ;1184
000088  d9f0              BLS      |L17.108|
00008a  7ce8              LDRB     r0,[r5,#0x13]         ;1184  ; Global_datas
00008c  2800              CMP      r0,#0                 ;1184
00008e  d1ed              BNE      |L17.108|
000090  2002              MOVS     r0,#2                 ;1186
000092  e000              B        |L17.150|
                  |L17.148|
;;;1189   			{
;;;1190   			 	Global_datas.inputmessage =  IN_KEY_DEFAULT_VOLUME_SET;
000094  201c              MOVS     r0,#0x1c
                  |L17.150|
000096  75e0              STRB     r0,[r4,#0x17]
                  |L17.152|
;;;1191   			}
;;;1192   
;;;1193   		}
;;;1194   
;;;1195   		if(IsTimeOut(&SysTimer_1s))
000098  4848              LDR      r0,|L17.444|
00009a  f7fffffe          BL       IsTimeOut
00009e  2800              CMP      r0,#0
0000a0  d035              BEQ      |L17.270|
;;;1196   		{
;;;1197   			TimeOutSet(&SysTimer_1s, 500);
0000a2  21ff              MOVS     r1,#0xff
0000a4  31f5              ADDS     r1,r1,#0xf5
0000a6  4845              LDR      r0,|L17.444|
0000a8  f7fffffe          BL       TimeOutSet
;;;1198   	        if(Global_datas.g_4g_initing)
0000ac  7a20              LDRB     r0,[r4,#8]  ; Global_datas
0000ae  2800              CMP      r0,#0
0000b0  d002              BEQ      |L17.184|
;;;1199   			{
;;;1200   				srv_led_sys_initing();
0000b2  f7fffffe          BL       srv_led_sys_initing
0000b6  e001              B        |L17.188|
                  |L17.184|
;;;1201   			}
;;;1202   			else
;;;1203   			{
;;;1204   				srv_led_change_handler();
0000b8  f7fffffe          BL       srv_led_change_handler
                  |L17.188|
;;;1205   			}
;;;1206   
;;;1207   			if(IsTimeOut(&ModulePowerUpPinTimer))
0000bc  4840              LDR      r0,|L17.448|
0000be  f7fffffe          BL       IsTimeOut
0000c2  2800              CMP      r0,#0
0000c4  d001              BEQ      |L17.202|
;;;1208   			{
;;;1209   				drv_FourGmodel_power_key_SetLow();
0000c6  f7fffffe          BL       drv_FourGmodel_power_key_SetLow
                  |L17.202|
;;;1210   			}
;;;1211   
;;;1212   			if(Global_datas.state == SYS_PLAY_STATE_SHUTTING_DOWN)
0000ca  7e60              LDRB     r0,[r4,#0x19]  ; Global_datas
0000cc  2804              CMP      r0,#4
0000ce  d114              BNE      |L17.250|
;;;1213   			{
;;;1214   				if(!IsTimeOut(&PoweroffLedTimer))
0000d0  483c              LDR      r0,|L17.452|
0000d2  f7fffffe          BL       IsTimeOut
0000d6  2800              CMP      r0,#0
0000d8  d042              BEQ      |L17.352|
;;;1215   				{			
;;;1216   					if(ledtimecount)
;;;1217   					{
;;;1218   						PA12 = 1;
;;;1219   						PA13 = 1;
;;;1220   						PA1 = 1;
;;;1221   						ledtimecount = 0;
;;;1222   					}
;;;1223   					else
;;;1224   					{
;;;1225   						PA12 = 0;
;;;1226   						PA13 = 0;
;;;1227   						PA1 = 0;
;;;1228   						ledtimecount = 1;
;;;1229   					}
;;;1230   				}
;;;1231   				else
;;;1232   				{
;;;1233   					PA12 = 1;
0000da  483b              LDR      r0,|L17.456|
0000dc  6307              STR      r7,[r0,#0x30]
;;;1234   					PA13 = 1;
0000de  6347              STR      r7,[r0,#0x34]
;;;1235   					PA1 = 1;
0000e0  6047              STR      r7,[r0,#4]
;;;1236   					Drv_4GMoudle_PowerUp(0); // if timeout,turn off.
0000e2  2000              MOVS     r0,#0
0000e4  f7fffffe          BL       Drv_4GMoudle_PowerUp
;;;1237   					TYM_drv_powerkeepon(0); 
0000e8  2000              MOVS     r0,#0
0000ea  f7fffffe          BL       TYM_drv_powerkeepon
;;;1238   					TYM_SysPower12V_3V3_onoff(0);
0000ee  2000              MOVS     r0,#0
0000f0  f7fffffe          BL       TYM_SysPower12V_3V3_onoff
;;;1239   
;;;1240   					Global_datas.shoutting_down = 0;
0000f4  2000              MOVS     r0,#0
0000f6  7460              STRB     r0,[r4,#0x11]
;;;1241   					Global_datas.state = SYS_PLAY_STATE_IDLE;
0000f8  7667              STRB     r7,[r4,#0x19]
                  |L17.250|
;;;1242   				}
;;;1243   				
;;;1244   			}
;;;1245   
;;;1246   			if(IsTimeOut(&SubBoardHandshakeTimer))
0000fa  4834              LDR      r0,|L17.460|
0000fc  f7fffffe          BL       IsTimeOut
000100  2800              CMP      r0,#0
000102  d004              BEQ      |L17.270|
;;;1247   			{
;;;1248   				Global_datas.SubBoard.subboard_online = 0;
000104  2000              MOVS     r0,#0
000106  76e0              STRB     r0,[r4,#0x1b]
;;;1249   				printf("SUB BOARD OFF\n");
000108  a031              ADR      r0,|L17.464|
00010a  f7fffffe          BL       __2printf
                  |L17.270|
;;;1250   			}			
;;;1251   		}
;;;1252   		
;;;1253   		if(Global_datas.key_led_blink)
00010e  7c20              LDRB     r0,[r4,#0x10]  ; Global_datas
000110  2800              CMP      r0,#0
000112  d008              BEQ      |L17.294|
;;;1254   		{
;;;1255   			Global_datas.key_led_blink = 0;
000114  2000              MOVS     r0,#0
000116  7420              STRB     r0,[r4,#0x10]
;;;1256   			drv_err_led_on(1);
000118  2001              MOVS     r0,#1
00011a  f7fffffe          BL       drv_err_led_on
;;;1257   			TimeOutSet(&LedKeyBlinkTimer, 100);
00011e  2164              MOVS     r1,#0x64
000120  482f              LDR      r0,|L17.480|
000122  f7fffffe          BL       TimeOutSet
                  |L17.294|
;;;1258   		}
;;;1259   
;;;1260   		if(IsTimeOut(&LedKeyBlinkTimer))
000126  482e              LDR      r0,|L17.480|
000128  f7fffffe          BL       IsTimeOut
00012c  2800              CMP      r0,#0
00012e  d002              BEQ      |L17.310|
;;;1261   		{
;;;1262   			drv_err_led_on(0);
000130  2000              MOVS     r0,#0
000132  f7fffffe          BL       drv_err_led_on
                  |L17.310|
;;;1263   		}
;;;1264   
;;;1265   		if(Global_datas.mode_switching)
000136  7d20              LDRB     r0,[r4,#0x14]  ; Global_datas
000138  2800              CMP      r0,#0
00013a  d008              BEQ      |L17.334|
;;;1266   		{
;;;1267   			Global_datas.mode_switching = 0;
00013c  2000              MOVS     r0,#0
00013e  7520              STRB     r0,[r4,#0x14]
;;;1268   			drv_5825_mute_pin_set(0);  // mute
000140  f7fffffe          BL       drv_5825_mute_pin_set
;;;1269   			TimeOutSet(&ModeSwitchTimer, 1000);
000144  217d              MOVS     r1,#0x7d
000146  00c9              LSLS     r1,r1,#3
000148  4826              LDR      r0,|L17.484|
00014a  f7fffffe          BL       TimeOutSet
                  |L17.334|
;;;1270   		}
;;;1271   
;;;1272   		if(IsTimeOut(&ModeSwitchTimer))
00014e  4825              LDR      r0,|L17.484|
000150  f7fffffe          BL       IsTimeOut
000154  2800              CMP      r0,#0
000156  d015              BEQ      |L17.388|
;;;1273   		{
;;;1274   			if(Global_datas.mute == 0)
000158  7d60              LDRB     r0,[r4,#0x15]  ; Global_datas
00015a  2800              CMP      r0,#0
00015c  d00f              BEQ      |L17.382|
00015e  e011              B        |L17.388|
                  |L17.352|
000160  2e00              CMP      r6,#0                 ;1216
000162  d005              BEQ      |L17.368|
000164  4818              LDR      r0,|L17.456|
000166  6307              STR      r7,[r0,#0x30]         ;1218
000168  6347              STR      r7,[r0,#0x34]         ;1219
00016a  6047              STR      r7,[r0,#4]            ;1220
00016c  2600              MOVS     r6,#0                 ;1221
00016e  e7c4              B        |L17.250|
                  |L17.368|
000170  4815              LDR      r0,|L17.456|
000172  2100              MOVS     r1,#0                 ;1225
000174  6301              STR      r1,[r0,#0x30]         ;1225
000176  6341              STR      r1,[r0,#0x34]         ;1226
000178  6041              STR      r1,[r0,#4]            ;1227
00017a  2601              MOVS     r6,#1                 ;1228
00017c  e7bd              B        |L17.250|
                  |L17.382|
;;;1275   			{
;;;1276   				drv_5825_mute_pin_set(1);  // unmute
00017e  2001              MOVS     r0,#1
000180  f7fffffe          BL       drv_5825_mute_pin_set
                  |L17.388|
;;;1277   			}
;;;1278   		}
;;;1279   
;;;1280   		if(Global_datas.inputmessage == IN_KEY_NONE)  // read IR key
000184  7de0              LDRB     r0,[r4,#0x17]  ; Global_datas
000186  2800              CMP      r0,#0
000188  d10b              BNE      |L17.418|
;;;1281   		{
;;;1282   			Global_datas.inputmessage = GetIrKey();
00018a  f7fffffe          BL       GetIrKey
00018e  75e0              STRB     r0,[r4,#0x17]
;;;1283   		}
;;;1284   		
;;;1285   		if( Global_datas.inputmessage == IN_KEY_NONE)  // read gpio key
000190  2800              CMP      r0,#0
000192  d106              BNE      |L17.418|
;;;1286   		{
;;;1287   			GetKeyEvent();
000194  f7fffffe          BL       GetKeyEvent
;;;1288   			
;;;1289   			if(((Global_datas.state == SYS_PLAY_STATE_IDLE || Global_datas.state == SYS_PLAY_STATE_POWERUP )&&(IN_KEY_POWER_CP != Global_datas.inputmessage)) || \
;;;1290   				(Global_datas.state == SYS_PLAY_STATE_SHUTTING_DOWN))
;;;1291   			{
;;;1292   				//Global_datas.inputmessage = IN_KEY_NONE;
;;;1293   			}
;;;1294   		}
;;;1295   		
;;;1296   		if(Global_datas.inputmessage == IN_KEY_NONE) // message deal
000198  7de0              LDRB     r0,[r4,#0x17]  ; Global_datas
00019a  2800              CMP      r0,#0
00019c  d101              BNE      |L17.418|
;;;1297   		{
;;;1298   			MessageProcess();
00019e  f7fffffe          BL       MessageProcess
                  |L17.418|
;;;1299   		}
;;;1300   
;;;1301   		Sysctrl();
0001a2  f7fffffe          BL       Sysctrl
0001a6  e738              B        |L17.26|
;;;1302   
;;;1303   		
;;;1304   	}
;;;1305   
;;;1306   }
;;;1307   
                          ENDP

                  |L17.424|
0001a8  0a6d6169          DCB      "\nmain\n",0
0001ac  6e0a00  
0001af  00                DCB      0
                  |L17.432|
                          DCD      Global_datas
                  |L17.436|
                          DCD      SysTimer_50ms
                  |L17.440|
                          DCD      batlevel_table
                  |L17.444|
                          DCD      SysTimer_1s
                  |L17.448|
                          DCD      ModulePowerUpPinTimer
                  |L17.452|
                          DCD      PoweroffLedTimer
                  |L17.456|
                          DCD      0x50004200
                  |L17.460|
                          DCD      SubBoardHandshakeTimer
                  |L17.464|
0001d0  53554220          DCB      "SUB BOARD OFF\n",0
0001d4  424f4152
0001d8  44204f46
0001dc  460a00  
0001df  00                DCB      0
                  |L17.480|
                          DCD      LedKeyBlinkTimer
                  |L17.484|
                          DCD      ModeSwitchTimer

                          AREA ||.data||, DATA, ALIGN=0

                  sys_err
000000  00                DCB      0x00

                          AREA ||i.__ARM_common_switch8||, COMGROUP=__ARM_common_switch8, CODE, READONLY, ALIGN=1

                  __ARM_common_switch8 PROC
000000  b430              PUSH     {r4,r5}
000002  4674              MOV      r4,lr
000004  1e64              SUBS     r4,r4,#1
000006  7825              LDRB     r5,[r4,#0]
000008  1c64              ADDS     r4,r4,#1
00000a  42ab              CMP      r3,r5
00000c  d200              BCS      |L106.16|
00000e  461d              MOV      r5,r3
                  |L106.16|
000010  5d63              LDRB     r3,[r4,r5]
000012  005b              LSLS     r3,r3,#1
000014  18e3              ADDS     r3,r4,r3
000016  bc30              POP      {r4,r5}
000018  4718              BX       r3
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\main.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_sys_err____REV16|
#line 388 "..\\lib\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___6_main_c_sys_err____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_sys_err____REVSH|
#line 402
|__asm___6_main_c_sys_err____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
