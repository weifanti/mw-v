; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\main.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\main.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\lib\CMSIS\Include -I..\lib\Device\Nuvoton\NUC029xGE\Include -I..\lib\StdDriver\inc -I..\src\core\include -I..\src\driver\include -I..\src\io\include -I..\src\global -I..\src\server\include -I..\src\driver\audio -D__UVISION_VERSION=522 --omf_browse=.\obj\main.crf ..\main.c]
                          THUMB

                          AREA ||i.Amplifier_open||, CODE, READONLY, ALIGN=2

                  Amplifier_open PROC
;;;124    
;;;125    void Amplifier_open(void)
000000  b510              PUSH     {r4,lr}
;;;126    {
;;;127    	GPIO_SetMode(PC, BIT1, GPIO_MODE_OUTPUT);	
000002  4c0c              LDR      r4,|L1.52|
000004  2201              MOVS     r2,#1
000006  2102              MOVS     r1,#2
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       GPIO_SetMode
;;;128    	GPIO_SetMode(PC, BIT13, GPIO_MODE_OUTPUT);
00000e  2201              MOVS     r2,#1
000010  0351              LSLS     r1,r2,#13
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       GPIO_SetMode
;;;129    	GPIO_SetMode(PB, BIT14, GPIO_MODE_OUTPUT);
000018  4806              LDR      r0,|L1.52|
00001a  2201              MOVS     r2,#1
00001c  0391              LSLS     r1,r2,#14
00001e  3840              SUBS     r0,r0,#0x40
000020  f7fffffe          BL       GPIO_SetMode
;;;130    	PC1 = 1;
000024  4904              LDR      r1,|L1.56|
000026  2001              MOVS     r0,#1
000028  6048              STR      r0,[r1,#4]
;;;131    	PC13 = 1;
00002a  6348              STR      r0,[r1,#0x34]
;;;132    	PB14 = 1;
00002c  4902              LDR      r1,|L1.56|
00002e  3940              SUBS     r1,r1,#0x40
000030  6388              STR      r0,[r1,#0x38]
;;;133    }
000032  bd10              POP      {r4,pc}
;;;134    
                          ENDP

                  |L1.52|
                          DCD      0x50004080
                  |L1.56|
                          DCD      0x50004280

                          AREA ||i.IoKeyProcess||, CODE, READONLY, ALIGN=2

                  IoKeyProcess PROC
;;;211    
;;;212    void IoKeyProcess(void)
000000  b510              PUSH     {r4,lr}
;;;213    {
;;;214    	if(IoKeyInputmessage)
000002  4c18              LDR      r4,|L2.100|
000004  7820              LDRB     r0,[r4,#0]  ; IoKeyInputmessage
000006  2800              CMP      r0,#0
000008  d025              BEQ      |L2.86|
;;;215    	{
;;;216    		switch(IoKeyInputmessage)
00000a  28f0              CMP      r0,#0xf0
00000c  d012              BEQ      |L2.52|
00000e  28f1              CMP      r0,#0xf1
000010  d016              BEQ      |L2.64|
000012  28f3              CMP      r0,#0xf3
000014  d002              BEQ      |L2.28|
000016  28f4              CMP      r0,#0xf4
000018  d11d              BNE      |L2.86|
00001a  e005              B        |L2.40|
                  |L2.28|
;;;217    		{
;;;218    			case IN_KEY_PAIR_SP:
;;;219    				printf("pari key sp\n");
00001c  a012              ADR      r0,|L2.104|
00001e  f7fffffe          BL       __2printf
;;;220    				drv_wifi_4g_switch_cmd_send();
000022  f7fffffe          BL       drv_wifi_4g_switch_cmd_send
;;;221    				break;
000026  e016              B        |L2.86|
                  |L2.40|
;;;222    			case IN_KEY_PAIR_CP:
;;;223    				printf("pari key cp\n");
000028  a013              ADR      r0,|L2.120|
00002a  f7fffffe          BL       __2printf
;;;224    				drv_pairing_cmd_send();
00002e  f7fffffe          BL       drv_pairing_cmd_send
;;;225    				
;;;226    				break;
000032  e010              B        |L2.86|
                  |L2.52|
;;;227    			case IN_KEY_POWER_SP:
;;;228    				printf("power key sp\n");
000034  a014              ADR      r0,|L2.136|
000036  f7fffffe          BL       __2printf
;;;229    				srv_key_mode_handler();
00003a  f7fffffe          BL       srv_key_mode_handler
;;;230    				break;
00003e  e00a              B        |L2.86|
                  |L2.64|
;;;231    			case IN_KEY_POWER_CP:
;;;232    				printf("power key cp\n");	
000040  a015              ADR      r0,|L2.152|
000042  f7fffffe          BL       __2printf
;;;233    				//PowerOff();
;;;234    				if(Global_datas.g_mode_status == POWER_IDLE_MODE)
000046  4818              LDR      r0,|L2.168|
000048  7940              LDRB     r0,[r0,#5]  ; Global_datas
00004a  280e              CMP      r0,#0xe
00004c  d006              BEQ      |L2.92|
;;;235    				{
;;;236    					SYS_Status();
;;;237    				}
;;;238    
;;;239    				else
;;;240    				{
;;;241    					PowerOff();
00004e  f7fffffe          BL       PowerOff
;;;242    					SysIdle();
000052  f7fffffe          BL       SysIdle
                  |L2.86|
;;;243    				}
;;;244    				break;
;;;245    
;;;246    		  	default:break;
;;;247    		}
;;;248    	}
;;;249    
;;;250    	IoKeyInputmessage = 0;
000056  2000              MOVS     r0,#0
000058  7020              STRB     r0,[r4,#0]
;;;251    		
;;;252    }
00005a  bd10              POP      {r4,pc}
                  |L2.92|
00005c  f7fffffe          BL       SYS_Status
000060  e7f9              B        |L2.86|
;;;253    
                          ENDP

000062  0000              DCW      0x0000
                  |L2.100|
                          DCD      IoKeyInputmessage
                  |L2.104|
000068  70617269          DCB      "pari key sp\n",0
00006c  206b6579
000070  2073700a
000074  00      
000075  00                DCB      0
000076  00                DCB      0
000077  00                DCB      0
                  |L2.120|
000078  70617269          DCB      "pari key cp\n",0
00007c  206b6579
000080  2063700a
000084  00      
000085  00                DCB      0
000086  00                DCB      0
000087  00                DCB      0
                  |L2.136|
000088  706f7765          DCB      "power key sp\n",0
00008c  72206b65
000090  79207370
000094  0a00    
000096  00                DCB      0
000097  00                DCB      0
                  |L2.152|
000098  706f7765          DCB      "power key cp\n",0
00009c  72206b65
0000a0  79206370
0000a4  0a00    
0000a6  00                DCB      0
0000a7  00                DCB      0
                  |L2.168|
                          DCD      Global_datas+0x20

                          AREA ||i.PowerOff||, CODE, READONLY, ALIGN=1

                  PowerOff PROC
;;;201    
;;;202    void PowerOff(void)
000000  b510              PUSH     {r4,lr}
;;;203    {
;;;204    	drv_Cmd_Send2NCU031(0x07, 0x15,0x00);// power off
000002  2200              MOVS     r2,#0
000004  2115              MOVS     r1,#0x15
000006  2007              MOVS     r0,#7
000008  f7fffffe          BL       drv_Cmd_Send2NCU031
;;;205    	TYM_drv_powerkeepon(0); 
00000c  2000              MOVS     r0,#0
00000e  f7fffffe          BL       TYM_drv_powerkeepon
;;;206    	Drv_4GMoudle_PowerUp(0);
000012  2000              MOVS     r0,#0
000014  f7fffffe          BL       Drv_4GMoudle_PowerUp
;;;207    	drv_led_init();// led all off
000018  f7fffffe          BL       drv_led_init
;;;208    	Drv_audio_powerdown();
00001c  f7fffffe          BL       Drv_audio_powerdown
;;;209    }
000020  bd10              POP      {r4,pc}
;;;210    
                          ENDP


                          AREA ||i.SYS_BusInit||, CODE, READONLY, ALIGN=1

                  SYS_BusInit PROC
;;;112    
;;;113    void SYS_BusInit(void)
000000  b510              PUSH     {r4,lr}
;;;114    {
;;;115    	Debug_Uart_Init();
000002  f7fffffe          BL       Debug_Uart_Init
;;;116    	
;;;117    	Transfer_Uart_Init();
000006  f7fffffe          BL       Transfer_Uart_Init
;;;118    	
;;;119    	USCI_Uart_Init();
00000a  f7fffffe          BL       USCI_Uart_Init
;;;120    	
;;;121    	Hal_I2c_Init();
00000e  f7fffffe          BL       Hal_I2c_Init
;;;122    	
;;;123    }
000012  bd10              POP      {r4,pc}
;;;124    
                          ENDP


                          AREA ||i.SYS_Clock_init||, CODE, READONLY, ALIGN=2

                  SYS_Clock_init PROC
;;;45     
;;;46     void SYS_Clock_init(void)
000000  b5f8              PUSH     {r3-r7,lr}
;;;47     {
;;;48     
;;;49         
;;;50        // SYS->GPF_MFPL = SYS_GPF_MFPL_PF4MFP_XT1_IN | SYS_GPF_MFPL_PF3MFP_XT1_OUT | SYS_GPF_MFPL_PF1MFP_X32_IN | SYS_GPF_MFPL_PF0MFP_X32_OUT;
;;;51     	/* Enable HIRC clock (Internal RC 22.1184MHz) */
;;;52         CLK_EnableXtalRC(CLK_PWRCTL_HIRCEN_Msk);
000002  2004              MOVS     r0,#4
000004  f7fffffe          BL       CLK_EnableXtalRC
;;;53     
;;;54         /* Wait for HIRC clock ready */
;;;55         CLK_WaitClockReady(CLK_STATUS_HIRCSTB_Msk);
000008  2010              MOVS     r0,#0x10
00000a  f7fffffe          BL       CLK_WaitClockReady
;;;56     
;;;57         /* Select HCLK clock source as HIRC and HCLK clock divider as 1 */
;;;58         CLK_SetHCLK(CLK_CLKSEL0_HCLKSEL_HIRC, CLK_CLKDIV0_HCLK(1));
00000e  2100              MOVS     r1,#0
000010  2007              MOVS     r0,#7
000012  f7fffffe          BL       CLK_SetHCLK
;;;59     
;;;60         /* Enable HXT clock (external XTAL 12MHz) */
;;;61         CLK_EnableXtalRC(CLK_PWRCTL_HXTEN_Msk | CLK_PWRCTL_LXTEN_Msk);
000016  2003              MOVS     r0,#3
000018  f7fffffe          BL       CLK_EnableXtalRC
;;;62     //    CLK_EnableXtalRC(CLK_PWRCTL_HXTEN_Msk);
;;;63         /* Wait for HXT clock ready */
;;;64         CLK_WaitClockReady(CLK_STATUS_HXTSTB_Msk | CLK_STATUS_LXTSTB_Msk);
00001c  2003              MOVS     r0,#3
00001e  f7fffffe          BL       CLK_WaitClockReady
;;;65     //    CLK_WaitClockReady(CLK_STATUS_HXTSTB_Msk);
;;;66         /* Set core clock as PLL_CLOCK from PLL and SysTick source to HCLK/2*/
;;;67         CLK_SetCoreClock(PLL_CLOCK);
000022  4822              LDR      r0,|L5.172|
000024  f7fffffe          BL       CLK_SetCoreClock
;;;68         CLK_SetSysTickClockSrc(CLK_CLKSEL0_STCLKSEL_HCLK_DIV2);
000028  2018              MOVS     r0,#0x18
00002a  f7fffffe          BL       CLK_SetSysTickClockSrc
;;;69     
;;;70         /* Enable UART module clock */
;;;71         CLK_EnableModuleClock(UART0_MODULE);
00002e  4c20              LDR      r4,|L5.176|
000030  4620              MOV      r0,r4
000032  f7fffffe          BL       CLK_EnableModuleClock
;;;72     	/* Enable UART module clock */
;;;73         CLK_EnableModuleClock(UART1_MODULE);
000036  1c65              ADDS     r5,r4,#1
000038  4628              MOV      r0,r5
00003a  f7fffffe          BL       CLK_EnableModuleClock
;;;74     	
;;;75         /* Enable USCI module clock */
;;;76         CLK_EnableModuleClock(UART2_MODULE);
00003e  1ca6              ADDS     r6,r4,#2
000040  4630              MOV      r0,r6
000042  f7fffffe          BL       CLK_EnableModuleClock
;;;77     	
;;;78         /* Enable USCI module clock */
;;;79         CLK_EnableModuleClock(USCI0_MODULE);
000046  4f1b              LDR      r7,|L5.180|
000048  4638              MOV      r0,r7
00004a  f7fffffe          BL       CLK_EnableModuleClock
;;;80     	
;;;81     	/* Enable I2C0 module clock */
;;;82         CLK_EnableModuleClock(I2C0_MODULE);
00004e  481a              LDR      r0,|L5.184|
000050  f7fffffe          BL       CLK_EnableModuleClock
;;;83     	
;;;84     	/* Enable I2C1 module clock */
;;;85         CLK_EnableModuleClock(I2C1_MODULE);
000054  4818              LDR      r0,|L5.184|
000056  1c40              ADDS     r0,r0,#1
000058  f7fffffe          BL       CLK_EnableModuleClock
;;;86     
;;;87     	/* Enable ADC module clock */
;;;88         CLK_EnableModuleClock(ADC_MODULE);
00005c  4817              LDR      r0,|L5.188|
00005e  f7fffffe          BL       CLK_EnableModuleClock
;;;89     
;;;90         /* Enable PWM0 module clock */
;;;91         CLK_EnableModuleClock(PWM0_MODULE);
000062  4817              LDR      r0,|L5.192|
000064  f7fffffe          BL       CLK_EnableModuleClock
;;;92     
;;;93     	/* Enable timer clock */
;;;94     	CLK_EnableModuleClock(TMR0_MODULE);
000068  4816              LDR      r0,|L5.196|
00006a  f7fffffe          BL       CLK_EnableModuleClock
;;;95         CLK_EnableModuleClock(RTC_MODULE);
00006e  4816              LDR      r0,|L5.200|
000070  f7fffffe          BL       CLK_EnableModuleClock
;;;96     
;;;97         /* Select UART module clock source as HXT and UART module clock divider as 1 */
;;;98         CLK_SetModuleClock(UART0_MODULE, CLK_CLKSEL1_UARTSEL_HXT, CLK_CLKDIV0_UART(1));
000074  2200              MOVS     r2,#0
000076  4611              MOV      r1,r2
000078  4620              MOV      r0,r4
00007a  f7fffffe          BL       CLK_SetModuleClock
;;;99     	
;;;100    	CLK_SetModuleClock(UART1_MODULE, CLK_CLKSEL1_UARTSEL_HXT, CLK_CLKDIV0_UART(1));
00007e  2200              MOVS     r2,#0
000080  4611              MOV      r1,r2
000082  4628              MOV      r0,r5
000084  f7fffffe          BL       CLK_SetModuleClock
;;;101    
;;;102    	CLK_SetModuleClock(UART2_MODULE, CLK_CLKSEL1_UARTSEL_HXT, CLK_CLKDIV0_UART(1));
000088  2200              MOVS     r2,#0
00008a  4611              MOV      r1,r2
00008c  4630              MOV      r0,r6
00008e  f7fffffe          BL       CLK_SetModuleClock
;;;103    	CLK_SetModuleClock(USCI0_MODULE, CLK_CLKSEL1_UARTSEL_HXT, CLK_CLKDIV0_UART(1));
000092  2200              MOVS     r2,#0
000094  4611              MOV      r1,r2
000096  4638              MOV      r0,r7
000098  f7fffffe          BL       CLK_SetModuleClock
;;;104    
;;;105        /* ADC clock source is 22.1184MHz, set divider to 7, ADC clock is 22.1184/7 MHz */
;;;106        CLK_SetModuleClock(ADC_MODULE, CLK_CLKSEL1_ADCSEL_HIRC, CLK_CLKDIV0_ADC(7));
00009c  2203              MOVS     r2,#3
00009e  0452              LSLS     r2,r2,#17
0000a0  210c              MOVS     r1,#0xc
0000a2  4806              LDR      r0,|L5.188|
0000a4  f7fffffe          BL       CLK_SetModuleClock
;;;107        /* Select PWM01 module clock source */
;;;108       // CLK_SetModuleClock(PWM0_MODULE, CLK_CLKSEL1_PWM0SEL_PCLK0, 0);
;;;109    
;;;110    }
0000a8  bdf8              POP      {r3-r7,pc}
;;;111    
                          ENDP

0000aa  0000              DCW      0x0000
                  |L5.172|
                          DCD      0x044aa200
                  |L5.176|
                          DCD      0x57803d10
                  |L5.180|
                          DCD      0x80000008
                  |L5.184|
                          DCD      0x40000008
                  |L5.188|
                          DCD      0x5623fe1c
                  |L5.192|
                          DCD      0x53c00014
                  |L5.196|
                          DCD      0x5e800002
                  |L5.200|
                          DCD      0x63200001

                          AREA ||i.SYS_Init||, CODE, READONLY, ALIGN=2

                  SYS_Init PROC
;;;144    /*---------------------------------------------------------------------------------------------------------*/
;;;145    void SYS_Init(void)
000000  b510              PUSH     {r4,lr}
000002  2059              MOVS     r0,#0x59
000004  4c0e              LDR      r4,|L6.64|
000006  2216              MOVS     r2,#0x16
000008  2188              MOVS     r1,#0x88
                  |L6.10|
00000a  6020              STR      r0,[r4,#0]
00000c  6022              STR      r2,[r4,#0]
00000e  6021              STR      r1,[r4,#0]
000010  6823              LDR      r3,[r4,#0]
000012  2b00              CMP      r3,#0
000014  d0f9              BEQ      |L6.10|
;;;146    {
;;;147        /* Unlock protected registers */
;;;148        SYS_UnlockReg();
;;;149    	
;;;150    	SYS_Clock_init();
000016  f7fffffe          BL       SYS_Clock_init
;;;151    	TYM_gpio_init();
00001a  f7fffffe          BL       TYM_gpio_init
00001e  2000              MOVS     r0,#0
000020  6020              STR      r0,[r4,#0]
;;;152    
;;;153    	/* Lock protected registers */
;;;154        SYS_LockReg();
;;;155    
;;;156        /* Start Timer1 to measure delay period of TIMER_Delay API is reasonable or not */
;;;157       // TIMER1->CTL = TIMER_PERIODIC_MODE | (12 - 1);
;;;158    	TYM_sys_PowerManger_init();
000022  f7fffffe          BL       TYM_sys_PowerManger_init
;;;159    	drv_led_init();
000026  f7fffffe          BL       drv_led_init
;;;160    
;;;161    	Drv_FourG_Gpio_Init();
00002a  f7fffffe          BL       Drv_FourG_Gpio_Init
;;;162    	//drv_FourGmodel_power_key_down(); // first turn on the power ,and power key set hi(off)
;;;163    	
;;;164    
;;;165    	SYS_BusInit();
00002e  f7fffffe          BL       SYS_BusInit
;;;166    	
;;;167    	Hal_Timer1_Init(); // kim
000032  f7fffffe          BL       Hal_Timer1_Init
;;;168    
;;;169    	TYM_DriverInit();
000036  f7fffffe          BL       TYM_DriverInit
;;;170    	
;;;171    	Core_Msg_Init();
00003a  f7fffffe          BL       Core_Msg_Init
;;;172    
;;;173    	//srv_rtc_init();
;;;174    
;;;175    }
00003e  bd10              POP      {r4,pc}
;;;176    
                          ENDP

                  |L6.64|
                          DCD      0x50000100

                          AREA ||i.SYS_Status||, CODE, READONLY, ALIGN=2

                  SYS_Status PROC
;;;187    
;;;188    void SYS_Status(void)
000000  b510              PUSH     {r4,lr}
;;;189    {
;;;190    	Global_datas.g_mode_status = POWER_ON_MODE;	
000002  480b              LDR      r0,|L7.48|
000004  2100              MOVS     r1,#0
000006  7141              STRB     r1,[r0,#5]
;;;191    	Global_datas.g_4g_initing = 1;
000008  2101              MOVS     r1,#1
00000a  7181              STRB     r1,[r0,#6]
;;;192    	TYM_drv_powerkeepon(1);
00000c  4608              MOV      r0,r1
00000e  f7fffffe          BL       TYM_drv_powerkeepon
;;;193    	Drv_4GMoudle_PowerUp(1);
000012  2001              MOVS     r0,#1
000014  f7fffffe          BL       Drv_4GMoudle_PowerUp
;;;194    	drv_FourGmodel_power_key_SetHi();
000018  f7fffffe          BL       drv_FourGmodel_power_key_SetHi
;;;195    	TimeOutSet(&ModulePowerUpPinTimer,3000);
00001c  4905              LDR      r1,|L7.52|
00001e  4806              LDR      r0,|L7.56|
000020  f7fffffe          BL       TimeOutSet
;;;196    	Drv_audio_init();
000024  f7fffffe          BL       Drv_audio_init
;;;197    	volume=5;
000028  4904              LDR      r1,|L7.60|
00002a  2005              MOVS     r0,#5
00002c  7008              STRB     r0,[r1,#0]
;;;198    	
;;;199    	
;;;200    }
00002e  bd10              POP      {r4,pc}
;;;201    
                          ENDP

                  |L7.48|
                          DCD      Global_datas+0x20
                  |L7.52|
                          DCD      0x00000bb8
                  |L7.56|
                          DCD      ModulePowerUpPinTimer
                  |L7.60|
                          DCD      ||area_number.14||

                          AREA ||i.SysIdle||, CODE, READONLY, ALIGN=2

                  SysIdle PROC
;;;176    
;;;177    void SysIdle(void)
000000  b510              PUSH     {r4,lr}
;;;178    {
;;;179    	Global_datas.g_mode_status = POWER_IDLE_MODE;	
000002  4809              LDR      r0,|L8.40|
000004  210e              MOVS     r1,#0xe
000006  7141              STRB     r1,[r0,#5]
;;;180    	Global_datas.g_4g_initing = 0;
000008  2100              MOVS     r1,#0
00000a  7181              STRB     r1,[r0,#6]
;;;181    	TYM_drv_powerkeepon(0);
00000c  4608              MOV      r0,r1
00000e  f7fffffe          BL       TYM_drv_powerkeepon
;;;182    	Drv_4GMoudle_PowerUp(0);
000012  2000              MOVS     r0,#0
000014  f7fffffe          BL       Drv_4GMoudle_PowerUp
;;;183    	drv_FourGmodel_power_key_SetLow();
000018  f7fffffe          BL       drv_FourGmodel_power_key_SetLow
;;;184    	TimeOutSet(&SysTimer_1s,1000);
00001c  217d              MOVS     r1,#0x7d
00001e  00c9              LSLS     r1,r1,#3
000020  4802              LDR      r0,|L8.44|
000022  f7fffffe          BL       TimeOutSet
;;;185    
;;;186    }
000026  bd10              POP      {r4,pc}
;;;187    
                          ENDP

                  |L8.40|
                          DCD      Global_datas+0x20
                  |L8.44|
                          DCD      SysTimer_1s

                          AREA ||i.TYM_DriverInit||, CODE, READONLY, ALIGN=1

                  TYM_DriverInit PROC
;;;134    
;;;135    void TYM_DriverInit(void)
000000  b510              PUSH     {r4,lr}
;;;136    {
;;;137    	//Drv_audio_init();
;;;138    	Drv_IrKey_init(); // kim
000002  f7fffffe          BL       Drv_IrKey_init
;;;139    	drv_gipo_key_init();
000006  f7fffffe          BL       drv_gipo_key_init
;;;140    }
00000a  bd10              POP      {r4,pc}
;;;141    
                          ENDP


                          AREA ||i.main||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                  main PROC
;;;257    /*---------------------------------------------------------------------------------------------------------*/
;;;258    int32_t main(void)
000000  b086              SUB      sp,sp,#0x18
;;;259    {
;;;260    	sCoreMsg msg;
;;;261    	uint32_t count;
;;;262    	uint8_t refcount0=1;
000002  2701              MOVS     r7,#1
;;;263    	uint8_t refcount1=1;
000004  463e              MOV      r6,r7
;;;264    	uint8_t refcount2=1;
000006  463d              MOV      r5,r7
;;;265      	uint8_t bat_val[2];
;;;266    	
;;;267    //	uint8_t autoside = 0;
;;;268    //    S_RTC_TIME_DATA_T sReadRTC;
;;;269    
;;;270    	/* Init System, peripheral clock and multi-function I/O */
;;;271    
;;;272    	SYS_Init();
000008  f7fffffe          BL       SYS_Init
;;;273    	//SYS_Status();
;;;274    	SysIdle();
00000c  f7fffffe          BL       SysIdle
;;;275    	
;;;276    	
;;;277        printf("\nmain\n");
000010  a0fd              ADR      r0,|L10.1032|
000012  f7fffffe          BL       __2printf
000016  4cfe              LDR      r4,|L10.1040|
                  |L10.24|
;;;278    		
;;;279        while(1)
;;;280        {
;;;281    
;;;282    		if(IsTimeOut(&SysTimer_1s))
000018  48fe              LDR      r0,|L10.1044|
00001a  f7fffffe          BL       IsTimeOut
00001e  2800              CMP      r0,#0
000020  d012              BEQ      |L10.72|
;;;283    		{
;;;284    			TimeOutSet(&SysTimer_1s, 1000);
000022  217d              MOVS     r1,#0x7d
000024  00c9              LSLS     r1,r1,#3
000026  48fb              LDR      r0,|L10.1044|
000028  f7fffffe          BL       TimeOutSet
;;;285    			
;;;286    	        if(Global_datas.g_4g_initing)
00002c  79a0              LDRB     r0,[r4,#6]  ; Global_datas
00002e  2800              CMP      r0,#0
000030  d003              BEQ      |L10.58|
;;;287    			{
;;;288    				Global_datas.g_mode_status = WIFI_MODE;				
000032  2001              MOVS     r0,#1
000034  7160              STRB     r0,[r4,#5]
;;;289    				srv_led_sys_initing();
000036  f7fffffe          BL       srv_led_sys_initing
                  |L10.58|
;;;290    			}
;;;291    
;;;292    			if(IsTimeOut(&ModulePowerUpPinTimer))
00003a  48f7              LDR      r0,|L10.1048|
00003c  f7fffffe          BL       IsTimeOut
000040  2800              CMP      r0,#0
000042  d001              BEQ      |L10.72|
;;;293    			{
;;;294    				drv_FourGmodel_power_key_SetLow();
000044  f7fffffe          BL       drv_FourGmodel_power_key_SetLow
                  |L10.72|
;;;295    			}
;;;296    		}
;;;297    
;;;298    		
;;;299    		if(Global_datas.key_led_blink)
000048  7b20              LDRB     r0,[r4,#0xc]  ; Global_datas
00004a  2800              CMP      r0,#0
00004c  d008              BEQ      |L10.96|
;;;300    		{
;;;301    			Global_datas.key_led_blink = 0;
00004e  2000              MOVS     r0,#0
000050  7320              STRB     r0,[r4,#0xc]
;;;302    			drv_err_led_on(1);
000052  2001              MOVS     r0,#1
000054  f7fffffe          BL       drv_err_led_on
;;;303    			TimeOutSet(&LedKeyBlinkTimer, 100);
000058  2164              MOVS     r1,#0x64
00005a  48f0              LDR      r0,|L10.1052|
00005c  f7fffffe          BL       TimeOutSet
                  |L10.96|
;;;304    		}
;;;305    
;;;306    		if(IsTimeOut(&LedKeyBlinkTimer))
000060  48ee              LDR      r0,|L10.1052|
000062  f7fffffe          BL       IsTimeOut
000066  2800              CMP      r0,#0
000068  d002              BEQ      |L10.112|
;;;307    		{
;;;308    			drv_err_led_on(0);
00006a  2000              MOVS     r0,#0
00006c  f7fffffe          BL       drv_err_led_on
                  |L10.112|
;;;309    		}
;;;310    
;;;311    		if(Core_Msg_Get(&msg))
000070  a801              ADD      r0,sp,#4
000072  f7fffffe          BL       Core_Msg_Get
000076  2800              CMP      r0,#0
000078  d07e              BEQ      |L10.376|
;;;312    		{
;;;313            // deal with message
;;;314            switch(msg.msg)
00007a  9801              LDR      r0,[sp,#4]
00007c  2801              CMP      r0,#1
00007e  d002              BEQ      |L10.134|
000080  2802              CMP      r0,#2
                  |L10.130|
000082  d179              BNE      |L10.376|
000084  e120              B        |L10.712|
                  |L10.134|
;;;315    	        {
;;;316    	            case MSG_4G_SYS_STATE_IND:
;;;317    					drv_Cmd_Send2NCU031(msg.param0,msg.param1,msg.param2);
000086  9804              LDR      r0,[sp,#0x10]
000088  b2c2              UXTB     r2,r0
00008a  9803              LDR      r0,[sp,#0xc]
00008c  b2c1              UXTB     r1,r0
00008e  9802              LDR      r0,[sp,#8]
000090  b2c0              UXTB     r0,r0
000092  f7fffffe          BL       drv_Cmd_Send2NCU031
;;;318    					printf("MSG_4G_SYS_STATE_IND:msg.param0 = %x, msg.param1 = %x \n",msg.param0,msg.param1);
000096  a0e2              ADR      r0,|L10.1056|
000098  9a03              LDR      r2,[sp,#0xc]
00009a  9902              LDR      r1,[sp,#8]
00009c  f7fffffe          BL       __2printf
;;;319    	                if((msg.param0 == 0x08) && (msg.param1 == 0x00))
0000a0  9802              LDR      r0,[sp,#8]
0000a2  2808              CMP      r0,#8
0000a4  d10f              BNE      |L10.198|
0000a6  9803              LDR      r0,[sp,#0xc]
0000a8  2800              CMP      r0,#0
0000aa  d1ea              BNE      |L10.130|
;;;320    	                {
;;;321    
;;;322    						printf("0x08, msg.param1 = %x \n",msg.param1);
0000ac  4601              MOV      r1,r0
0000ae  a0ea              ADR      r0,|L10.1112|
0000b0  f7fffffe          BL       __2printf
;;;323    	                	//Cmd_Send2FourG(0x03,0x16,0x00);
;;;324    						drv_Cmd_Send2NCU031(msg.param0,msg.param1,0);
0000b4  9803              LDR      r0,[sp,#0xc]
0000b6  2200              MOVS     r2,#0
0000b8  b2c1              UXTB     r1,r0
0000ba  9802              LDR      r0,[sp,#8]
0000bc  b2c0              UXTB     r0,r0
0000be  f7fffffe          BL       drv_Cmd_Send2NCU031
;;;325    						Global_datas.g_4g_initing = 0;
0000c2  2000              MOVS     r0,#0
0000c4  71a0              STRB     r0,[r4,#6]
                  |L10.198|
;;;326    						//printf("switch to BT\n");
;;;327    					} 
;;;328    					
;;;329    					if((msg.param0 == 0x09) && (msg.param1 == 0x01))
0000c6  9802              LDR      r0,[sp,#8]
0000c8  2809              CMP      r0,#9
0000ca  d12a              BNE      |L10.290|
0000cc  9803              LDR      r0,[sp,#0xc]
0000ce  2801              CMP      r0,#1
0000d0  d1d7              BNE      |L10.130|
;;;330    	                {
;;;331    //						printf("0x09, msg.param1 = %x \n",msg.param1);
;;;332    	                	//in bat val
;;;333    						bat_val[1] = (Global_datas.ADC_ChannelValue[15]>>8) & 0xff;
0000d2  48cf              LDR      r0,|L10.1040|
0000d4  466b              MOV      r3,sp
0000d6  3820              SUBS     r0,r0,#0x20
0000d8  8bc0              LDRH     r0,[r0,#0x1e]  ; Global_datas
0000da  0401              LSLS     r1,r0,#16
0000dc  0e09              LSRS     r1,r1,#24
0000de  7059              STRB     r1,[r3,#1]
;;;334    						bat_val[0] = Global_datas.ADC_ChannelValue[15] & 0xff;
0000e0  b2c2              UXTB     r2,r0
0000e2  701a              STRB     r2,[r3,#0]
;;;335    						if(Global_datas.g_PowerStatus.PowerBatInStatus != POWER_BAT_IN_FALSE)
0000e4  7820              LDRB     r0,[r4,#0]  ; Global_datas
0000e6  2801              CMP      r0,#1
0000e8  d002              BEQ      |L10.240|
;;;336    							bat_val[1] = bat_val[1] & 0x80;  //in bat en
0000ea  09c8              LSRS     r0,r1,#7
0000ec  01c0              LSLS     r0,r0,#7
0000ee  7058              STRB     r0,[r3,#1]
                  |L10.240|
;;;337    						Cmd_Send2FourG(0x09,bat_val[1],bat_val[0]);
0000f0  7859              LDRB     r1,[r3,#1]
0000f2  2009              MOVS     r0,#9
0000f4  f7fffffe          BL       Cmd_Send2FourG
;;;338    						//ex bat val
;;;339    						bat_val[1] = (Global_datas.ADC_ChannelValue[12]>>8) & 0xff;
0000f8  48c5              LDR      r0,|L10.1040|
0000fa  3820              SUBS     r0,r0,#0x20
0000fc  8b02              LDRH     r2,[r0,#0x18]  ; Global_datas
0000fe  0410              LSLS     r0,r2,#16
000100  0e01              LSRS     r1,r0,#24
000102  4668              MOV      r0,sp
000104  7041              STRB     r1,[r0,#1]
;;;340    						bat_val[0] = Global_datas.ADC_ChannelValue[12] & 0xff;
000106  b2d2              UXTB     r2,r2
000108  7002              STRB     r2,[r0,#0]
;;;341    						if(Global_datas.g_PowerStatus.PowerBatExStatus != POWER_BAT_EX_FALSE)
00010a  7860              LDRB     r0,[r4,#1]  ; Global_datas
00010c  2803              CMP      r0,#3
00010e  d003              BEQ      |L10.280|
;;;342    							bat_val[1] = bat_val[1] & 0x60;  //ex bat en
000110  2060              MOVS     r0,#0x60
000112  4001              ANDS     r1,r1,r0
000114  4668              MOV      r0,sp
000116  7041              STRB     r1,[r0,#1]
                  |L10.280|
;;;343    						Cmd_Send2FourG(0x09,bat_val[1],bat_val[0]);
000118  4668              MOV      r0,sp
00011a  7841              LDRB     r1,[r0,#1]
00011c  2009              MOVS     r0,#9
00011e  f7fffffe          BL       Cmd_Send2FourG
                  |L10.290|
;;;344    					}
;;;345    					
;;;346    					if(msg.param0 == 0x07)
000122  9802              LDR      r0,[sp,#8]
000124  2807              CMP      r0,#7
000126  d103              BNE      |L10.304|
;;;347    	        		{
;;;348    	                	// vol
;;;349    	                	//Drv_Dap_vol_set(msg.param1);
;;;350    						printf("0x07, msg.param1 = %x \n",msg.param1);
000128  a0d1              ADR      r0,|L10.1136|
00012a  9903              LDR      r1,[sp,#0xc]
00012c  f7fffffe          BL       __2printf
                  |L10.304|
;;;351    					}
;;;352    					if(msg.param0 == 0x04 )
000130  9802              LDR      r0,[sp,#8]
000132  2804              CMP      r0,#4
000134  d103              BNE      |L10.318|
;;;353    					{
;;;354    	                	//Drv_Dap_vol_mute(msg.param1);
;;;355    	                	// vol
;;;356    	                	
;;;357    					printf("0x04, msg.param1 = %x \n",msg.param1);
000136  a0d4              ADR      r0,|L10.1160|
000138  9903              LDR      r1,[sp,#0xc]
00013a  f7fffffe          BL       __2printf
                  |L10.318|
;;;358    					}
;;;359    					
;;;360    					if(msg.param0 == 0x0F)
00013e  9802              LDR      r0,[sp,#8]
000140  280f              CMP      r0,#0xf
000142  d111              BNE      |L10.360|
;;;361    					{
;;;362    						if(msg.param1 == 0x19)
000144  9803              LDR      r0,[sp,#0xc]
000146  2819              CMP      r0,#0x19
000148  d105              BNE      |L10.342|
;;;363    						{
;;;364    							Global_datas.g_mode_status = LOUD_SPEAKER_MODE;
00014a  2009              MOVS     r0,#9
00014c  7160              STRB     r0,[r4,#5]
;;;365    							printf("0x0F, msg.param1 = %x \n",msg.param1);
00014e  a0d4              ADR      r0,|L10.1184|
000150  9903              LDR      r1,[sp,#0xc]
000152  f7fffffe          BL       __2printf
                  |L10.342|
;;;366    						}
;;;367    					
;;;368    						if (msg.param1 == 0x17)
000156  9803              LDR      r0,[sp,#0xc]
000158  2817              CMP      r0,#0x17
00015a  d105              BNE      |L10.360|
;;;369    						{
;;;370    		                	Global_datas.g_mode_status = AUX_MODE;
00015c  2008              MOVS     r0,#8
00015e  7160              STRB     r0,[r4,#5]
;;;371    						printf("0x0F, msg.param1 = %x \n",msg.param1);
000160  a0cf              ADR      r0,|L10.1184|
000162  9903              LDR      r1,[sp,#0xc]
000164  f7fffffe          BL       __2printf
                  |L10.360|
;;;372    						}
;;;373    					}
;;;374    
;;;375    					if(msg.param0 == 0x06)  // sys status
000168  9802              LDR      r0,[sp,#8]
00016a  2806              CMP      r0,#6
00016c  d152              BNE      |L10.532|
;;;376    					{
;;;377    						if(msg.param1 == 0x06)
00016e  9803              LDR      r0,[sp,#0xc]
000170  2806              CMP      r0,#6
000172  d106              BNE      |L10.386|
;;;378    						{
;;;379    		                	Global_datas.g_mode_status = BT_MODE;
000174  2106              MOVS     r1,#6
000176  e000              B        |L10.378|
                  |L10.376|
000178  e0a5              B        |L10.710|
                  |L10.378|
00017a  7161              STRB     r1,[r4,#5]
;;;380    							printf("0x06, msg.param1 = %x \n",msg.param1);
00017c  a0ce              ADR      r0,|L10.1208|
00017e  f7fffffe          BL       __2printf
                  |L10.386|
;;;381    						}
;;;382    					
;;;383    						if (msg.param1 == 0x07)
000182  9803              LDR      r0,[sp,#0xc]
000184  2807              CMP      r0,#7
000186  d104              BNE      |L10.402|
;;;384    						{
;;;385    		                	Global_datas.g_mode_status = BT_CONNECTED_MODE;
000188  2107              MOVS     r1,#7
00018a  7161              STRB     r1,[r4,#5]
;;;386    		                	
;;;387    						printf("0x06, msg.param1 = %x \n",msg.param1);
00018c  a0ca              ADR      r0,|L10.1208|
00018e  f7fffffe          BL       __2printf
                  |L10.402|
;;;388    						}
;;;389    						if (msg.param1 == 0x02)
000192  9803              LDR      r0,[sp,#0xc]
000194  2802              CMP      r0,#2
000196  d104              BNE      |L10.418|
;;;390    						{
;;;391    		                	Global_datas.g_mode_status = WIFI_CONNECTED_MODE;
000198  2102              MOVS     r1,#2
00019a  7161              STRB     r1,[r4,#5]
;;;392    		                	
;;;393    						printf("0x06, msg.param1 = %x \n",msg.param1);
00019c  a0c6              ADR      r0,|L10.1208|
00019e  f7fffffe          BL       __2printf
                  |L10.418|
;;;394    						}
;;;395    						if (msg.param1 == 0x04)
0001a2  9803              LDR      r0,[sp,#0xc]
0001a4  2804              CMP      r0,#4
0001a6  d105              BNE      |L10.436|
;;;396    						{
;;;397    		                	Global_datas.g_mode_status = WIFI_MODE;
0001a8  2001              MOVS     r0,#1
0001aa  7160              STRB     r0,[r4,#5]
;;;398    		                	
;;;399    						printf("0x06, msg.param1 = %x \n",msg.param1);
0001ac  a0c2              ADR      r0,|L10.1208|
0001ae  9903              LDR      r1,[sp,#0xc]
0001b0  f7fffffe          BL       __2printf
                  |L10.436|
;;;400    						}
;;;401    						if (msg.param1 == 0x05)
0001b4  9803              LDR      r0,[sp,#0xc]
0001b6  2805              CMP      r0,#5
0001b8  d105              BNE      |L10.454|
;;;402    						{
;;;403    		                	Global_datas.g_mode_status = WIFI_CONNECTING_MODE;
0001ba  2003              MOVS     r0,#3
0001bc  7160              STRB     r0,[r4,#5]
;;;404    		                	
;;;405    						printf("0x06, msg.param1 = %x \n",msg.param1);
0001be  a0be              ADR      r0,|L10.1208|
0001c0  9903              LDR      r1,[sp,#0xc]
0001c2  f7fffffe          BL       __2printf
                  |L10.454|
;;;406    						}
;;;407    						if (msg.param1 == 0x011)
0001c6  9803              LDR      r0,[sp,#0xc]
0001c8  2811              CMP      r0,#0x11
0001ca  d105              BNE      |L10.472|
;;;408    						{
;;;409    		                	Global_datas.g_mode_status = FOURG_CONNECTED_MODE;
0001cc  2005              MOVS     r0,#5
0001ce  7160              STRB     r0,[r4,#5]
;;;410    		                	
;;;411    						printf("0x06, msg.param1 = %x \n",msg.param1);
0001d0  a0b9              ADR      r0,|L10.1208|
0001d2  9903              LDR      r1,[sp,#0xc]
0001d4  f7fffffe          BL       __2printf
                  |L10.472|
;;;412    						}
;;;413    						if (msg.param1 == 0x012)
0001d8  9803              LDR      r0,[sp,#0xc]
0001da  2812              CMP      r0,#0x12
0001dc  d105              BNE      |L10.490|
;;;414    						{
;;;415    		                	Global_datas.g_mode_status = FOURG_MODE;
0001de  2004              MOVS     r0,#4
0001e0  7160              STRB     r0,[r4,#5]
;;;416    		                	
;;;417    						printf("0x06, msg.param1 = %x \n",msg.param1);
0001e2  a0b5              ADR      r0,|L10.1208|
0001e4  9903              LDR      r1,[sp,#0xc]
0001e6  f7fffffe          BL       __2printf
                  |L10.490|
;;;418    						}
;;;419    						if (msg.param1 == 0x0B)
0001ea  9803              LDR      r0,[sp,#0xc]
0001ec  280b              CMP      r0,#0xb
0001ee  d104              BNE      |L10.506|
;;;420    						{
;;;421    		                	Global_datas.g_mode_status = SYSTEM_UPDATING;
0001f0  210b              MOVS     r1,#0xb
0001f2  7161              STRB     r1,[r4,#5]
;;;422    		                	
;;;423    						printf("0x06, msg.param1 = %x \n",msg.param1);
0001f4  a0b0              ADR      r0,|L10.1208|
0001f6  f7fffffe          BL       __2printf
                  |L10.506|
;;;424    						}
;;;425    						if ((msg.param1 == 0x09) || (msg.param1 == 0x08) || (msg.param1 == 0x16))
0001fa  9803              LDR      r0,[sp,#0xc]
0001fc  2809              CMP      r0,#9
0001fe  d003              BEQ      |L10.520|
000200  2808              CMP      r0,#8
000202  d001              BEQ      |L10.520|
000204  2816              CMP      r0,#0x16
000206  d105              BNE      |L10.532|
                  |L10.520|
;;;426    						{
;;;427    		                	Global_datas.g_mode_status = SYS_LOW_POWER;
000208  200c              MOVS     r0,#0xc
00020a  7160              STRB     r0,[r4,#5]
;;;428    		                	
;;;429    						printf("0x06, msg.param1 = %x \n",msg.param1);
00020c  a0aa              ADR      r0,|L10.1208|
00020e  9903              LDR      r1,[sp,#0xc]
000210  f7fffffe          BL       __2printf
                  |L10.532|
;;;430    						}
;;;431    						
;;;432    					}
;;;433    				//rtc time	
;;;434    					if(msg.param0 == 0x11)
000214  9802              LDR      r0,[sp,#8]
000216  2811              CMP      r0,#0x11
000218  d105              BNE      |L10.550|
;;;435    					{
;;;436    						srv_rtc_set_ym(msg.param1,msg.param2);
00021a  9804              LDR      r0,[sp,#0x10]
00021c  b2c1              UXTB     r1,r0
00021e  9803              LDR      r0,[sp,#0xc]
000220  b2c0              UXTB     r0,r0
000222  f7fffffe          BL       srv_rtc_set_ym
                  |L10.550|
;;;437    					}
;;;438    					
;;;439    					if(msg.param0 == 0x12)
000226  9802              LDR      r0,[sp,#8]
000228  2812              CMP      r0,#0x12
00022a  d105              BNE      |L10.568|
;;;440    					{
;;;441    						srv_rtc_set_dw(msg.param1,msg.param2);
00022c  9804              LDR      r0,[sp,#0x10]
00022e  b2c1              UXTB     r1,r0
000230  9803              LDR      r0,[sp,#0xc]
000232  b2c0              UXTB     r0,r0
000234  f7fffffe          BL       srv_rtc_set_dw
                  |L10.568|
;;;442    					}
;;;443    					
;;;444    					if(msg.param0 == 0x13)
000238  9802              LDR      r0,[sp,#8]
00023a  2813              CMP      r0,#0x13
00023c  d105              BNE      |L10.586|
;;;445    					{
;;;446    						srv_rtc_set_hm(msg.param1,msg.param2);
00023e  9804              LDR      r0,[sp,#0x10]
000240  b2c1              UXTB     r1,r0
000242  9803              LDR      r0,[sp,#0xc]
000244  b2c0              UXTB     r0,r0
000246  f7fffffe          BL       srv_rtc_set_hm
                  |L10.586|
;;;447    					}
;;;448    					
;;;449    					if(msg.param0 == 0x14)
00024a  9802              LDR      r0,[sp,#8]
00024c  2814              CMP      r0,#0x14
00024e  d105              BNE      |L10.604|
;;;450    					{
;;;451    						srv_rtc_set_st(msg.param1,msg.param2);
000250  9804              LDR      r0,[sp,#0x10]
000252  b2c1              UXTB     r1,r0
000254  9803              LDR      r0,[sp,#0xc]
000256  b2c0              UXTB     r0,r0
000258  f7fffffe          BL       srv_rtc_set_st
                  |L10.604|
;;;452    					}
;;;453    					//rtc alarm
;;;454    					if(msg.param0 == 0x15)
00025c  9802              LDR      r0,[sp,#8]
00025e  2815              CMP      r0,#0x15
000260  d105              BNE      |L10.622|
;;;455    					{
;;;456    						srv_rtc_alarm_set_ym(msg.param1,msg.param2);
000262  9804              LDR      r0,[sp,#0x10]
000264  b2c1              UXTB     r1,r0
000266  9803              LDR      r0,[sp,#0xc]
000268  b2c0              UXTB     r0,r0
00026a  f7fffffe          BL       srv_rtc_alarm_set_ym
                  |L10.622|
;;;457    					}
;;;458    					
;;;459    					if(msg.param0 == 0x16)
00026e  9802              LDR      r0,[sp,#8]
000270  2816              CMP      r0,#0x16
000272  d105              BNE      |L10.640|
;;;460    					{
;;;461    						srv_rtc_alarm_set_dw(msg.param1,msg.param2);
000274  9804              LDR      r0,[sp,#0x10]
000276  b2c1              UXTB     r1,r0
000278  9803              LDR      r0,[sp,#0xc]
00027a  b2c0              UXTB     r0,r0
00027c  f7fffffe          BL       srv_rtc_alarm_set_dw
                  |L10.640|
;;;462    					}
;;;463    					
;;;464    					if(msg.param0 == 0x17)
000280  9802              LDR      r0,[sp,#8]
000282  2817              CMP      r0,#0x17
000284  d105              BNE      |L10.658|
;;;465    					{
;;;466    						srv_rtc_alarm_set_hm(msg.param1,msg.param2);
000286  9804              LDR      r0,[sp,#0x10]
000288  b2c1              UXTB     r1,r0
00028a  9803              LDR      r0,[sp,#0xc]
00028c  b2c0              UXTB     r0,r0
00028e  f7fffffe          BL       srv_rtc_alarm_set_hm
                  |L10.658|
;;;467    					}
;;;468    					
;;;469    					if(msg.param0 == 0x18)
000292  9802              LDR      r0,[sp,#8]
000294  2818              CMP      r0,#0x18
000296  d105              BNE      |L10.676|
;;;470    					{
;;;471    						srv_rtc_alarm_set_st(msg.param1,msg.param2);
000298  9804              LDR      r0,[sp,#0x10]
00029a  b2c1              UXTB     r1,r0
00029c  9803              LDR      r0,[sp,#0xc]
00029e  b2c0              UXTB     r0,r0
0002a0  f7fffffe          BL       srv_rtc_alarm_set_st
                  |L10.676|
;;;472    					}
;;;473    					if(msg.param0 == 0x19)
0002a4  9802              LDR      r0,[sp,#8]
0002a6  2819              CMP      r0,#0x19
0002a8  d101              BNE      |L10.686|
;;;474    					{
;;;475    						srv_rtc_get();
0002aa  f7fffffe          BL       srv_rtc_get
                  |L10.686|
;;;476    					}
;;;477    					if(msg.param0 == 0x1a)
0002ae  9802              LDR      r0,[sp,#8]
0002b0  281a              CMP      r0,#0x1a
0002b2  d101              BNE      |L10.696|
;;;478    					{
;;;479    						srv_rtc_alarm_get();
0002b4  f7fffffe          BL       srv_rtc_alarm_get
                  |L10.696|
;;;480    					}
;;;481    					
;;;482    					if(msg.param0 == 0x20)
0002b8  9802              LDR      r0,[sp,#8]
0002ba  2820              CMP      r0,#0x20
0002bc  d103              BNE      |L10.710|
;;;483    					{
;;;484    						Cmd_Send2FourG(0x20,0x0,0x1);  //version 0.0.1
0002be  2201              MOVS     r2,#1
0002c0  2100              MOVS     r1,#0
0002c2  f7fffffe          BL       Cmd_Send2FourG
                  |L10.710|
0002c6  e08e              B        |L10.998|
                  |L10.712|
;;;485    					}
;;;486    	            break;
;;;487    
;;;488    			 	case MSG_MCU1_SYS_STATE_IND:
;;;489    					Cmd_Send2FourG( msg.param0,msg.param1,msg.param2);
0002c8  9804              LDR      r0,[sp,#0x10]
0002ca  b2c2              UXTB     r2,r0
0002cc  9803              LDR      r0,[sp,#0xc]
0002ce  b2c1              UXTB     r1,r0
0002d0  9802              LDR      r0,[sp,#8]
0002d2  b2c0              UXTB     r0,r0
0002d4  f7fffffe          BL       Cmd_Send2FourG
;;;490    					//printf("MSG_MCU1_SYS_STATE_IND:msg.param0 = %x, msg.param1 = %x \n",msg.param0,msg.param1);
;;;491    					if((msg.param0 == 0x01) && (msg.param1 == 0x00))
0002d8  9802              LDR      r0,[sp,#8]
0002da  2801              CMP      r0,#1
0002dc  d107              BNE      |L10.750|
0002de  9803              LDR      r0,[sp,#0xc]
0002e0  2800              CMP      r0,#0
0002e2  d1f0              BNE      |L10.710|
;;;492    					{
;;;493    						drv_Cmd_Send2NCU031(0x01,Global_datas.g_PowerStatus.bat_status,Global_datas.g_PowerStatus.bat_value);
0002e4  7922              LDRB     r2,[r4,#4]  ; Global_datas
0002e6  78e1              LDRB     r1,[r4,#3]  ; Global_datas
0002e8  2001              MOVS     r0,#1
0002ea  f7fffffe          BL       drv_Cmd_Send2NCU031
                  |L10.750|
;;;494    					}
;;;495    					if(msg.param0 == 0x02) // MIC VOLUNE ,NO USE 
;;;496    					{
;;;497    					
;;;498    					}
;;;499    
;;;500    					if((msg.param0 == 0x03) && (msg.param1 == 0x03))
0002ee  9802              LDR      r0,[sp,#8]
0002f0  2803              CMP      r0,#3
0002f2  d178              BNE      |L10.998|
0002f4  9803              LDR      r0,[sp,#0xc]
0002f6  2803              CMP      r0,#3
0002f8  d10e              BNE      |L10.792|
;;;501    					{
;;;502    						if (volume > 0x00)
0002fa  4975              LDR      r1,|L10.1232|
0002fc  7808              LDRB     r0,[r1,#0]  ; volume
0002fe  2800              CMP      r0,#0
000300  d071              BEQ      |L10.998|
000302  1e40              SUBS     r0,r0,#1
;;;503    						{
;;;504    							volume--;
000304  b2c0              UXTB     r0,r0
000306  7008              STRB     r0,[r1,#0]
;;;505    							Drv_Dap_vol_set(volume);
000308  f7fffffe          BL       Drv_Dap_vol_set
;;;506    							printf("Hal_Dap_Load_vol_add\n");
00030c  a071              ADR      r0,|L10.1236|
00030e  f7fffffe          BL       __2printf
;;;507    						}
;;;508    					}
;;;509    					if((msg.param0 == 0x03) && (msg.param1 == 0x02))
000312  9802              LDR      r0,[sp,#8]
000314  2803              CMP      r0,#3
000316  d166              BNE      |L10.998|
                  |L10.792|
000318  9803              LDR      r0,[sp,#0xc]
00031a  2802              CMP      r0,#2
00031c  d10e              BNE      |L10.828|
;;;510    					{
;;;511    						if (volume < 15)
00031e  496c              LDR      r1,|L10.1232|
000320  7808              LDRB     r0,[r1,#0]  ; volume
000322  280f              CMP      r0,#0xf
000324  d25f              BCS      |L10.998|
000326  1c40              ADDS     r0,r0,#1
;;;512    						{
;;;513    							volume++;
000328  b2c0              UXTB     r0,r0
00032a  7008              STRB     r0,[r1,#0]
;;;514    							Drv_Dap_vol_set(volume);
00032c  f7fffffe          BL       Drv_Dap_vol_set
;;;515    							printf("Hal_Dap_Load_vol_reduce\n");
000330  a06e              ADR      r0,|L10.1260|
000332  f7fffffe          BL       __2printf
;;;516    						}
;;;517    					}
;;;518    
;;;519    					if((msg.param0 == 0x03) && (msg.param1 == 0x55)) //power off mode
000336  9802              LDR      r0,[sp,#8]
000338  2803              CMP      r0,#3
00033a  d154              BNE      |L10.998|
                  |L10.828|
00033c  9803              LDR      r0,[sp,#0xc]
00033e  2855              CMP      r0,#0x55
000340  d002              BEQ      |L10.840|
;;;520    					{
;;;521    						Global_datas.g_mode_status = POWER_OFF_MODE;
;;;522    					}
;;;523    					if((msg.param0 == 0x03) && (msg.param1 == 0x15)) //wifi mode
000342  2815              CMP      r0,#0x15
000344  d003              BEQ      |L10.846|
000346  e00a              B        |L10.862|
                  |L10.840|
000348  200d              MOVS     r0,#0xd               ;521
00034a  7160              STRB     r0,[r4,#5]            ;521
00034c  e04b              B        |L10.998|
                  |L10.846|
;;;524    					{
;;;525    						Global_datas.g_mode_status = WIFI_MODE;
00034e  2001              MOVS     r0,#1
000350  7160              STRB     r0,[r4,#5]
;;;526    						printf("FourG_WIFI_CHANNEL\n");
000352  a06d              ADR      r0,|L10.1288|
000354  f7fffffe          BL       __2printf
;;;527    					}
;;;528    					if((msg.param0 == 0x03) && (msg.param1 == 0x16)) //BT mode
000358  9802              LDR      r0,[sp,#8]
00035a  2803              CMP      r0,#3
00035c  d143              BNE      |L10.998|
                  |L10.862|
00035e  9803              LDR      r0,[sp,#0xc]
000360  2816              CMP      r0,#0x16
000362  d107              BNE      |L10.884|
;;;529    					{
;;;530    						Global_datas.g_mode_status = BT_MODE;
000364  2006              MOVS     r0,#6
000366  7160              STRB     r0,[r4,#5]
;;;531    						printf("FourG_BT_CHANNEL\n");
000368  a06c              ADR      r0,|L10.1308|
00036a  f7fffffe          BL       __2printf
;;;532    					}
;;;533    					if((msg.param0 == 0x03) && (msg.param1 == 0x17)) //AUX mode
00036e  9802              LDR      r0,[sp,#8]
000370  2803              CMP      r0,#3
000372  d138              BNE      |L10.998|
                  |L10.884|
000374  9803              LDR      r0,[sp,#0xc]
000376  2817              CMP      r0,#0x17
000378  d107              BNE      |L10.906|
;;;534    					{
;;;535    						Global_datas.g_mode_status = AUX_MODE;
00037a  2008              MOVS     r0,#8
00037c  7160              STRB     r0,[r4,#5]
;;;536    						printf("AUXIN_CHANNEL\n");
00037e  a06c              ADR      r0,|L10.1328|
000380  f7fffffe          BL       __2printf
;;;537    					}
;;;538    					if((msg.param0 == 0x03) && (msg.param1 == 0x18)) //FM mode
000384  9802              LDR      r0,[sp,#8]
000386  2803              CMP      r0,#3
000388  d12d              BNE      |L10.998|
                  |L10.906|
00038a  9803              LDR      r0,[sp,#0xc]
00038c  2818              CMP      r0,#0x18
00038e  d107              BNE      |L10.928|
;;;539    					{
;;;540    						Global_datas.g_mode_status = FM_MODE;
000390  200a              MOVS     r0,#0xa
000392  7160              STRB     r0,[r4,#5]
;;;541    						printf("AUXIN_CHANNEL\n");
000394  a066              ADR      r0,|L10.1328|
000396  f7fffffe          BL       __2printf
;;;542    					//	drv_fm_led_on();
;;;543    					}
;;;544    					if((msg.param0 == 0x03) && (msg.param1 == 0x31)) // NEXT CHANNEL
;;;545    					{
;;;546    								
;;;547    					}
;;;548    					if((msg.param0 == 0x03) && (msg.param1 == 0x32))// PRE CHANNEL
;;;549    					{
;;;550    					
;;;551    					}
;;;552    					if((msg.param0 == 0x03) && (msg.param1 == 0x56)) // PLAY/PAUSE
;;;553    					{
;;;554    
;;;555    					}
;;;556    					if((msg.param0 == 0x03) && (msg.param1 == 0xC0)) //FM reset
00039a  9802              LDR      r0,[sp,#8]
00039c  2803              CMP      r0,#3
00039e  d122              BNE      |L10.998|
                  |L10.928|
0003a0  9803              LDR      r0,[sp,#0xc]
0003a2  28c0              CMP      r0,#0xc0
0003a4  d107              BNE      |L10.950|
;;;557    					{
;;;558    						
;;;559    						drv_FM_on_NCU031_reset();
0003a6  f7fffffe          BL       drv_FM_on_NCU031_reset
;;;560    						printf("fm reset\n");
0003aa  a065              ADR      r0,|L10.1344|
0003ac  f7fffffe          BL       __2printf
;;;561    						
;;;562    					}
;;;563    					if((msg.param0 == 0x03) && (msg.param1 == 0xC1)) //inside
0003b0  9802              LDR      r0,[sp,#8]
0003b2  2803              CMP      r0,#3
0003b4  d117              BNE      |L10.998|
                  |L10.950|
0003b6  9803              LDR      r0,[sp,#0xc]
0003b8  28c1              CMP      r0,#0xc1
0003ba  d105              BNE      |L10.968|
;;;564    					{
;;;565    						printf("inside\n");
0003bc  a063              ADR      r0,|L10.1356|
0003be  f7fffffe          BL       __2printf
;;;566    					}
;;;567    					if((msg.param0 == 0x03) && (msg.param1 == 0xC2)) //outside
0003c2  9802              LDR      r0,[sp,#8]
0003c4  2803              CMP      r0,#3
0003c6  d10e              BNE      |L10.998|
                  |L10.968|
0003c8  9803              LDR      r0,[sp,#0xc]
0003ca  28c2              CMP      r0,#0xc2
0003cc  d105              BNE      |L10.986|
;;;568    					{
;;;569    
;;;570    						printf("outside\n");
0003ce  a061              ADR      r0,|L10.1364|
0003d0  f7fffffe          BL       __2printf
;;;571    					}
;;;572    					if((msg.param0 == 0x03) && (msg.param1 == 0xC3)) //autoside
0003d4  9802              LDR      r0,[sp,#8]
0003d6  2803              CMP      r0,#3
0003d8  d105              BNE      |L10.998|
                  |L10.986|
0003da  9803              LDR      r0,[sp,#0xc]
0003dc  28c3              CMP      r0,#0xc3
0003de  d102              BNE      |L10.998|
;;;573    					{
;;;574    						printf("autoside\n");
0003e0  a05f              ADR      r0,|L10.1376|
0003e2  f7fffffe          BL       __2printf
                  |L10.998|
;;;575    					}
;;;576    	            break;
;;;577    					
;;;578    	            default:
;;;579    	             break;
;;;580    	        }
;;;581        	}
;;;582    	
;;;583    		srv_key_handler();
0003e6  f7fffffe          BL       srv_key_handler
;;;584    		GetKeyEvent();
0003ea  f7fffffe          BL       GetKeyEvent
;;;585    		IoKeyProcess();
0003ee  f7fffffe          BL       IoKeyProcess
;;;586    
;;;587    
;;;588    		
;;;589    		if (((count>>16)&0xF) == refcount0)	
0003f2  9805              LDR      r0,[sp,#0x14]
0003f4  0300              LSLS     r0,r0,#12
0003f6  0f00              LSRS     r0,r0,#28
0003f8  42b8              CMP      r0,r7
0003fa  d103              BNE      |L10.1028|
;;;590    		{
;;;591    			
;;;592    			if(refcount0 <0xF)
0003fc  2f0f              CMP      r7,#0xf
0003fe  d202              BCS      |L10.1030|
000400  1c7f              ADDS     r7,r7,#1
;;;593    				refcount0++;
000402  e0b3              B        |L10.1388|
                  |L10.1028|
000404  e0b7              B        |L10.1398|
                  |L10.1030|
000406  e0b3              B        |L10.1392|
                  |L10.1032|
000408  0a6d6169          DCB      "\nmain\n",0
00040c  6e0a00  
00040f  00                DCB      0
                  |L10.1040|
                          DCD      Global_datas+0x20
                  |L10.1044|
                          DCD      SysTimer_1s
                  |L10.1048|
                          DCD      ModulePowerUpPinTimer
                  |L10.1052|
                          DCD      LedKeyBlinkTimer
                  |L10.1056|
000420  4d53475f          DCB      "MSG_4G_SYS_STATE_IND:msg.param0 = %x, msg.param1 = %x \n"
000424  34475f53
000428  59535f53
00042c  54415445
000430  5f494e44
000434  3a6d7367
000438  2e706172
00043c  616d3020
000440  3d202578
000444  2c206d73
000448  672e7061
00044c  72616d31
000450  203d2025
000454  78200a  
000457  00                DCB      0
                  |L10.1112|
000458  30783038          DCB      "0x08, msg.param1 = %x \n",0
00045c  2c206d73
000460  672e7061
000464  72616d31
000468  203d2025
00046c  78200a00
                  |L10.1136|
000470  30783037          DCB      "0x07, msg.param1 = %x \n",0
000474  2c206d73
000478  672e7061
00047c  72616d31
000480  203d2025
000484  78200a00
                  |L10.1160|
000488  30783034          DCB      "0x04, msg.param1 = %x \n",0
00048c  2c206d73
000490  672e7061
000494  72616d31
000498  203d2025
00049c  78200a00
                  |L10.1184|
0004a0  30783046          DCB      "0x0F, msg.param1 = %x \n",0
0004a4  2c206d73
0004a8  672e7061
0004ac  72616d31
0004b0  203d2025
0004b4  78200a00
                  |L10.1208|
0004b8  30783036          DCB      "0x06, msg.param1 = %x \n",0
0004bc  2c206d73
0004c0  672e7061
0004c4  72616d31
0004c8  203d2025
0004cc  78200a00
                  |L10.1232|
                          DCD      ||area_number.14||
                  |L10.1236|
0004d4  48616c5f          DCB      "Hal_Dap_Load_vol_add\n",0
0004d8  4461705f
0004dc  4c6f6164
0004e0  5f766f6c
0004e4  5f616464
0004e8  0a00    
0004ea  00                DCB      0
0004eb  00                DCB      0
                  |L10.1260|
0004ec  48616c5f          DCB      "Hal_Dap_Load_vol_reduce\n",0
0004f0  4461705f
0004f4  4c6f6164
0004f8  5f766f6c
0004fc  5f726564
000500  7563650a
000504  00      
000505  00                DCB      0
000506  00                DCB      0
000507  00                DCB      0
                  |L10.1288|
000508  466f7572          DCB      "FourG_WIFI_CHANNEL\n",0
00050c  475f5749
000510  46495f43
000514  48414e4e
000518  454c0a00
                  |L10.1308|
00051c  466f7572          DCB      "FourG_BT_CHANNEL\n",0
000520  475f4254
000524  5f434841
000528  4e4e454c
00052c  0a00    
00052e  00                DCB      0
00052f  00                DCB      0
                  |L10.1328|
000530  41555849          DCB      "AUXIN_CHANNEL\n",0
000534  4e5f4348
000538  414e4e45
00053c  4c0a00  
00053f  00                DCB      0
                  |L10.1344|
000540  666d2072          DCB      "fm reset\n",0
000544  65736574
000548  0a00    
00054a  00                DCB      0
00054b  00                DCB      0
                  |L10.1356|
00054c  696e7369          DCB      "inside\n",0
000550  64650a00
                  |L10.1364|
000554  6f757473          DCB      "outside\n",0
000558  6964650a
00055c  00      
00055d  00                DCB      0
00055e  00                DCB      0
00055f  00                DCB      0
                  |L10.1376|
000560  6175746f          DCB      "autoside\n",0
000564  73696465
000568  0a00    
00056a  00                DCB      0
00056b  00                DCB      0
                  |L10.1388|
00056c  b2ff              UXTB     r7,r7
00056e  e000              B        |L10.1394|
                  |L10.1392|
;;;594    			else
;;;595    				refcount0 = 0;
000570  2700              MOVS     r7,#0
                  |L10.1394|
;;;596    			srv_bat_charge_handler();	
000572  f7fffffe          BL       srv_bat_charge_handler
                  |L10.1398|
;;;597    		}
;;;598    
;;;599    		if (((count>>15)&0xF) == refcount1)
000576  9805              LDR      r0,[sp,#0x14]
000578  0340              LSLS     r0,r0,#13
00057a  0f00              LSRS     r0,r0,#28
00057c  42b0              CMP      r0,r6
00057e  d10b              BNE      |L10.1432|
;;;600    		{	
;;;601    			
;;;602    			if(refcount1 <0xF)
000580  2e0f              CMP      r6,#0xf
000582  d202              BCS      |L10.1418|
000584  1c76              ADDS     r6,r6,#1
;;;603    				refcount1++;
000586  b2f6              UXTB     r6,r6
000588  e000              B        |L10.1420|
                  |L10.1418|
;;;604    			else
;;;605    				refcount1 = 0;
00058a  2600              MOVS     r6,#0
                  |L10.1420|
;;;606    			
;;;607    			drv_power_status_updata();
00058c  f7fffffe          BL       drv_power_status_updata
;;;608    			srv_led_change_handler();
000590  f7fffffe          BL       srv_led_change_handler
;;;609    			srv_audio_handler();
000594  f7fffffe          BL       srv_audio_handler
                  |L10.1432|
;;;610    		}
;;;611    		
;;;612    		if (((count>>20)&0xF) == refcount2)
000598  9805              LDR      r0,[sp,#0x14]
00059a  0200              LSLS     r0,r0,#8
00059c  0f00              LSRS     r0,r0,#28
00059e  42a8              CMP      r0,r5
0005a0  d105              BNE      |L10.1454|
;;;613    		{
;;;614    
;;;615    			if(refcount2 <0xF)
0005a2  2d0f              CMP      r5,#0xf
0005a4  d202              BCS      |L10.1452|
0005a6  1c6d              ADDS     r5,r5,#1
;;;616    				refcount2++;
0005a8  b2ed              UXTB     r5,r5
0005aa  e000              B        |L10.1454|
                  |L10.1452|
;;;617    			else
;;;618    				refcount2 = 0;
0005ac  2500              MOVS     r5,#0
                  |L10.1454|
;;;619    		}
;;;620    		count++;
0005ae  9805              LDR      r0,[sp,#0x14]
0005b0  1c40              ADDS     r0,r0,#1
0005b2  9005              STR      r0,[sp,#0x14]         ;279
0005b4  e530              B        |L10.24|
;;;621    	}
;;;622    
;;;623    }
;;;624    
                          ENDP


                          AREA ||.data||, DATA, ALIGN=0

                  sys_err
000000  00                DCB      0x00

                          AREA ||area_number.14||, DATA, ALIGN=0

                          EXPORTAS ||area_number.14||, ||.data||
                  volume
000000  05                DCB      0x05

;*** Start embedded assembler ***

#line 1 "..\\main.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_sys_err____REV16|
#line 388 "..\\lib\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___6_main_c_sys_err____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_sys_err____REVSH|
#line 402
|__asm___6_main_c_sys_err____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
