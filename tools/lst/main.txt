; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\main.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\main.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\lib\CMSIS\Include -I..\lib\Device\Nuvoton\NUC029xGE\Include -I..\lib\StdDriver\inc -I..\src\core\include -I..\src\driver\include -I..\src\io\include -I..\src\global -I..\src\server\include -I..\src\driver\audio -D__UVISION_VERSION=522 --omf_browse=.\obj\main.crf ..\main.c]
                          THUMB

                          AREA ||i.Amplifier_open||, CODE, READONLY, ALIGN=2

                  Amplifier_open PROC
;;;122    
;;;123    void Amplifier_open(void)
000000  b510              PUSH     {r4,lr}
;;;124    {
;;;125    	GPIO_SetMode(PC, BIT1, GPIO_MODE_OUTPUT);	
000002  4c0c              LDR      r4,|L1.52|
000004  2201              MOVS     r2,#1
000006  2102              MOVS     r1,#2
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       GPIO_SetMode
;;;126    	GPIO_SetMode(PC, BIT13, GPIO_MODE_OUTPUT);
00000e  2201              MOVS     r2,#1
000010  0351              LSLS     r1,r2,#13
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       GPIO_SetMode
;;;127    	GPIO_SetMode(PB, BIT14, GPIO_MODE_OUTPUT);
000018  4806              LDR      r0,|L1.52|
00001a  2201              MOVS     r2,#1
00001c  0391              LSLS     r1,r2,#14
00001e  3840              SUBS     r0,r0,#0x40
000020  f7fffffe          BL       GPIO_SetMode
;;;128    	PC1 = 1;
000024  4904              LDR      r1,|L1.56|
000026  2001              MOVS     r0,#1
000028  6048              STR      r0,[r1,#4]
;;;129    	PC13 = 1;
00002a  6348              STR      r0,[r1,#0x34]
;;;130    	PB14 = 1;
00002c  4902              LDR      r1,|L1.56|
00002e  3940              SUBS     r1,r1,#0x40
000030  6388              STR      r0,[r1,#0x38]
;;;131    }
000032  bd10              POP      {r4,pc}
;;;132    
                          ENDP

                  |L1.52|
                          DCD      0x50004080
                  |L1.56|
                          DCD      0x50004280

                          AREA ||i.IoKeyProcess||, CODE, READONLY, ALIGN=2

                  IoKeyProcess PROC
;;;216    
;;;217    void IoKeyProcess(void)
000000  b570              PUSH     {r4-r6,lr}
;;;218    {
;;;219    
;;;220    	if((Global_datas.g_mode_status == POWER_IDLE_MODE)&&(IN_KEY_POWER_CP != IoKeyInputmessage))
000002  4c1b              LDR      r4,|L2.112|
000004  4d1b              LDR      r5,|L2.116|
000006  7961              LDRB     r1,[r4,#5]  ; Global_datas
000008  7828              LDRB     r0,[r5,#0]
00000a  290e              CMP      r1,#0xe
00000c  d00a              BEQ      |L2.36|
;;;221        {
;;;222    		return;
;;;223    	}
;;;224    
;;;225    	if(IoKeyInputmessage)
00000e  2800              CMP      r0,#0
000010  d027              BEQ      |L2.98|
                  |L2.18|
;;;226    	{
;;;227    		switch(IoKeyInputmessage)
000012  28f0              CMP      r0,#0xf0
000014  d015              BEQ      |L2.66|
000016  28f1              CMP      r0,#0xf1
000018  d019              BEQ      |L2.78|
00001a  28f3              CMP      r0,#0xf3
00001c  d005              BEQ      |L2.42|
00001e  28f4              CMP      r0,#0xf4
000020  d11f              BNE      |L2.98|
000022  e008              B        |L2.54|
                  |L2.36|
000024  28f1              CMP      r0,#0xf1              ;220
000026  d11e              BNE      |L2.102|
000028  e7f3              B        |L2.18|
                  |L2.42|
;;;228    		{
;;;229    			case IN_KEY_PAIR_SP:
;;;230    				printf("pari key sp\n");
00002a  a013              ADR      r0,|L2.120|
00002c  f7fffffe          BL       __2printf
;;;231    				drv_wifi_4g_switch_cmd_send();
000030  f7fffffe          BL       drv_wifi_4g_switch_cmd_send
;;;232    				break;
000034  e015              B        |L2.98|
                  |L2.54|
;;;233    			case IN_KEY_PAIR_CP:
;;;234    				printf("pari key cp\n");
000036  a014              ADR      r0,|L2.136|
000038  f7fffffe          BL       __2printf
;;;235    				drv_pairing_cmd_send();
00003c  f7fffffe          BL       drv_pairing_cmd_send
;;;236    				
;;;237    				break;
000040  e00f              B        |L2.98|
                  |L2.66|
;;;238    			case IN_KEY_POWER_SP:
;;;239    				printf("power key sp\n");
000042  a015              ADR      r0,|L2.152|
000044  f7fffffe          BL       __2printf
;;;240    				srv_key_mode_handler();
000048  f7fffffe          BL       srv_key_mode_handler
;;;241    				break;
00004c  e009              B        |L2.98|
                  |L2.78|
;;;242    			case IN_KEY_POWER_CP:
;;;243    				printf("power key cp\n");	
00004e  a016              ADR      r0,|L2.168|
000050  f7fffffe          BL       __2printf
;;;244    				//PowerOff();
;;;245    				if(Global_datas.g_mode_status == POWER_IDLE_MODE)
000054  7960              LDRB     r0,[r4,#5]  ; Global_datas
000056  280e              CMP      r0,#0xe
000058  d006              BEQ      |L2.104|
;;;246    				{
;;;247    					SYS_Status();
;;;248    				}
;;;249    
;;;250    				else
;;;251    				{
;;;252    					PowerOff();
00005a  f7fffffe          BL       PowerOff
;;;253    					SysIdle();
00005e  f7fffffe          BL       SysIdle
                  |L2.98|
;;;254    				}
;;;255    				break;
;;;256    
;;;257    		  	default:break;
;;;258    		}
;;;259    	}
;;;260    
;;;261    	IoKeyInputmessage = 0;
000062  2000              MOVS     r0,#0
000064  7028              STRB     r0,[r5,#0]
                  |L2.102|
;;;262    		
;;;263    }
000066  bd70              POP      {r4-r6,pc}
                  |L2.104|
000068  f7fffffe          BL       SYS_Status
00006c  e7f9              B        |L2.98|
;;;264    
                          ENDP

00006e  0000              DCW      0x0000
                  |L2.112|
                          DCD      Global_datas+0x20
                  |L2.116|
                          DCD      IoKeyInputmessage
                  |L2.120|
000078  70617269          DCB      "pari key sp\n",0
00007c  206b6579
000080  2073700a
000084  00      
000085  00                DCB      0
000086  00                DCB      0
000087  00                DCB      0
                  |L2.136|
000088  70617269          DCB      "pari key cp\n",0
00008c  206b6579
000090  2063700a
000094  00      
000095  00                DCB      0
000096  00                DCB      0
000097  00                DCB      0
                  |L2.152|
000098  706f7765          DCB      "power key sp\n",0
00009c  72206b65
0000a0  79207370
0000a4  0a00    
0000a6  00                DCB      0
0000a7  00                DCB      0
                  |L2.168|
0000a8  706f7765          DCB      "power key cp\n",0
0000ac  72206b65
0000b0  79206370
0000b4  0a00    
0000b6  00                DCB      0
0000b7  00                DCB      0

                          AREA ||i.PowerOff||, CODE, READONLY, ALIGN=2

                  PowerOff PROC
;;;203    
;;;204    void PowerOff(void)
000000  b510              PUSH     {r4,lr}
;;;205    {
;;;206    	drv_Cmd_Send2NCU031(0x70, 0x15,0x00);// power off cmd to LCD board
000002  2200              MOVS     r2,#0
000004  2115              MOVS     r1,#0x15
000006  2070              MOVS     r0,#0x70
000008  f7fffffe          BL       drv_Cmd_Send2NCU031
;;;207    	
;;;208    	Cmd_Send2FourG( 0x03,0x55,0x00); // poweroff cmd to 4G
00000c  2200              MOVS     r2,#0
00000e  2155              MOVS     r1,#0x55
000010  2003              MOVS     r0,#3
000012  f7fffffe          BL       Cmd_Send2FourG
;;;209    	//Drv_4GMoudle_PowerUp(0);  // wait for 4g modle ready ,than turn off power, don't off here.
;;;210    	drv_led_init();// led all off
000016  f7fffffe          BL       drv_led_init
;;;211    	Drv_audio_powerdown();
00001a  f7fffffe          BL       Drv_audio_powerdown
;;;212    	Global_datas.led_poweroff = 1;
00001e  4804              LDR      r0,|L3.48|
000020  2101              MOVS     r1,#1
000022  7341              STRB     r1,[r0,#0xd]
;;;213    	TimeOutSet(&PoweroffLedTimer, 5000);
000024  4903              LDR      r1,|L3.52|
000026  4804              LDR      r0,|L3.56|
000028  f7fffffe          BL       TimeOutSet
;;;214    }
00002c  bd10              POP      {r4,pc}
;;;215    
                          ENDP

00002e  0000              DCW      0x0000
                  |L3.48|
                          DCD      Global_datas+0x20
                  |L3.52|
                          DCD      0x00001388
                  |L3.56|
                          DCD      PoweroffLedTimer

                          AREA ||i.SYS_BusInit||, CODE, READONLY, ALIGN=1

                  SYS_BusInit PROC
;;;110    
;;;111    void SYS_BusInit(void)
000000  b510              PUSH     {r4,lr}
;;;112    {
;;;113    	Debug_Uart_Init();
000002  f7fffffe          BL       Debug_Uart_Init
;;;114    	
;;;115    	Transfer_Uart_Init();
000006  f7fffffe          BL       Transfer_Uart_Init
;;;116    	
;;;117    	USCI_Uart_Init();
00000a  f7fffffe          BL       USCI_Uart_Init
;;;118    	
;;;119    	Hal_I2c_Init();
00000e  f7fffffe          BL       Hal_I2c_Init
;;;120    	
;;;121    }
000012  bd10              POP      {r4,pc}
;;;122    
                          ENDP


                          AREA ||i.SYS_Clock_init||, CODE, READONLY, ALIGN=2

                  SYS_Clock_init PROC
;;;43     
;;;44     void SYS_Clock_init(void)
000000  b5f8              PUSH     {r3-r7,lr}
;;;45     {
;;;46     
;;;47         
;;;48        // SYS->GPF_MFPL = SYS_GPF_MFPL_PF4MFP_XT1_IN | SYS_GPF_MFPL_PF3MFP_XT1_OUT | SYS_GPF_MFPL_PF1MFP_X32_IN | SYS_GPF_MFPL_PF0MFP_X32_OUT;
;;;49     	/* Enable HIRC clock (Internal RC 22.1184MHz) */
;;;50         CLK_EnableXtalRC(CLK_PWRCTL_HIRCEN_Msk);
000002  2004              MOVS     r0,#4
000004  f7fffffe          BL       CLK_EnableXtalRC
;;;51     
;;;52         /* Wait for HIRC clock ready */
;;;53         CLK_WaitClockReady(CLK_STATUS_HIRCSTB_Msk);
000008  2010              MOVS     r0,#0x10
00000a  f7fffffe          BL       CLK_WaitClockReady
;;;54     
;;;55         /* Select HCLK clock source as HIRC and HCLK clock divider as 1 */
;;;56         CLK_SetHCLK(CLK_CLKSEL0_HCLKSEL_HIRC, CLK_CLKDIV0_HCLK(1));
00000e  2100              MOVS     r1,#0
000010  2007              MOVS     r0,#7
000012  f7fffffe          BL       CLK_SetHCLK
;;;57     
;;;58         /* Enable HXT clock (external XTAL 12MHz) */
;;;59         CLK_EnableXtalRC(CLK_PWRCTL_HXTEN_Msk | CLK_PWRCTL_LXTEN_Msk);
000016  2003              MOVS     r0,#3
000018  f7fffffe          BL       CLK_EnableXtalRC
;;;60     //    CLK_EnableXtalRC(CLK_PWRCTL_HXTEN_Msk);
;;;61         /* Wait for HXT clock ready */
;;;62         CLK_WaitClockReady(CLK_STATUS_HXTSTB_Msk | CLK_STATUS_LXTSTB_Msk);
00001c  2003              MOVS     r0,#3
00001e  f7fffffe          BL       CLK_WaitClockReady
;;;63     //    CLK_WaitClockReady(CLK_STATUS_HXTSTB_Msk);
;;;64         /* Set core clock as PLL_CLOCK from PLL and SysTick source to HCLK/2*/
;;;65         CLK_SetCoreClock(PLL_CLOCK);
000022  4822              LDR      r0,|L5.172|
000024  f7fffffe          BL       CLK_SetCoreClock
;;;66         CLK_SetSysTickClockSrc(CLK_CLKSEL0_STCLKSEL_HCLK_DIV2);
000028  2018              MOVS     r0,#0x18
00002a  f7fffffe          BL       CLK_SetSysTickClockSrc
;;;67     
;;;68         /* Enable UART module clock */
;;;69         CLK_EnableModuleClock(UART0_MODULE);
00002e  4c20              LDR      r4,|L5.176|
000030  4620              MOV      r0,r4
000032  f7fffffe          BL       CLK_EnableModuleClock
;;;70     	/* Enable UART module clock */
;;;71         CLK_EnableModuleClock(UART1_MODULE);
000036  1c65              ADDS     r5,r4,#1
000038  4628              MOV      r0,r5
00003a  f7fffffe          BL       CLK_EnableModuleClock
;;;72     	
;;;73         /* Enable USCI module clock */
;;;74         CLK_EnableModuleClock(UART2_MODULE);
00003e  1ca6              ADDS     r6,r4,#2
000040  4630              MOV      r0,r6
000042  f7fffffe          BL       CLK_EnableModuleClock
;;;75     	
;;;76         /* Enable USCI module clock */
;;;77         CLK_EnableModuleClock(USCI0_MODULE);
000046  4f1b              LDR      r7,|L5.180|
000048  4638              MOV      r0,r7
00004a  f7fffffe          BL       CLK_EnableModuleClock
;;;78     	
;;;79     	/* Enable I2C0 module clock */
;;;80         CLK_EnableModuleClock(I2C0_MODULE);
00004e  481a              LDR      r0,|L5.184|
000050  f7fffffe          BL       CLK_EnableModuleClock
;;;81     	
;;;82     	/* Enable I2C1 module clock */
;;;83         CLK_EnableModuleClock(I2C1_MODULE);
000054  4818              LDR      r0,|L5.184|
000056  1c40              ADDS     r0,r0,#1
000058  f7fffffe          BL       CLK_EnableModuleClock
;;;84     
;;;85     	/* Enable ADC module clock */
;;;86         CLK_EnableModuleClock(ADC_MODULE);
00005c  4817              LDR      r0,|L5.188|
00005e  f7fffffe          BL       CLK_EnableModuleClock
;;;87     
;;;88         /* Enable PWM0 module clock */
;;;89         CLK_EnableModuleClock(PWM0_MODULE);
000062  4817              LDR      r0,|L5.192|
000064  f7fffffe          BL       CLK_EnableModuleClock
;;;90     
;;;91     	/* Enable timer clock */
;;;92     	CLK_EnableModuleClock(TMR0_MODULE);
000068  4816              LDR      r0,|L5.196|
00006a  f7fffffe          BL       CLK_EnableModuleClock
;;;93         CLK_EnableModuleClock(RTC_MODULE);
00006e  4816              LDR      r0,|L5.200|
000070  f7fffffe          BL       CLK_EnableModuleClock
;;;94     
;;;95         /* Select UART module clock source as HXT and UART module clock divider as 1 */
;;;96         CLK_SetModuleClock(UART0_MODULE, CLK_CLKSEL1_UARTSEL_HXT, CLK_CLKDIV0_UART(1));
000074  2200              MOVS     r2,#0
000076  4611              MOV      r1,r2
000078  4620              MOV      r0,r4
00007a  f7fffffe          BL       CLK_SetModuleClock
;;;97     	
;;;98     	CLK_SetModuleClock(UART1_MODULE, CLK_CLKSEL1_UARTSEL_HXT, CLK_CLKDIV0_UART(1));
00007e  2200              MOVS     r2,#0
000080  4611              MOV      r1,r2
000082  4628              MOV      r0,r5
000084  f7fffffe          BL       CLK_SetModuleClock
;;;99     
;;;100    	CLK_SetModuleClock(UART2_MODULE, CLK_CLKSEL1_UARTSEL_HXT, CLK_CLKDIV0_UART(1));
000088  2200              MOVS     r2,#0
00008a  4611              MOV      r1,r2
00008c  4630              MOV      r0,r6
00008e  f7fffffe          BL       CLK_SetModuleClock
;;;101    	CLK_SetModuleClock(USCI0_MODULE, CLK_CLKSEL1_UARTSEL_HXT, CLK_CLKDIV0_UART(1));
000092  2200              MOVS     r2,#0
000094  4611              MOV      r1,r2
000096  4638              MOV      r0,r7
000098  f7fffffe          BL       CLK_SetModuleClock
;;;102    
;;;103        /* ADC clock source is 22.1184MHz, set divider to 7, ADC clock is 22.1184/7 MHz */
;;;104        CLK_SetModuleClock(ADC_MODULE, CLK_CLKSEL1_ADCSEL_HIRC, CLK_CLKDIV0_ADC(7));
00009c  2203              MOVS     r2,#3
00009e  0452              LSLS     r2,r2,#17
0000a0  210c              MOVS     r1,#0xc
0000a2  4806              LDR      r0,|L5.188|
0000a4  f7fffffe          BL       CLK_SetModuleClock
;;;105        /* Select PWM01 module clock source */
;;;106       // CLK_SetModuleClock(PWM0_MODULE, CLK_CLKSEL1_PWM0SEL_PCLK0, 0);
;;;107    
;;;108    }
0000a8  bdf8              POP      {r3-r7,pc}
;;;109    
                          ENDP

0000aa  0000              DCW      0x0000
                  |L5.172|
                          DCD      0x044aa200
                  |L5.176|
                          DCD      0x57803d10
                  |L5.180|
                          DCD      0x80000008
                  |L5.184|
                          DCD      0x40000008
                  |L5.188|
                          DCD      0x5623fe1c
                  |L5.192|
                          DCD      0x53c00014
                  |L5.196|
                          DCD      0x5e800002
                  |L5.200|
                          DCD      0x63200001

                          AREA ||i.SYS_Init||, CODE, READONLY, ALIGN=2

                  SYS_Init PROC
;;;142    /*---------------------------------------------------------------------------------------------------------*/
;;;143    void SYS_Init(void)
000000  b510              PUSH     {r4,lr}
000002  2059              MOVS     r0,#0x59
000004  4c0e              LDR      r4,|L6.64|
000006  2216              MOVS     r2,#0x16
000008  2188              MOVS     r1,#0x88
                  |L6.10|
00000a  6020              STR      r0,[r4,#0]
00000c  6022              STR      r2,[r4,#0]
00000e  6021              STR      r1,[r4,#0]
000010  6823              LDR      r3,[r4,#0]
000012  2b00              CMP      r3,#0
000014  d0f9              BEQ      |L6.10|
;;;144    {
;;;145        /* Unlock protected registers */
;;;146        SYS_UnlockReg();
;;;147    	
;;;148    	SYS_Clock_init();
000016  f7fffffe          BL       SYS_Clock_init
;;;149    	TYM_gpio_init();
00001a  f7fffffe          BL       TYM_gpio_init
00001e  2000              MOVS     r0,#0
000020  6020              STR      r0,[r4,#0]
;;;150    
;;;151    	/* Lock protected registers */
;;;152        SYS_LockReg();
;;;153    
;;;154        /* Start Timer1 to measure delay period of TIMER_Delay API is reasonable or not */
;;;155       // TIMER1->CTL = TIMER_PERIODIC_MODE | (12 - 1);
;;;156    	TYM_sys_PowerManger_init();
000022  f7fffffe          BL       TYM_sys_PowerManger_init
;;;157    	drv_led_init();
000026  f7fffffe          BL       drv_led_init
;;;158    
;;;159    	Drv_FourG_Gpio_Init();
00002a  f7fffffe          BL       Drv_FourG_Gpio_Init
;;;160    	//drv_FourGmodel_power_key_down(); // first turn on the power ,and power key set hi(off)
;;;161    	
;;;162    
;;;163    	SYS_BusInit();
00002e  f7fffffe          BL       SYS_BusInit
;;;164    	
;;;165    	Hal_Timer1_Init(); // kim
000032  f7fffffe          BL       Hal_Timer1_Init
;;;166    
;;;167    	TYM_DriverInit();
000036  f7fffffe          BL       TYM_DriverInit
;;;168    	
;;;169    	Core_Msg_Init();
00003a  f7fffffe          BL       Core_Msg_Init
;;;170    
;;;171    	//srv_rtc_init();
;;;172    
;;;173    }
00003e  bd10              POP      {r4,pc}
;;;174    
                          ENDP

                  |L6.64|
                          DCD      0x50000100

                          AREA ||i.SYS_Status||, CODE, READONLY, ALIGN=2

                  SYS_Status PROC
;;;183    
;;;184    void SYS_Status(void)
000000  b570              PUSH     {r4-r6,lr}
;;;185    {
;;;186    	Global_datas.g_mode_status = POWER_ON_MODE;	
000002  4c10              LDR      r4,|L7.68|
000004  2500              MOVS     r5,#0
000006  7165              STRB     r5,[r4,#5]
;;;187    	Global_datas.g_4g_initing = 1;
000008  2001              MOVS     r0,#1
00000a  71a0              STRB     r0,[r4,#6]
;;;188    	Global_datas.eq_mode = EQ_MODE_INDOOR;
00000c  73a0              STRB     r0,[r4,#0xe]
;;;189    	Global_datas.volume = VOLUME_DEFAULT;
00000e  2008              MOVS     r0,#8
000010  73e0              STRB     r0,[r4,#0xf]
;;;190    	TYM_drv_powerkeepon(1);
000012  2001              MOVS     r0,#1
000014  f7fffffe          BL       TYM_drv_powerkeepon
;;;191    	Drv_4GMoudle_PowerUp(1);
000018  2001              MOVS     r0,#1
00001a  f7fffffe          BL       Drv_4GMoudle_PowerUp
;;;192    	drv_FourGmodel_power_key_SetHi();
00001e  f7fffffe          BL       drv_FourGmodel_power_key_SetHi
;;;193    	TimeOutSet(&ModulePowerUpPinTimer,3000);
000022  4909              LDR      r1,|L7.72|
000024  4809              LDR      r0,|L7.76|
000026  f7fffffe          BL       TimeOutSet
;;;194    	TimeOutSet(&PoweroffLedTimer, 100);
00002a  2164              MOVS     r1,#0x64
00002c  4808              LDR      r0,|L7.80|
00002e  f7fffffe          BL       TimeOutSet
;;;195    	Drv_audio_init();
000032  f7fffffe          BL       Drv_audio_init
;;;196    	Global_datas.led_poweroff = 0;
000036  7365              STRB     r5,[r4,#0xd]
;;;197    	
;;;198    
;;;199    	
;;;200    	drv_Cmd_Send2NCU031(0x70, 0x16,0x00);// power on cmd to LCD board
000038  2200              MOVS     r2,#0
00003a  2116              MOVS     r1,#0x16
00003c  2070              MOVS     r0,#0x70
00003e  f7fffffe          BL       drv_Cmd_Send2NCU031
;;;201    	
;;;202    }
000042  bd70              POP      {r4-r6,pc}
;;;203    
                          ENDP

                  |L7.68|
                          DCD      Global_datas+0x20
                  |L7.72|
                          DCD      0x00000bb8
                  |L7.76|
                          DCD      ModulePowerUpPinTimer
                  |L7.80|
                          DCD      PoweroffLedTimer

                          AREA ||i.SysIdle||, CODE, READONLY, ALIGN=2

                  SysIdle PROC
;;;174    
;;;175    void SysIdle(void)
000000  b510              PUSH     {r4,lr}
;;;176    {
;;;177    	Global_datas.g_mode_status = POWER_IDLE_MODE;	
000002  4806              LDR      r0,|L8.28|
000004  210e              MOVS     r1,#0xe
000006  7141              STRB     r1,[r0,#5]
;;;178    	Global_datas.g_4g_initing = 0;
000008  2100              MOVS     r1,#0
00000a  7181              STRB     r1,[r0,#6]
;;;179    	drv_FourGmodel_power_key_SetLow();
00000c  f7fffffe          BL       drv_FourGmodel_power_key_SetLow
;;;180    	TimeOutSet(&SysTimer_1s,1000);
000010  217d              MOVS     r1,#0x7d
000012  00c9              LSLS     r1,r1,#3
000014  4802              LDR      r0,|L8.32|
000016  f7fffffe          BL       TimeOutSet
;;;181    
;;;182    }
00001a  bd10              POP      {r4,pc}
;;;183    
                          ENDP

                  |L8.28|
                          DCD      Global_datas+0x20
                  |L8.32|
                          DCD      SysTimer_1s

                          AREA ||i.TYM_DriverInit||, CODE, READONLY, ALIGN=1

                  TYM_DriverInit PROC
;;;132    
;;;133    void TYM_DriverInit(void)
000000  b510              PUSH     {r4,lr}
;;;134    {
;;;135    	//Drv_audio_init();
;;;136    	Drv_IrKey_init(); // kim
000002  f7fffffe          BL       Drv_IrKey_init
;;;137    	drv_gipo_key_init();
000006  f7fffffe          BL       drv_gipo_key_init
;;;138    }
00000a  bd10              POP      {r4,pc}
;;;139    
                          ENDP


                          AREA ||i.main||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                  main PROC
;;;268    /*---------------------------------------------------------------------------------------------------------*/
;;;269    int32_t main(void)
000000  b088              SUB      sp,sp,#0x20
;;;270    {
;;;271    	sCoreMsg msg;
;;;272    	uint32_t count;
;;;273    	uint8_t refcount0=1;
000002  2701              MOVS     r7,#1
;;;274    	uint8_t refcount1=1;
;;;275    	uint8_t refcount2=1;
;;;276      	uint8_t bat_val[2];
;;;277    	uint8_t ledtimecount = 0;
000004  2000              MOVS     r0,#0
000006  463e              MOV      r6,r7                 ;274
000008  463d              MOV      r5,r7                 ;275
;;;278    	
;;;279    //	uint8_t autoside = 0;
;;;280    //    S_RTC_TIME_DATA_T sReadRTC;
;;;281    
;;;282    	/* Init System, peripheral clock and multi-function I/O */
;;;283    
;;;284    	SYS_Init();
00000a  9006              STR      r0,[sp,#0x18]
00000c  f7fffffe          BL       SYS_Init
;;;285    	//SYS_Status();
;;;286    	SysIdle();
000010  f7fffffe          BL       SysIdle
;;;287    	
;;;288    	
;;;289        printf("\nmain\n");
000014  a0fd              ADR      r0,|L10.1036|
000016  f7fffffe          BL       __2printf
00001a  4cfe              LDR      r4,|L10.1044|
                  |L10.28|
;;;290    		
;;;291        while(1)
;;;292        {
;;;293    
;;;294    		if(IsTimeOut(&SysTimer_1s))
00001c  48fe              LDR      r0,|L10.1048|
00001e  f7fffffe          BL       IsTimeOut
000022  2800              CMP      r0,#0
000024  d028              BEQ      |L10.120|
;;;295    		{
;;;296    			TimeOutSet(&SysTimer_1s, 500);
000026  21ff              MOVS     r1,#0xff
000028  31f5              ADDS     r1,r1,#0xf5
00002a  48fb              LDR      r0,|L10.1048|
00002c  f7fffffe          BL       TimeOutSet
;;;297    			
;;;298    	        if(Global_datas.g_4g_initing)
000030  79a0              LDRB     r0,[r4,#6]  ; Global_datas
000032  2800              CMP      r0,#0
000034  d004              BEQ      |L10.64|
;;;299    			{
;;;300    				Global_datas.g_mode_status = WIFI_MODE;				
000036  2001              MOVS     r0,#1
000038  7160              STRB     r0,[r4,#5]
;;;301    				srv_led_sys_initing();
00003a  f7fffffe          BL       srv_led_sys_initing
00003e  e001              B        |L10.68|
                  |L10.64|
;;;302    			}
;;;303    			else
;;;304    			{
;;;305    				srv_led_change_handler();
000040  f7fffffe          BL       srv_led_change_handler
                  |L10.68|
;;;306    			}
;;;307    
;;;308    			if(IsTimeOut(&ModulePowerUpPinTimer))
000044  48f5              LDR      r0,|L10.1052|
000046  f7fffffe          BL       IsTimeOut
00004a  2800              CMP      r0,#0
00004c  d001              BEQ      |L10.82|
;;;309    			{
;;;310    				drv_FourGmodel_power_key_SetLow();
00004e  f7fffffe          BL       drv_FourGmodel_power_key_SetLow
                  |L10.82|
;;;311    			}
;;;312    
;;;313    			if(Global_datas.g_mode_status == POWER_IDLE_MODE)
000052  7960              LDRB     r0,[r4,#5]  ; Global_datas
000054  280e              CMP      r0,#0xe
000056  d10f              BNE      |L10.120|
;;;314    			{
;;;315    				if(!IsTimeOut(&PoweroffLedTimer))
000058  48f1              LDR      r0,|L10.1056|
00005a  f7fffffe          BL       IsTimeOut
00005e  2800              CMP      r0,#0
000060  d029              BEQ      |L10.182|
;;;316    				{			
;;;317    					if(ledtimecount)
;;;318    					{
;;;319    						PA12 = 1;
;;;320    						PA13 = 1;
;;;321    						PA1 = 1;
;;;322    						ledtimecount = 0;
;;;323    					}
;;;324    					else
;;;325    					{
;;;326    						PA12 = 0;
;;;327    						PA13 = 0;
;;;328    						PA1 = 0;
;;;329    						ledtimecount = 1;
;;;330    					}
;;;331    				}
;;;332    				else
;;;333    				{
;;;334    					PA12 = 1;
000062  49f0              LDR      r1,|L10.1060|
000064  2001              MOVS     r0,#1
000066  6308              STR      r0,[r1,#0x30]
;;;335    					PA13 = 1;
000068  6348              STR      r0,[r1,#0x34]
;;;336    					PA1 = 1;
00006a  6048              STR      r0,[r1,#4]
;;;337    					Drv_4GMoudle_PowerUp(0); // if timeout,turn off.
00006c  2000              MOVS     r0,#0
00006e  f7fffffe          BL       Drv_4GMoudle_PowerUp
;;;338    					TYM_drv_powerkeepon(0); 
000072  2000              MOVS     r0,#0
000074  f7fffffe          BL       TYM_drv_powerkeepon
                  |L10.120|
;;;339    				}
;;;340    				
;;;341    			}
;;;342    
;;;343    
;;;344    			
;;;345    		}
;;;346    
;;;347    		
;;;348    		if(Global_datas.key_led_blink)
000078  7b20              LDRB     r0,[r4,#0xc]  ; Global_datas
00007a  2800              CMP      r0,#0
00007c  d008              BEQ      |L10.144|
;;;349    		{
;;;350    			Global_datas.key_led_blink = 0;
00007e  2000              MOVS     r0,#0
000080  7320              STRB     r0,[r4,#0xc]
;;;351    			drv_err_led_on(1);
000082  2001              MOVS     r0,#1
000084  f7fffffe          BL       drv_err_led_on
;;;352    			TimeOutSet(&LedKeyBlinkTimer, 100);
000088  2164              MOVS     r1,#0x64
00008a  48e7              LDR      r0,|L10.1064|
00008c  f7fffffe          BL       TimeOutSet
                  |L10.144|
;;;353    		}
;;;354    
;;;355    		if(IsTimeOut(&LedKeyBlinkTimer))
000090  48e5              LDR      r0,|L10.1064|
000092  f7fffffe          BL       IsTimeOut
000096  2800              CMP      r0,#0
000098  d002              BEQ      |L10.160|
;;;356    		{
;;;357    			drv_err_led_on(0);
00009a  2000              MOVS     r0,#0
00009c  f7fffffe          BL       drv_err_led_on
                  |L10.160|
;;;358    		}
;;;359    
;;;360    		if(Core_Msg_Get(&msg))
0000a0  a801              ADD      r0,sp,#4
0000a2  f7fffffe          BL       Core_Msg_Get
0000a6  2800              CMP      r0,#0
0000a8  d07e              BEQ      |L10.424|
;;;361    		{
;;;362            // deal with message
;;;363            switch(msg.msg)
0000aa  9801              LDR      r0,[sp,#4]
0000ac  2801              CMP      r0,#1
0000ae  d014              BEQ      |L10.218|
0000b0  2802              CMP      r0,#2
                  |L10.178|
0000b2  d179              BNE      |L10.424|
0000b4  e13b              B        |L10.814|
                  |L10.182|
0000b6  9806              LDR      r0,[sp,#0x18]         ;317
0000b8  2800              CMP      r0,#0                 ;317
0000ba  d006              BEQ      |L10.202|
0000bc  49d9              LDR      r1,|L10.1060|
0000be  2001              MOVS     r0,#1                 ;319
0000c0  6308              STR      r0,[r1,#0x30]         ;319
0000c2  6348              STR      r0,[r1,#0x34]         ;320
0000c4  6048              STR      r0,[r1,#4]            ;321
0000c6  2000              MOVS     r0,#0                 ;322
0000c8  e005              B        |L10.214|
                  |L10.202|
0000ca  49d6              LDR      r1,|L10.1060|
0000cc  2000              MOVS     r0,#0                 ;326
0000ce  6308              STR      r0,[r1,#0x30]         ;326
0000d0  6348              STR      r0,[r1,#0x34]         ;327
0000d2  6048              STR      r0,[r1,#4]            ;328
0000d4  2001              MOVS     r0,#1                 ;329
                  |L10.214|
0000d6  9006              STR      r0,[sp,#0x18]         ;329
0000d8  e7ce              B        |L10.120|
                  |L10.218|
;;;364    	        {
;;;365    	            case MSG_4G_SYS_STATE_IND:
;;;366    					drv_Cmd_Send2NCU031(msg.param0,msg.param1,msg.param2);
0000da  9804              LDR      r0,[sp,#0x10]
0000dc  b2c2              UXTB     r2,r0
0000de  9803              LDR      r0,[sp,#0xc]
0000e0  b2c1              UXTB     r1,r0
0000e2  9802              LDR      r0,[sp,#8]
0000e4  b2c0              UXTB     r0,r0
0000e6  f7fffffe          BL       drv_Cmd_Send2NCU031
;;;367    					printf("MSG_4G_SYS_STATE_IND:msg.param0 = %x, msg.param1 = %x \n",msg.param0,msg.param1);
0000ea  a0d0              ADR      r0,|L10.1068|
0000ec  9a03              LDR      r2,[sp,#0xc]
0000ee  9902              LDR      r1,[sp,#8]
0000f0  f7fffffe          BL       __2printf
;;;368    	                if((msg.param0 == 0x08) && (msg.param1 == 0x00))
0000f4  9802              LDR      r0,[sp,#8]
0000f6  2808              CMP      r0,#8
0000f8  d10f              BNE      |L10.282|
0000fa  9803              LDR      r0,[sp,#0xc]
0000fc  2800              CMP      r0,#0
0000fe  d1d8              BNE      |L10.178|
;;;369    	                {
;;;370    
;;;371    						printf("0x08, msg.param1 = %x \n",msg.param1);
000100  4601              MOV      r1,r0
000102  a0d8              ADR      r0,|L10.1124|
000104  f7fffffe          BL       __2printf
;;;372    	                	//Cmd_Send2FourG(0x03,0x16,0x00);
;;;373    						drv_Cmd_Send2NCU031(msg.param0,msg.param1,0);
000108  9803              LDR      r0,[sp,#0xc]
00010a  2200              MOVS     r2,#0
00010c  b2c1              UXTB     r1,r0
00010e  9802              LDR      r0,[sp,#8]
000110  b2c0              UXTB     r0,r0
000112  f7fffffe          BL       drv_Cmd_Send2NCU031
;;;374    						Global_datas.g_4g_initing = 0;
000116  2000              MOVS     r0,#0
000118  71a0              STRB     r0,[r4,#6]
                  |L10.282|
;;;375    						//printf("switch to BT\n");
;;;376    					} 
;;;377    					
;;;378    					if((msg.param0 == 0x09) && (msg.param1 == 0x01))
00011a  9802              LDR      r0,[sp,#8]
00011c  2809              CMP      r0,#9
00011e  d12a              BNE      |L10.374|
000120  9803              LDR      r0,[sp,#0xc]
000122  2801              CMP      r0,#1
000124  d1c5              BNE      |L10.178|
;;;379    	                {
;;;380    //						printf("0x09, msg.param1 = %x \n",msg.param1);
;;;381    	                	//in bat val
;;;382    						bat_val[1] = (Global_datas.ADC_ChannelValue[15]>>8) & 0xff;
000126  48bb              LDR      r0,|L10.1044|
000128  466b              MOV      r3,sp
00012a  3820              SUBS     r0,r0,#0x20
00012c  8bc0              LDRH     r0,[r0,#0x1e]  ; Global_datas
00012e  0401              LSLS     r1,r0,#16
000130  0e09              LSRS     r1,r1,#24
000132  7059              STRB     r1,[r3,#1]
;;;383    						bat_val[0] = Global_datas.ADC_ChannelValue[15] & 0xff;
000134  b2c2              UXTB     r2,r0
000136  701a              STRB     r2,[r3,#0]
;;;384    						if(Global_datas.g_PowerStatus.PowerBatInStatus != POWER_BAT_IN_FALSE)
000138  7820              LDRB     r0,[r4,#0]  ; Global_datas
00013a  2801              CMP      r0,#1
00013c  d002              BEQ      |L10.324|
;;;385    							bat_val[1] = bat_val[1] & 0x80;  //in bat en
00013e  09c8              LSRS     r0,r1,#7
000140  01c0              LSLS     r0,r0,#7
000142  7058              STRB     r0,[r3,#1]
                  |L10.324|
;;;386    						Cmd_Send2FourG(0x09,bat_val[1],bat_val[0]);
000144  7859              LDRB     r1,[r3,#1]
000146  2009              MOVS     r0,#9
000148  f7fffffe          BL       Cmd_Send2FourG
;;;387    						//ex bat val
;;;388    						bat_val[1] = (Global_datas.ADC_ChannelValue[12]>>8) & 0xff;
00014c  48b1              LDR      r0,|L10.1044|
00014e  3820              SUBS     r0,r0,#0x20
000150  8b02              LDRH     r2,[r0,#0x18]  ; Global_datas
000152  0410              LSLS     r0,r2,#16
000154  0e01              LSRS     r1,r0,#24
000156  4668              MOV      r0,sp
000158  7041              STRB     r1,[r0,#1]
;;;389    						bat_val[0] = Global_datas.ADC_ChannelValue[12] & 0xff;
00015a  b2d2              UXTB     r2,r2
00015c  7002              STRB     r2,[r0,#0]
;;;390    						if(Global_datas.g_PowerStatus.PowerBatExStatus != POWER_BAT_EX_FALSE)
00015e  7860              LDRB     r0,[r4,#1]  ; Global_datas
000160  2803              CMP      r0,#3
000162  d003              BEQ      |L10.364|
;;;391    							bat_val[1] = bat_val[1] & 0x60;  //ex bat en
000164  2060              MOVS     r0,#0x60
000166  4001              ANDS     r1,r1,r0
000168  4668              MOV      r0,sp
00016a  7041              STRB     r1,[r0,#1]
                  |L10.364|
;;;392    						Cmd_Send2FourG(0x09,bat_val[1],bat_val[0]);
00016c  4668              MOV      r0,sp
00016e  7841              LDRB     r1,[r0,#1]
000170  2009              MOVS     r0,#9
000172  f7fffffe          BL       Cmd_Send2FourG
                  |L10.374|
;;;393    					}
;;;394    					
;;;395    					if(msg.param0 == 0x07)
000176  9802              LDR      r0,[sp,#8]
000178  2807              CMP      r0,#7
00017a  d103              BNE      |L10.388|
;;;396    	        		{
;;;397    	                	// vol
;;;398    	                	//Drv_Dap_vol_set(msg.param1);
;;;399    						printf("0x07, msg.param1 = %x \n",msg.param1);
00017c  a0bf              ADR      r0,|L10.1148|
00017e  9903              LDR      r1,[sp,#0xc]
000180  f7fffffe          BL       __2printf
                  |L10.388|
;;;400    					}
;;;401    					if(msg.param0 == 0x04 )
000184  9802              LDR      r0,[sp,#8]
000186  2804              CMP      r0,#4
000188  d103              BNE      |L10.402|
;;;402    					{
;;;403    	                	//Drv_Dap_vol_mute(msg.param1);
;;;404    	                	// vol
;;;405    	                	
;;;406    					printf("0x04, msg.param1 = %x \n",msg.param1);
00018a  a0c2              ADR      r0,|L10.1172|
00018c  9903              LDR      r1,[sp,#0xc]
00018e  f7fffffe          BL       __2printf
                  |L10.402|
;;;407    					}
;;;408    					
;;;409    					if(msg.param0 == 0x0F)
000192  9802              LDR      r0,[sp,#8]
000194  280f              CMP      r0,#0xf
000196  d113              BNE      |L10.448|
;;;410    					{
;;;411    						if(msg.param1 == 0x19)
000198  9803              LDR      r0,[sp,#0xc]
00019a  2819              CMP      r0,#0x19
00019c  d107              BNE      |L10.430|
;;;412    						{
;;;413    							Global_datas.g_mode_status = LOUD_SPEAKER_MODE;
00019e  2009              MOVS     r0,#9
0001a0  7160              STRB     r0,[r4,#5]
;;;414    							printf("0x0F, msg.param1 = %x \n",msg.param1);
0001a2  a0c2              ADR      r0,|L10.1196|
0001a4  9903              LDR      r1,[sp,#0xc]
0001a6  e000              B        |L10.426|
                  |L10.424|
0001a8  e0c0              B        |L10.812|
                  |L10.426|
0001aa  f7fffffe          BL       __2printf
                  |L10.430|
;;;415    						}
;;;416    					
;;;417    						if (msg.param1 == 0x17)
0001ae  9803              LDR      r0,[sp,#0xc]
0001b0  2817              CMP      r0,#0x17
0001b2  d105              BNE      |L10.448|
;;;418    						{
;;;419    		                	Global_datas.g_mode_status = AUX_MODE;
0001b4  2008              MOVS     r0,#8
0001b6  7160              STRB     r0,[r4,#5]
;;;420    						printf("0x0F, msg.param1 = %x \n",msg.param1);
0001b8  a0bc              ADR      r0,|L10.1196|
0001ba  9903              LDR      r1,[sp,#0xc]
0001bc  f7fffffe          BL       __2printf
                  |L10.448|
;;;421    						}
;;;422    					}
;;;423    
;;;424    					if(msg.param0 == 0x0d)  // 4G GO TO POWER OFF , NEED TO POWER DOWN 4G VCC
0001c0  9802              LDR      r0,[sp,#8]
0001c2  280d              CMP      r0,#0xd
0001c4  d105              BNE      |L10.466|
;;;425    					{
;;;426    						Drv_4GMoudle_PowerUp(0);  // wait for 4g modle ready ,than turn off power
0001c6  2000              MOVS     r0,#0
0001c8  f7fffffe          BL       Drv_4GMoudle_PowerUp
;;;427    						TYM_drv_powerkeepon(0); 
0001cc  2000              MOVS     r0,#0
0001ce  f7fffffe          BL       TYM_drv_powerkeepon
                  |L10.466|
;;;428    					}
;;;429    
;;;430    					if(msg.param0 == 0x06)  // sys status
0001d2  9802              LDR      r0,[sp,#8]
0001d4  2806              CMP      r0,#6
0001d6  d150              BNE      |L10.634|
;;;431    					{
;;;432    						if(msg.param1 == 0x06)
0001d8  9803              LDR      r0,[sp,#0xc]
0001da  2806              CMP      r0,#6
0001dc  d104              BNE      |L10.488|
;;;433    						{
;;;434    		                	Global_datas.g_mode_status = BT_MODE;
0001de  2106              MOVS     r1,#6
0001e0  7161              STRB     r1,[r4,#5]
;;;435    							printf("0x06, msg.param1 = %x \n",msg.param1);
0001e2  a0b8              ADR      r0,|L10.1220|
0001e4  f7fffffe          BL       __2printf
                  |L10.488|
;;;436    						}
;;;437    					
;;;438    						if (msg.param1 == 0x07)
0001e8  9803              LDR      r0,[sp,#0xc]
0001ea  2807              CMP      r0,#7
0001ec  d104              BNE      |L10.504|
;;;439    						{
;;;440    		                	Global_datas.g_mode_status = BT_CONNECTED_MODE;
0001ee  2107              MOVS     r1,#7
0001f0  7161              STRB     r1,[r4,#5]
;;;441    		                	
;;;442    						printf("0x06, msg.param1 = %x \n",msg.param1);
0001f2  a0b4              ADR      r0,|L10.1220|
0001f4  f7fffffe          BL       __2printf
                  |L10.504|
;;;443    						}
;;;444    						if (msg.param1 == 0x02)
0001f8  9803              LDR      r0,[sp,#0xc]
0001fa  2802              CMP      r0,#2
0001fc  d104              BNE      |L10.520|
;;;445    						{
;;;446    		                	Global_datas.g_mode_status = WIFI_CONNECTED_MODE;
0001fe  2102              MOVS     r1,#2
000200  7161              STRB     r1,[r4,#5]
;;;447    		                	
;;;448    						printf("0x06, msg.param1 = %x \n",msg.param1);
000202  a0b0              ADR      r0,|L10.1220|
000204  f7fffffe          BL       __2printf
                  |L10.520|
;;;449    						}
;;;450    						if (msg.param1 == 0x04)
000208  9803              LDR      r0,[sp,#0xc]
00020a  2804              CMP      r0,#4
00020c  d105              BNE      |L10.538|
;;;451    						{
;;;452    		                	Global_datas.g_mode_status = WIFI_MODE;
00020e  2001              MOVS     r0,#1
000210  7160              STRB     r0,[r4,#5]
;;;453    		                	
;;;454    						printf("0x06, msg.param1 = %x \n",msg.param1);
000212  a0ac              ADR      r0,|L10.1220|
000214  9903              LDR      r1,[sp,#0xc]
000216  f7fffffe          BL       __2printf
                  |L10.538|
;;;455    						}
;;;456    						if (msg.param1 == 0x05)
00021a  9803              LDR      r0,[sp,#0xc]
00021c  2805              CMP      r0,#5
00021e  d105              BNE      |L10.556|
;;;457    						{
;;;458    		                	Global_datas.g_mode_status = WIFI_CONNECTING_MODE;
000220  2003              MOVS     r0,#3
000222  7160              STRB     r0,[r4,#5]
;;;459    		                	
;;;460    						printf("0x06, msg.param1 = %x \n",msg.param1);
000224  a0a7              ADR      r0,|L10.1220|
000226  9903              LDR      r1,[sp,#0xc]
000228  f7fffffe          BL       __2printf
                  |L10.556|
;;;461    						}
;;;462    						if (msg.param1 == 0x011)
00022c  9803              LDR      r0,[sp,#0xc]
00022e  2811              CMP      r0,#0x11
000230  d105              BNE      |L10.574|
;;;463    						{
;;;464    		                	Global_datas.g_mode_status = FOURG_CONNECTED_MODE;
000232  2005              MOVS     r0,#5
000234  7160              STRB     r0,[r4,#5]
;;;465    		                	
;;;466    						printf("0x06, msg.param1 = %x \n",msg.param1);
000236  a0a3              ADR      r0,|L10.1220|
000238  9903              LDR      r1,[sp,#0xc]
00023a  f7fffffe          BL       __2printf
                  |L10.574|
;;;467    						}
;;;468    						if (msg.param1 == 0x012)
00023e  9803              LDR      r0,[sp,#0xc]
000240  2812              CMP      r0,#0x12
000242  d105              BNE      |L10.592|
;;;469    						{
;;;470    		                	Global_datas.g_mode_status = FOURG_MODE;
000244  2004              MOVS     r0,#4
000246  7160              STRB     r0,[r4,#5]
;;;471    		                	
;;;472    						printf("0x06, msg.param1 = %x \n",msg.param1);
000248  a09e              ADR      r0,|L10.1220|
00024a  9903              LDR      r1,[sp,#0xc]
00024c  f7fffffe          BL       __2printf
                  |L10.592|
;;;473    						}
;;;474    						if (msg.param1 == 0x0B)
000250  9803              LDR      r0,[sp,#0xc]
000252  280b              CMP      r0,#0xb
000254  d104              BNE      |L10.608|
;;;475    						{
;;;476    		                	Global_datas.g_mode_status = SYSTEM_UPDATING;
000256  210b              MOVS     r1,#0xb
000258  7161              STRB     r1,[r4,#5]
;;;477    		                	
;;;478    						printf("0x06, msg.param1 = %x \n",msg.param1);
00025a  a09a              ADR      r0,|L10.1220|
00025c  f7fffffe          BL       __2printf
                  |L10.608|
;;;479    						}
;;;480    						if ((msg.param1 == 0x09) || (msg.param1 == 0x08) || (msg.param1 == 0x16))
000260  9803              LDR      r0,[sp,#0xc]
000262  2809              CMP      r0,#9
000264  d003              BEQ      |L10.622|
000266  2808              CMP      r0,#8
000268  d001              BEQ      |L10.622|
00026a  2816              CMP      r0,#0x16
00026c  d105              BNE      |L10.634|
                  |L10.622|
;;;481    						{
;;;482    		                	Global_datas.g_mode_status = SYS_LOW_POWER;
00026e  200c              MOVS     r0,#0xc
000270  7160              STRB     r0,[r4,#5]
;;;483    		                	
;;;484    						printf("0x06, msg.param1 = %x \n",msg.param1);
000272  a094              ADR      r0,|L10.1220|
000274  9903              LDR      r1,[sp,#0xc]
000276  f7fffffe          BL       __2printf
                  |L10.634|
;;;485    						}
;;;486    						
;;;487    					}
;;;488    				//rtc time	
;;;489    					if(msg.param0 == 0x11)
00027a  9802              LDR      r0,[sp,#8]
00027c  2811              CMP      r0,#0x11
00027e  d105              BNE      |L10.652|
;;;490    					{
;;;491    						srv_rtc_set_ym(msg.param1,msg.param2);
000280  9804              LDR      r0,[sp,#0x10]
000282  b2c1              UXTB     r1,r0
000284  9803              LDR      r0,[sp,#0xc]
000286  b2c0              UXTB     r0,r0
000288  f7fffffe          BL       srv_rtc_set_ym
                  |L10.652|
;;;492    					}
;;;493    					
;;;494    					if(msg.param0 == 0x12)
00028c  9802              LDR      r0,[sp,#8]
00028e  2812              CMP      r0,#0x12
000290  d105              BNE      |L10.670|
;;;495    					{
;;;496    						srv_rtc_set_dw(msg.param1,msg.param2);
000292  9804              LDR      r0,[sp,#0x10]
000294  b2c1              UXTB     r1,r0
000296  9803              LDR      r0,[sp,#0xc]
000298  b2c0              UXTB     r0,r0
00029a  f7fffffe          BL       srv_rtc_set_dw
                  |L10.670|
;;;497    					}
;;;498    					
;;;499    					if(msg.param0 == 0x13)
00029e  9802              LDR      r0,[sp,#8]
0002a0  2813              CMP      r0,#0x13
0002a2  d105              BNE      |L10.688|
;;;500    					{
;;;501    						srv_rtc_set_hm(msg.param1,msg.param2);
0002a4  9804              LDR      r0,[sp,#0x10]
0002a6  b2c1              UXTB     r1,r0
0002a8  9803              LDR      r0,[sp,#0xc]
0002aa  b2c0              UXTB     r0,r0
0002ac  f7fffffe          BL       srv_rtc_set_hm
                  |L10.688|
;;;502    					}
;;;503    					
;;;504    					if(msg.param0 == 0x14)
0002b0  9802              LDR      r0,[sp,#8]
0002b2  2814              CMP      r0,#0x14
0002b4  d105              BNE      |L10.706|
;;;505    					{
;;;506    						srv_rtc_set_st(msg.param1,msg.param2);
0002b6  9804              LDR      r0,[sp,#0x10]
0002b8  b2c1              UXTB     r1,r0
0002ba  9803              LDR      r0,[sp,#0xc]
0002bc  b2c0              UXTB     r0,r0
0002be  f7fffffe          BL       srv_rtc_set_st
                  |L10.706|
;;;507    					}
;;;508    					//rtc alarm
;;;509    					if(msg.param0 == 0x15)
0002c2  9802              LDR      r0,[sp,#8]
0002c4  2815              CMP      r0,#0x15
0002c6  d105              BNE      |L10.724|
;;;510    					{
;;;511    						srv_rtc_alarm_set_ym(msg.param1,msg.param2);
0002c8  9804              LDR      r0,[sp,#0x10]
0002ca  b2c1              UXTB     r1,r0
0002cc  9803              LDR      r0,[sp,#0xc]
0002ce  b2c0              UXTB     r0,r0
0002d0  f7fffffe          BL       srv_rtc_alarm_set_ym
                  |L10.724|
;;;512    					}
;;;513    					
;;;514    					if(msg.param0 == 0x16)
0002d4  9802              LDR      r0,[sp,#8]
0002d6  2816              CMP      r0,#0x16
0002d8  d105              BNE      |L10.742|
;;;515    					{
;;;516    						srv_rtc_alarm_set_dw(msg.param1,msg.param2);
0002da  9804              LDR      r0,[sp,#0x10]
0002dc  b2c1              UXTB     r1,r0
0002de  9803              LDR      r0,[sp,#0xc]
0002e0  b2c0              UXTB     r0,r0
0002e2  f7fffffe          BL       srv_rtc_alarm_set_dw
                  |L10.742|
;;;517    					}
;;;518    					
;;;519    					if(msg.param0 == 0x17)
0002e6  9802              LDR      r0,[sp,#8]
0002e8  2817              CMP      r0,#0x17
0002ea  d105              BNE      |L10.760|
;;;520    					{
;;;521    						srv_rtc_alarm_set_hm(msg.param1,msg.param2);
0002ec  9804              LDR      r0,[sp,#0x10]
0002ee  b2c1              UXTB     r1,r0
0002f0  9803              LDR      r0,[sp,#0xc]
0002f2  b2c0              UXTB     r0,r0
0002f4  f7fffffe          BL       srv_rtc_alarm_set_hm
                  |L10.760|
;;;522    					}
;;;523    					
;;;524    					if(msg.param0 == 0x18)
0002f8  9802              LDR      r0,[sp,#8]
0002fa  2818              CMP      r0,#0x18
0002fc  d105              BNE      |L10.778|
;;;525    					{
;;;526    						srv_rtc_alarm_set_st(msg.param1,msg.param2);
0002fe  9804              LDR      r0,[sp,#0x10]
000300  b2c1              UXTB     r1,r0
000302  9803              LDR      r0,[sp,#0xc]
000304  b2c0              UXTB     r0,r0
000306  f7fffffe          BL       srv_rtc_alarm_set_st
                  |L10.778|
;;;527    					}
;;;528    					if(msg.param0 == 0x19)
00030a  9802              LDR      r0,[sp,#8]
00030c  2819              CMP      r0,#0x19
00030e  d101              BNE      |L10.788|
;;;529    					{
;;;530    						srv_rtc_get();
000310  f7fffffe          BL       srv_rtc_get
                  |L10.788|
;;;531    					}
;;;532    					if(msg.param0 == 0x1a)
000314  9802              LDR      r0,[sp,#8]
000316  281a              CMP      r0,#0x1a
000318  d101              BNE      |L10.798|
;;;533    					{
;;;534    						srv_rtc_alarm_get();
00031a  f7fffffe          BL       srv_rtc_alarm_get
                  |L10.798|
;;;535    					}
;;;536    					
;;;537    					if(msg.param0 == 0x20)
00031e  9802              LDR      r0,[sp,#8]
000320  2820              CMP      r0,#0x20
000322  d103              BNE      |L10.812|
;;;538    					{
;;;539    						Cmd_Send2FourG(0x20,0x0,0x1);  //version 0.0.1
000324  2201              MOVS     r2,#1
000326  2100              MOVS     r1,#0
000328  f7fffffe          BL       Cmd_Send2FourG
                  |L10.812|
00032c  e12d              B        |L10.1418|
                  |L10.814|
;;;540    					}
;;;541    	            break;
;;;542    
;;;543    			 	case MSG_MCU1_SYS_STATE_IND:
;;;544    
;;;545    				    if((msg.param0 == 0x03) && (msg.param1 == 0x55)) //power off mode
00032e  9802              LDR      r0,[sp,#8]
000330  2803              CMP      r0,#3
000332  d102              BNE      |L10.826|
000334  9803              LDR      r0,[sp,#0xc]
000336  2855              CMP      r0,#0x55
000338  d0f8              BEQ      |L10.812|
                  |L10.826|
;;;546    					{
;;;547    						//Global_datas.g_mode_status = POWER_OFF_MODE;
;;;548    					}
;;;549    					else
;;;550    					{
;;;551    						Cmd_Send2FourG( msg.param0,msg.param1,msg.param2);
00033a  9804              LDR      r0,[sp,#0x10]
00033c  b2c2              UXTB     r2,r0
00033e  9803              LDR      r0,[sp,#0xc]
000340  b2c1              UXTB     r1,r0
000342  9802              LDR      r0,[sp,#8]
000344  b2c0              UXTB     r0,r0
000346  f7fffffe          BL       Cmd_Send2FourG
;;;552    					}
;;;553    					
;;;554    					
;;;555    					//printf("MSG_MCU1_SYS_STATE_IND:msg.param0 = %x, msg.param1 = %x \n",msg.param0,msg.param1);
;;;556    					if((msg.param0 == 0x01) && (msg.param1 == 0x00))
00034a  9802              LDR      r0,[sp,#8]
00034c  2801              CMP      r0,#1
00034e  d107              BNE      |L10.864|
000350  9803              LDR      r0,[sp,#0xc]
000352  2800              CMP      r0,#0
000354  d1ea              BNE      |L10.812|
;;;557    					{
;;;558    						drv_Cmd_Send2NCU031(0x01,Global_datas.g_PowerStatus.bat_status,Global_datas.g_PowerStatus.bat_value);
000356  7922              LDRB     r2,[r4,#4]  ; Global_datas
000358  78e1              LDRB     r1,[r4,#3]  ; Global_datas
00035a  2001              MOVS     r0,#1
00035c  f7fffffe          BL       drv_Cmd_Send2NCU031
                  |L10.864|
;;;559    					}
;;;560    					if(msg.param0 == 0x02) // MIC VOLUNE ,NO USE 
;;;561    					{
;;;562    					
;;;563    					}
;;;564    
;;;565    					if((msg.param0 == 0x03) && (msg.param1 == 0x03))
000360  9802              LDR      r0,[sp,#8]
000362  2803              CMP      r0,#3
000364  d150              BNE      |L10.1032|
000366  9803              LDR      r0,[sp,#0xc]
000368  2803              CMP      r0,#3
00036a  d10d              BNE      |L10.904|
;;;566    					{
;;;567    						if (Global_datas.volume > VOLUME_MIN)
00036c  7be0              LDRB     r0,[r4,#0xf]  ; Global_datas
00036e  2800              CMP      r0,#0
000370  d04a              BEQ      |L10.1032|
000372  1e40              SUBS     r0,r0,#1
;;;568    						{
;;;569    							Global_datas.volume--;
000374  b2c0              UXTB     r0,r0
000376  73e0              STRB     r0,[r4,#0xf]
;;;570    							Drv_Dap_vol_set(Global_datas.volume);
000378  f7fffffe          BL       Drv_Dap_vol_set
;;;571    							printf("Hal_Dap_Load_vol_add\n");
00037c  a057              ADR      r0,|L10.1244|
00037e  f7fffffe          BL       __2printf
;;;572    						}
;;;573    					}
;;;574    					
;;;575    					if((msg.param0 == 0x03) && (msg.param1 == 0x02))
000382  9802              LDR      r0,[sp,#8]
000384  2803              CMP      r0,#3
000386  d13f              BNE      |L10.1032|
                  |L10.904|
000388  9803              LDR      r0,[sp,#0xc]
00038a  2802              CMP      r0,#2
00038c  d10d              BNE      |L10.938|
;;;576    					{
;;;577    						if (Global_datas.volume < VOLUME_MAX)
00038e  7be0              LDRB     r0,[r4,#0xf]  ; Global_datas
000390  2810              CMP      r0,#0x10
000392  d239              BCS      |L10.1032|
000394  1c40              ADDS     r0,r0,#1
;;;578    						{
;;;579    							Global_datas.volume++;
000396  b2c0              UXTB     r0,r0
000398  73e0              STRB     r0,[r4,#0xf]
;;;580    							Drv_Dap_vol_set(Global_datas.volume);
00039a  f7fffffe          BL       Drv_Dap_vol_set
;;;581    							printf("Hal_Dap_Load_vol_reduce\n");
00039e  a055              ADR      r0,|L10.1268|
0003a0  f7fffffe          BL       __2printf
;;;582    						}
;;;583    					}
;;;584    
;;;585    					if((msg.param0 == 0x03) && (msg.param1 == 0x15)) //wifi mode
0003a4  9802              LDR      r0,[sp,#8]
0003a6  2803              CMP      r0,#3
0003a8  d12e              BNE      |L10.1032|
                  |L10.938|
0003aa  9803              LDR      r0,[sp,#0xc]
0003ac  2815              CMP      r0,#0x15
0003ae  d107              BNE      |L10.960|
;;;586    					{
;;;587    						Global_datas.g_mode_status = WIFI_MODE;
0003b0  2001              MOVS     r0,#1
0003b2  7160              STRB     r0,[r4,#5]
;;;588    						printf("FourG_WIFI_CHANNEL\n");
0003b4  a056              ADR      r0,|L10.1296|
0003b6  f7fffffe          BL       __2printf
;;;589    					}
;;;590    					if((msg.param0 == 0x03) && (msg.param1 == 0x16)) //BT mode
0003ba  9802              LDR      r0,[sp,#8]
0003bc  2803              CMP      r0,#3
0003be  d123              BNE      |L10.1032|
                  |L10.960|
0003c0  9803              LDR      r0,[sp,#0xc]
0003c2  2816              CMP      r0,#0x16
0003c4  d107              BNE      |L10.982|
;;;591    					{
;;;592    						Global_datas.g_mode_status = BT_MODE;
0003c6  2006              MOVS     r0,#6
0003c8  7160              STRB     r0,[r4,#5]
;;;593    						printf("FourG_BT_CHANNEL\n");
0003ca  a056              ADR      r0,|L10.1316|
0003cc  f7fffffe          BL       __2printf
;;;594    					}
;;;595    					if((msg.param0 == 0x03) && (msg.param1 == 0x17)) //AUX mode
0003d0  9802              LDR      r0,[sp,#8]
0003d2  2803              CMP      r0,#3
0003d4  d118              BNE      |L10.1032|
                  |L10.982|
0003d6  9803              LDR      r0,[sp,#0xc]
0003d8  2817              CMP      r0,#0x17
0003da  d107              BNE      |L10.1004|
;;;596    					{
;;;597    						Global_datas.g_mode_status = AUX_MODE;
0003dc  2008              MOVS     r0,#8
0003de  7160              STRB     r0,[r4,#5]
;;;598    						printf("AUXIN_CHANNEL\n");
0003e0  a055              ADR      r0,|L10.1336|
0003e2  f7fffffe          BL       __2printf
;;;599    					}
;;;600    					if((msg.param0 == 0x03) && (msg.param1 == 0x18)) //FM mode
0003e6  9802              LDR      r0,[sp,#8]
0003e8  2803              CMP      r0,#3
0003ea  d10d              BNE      |L10.1032|
                  |L10.1004|
0003ec  9803              LDR      r0,[sp,#0xc]
0003ee  2818              CMP      r0,#0x18
0003f0  d107              BNE      |L10.1026|
;;;601    					{
;;;602    						Global_datas.g_mode_status = FM_MODE;
0003f2  200a              MOVS     r0,#0xa
0003f4  7160              STRB     r0,[r4,#5]
;;;603    						printf("AUXIN_CHANNEL\n");
0003f6  a050              ADR      r0,|L10.1336|
0003f8  f7fffffe          BL       __2printf
;;;604    					//	drv_fm_led_on();
;;;605    					}
;;;606    					if((msg.param0 == 0x03) && (msg.param1 == 0x31)) // NEXT CHANNEL
;;;607    					{
;;;608    								
;;;609    					}
;;;610    					if((msg.param0 == 0x03) && (msg.param1 == 0x32))// PRE CHANNEL
;;;611    					{
;;;612    					
;;;613    					}
;;;614    					if((msg.param0 == 0x03) && (msg.param1 == 0x56)) // PLAY/PAUSE
;;;615    					{
;;;616    
;;;617    					}
;;;618    					if((msg.param0 == 0x03) && (msg.param1 == 0xC0)) //FM reset
0003fc  9802              LDR      r0,[sp,#8]
0003fe  2803              CMP      r0,#3
000400  d102              BNE      |L10.1032|
                  |L10.1026|
000402  9803              LDR      r0,[sp,#0xc]
000404  28c0              CMP      r0,#0xc0
000406  e09f              B        |L10.1352|
                  |L10.1032|
000408  e0bf              B        |L10.1418|
00040a  0000              DCW      0x0000
                  |L10.1036|
00040c  0a6d6169          DCB      "\nmain\n",0
000410  6e0a00  
000413  00                DCB      0
                  |L10.1044|
                          DCD      Global_datas+0x20
                  |L10.1048|
                          DCD      SysTimer_1s
                  |L10.1052|
                          DCD      ModulePowerUpPinTimer
                  |L10.1056|
                          DCD      PoweroffLedTimer
                  |L10.1060|
                          DCD      0x50004200
                  |L10.1064|
                          DCD      LedKeyBlinkTimer
                  |L10.1068|
00042c  4d53475f          DCB      "MSG_4G_SYS_STATE_IND:msg.param0 = %x, msg.param1 = %x \n"
000430  34475f53
000434  59535f53
000438  54415445
00043c  5f494e44
000440  3a6d7367
000444  2e706172
000448  616d3020
00044c  3d202578
000450  2c206d73
000454  672e7061
000458  72616d31
00045c  203d2025
000460  78200a  
000463  00                DCB      0
                  |L10.1124|
000464  30783038          DCB      "0x08, msg.param1 = %x \n",0
000468  2c206d73
00046c  672e7061
000470  72616d31
000474  203d2025
000478  78200a00
                  |L10.1148|
00047c  30783037          DCB      "0x07, msg.param1 = %x \n",0
000480  2c206d73
000484  672e7061
000488  72616d31
00048c  203d2025
000490  78200a00
                  |L10.1172|
000494  30783034          DCB      "0x04, msg.param1 = %x \n",0
000498  2c206d73
00049c  672e7061
0004a0  72616d31
0004a4  203d2025
0004a8  78200a00
                  |L10.1196|
0004ac  30783046          DCB      "0x0F, msg.param1 = %x \n",0
0004b0  2c206d73
0004b4  672e7061
0004b8  72616d31
0004bc  203d2025
0004c0  78200a00
                  |L10.1220|
0004c4  30783036          DCB      "0x06, msg.param1 = %x \n",0
0004c8  2c206d73
0004cc  672e7061
0004d0  72616d31
0004d4  203d2025
0004d8  78200a00
                  |L10.1244|
0004dc  48616c5f          DCB      "Hal_Dap_Load_vol_add\n",0
0004e0  4461705f
0004e4  4c6f6164
0004e8  5f766f6c
0004ec  5f616464
0004f0  0a00    
0004f2  00                DCB      0
0004f3  00                DCB      0
                  |L10.1268|
0004f4  48616c5f          DCB      "Hal_Dap_Load_vol_reduce\n",0
0004f8  4461705f
0004fc  4c6f6164
000500  5f766f6c
000504  5f726564
000508  7563650a
00050c  00      
00050d  00                DCB      0
00050e  00                DCB      0
00050f  00                DCB      0
                  |L10.1296|
000510  466f7572          DCB      "FourG_WIFI_CHANNEL\n",0
000514  475f5749
000518  46495f43
00051c  48414e4e
000520  454c0a00
                  |L10.1316|
000524  466f7572          DCB      "FourG_BT_CHANNEL\n",0
000528  475f4254
00052c  5f434841
000530  4e4e454c
000534  0a00    
000536  00                DCB      0
000537  00                DCB      0
                  |L10.1336|
000538  41555849          DCB      "AUXIN_CHANNEL\n",0
00053c  4e5f4348
000540  414e4e45
000544  4c0a00  
000547  00                DCB      0
                  |L10.1352|
000548  d107              BNE      |L10.1370|
;;;619    					{
;;;620    						
;;;621    						drv_FM_on_NCU031_reset();
00054a  f7fffffe          BL       drv_FM_on_NCU031_reset
;;;622    						printf("fm reset\n");
00054e  a027              ADR      r0,|L10.1516|
000550  f7fffffe          BL       __2printf
;;;623    						
;;;624    					}
;;;625    					if((msg.param0 == 0x03) && (msg.param1 == 0xC1)) //inside
000554  9802              LDR      r0,[sp,#8]
000556  2803              CMP      r0,#3
000558  d117              BNE      |L10.1418|
                  |L10.1370|
00055a  9803              LDR      r0,[sp,#0xc]
00055c  28c1              CMP      r0,#0xc1
00055e  d105              BNE      |L10.1388|
;;;626    					{
;;;627    						printf("inside\n");
000560  a025              ADR      r0,|L10.1528|
000562  f7fffffe          BL       __2printf
;;;628    					}
;;;629    					if((msg.param0 == 0x03) && (msg.param1 == 0xC2)) //outside
000566  9802              LDR      r0,[sp,#8]
000568  2803              CMP      r0,#3
00056a  d10e              BNE      |L10.1418|
                  |L10.1388|
00056c  9803              LDR      r0,[sp,#0xc]
00056e  28c2              CMP      r0,#0xc2
000570  d105              BNE      |L10.1406|
;;;630    					{
;;;631    
;;;632    						printf("outside\n");
000572  a023              ADR      r0,|L10.1536|
000574  f7fffffe          BL       __2printf
;;;633    					}
;;;634    					if((msg.param0 == 0x03) && (msg.param1 == 0xC3)) //autoside
000578  9802              LDR      r0,[sp,#8]
00057a  2803              CMP      r0,#3
00057c  d105              BNE      |L10.1418|
                  |L10.1406|
00057e  9803              LDR      r0,[sp,#0xc]
000580  28c3              CMP      r0,#0xc3
000582  d102              BNE      |L10.1418|
;;;635    					{
;;;636    						printf("autoside\n");
000584  a021              ADR      r0,|L10.1548|
000586  f7fffffe          BL       __2printf
                  |L10.1418|
;;;637    					}
;;;638    	            break;
;;;639    					
;;;640    	            default:
;;;641    	             break;
;;;642    	        }
;;;643        	}
;;;644    	
;;;645    		srv_key_handler();
00058a  f7fffffe          BL       srv_key_handler
;;;646    		GetKeyEvent();
00058e  f7fffffe          BL       GetKeyEvent
;;;647    		IoKeyProcess();
000592  f7fffffe          BL       IoKeyProcess
;;;648    
;;;649    
;;;650    		
;;;651    		if (((count>>16)&0xF) == refcount0)	
000596  9805              LDR      r0,[sp,#0x14]
000598  0300              LSLS     r0,r0,#12
00059a  0f00              LSRS     r0,r0,#28
00059c  42b8              CMP      r0,r7
00059e  d107              BNE      |L10.1456|
;;;652    		{
;;;653    			
;;;654    			if(refcount0 <0xF)
0005a0  2f0f              CMP      r7,#0xf
0005a2  d202              BCS      |L10.1450|
0005a4  1c7f              ADDS     r7,r7,#1
;;;655    				refcount0++;
0005a6  b2ff              UXTB     r7,r7
0005a8  e000              B        |L10.1452|
                  |L10.1450|
;;;656    			else
;;;657    				refcount0 = 0;
0005aa  2700              MOVS     r7,#0
                  |L10.1452|
;;;658    			srv_bat_charge_handler();	
0005ac  f7fffffe          BL       srv_bat_charge_handler
                  |L10.1456|
;;;659    		}
;;;660    
;;;661    		if (((count>>15)&0xF) == refcount1)
0005b0  9805              LDR      r0,[sp,#0x14]
0005b2  0340              LSLS     r0,r0,#13
0005b4  0f00              LSRS     r0,r0,#28
0005b6  42b0              CMP      r0,r6
0005b8  d109              BNE      |L10.1486|
;;;662    		{	
;;;663    			
;;;664    			if(refcount1 <0xF)
0005ba  2e0f              CMP      r6,#0xf
0005bc  d202              BCS      |L10.1476|
0005be  1c76              ADDS     r6,r6,#1
;;;665    				refcount1++;
0005c0  b2f6              UXTB     r6,r6
0005c2  e000              B        |L10.1478|
                  |L10.1476|
;;;666    			else
;;;667    				refcount1 = 0;
0005c4  2600              MOVS     r6,#0
                  |L10.1478|
;;;668    			
;;;669    			drv_power_status_updata();
0005c6  f7fffffe          BL       drv_power_status_updata
;;;670    			srv_audio_handler();
0005ca  f7fffffe          BL       srv_audio_handler
                  |L10.1486|
;;;671    		}
;;;672    		
;;;673    		if (((count>>20)&0xF) == refcount2)
0005ce  9805              LDR      r0,[sp,#0x14]
0005d0  0200              LSLS     r0,r0,#8
0005d2  0f00              LSRS     r0,r0,#28
0005d4  42a8              CMP      r0,r5
0005d6  d105              BNE      |L10.1508|
;;;674    		{
;;;675    
;;;676    			if(refcount2 <0xF)
0005d8  2d0f              CMP      r5,#0xf
0005da  d202              BCS      |L10.1506|
0005dc  1c6d              ADDS     r5,r5,#1
;;;677    				refcount2++;
0005de  b2ed              UXTB     r5,r5
0005e0  e000              B        |L10.1508|
                  |L10.1506|
;;;678    			else
;;;679    				refcount2 = 0;
0005e2  2500              MOVS     r5,#0
                  |L10.1508|
;;;680    		}
;;;681    		count++;
0005e4  9805              LDR      r0,[sp,#0x14]
0005e6  1c40              ADDS     r0,r0,#1
0005e8  9005              STR      r0,[sp,#0x14]         ;291
0005ea  e517              B        |L10.28|
;;;682    	}
;;;683    
;;;684    }
;;;685    
                          ENDP

                  |L10.1516|
0005ec  666d2072          DCB      "fm reset\n",0
0005f0  65736574
0005f4  0a00    
0005f6  00                DCB      0
0005f7  00                DCB      0
                  |L10.1528|
0005f8  696e7369          DCB      "inside\n",0
0005fc  64650a00
                  |L10.1536|
000600  6f757473          DCB      "outside\n",0
000604  6964650a
000608  00      
000609  00                DCB      0
00060a  00                DCB      0
00060b  00                DCB      0
                  |L10.1548|
00060c  6175746f          DCB      "autoside\n",0
000610  73696465
000614  0a00    
000616  00                DCB      0
000617  00                DCB      0

                          AREA ||.data||, DATA, ALIGN=0

                  sys_err
000000  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "..\\main.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_sys_err____REV16|
#line 388 "..\\lib\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___6_main_c_sys_err____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_sys_err____REVSH|
#line 402
|__asm___6_main_c_sys_err____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
