; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\main.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\main.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\lib\CMSIS\Include -I..\lib\Device\Nuvoton\NUC029xGE\Include -I..\lib\StdDriver\inc -I..\src\core\include -I..\src\driver\include -I..\src\io\include -I..\src\global -I..\src\server\include -I..\src\driver\audio -D__UVISION_VERSION=522 --omf_browse=.\obj\main.crf ..\main.c]
                          THUMB

                          AREA ||i.AMP_FaultPinDetectInit||, CODE, READONLY, ALIGN=2

                  AMP_FaultPinDetectInit PROC
;;;221    
;;;222    void AMP_FaultPinDetectInit(void)
000000  b510              PUSH     {r4,lr}
;;;223    {
;;;224    	GPIO_SetMode(PF, BIT2, GPIO_MODE_INPUT);	
000002  2200              MOVS     r2,#0
000004  2104              MOVS     r1,#4
000006  4802              LDR      r0,|L1.16|
000008  f7fffffe          BL       GPIO_SetMode
;;;225    }
00000c  bd10              POP      {r4,pc}
;;;226    
                          ENDP

00000e  0000              DCW      0x0000
                  |L1.16|
                          DCD      0x50004140

                          AREA ||i.Amplifier_open||, CODE, READONLY, ALIGN=2

                  Amplifier_open PROC
;;;227    
;;;228    void Amplifier_open(void)
000000  b510              PUSH     {r4,lr}
;;;229    {
;;;230    	GPIO_SetMode(PC, BIT1, GPIO_MODE_OUTPUT);	
000002  4c0c              LDR      r4,|L2.52|
000004  2201              MOVS     r2,#1
000006  2102              MOVS     r1,#2
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       GPIO_SetMode
;;;231    	GPIO_SetMode(PC, BIT13, GPIO_MODE_OUTPUT);
00000e  2201              MOVS     r2,#1
000010  0351              LSLS     r1,r2,#13
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       GPIO_SetMode
;;;232    	GPIO_SetMode(PB, BIT14, GPIO_MODE_OUTPUT);
000018  4806              LDR      r0,|L2.52|
00001a  2201              MOVS     r2,#1
00001c  0391              LSLS     r1,r2,#14
00001e  3840              SUBS     r0,r0,#0x40
000020  f7fffffe          BL       GPIO_SetMode
;;;233    	PC1 = 1;
000024  4904              LDR      r1,|L2.56|
000026  2001              MOVS     r0,#1
000028  6048              STR      r0,[r1,#4]
;;;234    	PC13 = 1;
00002a  6348              STR      r0,[r1,#0x34]
;;;235    	PB14 = 1;
00002c  4902              LDR      r1,|L2.56|
00002e  3940              SUBS     r1,r1,#0x40
000030  6388              STR      r0,[r1,#0x38]
;;;236    }
000032  bd10              POP      {r4,pc}
;;;237    
                          ENDP

                  |L2.52|
                          DCD      0x50004080
                  |L2.56|
                          DCD      0x50004280

                          AREA ||i.IoKeyProcess||, CODE, READONLY, ALIGN=2

                  IoKeyProcess PROC
;;;384    
;;;385    void IoKeyProcess(void)
000000  b570              PUSH     {r4-r6,lr}
;;;386    {
;;;387    
;;;388    	if(((Global_datas.g_mode_status == POWER_IDLE_MODE || Global_datas.g_mode_status == POWER_ON_MODE )&&(IN_KEY_POWER_CP != IoKeyInputmessage)) || (Global_datas.shoutting_down))
000002  4c1d              LDR      r4,|L3.120|
000004  4d1d              LDR      r5,|L3.124|
000006  79e1              LDRB     r1,[r4,#7]  ; Global_datas
000008  7828              LDRB     r0,[r5,#0]
00000a  290e              CMP      r1,#0xe
00000c  d001              BEQ      |L3.18|
00000e  2900              CMP      r1,#0
000010  d101              BNE      |L3.22|
                  |L3.18|
000012  2802              CMP      r0,#2
000014  d12b              BNE      |L3.110|
                  |L3.22|
000016  7c61              LDRB     r1,[r4,#0x11]  ; Global_datas
000018  2900              CMP      r1,#0
00001a  d128              BNE      |L3.110|
;;;389        {
;;;390    		return;
;;;391    	}
;;;392    
;;;393    	if(IoKeyInputmessage)
00001c  2800              CMP      r0,#0
00001e  d024              BEQ      |L3.106|
;;;394    	{
;;;395    		switch(IoKeyInputmessage)
000020  2801              CMP      r0,#1
000022  d012              BEQ      |L3.74|
000024  2802              CMP      r0,#2
000026  d016              BEQ      |L3.86|
000028  2804              CMP      r0,#4
00002a  d002              BEQ      |L3.50|
00002c  2805              CMP      r0,#5
00002e  d11c              BNE      |L3.106|
000030  e005              B        |L3.62|
                  |L3.50|
;;;396    		{
;;;397    			case IN_KEY_PAIR_SP:
;;;398    				printf("pari key sp\n");
000032  a013              ADR      r0,|L3.128|
000034  f7fffffe          BL       __2printf
;;;399    				drv_wifi_4g_switch_cmd_send();
000038  f7fffffe          BL       drv_wifi_4g_switch_cmd_send
;;;400    				break;
00003c  e015              B        |L3.106|
                  |L3.62|
;;;401    			case IN_KEY_PAIR_CP:
;;;402    				printf("pari key cp\n");
00003e  a014              ADR      r0,|L3.144|
000040  f7fffffe          BL       __2printf
;;;403    				drv_pairing_cmd_send();
000044  f7fffffe          BL       drv_pairing_cmd_send
;;;404    				
;;;405    				break;
000048  e00f              B        |L3.106|
                  |L3.74|
;;;406    			case IN_KEY_POWER_SP:
;;;407    				printf("power key sp\n");
00004a  a015              ADR      r0,|L3.160|
00004c  f7fffffe          BL       __2printf
;;;408    				srv_key_mode_handler();
000050  f7fffffe          BL       srv_key_mode_handler
;;;409    				break;
000054  e009              B        |L3.106|
                  |L3.86|
;;;410    			case IN_KEY_POWER_CP:
;;;411    				printf("power key cp\n");	
000056  a016              ADR      r0,|L3.176|
000058  f7fffffe          BL       __2printf
;;;412    				if(Global_datas.g_mode_status == POWER_IDLE_MODE)
00005c  79e0              LDRB     r0,[r4,#7]  ; Global_datas
00005e  280e              CMP      r0,#0xe
000060  d006              BEQ      |L3.112|
;;;413    				{
;;;414    					SYS_Status();
;;;415    				}
;;;416    
;;;417    				else
;;;418    				{
;;;419    					PowerOff();
000062  f7fffffe          BL       PowerOff
;;;420    					SysIdle();
000066  f7fffffe          BL       SysIdle
                  |L3.106|
;;;421    				}
;;;422    				break;
;;;423    
;;;424    		  	default:break;
;;;425    		}
;;;426    	}
;;;427    
;;;428    	IoKeyInputmessage = 0;
00006a  2000              MOVS     r0,#0
00006c  7028              STRB     r0,[r5,#0]
                  |L3.110|
;;;429    		
;;;430    }
00006e  bd70              POP      {r4-r6,pc}
                  |L3.112|
000070  f7fffffe          BL       SYS_Status
000074  e7f9              B        |L3.106|
;;;431    
                          ENDP

000076  0000              DCW      0x0000
                  |L3.120|
                          DCD      Global_datas+0x20
                  |L3.124|
                          DCD      IoKeyInputmessage
                  |L3.128|
000080  70617269          DCB      "pari key sp\n",0
000084  206b6579
000088  2073700a
00008c  00      
00008d  00                DCB      0
00008e  00                DCB      0
00008f  00                DCB      0
                  |L3.144|
000090  70617269          DCB      "pari key cp\n",0
000094  206b6579
000098  2063700a
00009c  00      
00009d  00                DCB      0
00009e  00                DCB      0
00009f  00                DCB      0
                  |L3.160|
0000a0  706f7765          DCB      "power key sp\n",0
0000a4  72206b65
0000a8  79207370
0000ac  0a00    
0000ae  00                DCB      0
0000af  00                DCB      0
                  |L3.176|
0000b0  706f7765          DCB      "power key cp\n",0
0000b4  72206b65
0000b8  79206370
0000bc  0a00    
0000be  00                DCB      0
0000bf  00                DCB      0

                          AREA ||i.MessageProcess||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  MessageProcess PROC
;;;937    #endif
;;;938    void MessageProcess(void)
000000  b5f0              PUSH     {r4-r7,lr}
;;;939    {
000002  b085              SUB      sp,sp,#0x14
;;;940    	sCoreMsg msg;
;;;941    	
;;;942      	uint8_t bat_val[2];
;;;943    
;;;944    	if(Core_Msg_Get(&msg))
000004  4668              MOV      r0,sp
000006  f7fffffe          BL       Core_Msg_Get
00000a  2800              CMP      r0,#0
00000c  d024              BEQ      |L4.88|
;;;945    		{
;;;946            // deal with message
;;;947            switch(msg.msg)
00000e  9800              LDR      r0,[sp,#0]
;;;948    	        {
;;;949    	            case MSG_4G_SYS_STATE_IND:
;;;950    					
;;;951    					printf("MSG_4G_SYS_STATE_IND:msg.param0 = %x, msg.param1 = %x \n",msg.param0,msg.param1);
000010  2707              MOVS     r7,#7
000012  2501              MOVS     r5,#1                 ;947
;;;952    					
;;;953    	                if((msg.param0 == 0x08) && (msg.param1 == 0x00))   // 4G handshake
;;;954    	                {
;;;955    						Global_datas.inputmessage = IN_KEY_INIT_FINISH_CMD;
000014  4cc5              LDR      r4,|L4.812|
000016  2801              CMP      r0,#1                 ;947
000018  d005              BEQ      |L4.38|
00001a  2802              CMP      r0,#2                 ;947
00001c  d11c              BNE      |L4.88|
;;;956    					} 
;;;957    					else if((msg.param0 == 0x09) && (msg.param1 == 0x01))  // check battery level  
;;;958    				    {
;;;959    						//Cmd_Send2FourG(0x09,Global_datas.PowerState.battery_level, Global_datas.PowerState.AdapterIn);  //Param0: barrery level (1-10)  1到10 对应 10%～ 100%  十个等级   ;Param1： 1 适配器插入，0 未插
;;;960    						//printf("battery_level = %x \n",Global_datas.PowerState.battery_level);
;;;961    						//printf("AdapterIn     = %x \n",Global_datas.PowerState.AdapterIn);
;;;962    					}
;;;963    					
;;;964    					else if(msg.param0 == 0x07)   // set volume
;;;965    	        		{
;;;966    	                	// vol
;;;967    						printf("0x07, msg.param1 = %x \n",msg.param1);
;;;968    						
;;;969    						if(msg.param1)
;;;970    						{
;;;971    							Global_datas.volume = msg.param1;
;;;972    							Drv_Dap_vol_set(Global_datas.volume);
;;;973    							Global_datas.mute = 0;
;;;974    							drv_5825_mute_pin_set(1);
;;;975    						}
;;;976    						else
;;;977    						{
;;;978    							Global_datas.volume = 0;
;;;979    							Drv_Dap_vol_set(Global_datas.volume);
;;;980    							Global_datas.mute = 1;
;;;981    							drv_5825_mute_pin_set(0);
;;;982    						}
;;;983    						
;;;984    					}
;;;985    					else if(msg.param0 == 0x04 ) // mute set
;;;986    					{
;;;987    	                	
;;;988    					}
;;;989    					else if(msg.param0 == 0x0d)  // 4G GO TO POWER OFF , NEED TO POWER DOWN 4G VCC
;;;990    					{
;;;991    						Global_datas.inputmessage = IN_KEY_TURNOFF_4G_MOUDLE;
;;;992    						printf("IN_KEY_TURNOFF_4G_MOUDLE \n");
;;;993    					}
;;;994    					else if(msg.param0 == 0x06)  // sys status
;;;995    					{
;;;996    						if(msg.param1 == 0x06)
;;;997    						{
;;;998    		                	Global_datas.g_mode_status = BT_MODE;
;;;999    							printf("0x06, msg.param1 = %x \n",msg.param1);
;;;1000   							//Drv_Dap_vol_set(VOLUME_DEFAULT);
;;;1001   							Global_datas.MW_radio_net_type = NET_TYPE_NONE;
;;;1002   							drv_Cmd_Send2NCU031(0x70, 0x1d,Global_datas.MW_radio_net_type);// net type
;;;1003   							
;;;1004   						}
;;;1005   					
;;;1006   						if (msg.param1 == 0x07)
;;;1007   						{
;;;1008   		                	Global_datas.g_mode_status = BT_CONNECTED_MODE;
;;;1009   							printf("0x06, msg.param1 = %x \n",msg.param1);
;;;1010   							Global_datas.MW_radio_net_type = NET_TYPE_NONE;
;;;1011   						}
;;;1012   						if (msg.param1 == 0x02)
;;;1013   						{
;;;1014   		                	Global_datas.g_mode_status = WIFI_CONNECTED_MODE;
;;;1015   							Global_datas.MW_radio_net_type = NET_TYPE_WIFI;
;;;1016   							printf("0x06, msg.param1 = %x \n",msg.param1);
;;;1017   							
;;;1018   						}
;;;1019   						if (msg.param1 == 0x04)
;;;1020   						{
;;;1021   		                	Global_datas.g_mode_status = WIFI_MODE;
;;;1022   							Global_datas.MW_radio_net_type = NET_TYPE_WIFI;
;;;1023   							
;;;1024   							drv_Cmd_Send2NCU031(0x70, 0x1d,Global_datas.MW_radio_net_type);// net type
;;;1025   						printf("0x06, msg.param1 = %x \n",msg.param1);
;;;1026   						}
;;;1027   						if (msg.param1 == 0x05)
;;;1028   						{
;;;1029   		                	Global_datas.g_mode_status = WIFI_CONNECTING_MODE;
;;;1030   							Global_datas.MW_radio_net_type = NET_TYPE_WIFI;
;;;1031   		                	
;;;1032   						printf("0x06, msg.param1 = %x \n",msg.param1);
;;;1033   						}
;;;1034   						if (msg.param1 == 0x011)
;;;1035   						{
;;;1036   		                	Global_datas.g_mode_status = FOURG_CONNECTED_MODE;
;;;1037   							Global_datas.MW_radio_net_type = NET_TYPE_4G;
;;;1038   							printf("0x06, msg.param1 = %x \n",msg.param1);
;;;1039   						}
;;;1040   						if (msg.param1 == 0x012)
;;;1041   						{
;;;1042   		                	Global_datas.g_mode_status = FOURG_MODE;
;;;1043   							Global_datas.MW_radio_net_type = NET_TYPE_4G;
;;;1044   							drv_Cmd_Send2NCU031(0x70, 0x1d,Global_datas.MW_radio_net_type);// net type
;;;1045   							
;;;1046   							printf("0x06, msg.param1 = %x \n",msg.param1);
;;;1047   							
;;;1048   						}
;;;1049   						if (msg.param1 == 0x0B)
;;;1050   						{
;;;1051   		                	Global_datas.g_mode_status = SYSTEM_UPDATING;
;;;1052   		                	
;;;1053   						printf("0x06, msg.param1 = %x \n",msg.param1);
;;;1054   						}
;;;1055   						if ((msg.param1 == 0x09) || (msg.param1 == 0x08) || (msg.param1 == 0x16))
;;;1056   						{
;;;1057   		                	Global_datas.g_mode_status = SYS_LOW_POWER;
;;;1058   		                	
;;;1059   						printf("0x06, msg.param1 = %x \n",msg.param1);
;;;1060   						}
;;;1061   						
;;;1062   					}
;;;1063   					else if(msg.param0 == 0x20) // check version
;;;1064   					{
;;;1065   						Cmd_Send2FourG(0x20,0x0,0x1);  //version 0.0.1
;;;1066   					}
;;;1067   	            break;
;;;1068   
;;;1069   				
;;;1070   
;;;1071   			 	case MSG_MCU1_SYS_STATE_IND:
;;;1072   					//printf("MSG_MCU1_SYS_STATE_IND:msg.param0 = %x, msg.param1 = %x \n",msg.param0,msg.param1);
;;;1073   					if((msg.param0 == 0x01) && (msg.param1 == 0x00))  // check power state
00001e  9801              LDR      r0,[sp,#4]
000020  2801              CMP      r0,#1
000022  d07d              BEQ      |L4.288|
000024  e0ae              B        |L4.388|
                  |L4.38|
000026  a0c2              ADR      r0,|L4.816|
000028  9a02              LDR      r2,[sp,#8]            ;951
00002a  9901              LDR      r1,[sp,#4]            ;951
00002c  f7fffffe          BL       __2printf
000030  9801              LDR      r0,[sp,#4]            ;953
000032  2808              CMP      r0,#8                 ;953
000034  d012              BEQ      |L4.92|
000036  2809              CMP      r0,#9                 ;957
000038  d00e              BEQ      |L4.88|
00003a  2600              MOVS     r6,#0                 ;957
00003c  2807              CMP      r0,#7                 ;964
00003e  d012              BEQ      |L4.102|
000040  2804              CMP      r0,#4                 ;985
000042  d009              BEQ      |L4.88|
000044  280d              CMP      r0,#0xd               ;989
000046  d025              BEQ      |L4.148|
000048  2806              CMP      r0,#6                 ;994
00004a  d029              BEQ      |L4.160|
00004c  2820              CMP      r0,#0x20              ;1063
00004e  d103              BNE      |L4.88|
000050  2201              MOVS     r2,#1                 ;1065
000052  2100              MOVS     r1,#0                 ;1065
000054  f7fffffe          BL       Cmd_Send2FourG
                  |L4.88|
;;;1074   					{
;;;1075   						drv_Cmd_Send2NCU031(0x01,Global_datas.g_PowerStatus.bat_status,Global_datas.g_PowerStatus.bat_value);
;;;1076   					}
;;;1077   
;;;1078   					if((msg.param0 == 0x03) && (msg.param1 == 0x03)) // VOL--
;;;1079   					{
;;;1080   						Global_datas.inputmessage = IN_KEY_VOL_SUB_S;
;;;1081   						printf("VOL-\n");
;;;1082   					}
;;;1083   					
;;;1084   					if((msg.param0 == 0x03) && (msg.param1 == 0x02))  // V+
;;;1085   					{
;;;1086   						Global_datas.inputmessage = IN_KEY_VOL_ADD_S;
;;;1087   						printf("VOL+\n");
;;;1088   					}
;;;1089   
;;;1090   					if((msg.param0 == 0x03) && (msg.param1 == 0x15)) //wifi mode
;;;1091   					{
;;;1092   
;;;1093   						printf("FourG_WIFI_CHANNEL\n");
;;;1094   						Global_datas.inputmessage = IN_KEY_MW_RADIO_MODE_S;
;;;1095   					}
;;;1096   					if((msg.param0 == 0x03) && (msg.param1 == 0x16)) //BT mode
;;;1097   					{
;;;1098   						printf("BT_CHANNEL\n");
;;;1099   						Global_datas.inputmessage = IN_KEY_BT_MODE_S;
;;;1100   					}
;;;1101   					if((msg.param0 == 0x03) && (msg.param1 == 0x17)) //AUX mode
;;;1102   					{
;;;1103   						printf("AUXIN_CHANNEL\n");
;;;1104   						Global_datas.inputmessage = IN_KEY_AUX_MODE_S;
;;;1105   					
;;;1106   					}
;;;1107   					if((msg.param0 == 0x03) && (msg.param1 == 0x18)) //FM mode
;;;1108   					{
;;;1109   						printf("FM_CHANNEL\n");
;;;1110   						Global_datas.inputmessage = IN_KEY_FM_MODE_S;
;;;1111   											}
;;;1112   					if((msg.param0 == 0x03) && (msg.param1 == 0x31)) // NEXT CHANNEL
;;;1113   					{
;;;1114   						Global_datas.inputmessage = IN_KEY_RADIO_NEXT_S;
;;;1115   								
;;;1116   					}
;;;1117   					if((msg.param0 == 0x03) && (msg.param1 == 0x32))// PRE CHANNEL
;;;1118   					{
;;;1119   						Global_datas.inputmessage = IN_KEY_RADIO_PREV_S;
;;;1120   					
;;;1121   					}
;;;1122   					if((msg.param0 == 0x03) && (msg.param1 == 0x56)) // PLAY/PAUSE
;;;1123   					{
;;;1124   						Global_datas.inputmessage = IN_KEY_PLAY_S;
;;;1125   					}
;;;1126   					
;;;1127   					if((msg.param0 == 0x03) && (msg.param1 == 0x0d)) // NEXT SONG
;;;1128   					{
;;;1129   						Global_datas.inputmessage = IN_KEY_NEXT_SONG_S;
;;;1130   								
;;;1131   					}
;;;1132   					if((msg.param0 == 0x03) && (msg.param1 == 0x0e))// PREV SONG
;;;1133   					{
;;;1134   						Global_datas.inputmessage = IN_KEY_PREV_SONG_S;
;;;1135   					
;;;1136   					}
;;;1137   
;;;1138   					
;;;1139   					
;;;1140   					if((msg.param0 == 0x03) && (msg.param1 == 0xC1)) //inside
;;;1141   					{
;;;1142   						printf("inside\n");
;;;1143   						Global_datas.inputmessage = IN_KEY_EQ_INDOOR_S;
;;;1144   					}
;;;1145   					if((msg.param0 == 0x03) && (msg.param1 == 0xC2)) //outside
;;;1146   					{
;;;1147   
;;;1148   						printf("outside\n");
;;;1149   						Global_datas.inputmessage = IN_KEY_EQ_OUTDOOR_S;
;;;1150   					}
;;;1151   					
;;;1152   					if((msg.param0 == 0x03) && (msg.param1 == 0xC8))
;;;1153   					{
;;;1154   
;;;1155   						printf("FM UP\n");
;;;1156   						Global_datas.inputmessage = IN_KEY_FM_NEXT_FREQ_S;
;;;1157   					}
;;;1158   
;;;1159   					if((msg.param0 == 0x03) && (msg.param1 == 0xC9))
;;;1160   					{
;;;1161   
;;;1162   						printf("FM DOWN\n");
;;;1163   						Global_datas.inputmessage = IN_KEY_FM_PREV_FREQ_S;
;;;1164   					}	
;;;1165   					
;;;1166   					if((msg.param0 == 0x03) && (msg.param1 == 0xCB))
;;;1167   					{
;;;1168   
;;;1169   						printf("FM LONG PRESS\n");
;;;1170   						Global_datas.inputmessage = IN_KEY_AUTO_SEARCH_S;
;;;1171   					}	
;;;1172   
;;;1173   
;;;1174   					
;;;1175   
;;;1176   					if((msg.param0 == 0x03) && (msg.param1 == 0x62)) // MIC key  single press
;;;1177   					{
;;;1178   						Cmd_Send2FourG(0x03,0x62,0);
;;;1179   
;;;1180   						printf("mic key press\n");
;;;1181   					}
;;;1182   					else if((msg.param0 == 0x03) && (msg.param1 == 0x63)) // MIC long press
;;;1183   					{
;;;1184   						Cmd_Send2FourG(0x03,0x63,0);
;;;1185   						
;;;1186   						printf("mic key long press\n");
;;;1187   					}
;;;1188   					else if((msg.param0 == 0x03) && (msg.param1 == 0x64)) // MIC long press release
;;;1189   					{
;;;1190   						Cmd_Send2FourG(0x03,0x64,0);					
;;;1191   						printf("mic key long release\n");
;;;1192   					}					
;;;1193   
;;;1194   
;;;1195   /*
;;;1196     	控制盒每3秒向主机发送一次握手信号，主机返回当前机器状态。
;;;1197     	0XCA + XX    其中XX包含当前控制盒硬开关位置:
;;;1198   	BIT 0~3 代表模式为， 0 = 空； 1 WIFI ; 2 FM; 3 BT; 4 AUX.
;;;1199   	BIT 4~7 代表EQ模式，0 = 空，1 INDOOR;  2 OUTDOOR
;;;1200   
;;;1201   */
;;;1202   					if((msg.param0 == 0x03) && (msg.param1 == 0xCA)) // handshake
;;;1203   					{
;;;1204   						if(Global_datas.SubBoard.subboard_online == 0)  // first in
;;;1205   						{
;;;1206   						 	//drv_SendAllstateToSubboard();
;;;1207   							SendFmFreqToSubBoard();
;;;1208   							printf("SUB BOARD ON\n");
;;;1209   
;;;1210   							Global_datas.SubBoard.eq_mode = msg.param2 >> 4;
;;;1211   							Global_datas.SubBoard.playmode = msg.param2 & 0x0f;
;;;1212   							Global_datas.SubBoard.subboard_online = 1;
;;;1213   							printf("msg.param1 = %d \n",msg.param2);
;;;1214   							printf("play_mode = %d \n",Global_datas.SubBoard.playmode);							
;;;1215   						}
;;;1216   						
;;;1217   
;;;1218   
;;;1219   						
;;;1220   						TimeOutSet(&SubBoardHandshakeTimer, 4000);
;;;1221   						//drv_Cmd_Send2NCU031(msg.param0,msg.param1,msg.param2);//
;;;1222   					}					
;;;1223   					
;;;1224   	            break;
;;;1225   					
;;;1226   	            default:
;;;1227   	             break;
;;;1228   	        }
;;;1229       	}	
;;;1230   }
000058  b005              ADD      sp,sp,#0x14
00005a  bdf0              POP      {r4-r7,pc}
                  |L4.92|
00005c  9802              LDR      r0,[sp,#8]            ;953
00005e  2800              CMP      r0,#0                 ;953
000060  d1fa              BNE      |L4.88|
000062  202f              MOVS     r0,#0x2f              ;955
000064  e0e1              B        |L4.554|
                  |L4.102|
000066  a0c0              ADR      r0,|L4.872|
000068  9902              LDR      r1,[sp,#8]            ;967
00006a  f7fffffe          BL       __2printf
00006e  9802              LDR      r0,[sp,#8]            ;969
000070  2800              CMP      r0,#0                 ;969
000072  d006              BEQ      |L4.130|
000074  b2c0              UXTB     r0,r0                 ;971
000076  74e0              STRB     r0,[r4,#0x13]         ;971
000078  f7fffffe          BL       Drv_Dap_vol_set
00007c  7566              STRB     r6,[r4,#0x15]         ;973
00007e  2001              MOVS     r0,#1                 ;974
000080  e005              B        |L4.142|
                  |L4.130|
000082  4630              MOV      r0,r6                 ;978
000084  74e6              STRB     r6,[r4,#0x13]         ;978
000086  f7fffffe          BL       Drv_Dap_vol_set
00008a  7565              STRB     r5,[r4,#0x15]         ;980
00008c  2000              MOVS     r0,#0                 ;981
                  |L4.142|
00008e  f7fffffe          BL       drv_5825_mute_pin_set
                  |L4.146|
000092  e7e1              B        |L4.88|
                  |L4.148|
000094  201a              MOVS     r0,#0x1a              ;991
000096  75e0              STRB     r0,[r4,#0x17]         ;991
000098  a0b9              ADR      r0,|L4.896|
00009a  f7fffffe          BL       __2printf
                  |L4.158|
00009e  e7db              B        |L4.88|
                  |L4.160|
0000a0  9802              LDR      r0,[sp,#8]            ;996
0000a2  2806              CMP      r0,#6                 ;996
0000a4  d10a              BNE      |L4.188|
0000a6  2106              MOVS     r1,#6                 ;998
0000a8  71e1              STRB     r1,[r4,#7]            ;998
0000aa  a0bc              ADR      r0,|L4.924|
0000ac  f7fffffe          BL       __2printf
0000b0  4632              MOV      r2,r6                 ;1001
0000b2  76e6              STRB     r6,[r4,#0x1b]         ;1001
0000b4  211d              MOVS     r1,#0x1d              ;1002
0000b6  2070              MOVS     r0,#0x70              ;1002
0000b8  f7fffffe          BL       drv_Cmd_Send2NCU031
                  |L4.188|
0000bc  9802              LDR      r0,[sp,#8]            ;1006
0000be  2807              CMP      r0,#7                 ;1006
0000c0  d105              BNE      |L4.206|
0000c2  4639              MOV      r1,r7                 ;1008
0000c4  71e7              STRB     r7,[r4,#7]            ;1008
0000c6  a0b5              ADR      r0,|L4.924|
0000c8  f7fffffe          BL       __2printf
0000cc  76e6              STRB     r6,[r4,#0x1b]         ;1010
                  |L4.206|
0000ce  9802              LDR      r0,[sp,#8]            ;1012
0000d0  2602              MOVS     r6,#2                 ;947
0000d2  2802              CMP      r0,#2                 ;1012
0000d4  d105              BNE      |L4.226|
0000d6  71e6              STRB     r6,[r4,#7]            ;1014
0000d8  4631              MOV      r1,r6                 ;1014
0000da  76e5              STRB     r5,[r4,#0x1b]         ;1015
0000dc  a0af              ADR      r0,|L4.924|
0000de  f7fffffe          BL       __2printf
                  |L4.226|
0000e2  9802              LDR      r0,[sp,#8]            ;1019
0000e4  2804              CMP      r0,#4                 ;1019
0000e6  d10a              BNE      |L4.254|
0000e8  71e5              STRB     r5,[r4,#7]            ;1021
0000ea  462a              MOV      r2,r5                 ;1021
0000ec  76e5              STRB     r5,[r4,#0x1b]         ;1022
0000ee  211d              MOVS     r1,#0x1d              ;1024
0000f0  2070              MOVS     r0,#0x70              ;1024
0000f2  f7fffffe          BL       drv_Cmd_Send2NCU031
0000f6  a0a9              ADR      r0,|L4.924|
0000f8  9902              LDR      r1,[sp,#8]            ;1025
0000fa  f7fffffe          BL       __2printf
                  |L4.254|
0000fe  9802              LDR      r0,[sp,#8]            ;1027
000100  2805              CMP      r0,#5                 ;1027
000102  d106              BNE      |L4.274|
000104  2003              MOVS     r0,#3                 ;1029
000106  71e0              STRB     r0,[r4,#7]            ;1029
000108  76e5              STRB     r5,[r4,#0x1b]         ;1030
00010a  a0a4              ADR      r0,|L4.924|
00010c  9902              LDR      r1,[sp,#8]            ;1032
00010e  f7fffffe          BL       __2printf
                  |L4.274|
000112  9802              LDR      r0,[sp,#8]            ;1034
000114  2811              CMP      r0,#0x11              ;1034
000116  d108              BNE      |L4.298|
000118  2005              MOVS     r0,#5                 ;1036
00011a  71e0              STRB     r0,[r4,#7]            ;1036
00011c  76e6              STRB     r6,[r4,#0x1b]         ;1037
00011e  e000              B        |L4.290|
                  |L4.288|
000120  e028              B        |L4.372|
                  |L4.290|
000122  a09e              ADR      r0,|L4.924|
000124  9902              LDR      r1,[sp,#8]            ;1038
000126  f7fffffe          BL       __2printf
                  |L4.298|
00012a  9802              LDR      r0,[sp,#8]            ;1040
00012c  2812              CMP      r0,#0x12              ;1040
00012e  d10b              BNE      |L4.328|
000130  2004              MOVS     r0,#4                 ;1042
000132  71e0              STRB     r0,[r4,#7]            ;1042
000134  4632              MOV      r2,r6                 ;1043
000136  76e6              STRB     r6,[r4,#0x1b]         ;1043
000138  211d              MOVS     r1,#0x1d              ;1044
00013a  2070              MOVS     r0,#0x70              ;1044
00013c  f7fffffe          BL       drv_Cmd_Send2NCU031
000140  a096              ADR      r0,|L4.924|
000142  9902              LDR      r1,[sp,#8]            ;1046
000144  f7fffffe          BL       __2printf
                  |L4.328|
000148  9802              LDR      r0,[sp,#8]            ;1049
00014a  280b              CMP      r0,#0xb               ;1049
00014c  d104              BNE      |L4.344|
00014e  210b              MOVS     r1,#0xb               ;1051
000150  71e1              STRB     r1,[r4,#7]            ;1051
000152  a092              ADR      r0,|L4.924|
000154  f7fffffe          BL       __2printf
                  |L4.344|
000158  9802              LDR      r0,[sp,#8]            ;1055
00015a  2809              CMP      r0,#9                 ;1055
00015c  d003              BEQ      |L4.358|
00015e  2808              CMP      r0,#8                 ;1055
000160  d001              BEQ      |L4.358|
000162  2816              CMP      r0,#0x16              ;1055
000164  d195              BNE      |L4.146|
                  |L4.358|
000166  200c              MOVS     r0,#0xc               ;1057
000168  71e0              STRB     r0,[r4,#7]            ;1057
00016a  a08c              ADR      r0,|L4.924|
00016c  9902              LDR      r1,[sp,#8]            ;1059
00016e  f7fffffe          BL       __2printf
                  |L4.370|
000172  e771              B        |L4.88|
                  |L4.372|
000174  9802              LDR      r0,[sp,#8]            ;1073
000176  2800              CMP      r0,#0                 ;1073
000178  d18b              BNE      |L4.146|
00017a  7922              LDRB     r2,[r4,#4]            ;1075  ; Global_datas
00017c  78e1              LDRB     r1,[r4,#3]            ;1075  ; Global_datas
00017e  2001              MOVS     r0,#1                 ;1075
000180  f7fffffe          BL       drv_Cmd_Send2NCU031
                  |L4.388|
000184  9801              LDR      r0,[sp,#4]            ;1078
000186  2803              CMP      r0,#3                 ;1078
000188  d189              BNE      |L4.158|
00018a  9802              LDR      r0,[sp,#8]            ;1078
00018c  2803              CMP      r0,#3                 ;1078
00018e  d107              BNE      |L4.416|
000190  200c              MOVS     r0,#0xc               ;1080
000192  75e0              STRB     r0,[r4,#0x17]         ;1080
000194  a087              ADR      r0,|L4.948|
000196  f7fffffe          BL       __2printf
00019a  9801              LDR      r0,[sp,#4]            ;1084
00019c  2803              CMP      r0,#3                 ;1084
00019e  d1e8              BNE      |L4.370|
                  |L4.416|
0001a0  9802              LDR      r0,[sp,#8]            ;1084
0001a2  2802              CMP      r0,#2                 ;1084
0001a4  d107              BNE      |L4.438|
0001a6  200b              MOVS     r0,#0xb               ;1086
0001a8  75e0              STRB     r0,[r4,#0x17]         ;1086
0001aa  a084              ADR      r0,|L4.956|
0001ac  f7fffffe          BL       __2printf
0001b0  9801              LDR      r0,[sp,#4]            ;1090
0001b2  2803              CMP      r0,#3                 ;1090
0001b4  d1dd              BNE      |L4.370|
                  |L4.438|
0001b6  9802              LDR      r0,[sp,#8]            ;1090
0001b8  2815              CMP      r0,#0x15              ;1090
0001ba  d107              BNE      |L4.460|
0001bc  a081              ADR      r0,|L4.964|
0001be  f7fffffe          BL       __2printf
0001c2  2009              MOVS     r0,#9                 ;1094
0001c4  75e0              STRB     r0,[r4,#0x17]         ;1094
0001c6  9801              LDR      r0,[sp,#4]            ;1096
0001c8  2803              CMP      r0,#3                 ;1096
0001ca  d1d2              BNE      |L4.370|
                  |L4.460|
0001cc  9802              LDR      r0,[sp,#8]            ;1096
0001ce  2816              CMP      r0,#0x16              ;1096
0001d0  d107              BNE      |L4.482|
0001d2  a081              ADR      r0,|L4.984|
0001d4  f7fffffe          BL       __2printf
0001d8  200a              MOVS     r0,#0xa               ;1099
0001da  75e0              STRB     r0,[r4,#0x17]         ;1099
0001dc  9801              LDR      r0,[sp,#4]            ;1101
0001de  2803              CMP      r0,#3                 ;1101
0001e0  d1c7              BNE      |L4.370|
                  |L4.482|
0001e2  9802              LDR      r0,[sp,#8]            ;1101
0001e4  2817              CMP      r0,#0x17              ;1101
0001e6  d107              BNE      |L4.504|
0001e8  a07e              ADR      r0,|L4.996|
0001ea  f7fffffe          BL       __2printf
0001ee  2008              MOVS     r0,#8                 ;1104
0001f0  75e0              STRB     r0,[r4,#0x17]         ;1104
0001f2  9801              LDR      r0,[sp,#4]            ;1107
0001f4  2803              CMP      r0,#3                 ;1107
0001f6  d1bc              BNE      |L4.370|
                  |L4.504|
0001f8  9802              LDR      r0,[sp,#8]            ;1107
0001fa  2818              CMP      r0,#0x18              ;1107
0001fc  d106              BNE      |L4.524|
0001fe  a07d              ADR      r0,|L4.1012|
000200  f7fffffe          BL       __2printf
000204  75e7              STRB     r7,[r4,#0x17]         ;1110
000206  9801              LDR      r0,[sp,#4]            ;1112
000208  2803              CMP      r0,#3                 ;1112
00020a  d1b2              BNE      |L4.370|
                  |L4.524|
00020c  9802              LDR      r0,[sp,#8]            ;1112
00020e  2831              CMP      r0,#0x31              ;1112
000210  d00a              BEQ      |L4.552|
000212  2832              CMP      r0,#0x32              ;1117
000214  d00b              BEQ      |L4.558|
000216  2856              CMP      r0,#0x56              ;1122
000218  d00b              BEQ      |L4.562|
00021a  280d              CMP      r0,#0xd               ;1127
00021c  d00b              BEQ      |L4.566|
00021e  280e              CMP      r0,#0xe               ;1132
000220  d00b              BEQ      |L4.570|
000222  28c1              CMP      r0,#0xc1              ;1140
000224  d00b              BEQ      |L4.574|
000226  e012              B        |L4.590|
                  |L4.552|
000228  2017              MOVS     r0,#0x17              ;1114
                  |L4.554|
00022a  75e0              STRB     r0,[r4,#0x17]         ;955
                  |L4.556|
00022c  e714              B        |L4.88|
                  |L4.558|
00022e  2016              MOVS     r0,#0x16              ;1119
000230  e7fb              B        |L4.554|
                  |L4.562|
000232  2010              MOVS     r0,#0x10              ;1124
000234  e7f9              B        |L4.554|
                  |L4.566|
000236  2011              MOVS     r0,#0x11              ;1129
000238  e7f7              B        |L4.554|
                  |L4.570|
00023a  2012              MOVS     r0,#0x12              ;1134
00023c  e7f5              B        |L4.554|
                  |L4.574|
00023e  a070              ADR      r0,|L4.1024|
000240  f7fffffe          BL       __2printf
000244  200d              MOVS     r0,#0xd               ;1143
000246  75e0              STRB     r0,[r4,#0x17]         ;1143
000248  9801              LDR      r0,[sp,#4]            ;1145
00024a  2803              CMP      r0,#3                 ;1145
00024c  d191              BNE      |L4.370|
                  |L4.590|
00024e  9802              LDR      r0,[sp,#8]            ;1145
000250  28c2              CMP      r0,#0xc2              ;1145
000252  d107              BNE      |L4.612|
000254  a06c              ADR      r0,|L4.1032|
000256  f7fffffe          BL       __2printf
00025a  200e              MOVS     r0,#0xe               ;1149
00025c  75e0              STRB     r0,[r4,#0x17]         ;1149
00025e  9801              LDR      r0,[sp,#4]            ;1152
000260  2803              CMP      r0,#3                 ;1152
000262  d186              BNE      |L4.370|
                  |L4.612|
000264  9802              LDR      r0,[sp,#8]            ;1152
000266  28c8              CMP      r0,#0xc8              ;1152
000268  d107              BNE      |L4.634|
00026a  a06a              ADR      r0,|L4.1044|
00026c  f7fffffe          BL       __2printf
000270  2013              MOVS     r0,#0x13              ;1156
000272  75e0              STRB     r0,[r4,#0x17]         ;1156
000274  9801              LDR      r0,[sp,#4]            ;1159
000276  2803              CMP      r0,#3                 ;1159
000278  d1d8              BNE      |L4.556|
                  |L4.634|
00027a  9802              LDR      r0,[sp,#8]            ;1159
00027c  28c9              CMP      r0,#0xc9              ;1159
00027e  d107              BNE      |L4.656|
000280  a066              ADR      r0,|L4.1052|
000282  f7fffffe          BL       __2printf
000286  2014              MOVS     r0,#0x14              ;1163
000288  75e0              STRB     r0,[r4,#0x17]         ;1163
00028a  9801              LDR      r0,[sp,#4]            ;1166
00028c  2803              CMP      r0,#3                 ;1166
00028e  d1cd              BNE      |L4.556|
                  |L4.656|
000290  9802              LDR      r0,[sp,#8]            ;1166
000292  28cb              CMP      r0,#0xcb              ;1166
000294  d107              BNE      |L4.678|
000296  a064              ADR      r0,|L4.1064|
000298  f7fffffe          BL       __2printf
00029c  2015              MOVS     r0,#0x15              ;1170
00029e  75e0              STRB     r0,[r4,#0x17]         ;1170
0002a0  9801              LDR      r0,[sp,#4]            ;1176
0002a2  2803              CMP      r0,#3                 ;1176
0002a4  d1c2              BNE      |L4.556|
                  |L4.678|
0002a6  9802              LDR      r0,[sp,#8]            ;1176
0002a8  2862              CMP      r0,#0x62              ;1176
0002aa  d004              BEQ      |L4.694|
0002ac  2863              CMP      r0,#0x63              ;1182
0002ae  d009              BEQ      |L4.708|
0002b0  2864              CMP      r0,#0x64              ;1188
0002b2  d00e              BEQ      |L4.722|
0002b4  e018              B        |L4.744|
                  |L4.694|
0002b6  2200              MOVS     r2,#0                 ;1178
0002b8  2162              MOVS     r1,#0x62              ;1178
0002ba  2003              MOVS     r0,#3                 ;1178
0002bc  f7fffffe          BL       Cmd_Send2FourG
0002c0  a05d              ADR      r0,|L4.1080|
0002c2  e00c              B        |L4.734|
                  |L4.708|
0002c4  2200              MOVS     r2,#0                 ;1184
0002c6  2163              MOVS     r1,#0x63              ;1184
0002c8  2003              MOVS     r0,#3                 ;1184
0002ca  f7fffffe          BL       Cmd_Send2FourG
0002ce  a05e              ADR      r0,|L4.1096|
0002d0  e005              B        |L4.734|
                  |L4.722|
0002d2  2200              MOVS     r2,#0                 ;1190
0002d4  2164              MOVS     r1,#0x64              ;1190
0002d6  2003              MOVS     r0,#3                 ;1190
0002d8  f7fffffe          BL       Cmd_Send2FourG
0002dc  a05f              ADR      r0,|L4.1116|
                  |L4.734|
0002de  f7fffffe          BL       __2printf
0002e2  9801              LDR      r0,[sp,#4]            ;1202
0002e4  2803              CMP      r0,#3                 ;1202
0002e6  d1a1              BNE      |L4.556|
                  |L4.744|
0002e8  9802              LDR      r0,[sp,#8]            ;1202
0002ea  28ca              CMP      r0,#0xca              ;1202
0002ec  d19e              BNE      |L4.556|
0002ee  7f20              LDRB     r0,[r4,#0x1c]         ;1204  ; Global_datas
0002f0  2800              CMP      r0,#0                 ;1204
0002f2  d114              BNE      |L4.798|
0002f4  f7fffffe          BL       SendFmFreqToSubBoard
0002f8  a05e              ADR      r0,|L4.1140|
0002fa  f7fffffe          BL       __2printf
0002fe  9803              LDR      r0,[sp,#0xc]          ;1210
000300  0900              LSRS     r0,r0,#4              ;1210
000302  7760              STRB     r0,[r4,#0x1d]         ;1210
000304  9803              LDR      r0,[sp,#0xc]          ;1211
000306  0700              LSLS     r0,r0,#28             ;1211
000308  0f00              LSRS     r0,r0,#28             ;1211
00030a  77a0              STRB     r0,[r4,#0x1e]         ;1211
00030c  7725              STRB     r5,[r4,#0x1c]         ;1212
00030e  a05d              ADR      r0,|L4.1156|
000310  9903              LDR      r1,[sp,#0xc]          ;1213
000312  f7fffffe          BL       __2printf
000316  7fa1              LDRB     r1,[r4,#0x1e]         ;1214  ; Global_datas
000318  a05f              ADR      r0,|L4.1176|
00031a  f7fffffe          BL       __2printf
                  |L4.798|
00031e  217d              MOVS     r1,#0x7d              ;1220
000320  0149              LSLS     r1,r1,#5              ;1220
000322  4862              LDR      r0,|L4.1196|
000324  f7fffffe          BL       TimeOutSet
000328  e696              B        |L4.88|
;;;1231   
                          ENDP

00032a  0000              DCW      0x0000
                  |L4.812|
                          DCD      Global_datas+0x20
                  |L4.816|
000330  4d53475f          DCB      "MSG_4G_SYS_STATE_IND:msg.param0 = %x, msg.param1 = %x \n"
000334  34475f53
000338  59535f53
00033c  54415445
000340  5f494e44
000344  3a6d7367
000348  2e706172
00034c  616d3020
000350  3d202578
000354  2c206d73
000358  672e7061
00035c  72616d31
000360  203d2025
000364  78200a  
000367  00                DCB      0
                  |L4.872|
000368  30783037          DCB      "0x07, msg.param1 = %x \n",0
00036c  2c206d73
000370  672e7061
000374  72616d31
000378  203d2025
00037c  78200a00
                  |L4.896|
000380  494e5f4b          DCB      "IN_KEY_TURNOFF_4G_MOUDLE \n",0
000384  45595f54
000388  55524e4f
00038c  46465f34
000390  475f4d4f
000394  55444c45
000398  200a00  
00039b  00                DCB      0
                  |L4.924|
00039c  30783036          DCB      "0x06, msg.param1 = %x \n",0
0003a0  2c206d73
0003a4  672e7061
0003a8  72616d31
0003ac  203d2025
0003b0  78200a00
                  |L4.948|
0003b4  564f4c2d          DCB      "VOL-\n",0
0003b8  0a00    
0003ba  00                DCB      0
0003bb  00                DCB      0
                  |L4.956|
0003bc  564f4c2b          DCB      "VOL+\n",0
0003c0  0a00    
0003c2  00                DCB      0
0003c3  00                DCB      0
                  |L4.964|
0003c4  466f7572          DCB      "FourG_WIFI_CHANNEL\n",0
0003c8  475f5749
0003cc  46495f43
0003d0  48414e4e
0003d4  454c0a00
                  |L4.984|
0003d8  42545f43          DCB      "BT_CHANNEL\n",0
0003dc  48414e4e
0003e0  454c0a00
                  |L4.996|
0003e4  41555849          DCB      "AUXIN_CHANNEL\n",0
0003e8  4e5f4348
0003ec  414e4e45
0003f0  4c0a00  
0003f3  00                DCB      0
                  |L4.1012|
0003f4  464d5f43          DCB      "FM_CHANNEL\n",0
0003f8  48414e4e
0003fc  454c0a00
                  |L4.1024|
000400  696e7369          DCB      "inside\n",0
000404  64650a00
                  |L4.1032|
000408  6f757473          DCB      "outside\n",0
00040c  6964650a
000410  00      
000411  00                DCB      0
000412  00                DCB      0
000413  00                DCB      0
                  |L4.1044|
000414  464d2055          DCB      "FM UP\n",0
000418  500a00  
00041b  00                DCB      0
                  |L4.1052|
00041c  464d2044          DCB      "FM DOWN\n",0
000420  4f574e0a
000424  00      
000425  00                DCB      0
000426  00                DCB      0
000427  00                DCB      0
                  |L4.1064|
000428  464d204c          DCB      "FM LONG PRESS\n",0
00042c  4f4e4720
000430  50524553
000434  530a00  
000437  00                DCB      0
                  |L4.1080|
000438  6d696320          DCB      "mic key press\n",0
00043c  6b657920
000440  70726573
000444  730a00  
000447  00                DCB      0
                  |L4.1096|
000448  6d696320          DCB      "mic key long press\n",0
00044c  6b657920
000450  6c6f6e67
000454  20707265
000458  73730a00
                  |L4.1116|
00045c  6d696320          DCB      "mic key long release\n",0
000460  6b657920
000464  6c6f6e67
000468  2072656c
00046c  65617365
000470  0a00    
000472  00                DCB      0
000473  00                DCB      0
                  |L4.1140|
000474  53554220          DCB      "SUB BOARD ON\n",0
000478  424f4152
00047c  44204f4e
000480  0a00    
000482  00                DCB      0
000483  00                DCB      0
                  |L4.1156|
000484  6d73672e          DCB      "msg.param1 = %d \n",0
000488  70617261
00048c  6d31203d
000490  20256420
000494  0a00    
000496  00                DCB      0
000497  00                DCB      0
                  |L4.1176|
000498  706c6179          DCB      "play_mode = %d \n",0
00049c  5f6d6f64
0004a0  65203d20
0004a4  2564200a
0004a8  00      
0004a9  00                DCB      0
0004aa  00                DCB      0
0004ab  00                DCB      0
                  |L4.1196|
                          DCD      SubBoardHandshakeTimer

                          AREA ||i.PowerDownFunction||, CODE, READONLY, ALIGN=2

                  PowerDownFunction PROC
;;;344    /*---------------------------------------------------------------------------------------------------------*/
;;;345    void PowerDownFunction(void)
000000  b510              PUSH     {r4,lr}
;;;346    {
;;;347        /* Check if all the debug messages are finished */
;;;348        UART_WAIT_TX_EMPTY(UART0);
000002  4803              LDR      r0,|L5.16|
                  |L5.4|
000004  6981              LDR      r1,[r0,#0x18]
000006  00c9              LSLS     r1,r1,#3
000008  d5fc              BPL      |L5.4|
;;;349    
;;;350        /* Enter to Power-down mode */
;;;351        CLK_PowerDown();
00000a  f7fffffe          BL       CLK_PowerDown
;;;352    }
00000e  bd10              POP      {r4,pc}
;;;353    
                          ENDP

                  |L5.16|
                          DCD      0x40050000

                          AREA ||i.PowerDown_deepsleep||, CODE, READONLY, ALIGN=2

                  PowerDown_deepsleep PROC
;;;355    
;;;356    void PowerDown_deepsleep(void)
000000  b510              PUSH     {r4,lr}
;;;357    {
;;;358    	drv_Cmd_Send2NCU031(0x70, 0x15,0x00);// power off cmd to LCD board
000002  2200              MOVS     r2,#0
000004  2115              MOVS     r1,#0x15
000006  2070              MOVS     r0,#0x70
000008  f7fffffe          BL       drv_Cmd_Send2NCU031
;;;359    	
;;;360    	Cmd_Send2FourG( 0x03,0x55,0x00); // poweroff cmd to 4G
00000c  2200              MOVS     r2,#0
00000e  2155              MOVS     r1,#0x55
000010  2003              MOVS     r0,#3
000012  f7fffffe          BL       Cmd_Send2FourG
;;;361    	//Drv_4GMoudle_PowerUp(0);  // wait for 4g modle ready ,than turn off power, don't off here.
;;;362    	drv_led_init();// led all off
000016  f7fffffe          BL       drv_led_init
;;;363    	Drv_audio_powerdown();
00001a  f7fffffe          BL       Drv_audio_powerdown
;;;364    	Global_datas.shoutting_down = 1;
00001e  480d              LDR      r0,|L6.84|
000020  2101              MOVS     r1,#1
000022  7441              STRB     r1,[r0,#0x11]
;;;365    	TimeOutSet(&PoweroffLedTimer, 5000);
000024  490c              LDR      r1,|L6.88|
000026  480d              LDR      r0,|L6.92|
000028  f7fffffe          BL       TimeOutSet
;;;366    	
;;;367    	Drv_4GMoudle_PowerUp(0); // if timeout,turn off.
00002c  2000              MOVS     r0,#0
00002e  f7fffffe          BL       Drv_4GMoudle_PowerUp
;;;368    	TYM_drv_powerkeepon(0); 		
000032  2000              MOVS     r0,#0
000034  f7fffffe          BL       TYM_drv_powerkeepon
;;;369    	TYM_SysPower12V_3V3_onoff(0);
000038  2000              MOVS     r0,#0
00003a  f7fffffe          BL       TYM_SysPower12V_3V3_onoff
;;;370    
;;;371    	//Unlock protected registers before entering Power-down mode 
;;;372      SYS_UnlockReg();
00003e  f7fffffe          BL       SYS_UnlockReg
;;;373    	printf("Enter to Power-Down ......\n");
000042  a007              ADR      r0,|L6.96|
000044  f7fffffe          BL       __2printf
;;;374        /* Enter to Power-down mode */
;;;375    	
;;;376        PowerDownFunction();
000048  f7fffffe          BL       PowerDownFunction
;;;377    	
;;;378        printf("System waken-up done.\n\n");
00004c  a00b              ADR      r0,|L6.124|
00004e  f7fffffe          BL       __2printf
;;;379    
;;;380    	
;;;381    }
000052  bd10              POP      {r4,pc}
;;;382    
                          ENDP

                  |L6.84|
                          DCD      Global_datas+0x20
                  |L6.88|
                          DCD      0x00001388
                  |L6.92|
                          DCD      PoweroffLedTimer
                  |L6.96|
000060  456e7465          DCB      "Enter to Power-Down ......\n",0
000064  7220746f
000068  20506f77
00006c  65722d44
000070  6f776e20
000074  2e2e2e2e
000078  2e2e0a00
                  |L6.124|
00007c  53797374          DCB      "System waken-up done.\n\n",0
000080  656d2077
000084  616b656e
000088  2d757020
00008c  646f6e65
000090  2e0a0a00

                          AREA ||i.PowerOff||, CODE, READONLY, ALIGN=2

                  PowerOff PROC
;;;328    
;;;329    void PowerOff(void)
000000  b510              PUSH     {r4,lr}
;;;330    {
;;;331    	drv_Cmd_Send2NCU031(0x70, 0x15,0x00);// power off cmd to LCD board
000002  2200              MOVS     r2,#0
000004  2115              MOVS     r1,#0x15
000006  2070              MOVS     r0,#0x70
000008  f7fffffe          BL       drv_Cmd_Send2NCU031
;;;332    	
;;;333    	Cmd_Send2FourG( 0x03,0x55,0x00); // poweroff cmd to 4G
00000c  2200              MOVS     r2,#0
00000e  2155              MOVS     r1,#0x55
000010  2003              MOVS     r0,#3
000012  f7fffffe          BL       Cmd_Send2FourG
;;;334    	//Drv_4GMoudle_PowerUp(0);  // wait for 4g modle ready ,than turn off power, don't off here.
;;;335    	drv_led_init();// led all off
000016  f7fffffe          BL       drv_led_init
;;;336    	Drv_audio_powerdown();
00001a  f7fffffe          BL       Drv_audio_powerdown
;;;337    	Global_datas.shoutting_down = 1;
00001e  4804              LDR      r0,|L7.48|
000020  2101              MOVS     r1,#1
000022  7441              STRB     r1,[r0,#0x11]
;;;338    	TimeOutSet(&PoweroffLedTimer, 5000);
000024  4903              LDR      r1,|L7.52|
000026  4804              LDR      r0,|L7.56|
000028  f7fffffe          BL       TimeOutSet
;;;339    }
00002c  bd10              POP      {r4,pc}
;;;340    
                          ENDP

00002e  0000              DCW      0x0000
                  |L7.48|
                          DCD      Global_datas+0x20
                  |L7.52|
                          DCD      0x00001388
                  |L7.56|
                          DCD      PoweroffLedTimer

                          AREA ||i.SYS_BusInit||, CODE, READONLY, ALIGN=1

                  SYS_BusInit PROC
;;;146    
;;;147    void SYS_BusInit(void)
000000  b510              PUSH     {r4,lr}
;;;148    {
;;;149    	// uart0 PTE, uart1 4G, uart2 debug printf, usic0 suboard.
;;;150    	PTE_Uart0_Init(); // this port use for PTE uart
000002  f7fffffe          BL       PTE_Uart0_Init
;;;151    	
;;;152    	Transfer_Uart_Init();
000006  f7fffffe          BL       Transfer_Uart_Init
;;;153    	
;;;154    	USCI_Uart_Init();
00000a  f7fffffe          BL       USCI_Uart_Init
;;;155    	
;;;156    	Hal_I2c_Init();
00000e  f7fffffe          BL       Hal_I2c_Init
;;;157    	
;;;158    }
000012  bd10              POP      {r4,pc}
;;;159    
                          ENDP


                          AREA ||i.SYS_Clock_Disable||, CODE, READONLY, ALIGN=2

                  SYS_Clock_Disable PROC
;;;160    
;;;161    void SYS_Clock_Disable(void)
000000  b510              PUSH     {r4,lr}
;;;162    {
;;;163    	/* Enable UART module clock */
;;;164    	  CLK_DisableModuleClock(UART0_MODULE);
000002  480c              LDR      r0,|L9.52|
000004  f7fffffe          BL       CLK_DisableModuleClock
;;;165    	  /* Enable UART module clock */
;;;166    	  CLK_DisableModuleClock(UART1_MODULE);
000008  480a              LDR      r0,|L9.52|
00000a  1c40              ADDS     r0,r0,#1
00000c  f7fffffe          BL       CLK_DisableModuleClock
;;;167    	  
;;;168    	  /* Enable USCI module clock */
;;;169    	  CLK_DisableModuleClock(UART2_MODULE);
000010  4808              LDR      r0,|L9.52|
000012  1c80              ADDS     r0,r0,#2
000014  f7fffffe          BL       CLK_DisableModuleClock
;;;170    	  
;;;171    	  /* Enable USCI module clock */
;;;172    	  CLK_DisableModuleClock(USCI0_MODULE);
000018  4807              LDR      r0,|L9.56|
00001a  f7fffffe          BL       CLK_DisableModuleClock
;;;173    	  
;;;174    	  /* Enable I2C0 module clock */
;;;175    	  CLK_DisableModuleClock(I2C0_MODULE);
00001e  4807              LDR      r0,|L9.60|
000020  f7fffffe          BL       CLK_DisableModuleClock
;;;176    	  
;;;177    	  /* Enable I2C1 module clock */
;;;178    	  CLK_DisableModuleClock(I2C1_MODULE);
000024  4805              LDR      r0,|L9.60|
000026  1c40              ADDS     r0,r0,#1
000028  f7fffffe          BL       CLK_DisableModuleClock
;;;179    	
;;;180    	  /* Enable ADC module clock */
;;;181    	 // CLK_EnableModuleClock(ADC_MODULE);
;;;182    	
;;;183    	  /* Enable PWM0 module clock */
;;;184    	  CLK_DisableModuleClock(PWM0_MODULE);
00002c  4804              LDR      r0,|L9.64|
00002e  f7fffffe          BL       CLK_DisableModuleClock
;;;185    
;;;186    	
;;;187    }
000032  bd10              POP      {r4,pc}
;;;188    
                          ENDP

                  |L9.52|
                          DCD      0x57803d10
                  |L9.56|
                          DCD      0x80000008
                  |L9.60|
                          DCD      0x40000008
                  |L9.64|
                          DCD      0x53c00014

                          AREA ||i.SYS_Clock_Enable||, CODE, READONLY, ALIGN=2

                  SYS_Clock_Enable PROC
;;;188    
;;;189    void SYS_Clock_Enable(void)
000000  b510              PUSH     {r4,lr}
;;;190    {
;;;191    	/* Enable UART module clock */
;;;192    	  CLK_EnableModuleClock(UART0_MODULE);
000002  480c              LDR      r0,|L10.52|
000004  f7fffffe          BL       CLK_EnableModuleClock
;;;193    	  /* Enable UART module clock */
;;;194    	  CLK_EnableModuleClock(UART1_MODULE);
000008  480a              LDR      r0,|L10.52|
00000a  1c40              ADDS     r0,r0,#1
00000c  f7fffffe          BL       CLK_EnableModuleClock
;;;195    	  
;;;196    	  /* Enable USCI module clock */
;;;197    	  CLK_EnableModuleClock(UART2_MODULE);
000010  4808              LDR      r0,|L10.52|
000012  1c80              ADDS     r0,r0,#2
000014  f7fffffe          BL       CLK_EnableModuleClock
;;;198    	  
;;;199    	  /* Enable USCI module clock */
;;;200    	  CLK_EnableModuleClock(USCI0_MODULE);
000018  4807              LDR      r0,|L10.56|
00001a  f7fffffe          BL       CLK_EnableModuleClock
;;;201    	  
;;;202    	  /* Enable I2C0 module clock */
;;;203    	  CLK_EnableModuleClock(I2C0_MODULE);
00001e  4807              LDR      r0,|L10.60|
000020  f7fffffe          BL       CLK_EnableModuleClock
;;;204    	  
;;;205    	  /* Enable I2C1 module clock */
;;;206    	  CLK_EnableModuleClock(I2C1_MODULE);
000024  4805              LDR      r0,|L10.60|
000026  1c40              ADDS     r0,r0,#1
000028  f7fffffe          BL       CLK_EnableModuleClock
;;;207    	
;;;208    	  /* Enable ADC module clock */
;;;209    	 // CLK_EnableModuleClock(ADC_MODULE);
;;;210    	
;;;211    	  /* Enable PWM0 module clock */
;;;212    	  CLK_EnableModuleClock(PWM0_MODULE);
00002c  4804              LDR      r0,|L10.64|
00002e  f7fffffe          BL       CLK_EnableModuleClock
;;;213    
;;;214    	
;;;215    }
000032  bd10              POP      {r4,pc}
;;;216    
                          ENDP

                  |L10.52|
                          DCD      0x57803d10
                  |L10.56|
                          DCD      0x80000008
                  |L10.60|
                          DCD      0x40000008
                  |L10.64|
                          DCD      0x53c00014

                          AREA ||i.SYS_Clock_init||, CODE, READONLY, ALIGN=2

                  SYS_Clock_init PROC
;;;49     
;;;50     void SYS_Clock_init(void)
000000  b5f8              PUSH     {r3-r7,lr}
;;;51     {
;;;52     
;;;53       #if 0
;;;54        // SYS->GPF_MFPL = SYS_GPF_MFPL_PF4MFP_XT1_IN | SYS_GPF_MFPL_PF3MFP_XT1_OUT | SYS_GPF_MFPL_PF1MFP_X32_IN | SYS_GPF_MFPL_PF0MFP_X32_OUT;
;;;55     	/* Enable HIRC clock (Internal RC 22.1184MHz) */
;;;56         CLK_EnableXtalRC(CLK_PWRCTL_HIRCEN_Msk);
;;;57     
;;;58         /* Wait for HIRC clock ready */
;;;59         CLK_WaitClockReady(CLK_STATUS_HIRCSTB_Msk);
;;;60     	    /* Select HCLK clock source as HIRC and HCLK clock divider as 1 */
;;;61         CLK_SetHCLK(CLK_CLKSEL0_HCLKSEL_HIRC, CLK_CLKDIV0_HCLK(1));
;;;62     
;;;63     
;;;64         /* Enable HXT clock (external XTAL 12MHz) */
;;;65         CLK_EnableXtalRC(CLK_PWRCTL_HXTEN_Msk | CLK_PWRCTL_LXTEN_Msk);
;;;66     //    CLK_EnableXtalRC(CLK_PWRCTL_HXTEN_Msk);
;;;67         /* Wait for HXT clock ready */
;;;68         CLK_WaitClockReady(CLK_STATUS_HXTSTB_Msk | CLK_STATUS_LXTSTB_Msk);
;;;69     //    CLK_WaitClockReady(CLK_STATUS_HXTSTB_Msk);
;;;70         /* Set core clock as PLL_CLOCK from PLL and SysTick source to HCLK/2*/
;;;71         CLK_SetCoreClock(PLL_CLOCK);
;;;72         CLK_SetSysTickClockSrc(CLK_CLKSEL0_STCLKSEL_HCLK_DIV2);	
;;;73     
;;;74     	#else
;;;75     
;;;76     	/* Enable HIRC clock (Internal RC 22.1184MHz) */
;;;77         CLK_EnableXtalRC(CLK_PWRCTL_HIRCEN_Msk);
000002  2004              MOVS     r0,#4
000004  f7fffffe          BL       CLK_EnableXtalRC
;;;78     
;;;79         /* Wait for HIRC clock ready */
;;;80         CLK_WaitClockReady(CLK_STATUS_HIRCSTB_Msk);	
000008  2010              MOVS     r0,#0x10
00000a  f7fffffe          BL       CLK_WaitClockReady
;;;81     
;;;82         /* Select HCLK clock source as HIRC and HCLK clock divider as 1 */
;;;83         CLK_SetHCLK(CLK_CLKSEL0_HCLKSEL_HIRC, CLK_CLKDIV0_HCLK(1));	
00000e  2100              MOVS     r1,#0
000010  2007              MOVS     r0,#7
000012  f7fffffe          BL       CLK_SetHCLK
;;;84     
;;;85     
;;;86         /* Enable HXT clock (external XTAL 12MHz) */
;;;87         CLK_EnableXtalRC(CLK_PWRCTL_HXTEN_Msk);
000016  2001              MOVS     r0,#1
000018  f7fffffe          BL       CLK_EnableXtalRC
;;;88         /* Wait for HXT clock ready */
;;;89         CLK_WaitClockReady(CLK_STATUS_HXTSTB_Msk);
00001c  2001              MOVS     r0,#1
00001e  f7fffffe          BL       CLK_WaitClockReady
;;;90         /* Set core clock as PLL_CLOCK from PLL and SysTick source to HCLK/2*/
;;;91         CLK_SetCoreClock(PLL_CLOCK);
000022  481d              LDR      r0,|L11.152|
000024  f7fffffe          BL       CLK_SetCoreClock
;;;92         CLK_SetSysTickClockSrc(CLK_CLKSEL0_STCLKSEL_HCLK_DIV2);	
000028  2018              MOVS     r0,#0x18
00002a  f7fffffe          BL       CLK_SetSysTickClockSrc
;;;93     	#endif
;;;94     
;;;95     
;;;96     
;;;97     
;;;98     
;;;99         /* Enable UART module clock */
;;;100        CLK_EnableModuleClock(UART0_MODULE);
00002e  4c1b              LDR      r4,|L11.156|
000030  4620              MOV      r0,r4
000032  f7fffffe          BL       CLK_EnableModuleClock
;;;101    	/* Enable UART module clock */
;;;102        CLK_EnableModuleClock(UART1_MODULE);
000036  1c65              ADDS     r5,r4,#1
000038  4628              MOV      r0,r5
00003a  f7fffffe          BL       CLK_EnableModuleClock
;;;103    	
;;;104        /* Enable USCI module clock */
;;;105        CLK_EnableModuleClock(UART2_MODULE);
00003e  1ca6              ADDS     r6,r4,#2
000040  4630              MOV      r0,r6
000042  f7fffffe          BL       CLK_EnableModuleClock
;;;106    	
;;;107        /* Enable USCI module clock */
;;;108        CLK_EnableModuleClock(USCI0_MODULE);
000046  4f16              LDR      r7,|L11.160|
000048  4638              MOV      r0,r7
00004a  f7fffffe          BL       CLK_EnableModuleClock
;;;109    	
;;;110    	/* Enable I2C0 module clock */
;;;111        CLK_EnableModuleClock(I2C0_MODULE);
00004e  4815              LDR      r0,|L11.164|
000050  f7fffffe          BL       CLK_EnableModuleClock
;;;112    	
;;;113    	/* Enable I2C1 module clock */
;;;114        CLK_EnableModuleClock(I2C1_MODULE);
000054  4813              LDR      r0,|L11.164|
000056  1c40              ADDS     r0,r0,#1
000058  f7fffffe          BL       CLK_EnableModuleClock
;;;115    
;;;116    	/* Enable ADC module clock */
;;;117       // CLK_EnableModuleClock(ADC_MODULE);
;;;118    
;;;119        /* Enable PWM0 module clock */
;;;120        CLK_EnableModuleClock(PWM0_MODULE);
00005c  4812              LDR      r0,|L11.168|
00005e  f7fffffe          BL       CLK_EnableModuleClock
;;;121    
;;;122    	/* Enable timer clock */
;;;123    	CLK_EnableModuleClock(TMR0_MODULE);
000062  4812              LDR      r0,|L11.172|
000064  f7fffffe          BL       CLK_EnableModuleClock
;;;124        CLK_EnableModuleClock(RTC_MODULE);
000068  4811              LDR      r0,|L11.176|
00006a  f7fffffe          BL       CLK_EnableModuleClock
;;;125    
;;;126        /* Select UART module clock source as HXT and UART module clock divider as 1 */
;;;127        CLK_SetModuleClock(UART0_MODULE, CLK_CLKSEL1_UARTSEL_HXT, CLK_CLKDIV0_UART(1));
00006e  2200              MOVS     r2,#0
000070  4611              MOV      r1,r2
000072  4620              MOV      r0,r4
000074  f7fffffe          BL       CLK_SetModuleClock
;;;128    	
;;;129    	CLK_SetModuleClock(UART1_MODULE, CLK_CLKSEL1_UARTSEL_HXT, CLK_CLKDIV0_UART(1));
000078  2200              MOVS     r2,#0
00007a  4611              MOV      r1,r2
00007c  4628              MOV      r0,r5
00007e  f7fffffe          BL       CLK_SetModuleClock
;;;130    
;;;131    	CLK_SetModuleClock(UART2_MODULE, CLK_CLKSEL1_UARTSEL_HXT, CLK_CLKDIV0_UART(1));
000082  2200              MOVS     r2,#0
000084  4611              MOV      r1,r2
000086  4630              MOV      r0,r6
000088  f7fffffe          BL       CLK_SetModuleClock
;;;132    	CLK_SetModuleClock(USCI0_MODULE, CLK_CLKSEL1_UARTSEL_HXT, CLK_CLKDIV0_UART(1));
00008c  2200              MOVS     r2,#0
00008e  4611              MOV      r1,r2
000090  4638              MOV      r0,r7
000092  f7fffffe          BL       CLK_SetModuleClock
;;;133    
;;;134        /* ADC clock source is 22.1184MHz, set divider to 7, ADC clock is 22.1184/7 MHz */
;;;135       // CLK_SetModuleClock(ADC_MODULE, CLK_CLKSEL1_ADCSEL_HIRC, CLK_CLKDIV0_ADC(7));
;;;136    
;;;137    	/* Configure the GPB6-,GPB7 ADC analog input pins */
;;;138      //  SYS->GPB_MFPL &= ~(SYS_GPB_MFPL_PB6MFP_Msk | SYS_GPB_MFPL_PB7MFP_Msk);
;;;139       // SYS->GPB_MFPL |= SYS_GPB_MFPL_PB6MFP_ADC0_CH14 | SYS_GPB_MFPL_PB7MFP_ADC0_CH15 ;
;;;140    	
;;;141        /* Select PWM01 module clock source */
;;;142       // CLK_SetModuleClock(PWM0_MODULE, CLK_CLKSEL1_PWM0SEL_PCLK0, 0);
;;;143    
;;;144    }
000096  bdf8              POP      {r3-r7,pc}
;;;145    
                          ENDP

                  |L11.152|
                          DCD      0x044aa200
                  |L11.156|
                          DCD      0x57803d10
                  |L11.160|
                          DCD      0x80000008
                  |L11.164|
                          DCD      0x40000008
                  |L11.168|
                          DCD      0x53c00014
                  |L11.172|
                          DCD      0x5e800002
                  |L11.176|
                          DCD      0x63200001

                          AREA ||i.SYS_Init||, CODE, READONLY, ALIGN=2

                  SYS_Init PROC
;;;247    /*---------------------------------------------------------------------------------------------------------*/
;;;248    void SYS_Init(void)
000000  b510              PUSH     {r4,lr}
;;;249    {
;;;250        /* Unlock protected registers */
;;;251        SYS_UnlockReg();
000002  f7fffffe          BL       SYS_UnlockReg
;;;252    	
;;;253    	SYS_Clock_init();
000006  f7fffffe          BL       SYS_Clock_init
;;;254    	TYM_gpio_init();
00000a  f7fffffe          BL       TYM_gpio_init
;;;255    	hal_adc_init();
00000e  f7fffffe          BL       hal_adc_init
000012  490b              LDR      r1,|L12.64|
000014  2000              MOVS     r0,#0
000016  6008              STR      r0,[r1,#0]
;;;256    
;;;257    	/* Lock protected registers */
;;;258        SYS_LockReg();
;;;259    
;;;260        /* Start Timer1 to measure delay period of TIMER_Delay API is reasonable or not */
;;;261       // TIMER1->CTL = TIMER_PERIODIC_MODE | (12 - 1);	
;;;262    
;;;263    	TYM_sys_PowerManger_init();
000018  f7fffffe          BL       TYM_sys_PowerManger_init
;;;264    	
;;;265    	drv_led_init();
00001c  f7fffffe          BL       drv_led_init
;;;266    
;;;267    	Drv_FourG_Gpio_Init();
000020  f7fffffe          BL       Drv_FourG_Gpio_Init
;;;268    	
;;;269    	SYS_BusInit();
000024  f7fffffe          BL       SYS_BusInit
;;;270    	
;;;271    	Hal_Timer1_Init(); // kim
000028  f7fffffe          BL       Hal_Timer1_Init
;;;272    
;;;273    	TYM_DriverInit();
00002c  f7fffffe          BL       TYM_DriverInit
;;;274    	
;;;275    	Core_Msg_Init();
000030  f7fffffe          BL       Core_Msg_Init
;;;276    
;;;277    	hal_fmc_init();
000034  f7fffffe          BL       hal_fmc_init
;;;278    
;;;279    	AMP_FaultPinDetectInit();
000038  f7fffffe          BL       AMP_FaultPinDetectInit
;;;280    
;;;281    	//srv_rtc_init();
;;;282    
;;;283    }
00003c  bd10              POP      {r4,pc}
;;;284    
                          ENDP

00003e  0000              DCW      0x0000
                  |L12.64|
                          DCD      0x50000100

                          AREA ||i.SYS_Status||, CODE, READONLY, ALIGN=2

                  SYS_Status PROC
;;;309    
;;;310    void SYS_Status(void)
000000  b570              PUSH     {r4-r6,lr}
;;;311    {
;;;312    	TYM_SysPower12V_3V3_onoff(1);
000002  2001              MOVS     r0,#1
000004  f7fffffe          BL       TYM_SysPower12V_3V3_onoff
;;;313    	Global_datas.g_mode_status = POWER_ON_MODE;	
000008  4c0d              LDR      r4,|L13.64|
00000a  2500              MOVS     r5,#0
00000c  71e5              STRB     r5,[r4,#7]
;;;314    	Global_datas.g_4g_initing = 1;
00000e  2001              MOVS     r0,#1
000010  7220              STRB     r0,[r4,#8]
;;;315    	Global_datas.eq_mode = EQ_MODE_INDOOR;
000012  74a0              STRB     r0,[r4,#0x12]
;;;316    	Global_datas.volume = VOLUME_DEFAULT;
000014  2005              MOVS     r0,#5
000016  74e0              STRB     r0,[r4,#0x13]
;;;317    	TYM_drv_powerkeepon(1);
000018  2001              MOVS     r0,#1
00001a  f7fffffe          BL       TYM_drv_powerkeepon
;;;318    	Drv_4GMoudle_PowerUp(1);
00001e  2001              MOVS     r0,#1
000020  f7fffffe          BL       Drv_4GMoudle_PowerUp
;;;319    	drv_FourGmodel_power_key_SetHi();
000024  f7fffffe          BL       drv_FourGmodel_power_key_SetHi
;;;320    	TimeOutSet(&ModulePowerUpPinTimer,3000);
000028  4906              LDR      r1,|L13.68|
00002a  4807              LDR      r0,|L13.72|
00002c  f7fffffe          BL       TimeOutSet
;;;321    	TimeOutSet(&PoweroffLedTimer, 100);
000030  2164              MOVS     r1,#0x64
000032  4806              LDR      r0,|L13.76|
000034  f7fffffe          BL       TimeOutSet
;;;322    	Drv_audio_init();
000038  f7fffffe          BL       Drv_audio_init
;;;323    	Global_datas.shoutting_down = 0;
00003c  7465              STRB     r5,[r4,#0x11]
;;;324    	
;;;325    	//drv_Cmd_Send2NCU031(0x70, 0x16,0x00);// power on cmd to LCD board
;;;326    	
;;;327    }
00003e  bd70              POP      {r4-r6,pc}
;;;328    
                          ENDP

                  |L13.64|
                          DCD      Global_datas+0x20
                  |L13.68|
                          DCD      0x00000bb8
                  |L13.72|
                          DCD      ModulePowerUpPinTimer
                  |L13.76|
                          DCD      PoweroffLedTimer

                          AREA ||i.SYS_UnlockReg||, CODE, READONLY, ALIGN=2

                  SYS_UnlockReg PROC
;;;1786     */
;;;1787   __STATIC_INLINE void SYS_UnlockReg(void)
000000  b510              PUSH     {r4,lr}
;;;1788   {
;;;1789       do
;;;1790       {
;;;1791           SYS->REGLCTL = 0x59;
000002  2159              MOVS     r1,#0x59
000004  4804              LDR      r0,|L14.24|
;;;1792           SYS->REGLCTL = 0x16;
000006  2216              MOVS     r2,#0x16
;;;1793           SYS->REGLCTL = 0x88;
000008  2388              MOVS     r3,#0x88
                  |L14.10|
00000a  6001              STR      r1,[r0,#0]            ;1791
00000c  6002              STR      r2,[r0,#0]            ;1792
00000e  6003              STR      r3,[r0,#0]
;;;1794       }
;;;1795       while(SYS->REGLCTL == 0);
000010  6804              LDR      r4,[r0,#0]
000012  2c00              CMP      r4,#0
000014  d0f9              BEQ      |L14.10|
;;;1796   }
000016  bd10              POP      {r4,pc}
;;;1797   
                          ENDP

                  |L14.24|
                          DCD      0x50000100

                          AREA ||i.SendFmFreqToSubBoard||, CODE, READONLY, ALIGN=2

                  SendFmFreqToSubBoard PROC
;;;1232   
;;;1233   void SendFmFreqToSubBoard(void)
000000  b510              PUSH     {r4,lr}
;;;1234   {
;;;1235   	uint8_t freq_hi = 0, freq_low = 0;
;;;1236   
;;;1237   	freq_hi = Global_datas.FmData.Frequency>>8;
000002  4804              LDR      r0,|L15.20|
000004  6c00              LDR      r0,[r0,#0x40]  ; Global_datas
000006  0401              LSLS     r1,r0,#16
;;;1238   	freq_low = Global_datas.FmData.Frequency & 0xff;
000008  b2c2              UXTB     r2,r0
00000a  0e09              LSRS     r1,r1,#24             ;1237
;;;1239   	
;;;1240   	drv_Cmd_Send2NCU031(0x72,freq_hi,freq_low);
00000c  2072              MOVS     r0,#0x72
00000e  f7fffffe          BL       drv_Cmd_Send2NCU031
;;;1241   }
000012  bd10              POP      {r4,pc}
;;;1242   
                          ENDP

                  |L15.20|
                          DCD      Global_datas

                          AREA ||i.SysIdle||, CODE, READONLY, ALIGN=2

                  SysIdle PROC
;;;284    
;;;285    void SysIdle(void)
000000  b570              PUSH     {r4-r6,lr}
;;;286    {
;;;287    	Global_datas.state = SYS_PLAY_STATE_IDLE;
000002  4c0f              LDR      r4,|L16.64|
000004  2001              MOVS     r0,#1
000006  7660              STRB     r0,[r4,#0x19]
;;;288    	Global_datas.g_4g_initing = 0;
000008  2500              MOVS     r5,#0
00000a  7225              STRB     r5,[r4,#8]
;;;289    	Global_datas.mode_switching = 0;
00000c  7525              STRB     r5,[r4,#0x14]
;;;290    	Global_datas.power_4g = 0;
00000e  7265              STRB     r5,[r4,#9]
;;;291    	Global_datas.mute = 0;
000010  7565              STRB     r5,[r4,#0x15]
;;;292    	
;;;293    	drv_FourGmodel_power_key_SetLow();  // when powerup , need to pull hi 3 second then pull down.
000012  f7fffffe          BL       drv_FourGmodel_power_key_SetLow
;;;294    	TimeOutSet(&SysTimer_1s,1000);
000016  217d              MOVS     r1,#0x7d
000018  00c9              LSLS     r1,r1,#3
00001a  480a              LDR      r0,|L16.68|
00001c  f7fffffe          BL       TimeOutSet
;;;295    	Global_datas.SubBoard.subboard_online = 0;	
;;;296    
;;;297    	Global_datas.FmData.Frequency = 8750;
000020  4621              MOV      r1,r4
000022  7725              STRB     r5,[r4,#0x1c]         ;295
000024  4808              LDR      r0,|L16.72|
000026  3920              SUBS     r1,r1,#0x20
;;;298    	Global_datas.FmData.station_num = 0;
000028  6408              STR      r0,[r1,#0x40]  ; Global_datas
00002a  4608              MOV      r0,r1
00002c  3080              ADDS     r0,r0,#0x80
00002e  7105              STRB     r5,[r0,#4]
;;;299    	Global_datas.ir_bak_key = IN_KEY_NONE;
000030  7605              STRB     r5,[r0,#0x18]
;;;300    	Global_datas.MW_radio_net_type = NET_TYPE_NONE;
000032  76e5              STRB     r5,[r4,#0x1b]
;;;301    
;;;302    	DataRead();
000034  f7fffffe          BL       DataRead
;;;303    	SendFmFreqToSubBoard();
000038  f7fffffe          BL       SendFmFreqToSubBoard
;;;304    
;;;305    
;;;306    	
;;;307    	
;;;308    }
00003c  bd70              POP      {r4-r6,pc}
;;;309    
                          ENDP

00003e  0000              DCW      0x0000
                  |L16.64|
                          DCD      Global_datas+0x20
                  |L16.68|
                          DCD      SysTimer_1s
                  |L16.72|
                          DCD      0x0000222e

                          AREA ||i.Sysctrl||, CODE, READONLY, ALIGN=2

                  Sysctrl PROC
;;;1507   
;;;1508   void Sysctrl(void)
000000  b5f0              PUSH     {r4-r7,lr}
;;;1509   {
;;;1510   	uint8_t temp_fm = 0;
;;;1511   	uint8_t temp_valid = 0;
;;;1512   	
;;;1513   	switch(Global_datas.inputmessage)
000002  4cfe              LDR      r4,|L17.1020|
000004  b087              SUB      sp,sp,#0x1c           ;1509
000006  7de2              LDRB     r2,[r4,#0x17]  ; Global_datas
000008  2100              MOVS     r1,#0                 ;1510
00000a  261c              MOVS     r6,#0x1c
;;;1514   	{
;;;1515   		case IN_KEY_POWER_SP:
;;;1516   		case IR_KEY_MODE:
;;;1517   
;;;1518   			if(Global_datas.state != SYS_PLAY_STATE_IDLE)
;;;1519   			{
;;;1520   			   Global_datas.event = SYS_PLAY_EVENT_MODE_SWITCH;
;;;1521   			}
;;;1522   			
;;;1523   			break;
;;;1524   
;;;1525   		case IN_KEY_POWER_CP:
;;;1526   		case IR_KEY_POWER:
;;;1527   					
;;;1528   			 if(Global_datas.state == SYS_PLAY_STATE_IDLE)
;;;1529   			 {
;;;1530   				Global_datas.event = SYS_PLAY_EVENT_POWERING_UP;
;;;1531   			 }
;;;1532   			 else if(Global_datas.state != SYS_PLAY_STATE_SHUTTING_DOWN)
;;;1533   			 {
;;;1534   			 	Global_datas.event = SYS_PLAY_EVENT_SHUTTING_DOWN;
;;;1535   			 }
;;;1536   			break;
;;;1537   
;;;1538   		case IR_KEY_VOLUME_DOWN:
;;;1539   		case IR_KEY_VOLUME_DOWN_CP:
;;;1540   		case IN_KEY_VOL_SUB_S:
;;;1541   	
;;;1542   			Global_datas.event = SYS_PLAY_EVENT_VOL_DOWN;
;;;1543   			break;
;;;1544   
;;;1545   		case IR_KEY_VOLUME_UP:
;;;1546   		case IR_KEY_VOLUME_UP_CP:
;;;1547   		case IN_KEY_VOL_ADD_S:
;;;1548   			
;;;1549   			Global_datas.event = SYS_PLAY_EVENT_VOL_UP;
;;;1550   			break;
;;;1551   
;;;1552   		case IN_KEY_DEFAULT_VOLUME_SET:
;;;1553   			Global_datas.event = SYS_PLAY_EVENT_DEFAULT_VOLUME_SET;
;;;1554   			break;
;;;1555   
;;;1556   		case IN_KEY_NEXT_SONG_S:
;;;1557   		case IR_KEY_NEXT_SONG:
;;;1558   
;;;1559   		if(Global_datas.state == SYS_PLAY_STATE_FM)
;;;1560   		{
;;;1561   			Global_datas.event = SYS_PLAY_EVENT_FM_NEXT_STATION;
;;;1562   		}
;;;1563   		else 
;;;1564   		{
;;;1565   			Global_datas.event = SYS_PLAY_EVENT_NEXT_SONG;
;;;1566   		}
;;;1567   
;;;1568   		
;;;1569   		break;
;;;1570   
;;;1571   		case IN_KEY_PREV_SONG_S:
;;;1572   		case IR_KEY_PREV_SONG:
;;;1573   
;;;1574   			if(Global_datas.state == SYS_PLAY_STATE_FM)
;;;1575   			{
;;;1576   				Global_datas.event = SYS_PLAY_EVENT_FM_PREV_STATION;
;;;1577   			}
;;;1578   			else 
;;;1579   			{
;;;1580   				Global_datas.event = SYS_PLAY_EVENT_PREV_SONG;
;;;1581   			}
;;;1582   
;;;1583   		break;		
;;;1584   		
;;;1585   		case IN_KEY_PLAY_S:
;;;1586   		case IR_KEY_PLAY_PAUSE:
;;;1587   
;;;1588   			Global_datas.event = SYS_PLAY_EVENT_PLAY_PAUSE;
;;;1589   
;;;1590   		break;	
;;;1591   
;;;1592   		case IN_KEY_RADIO_NEXT_S:
;;;1593   		case IR_KEY_NEXT_STATION:
;;;1594   			
;;;1595   
;;;1596   			if(Global_datas.state == SYS_PLAY_STATE_MW_RADIO)
;;;1597   			{
;;;1598   				Global_datas.event = SYS_PLAY_EVENT_MW_RADIO_NEXT_STATION;
;;;1599   			}
;;;1600   			else if(Global_datas.state == SYS_PLAY_STATE_FM)
;;;1601   			{
;;;1602   				Global_datas.event = SYS_PLAY_EVENT_FM_SEEK_UP;
;;;1603   			}
;;;1604   
;;;1605   		break;
;;;1606   
;;;1607   		case IN_KEY_RADIO_PREV_S:
;;;1608   		case IR_KEY_PREV_STATION:
;;;1609   			
;;;1610   
;;;1611   			if(Global_datas.state == SYS_PLAY_STATE_MW_RADIO)
;;;1612   			{
;;;1613   				Global_datas.event = SYS_PLAY_EVENT_MW_RADIO_PREV_STATION;
;;;1614   			}
;;;1615   			else if(Global_datas.state == SYS_PLAY_STATE_FM)
;;;1616   			{
;;;1617   				Global_datas.event = SYS_PLAY_EVENT_FM_SEEK_DOWN;
;;;1618   			}
;;;1619   
;;;1620   		break;		
;;;1621   
;;;1622   		case IN_KEY_EQ_INDOOR_S:
;;;1623   		case IR_KEY_EQ_INDOOR:
;;;1624   
;;;1625   		
;;;1626   			Global_datas.event = SYS_PLAY_EVENT_EQ_INDOOR_SET;
;;;1627   
;;;1628   			if(Global_datas.state == SYS_PLAY_STATE_FM) Global_datas.event = SYS_PLAY_EVENT_FM_PREV_STEP;
;;;1629   		    
;;;1630   			break;		
;;;1631   		
;;;1632   		case IN_KEY_EQ_OUTDOOR_S:
;;;1633   		case IR_KEY_EQ_OUTDOOR:
;;;1634   
;;;1635   		
;;;1636   			Global_datas.event = SYS_PLAY_EVENT_EQ_OUTDOOR_SET;
;;;1637   		
;;;1638   			if(Global_datas.state == SYS_PLAY_STATE_FM) Global_datas.event = SYS_PLAY_EVENT_FM_NEXT_STEP;
;;;1639   			
;;;1640   			break;	
;;;1641   
;;;1642   			
;;;1643   
;;;1644   		case IN_KEY_PAIR_SP:
;;;1645   		case IN_KEY_RADIO_NET_SWITCH_S:
;;;1646   
;;;1647   		
;;;1648   			Global_datas.event = SYS_PLAY_EVENT_RADIO_NET_SWITCH;
;;;1649   			
;;;1650   			break;		
;;;1651   
;;;1652   
;;;1653   		case IN_KEY_PAIR_CP:
;;;1654   		case IN_KEY_RADIO_NET_PARIING_S:
;;;1655   
;;;1656   			Global_datas.event = SYS_PLAY_EVENT_RADIO_NET_PAIRING;
;;;1657   			break;
;;;1658   
;;;1659   
;;;1660   		case IR_KEY_POWER_CP:
;;;1661   			break;
;;;1662   
;;;1663   		case IN_KEY_INIT_FINISH_CMD:
;;;1664   
;;;1665   			Global_datas.event = SYS_PLAY_EVENT_INIT_FINISH;
;;;1666   
;;;1667   			break;
;;;1668   
;;;1669   		case IN_KEY_FM_MODE_S: 
;;;1670   			
;;;1671   			Global_datas.event = SYS_PLAY_EVENT_SW_TO_FM_MODE;
;;;1672   			break;
;;;1673   		case IN_KEY_AUX_MODE_S: 
;;;1674   			
;;;1675   			Global_datas.event = SYS_PLAY_EVENT_SW_TO_AUX_MODE;
;;;1676   			break;		
;;;1677   		
;;;1678   		case IN_KEY_MW_RADIO_MODE_S: 
;;;1679   			
;;;1680   			Global_datas.event = SYS_PLAY_EVENT_SW_TO_MW_RADIO_MODE;
;;;1681   			break;
;;;1682   
;;;1683   		case IN_KEY_BT_MODE_S: 
;;;1684   			
;;;1685   			Global_datas.event = SYS_PLAY_EVENT_SW_TO_BT_MODE;
;;;1686   			break;		
;;;1687   
;;;1688   		case IN_KEY_TURNOFF_4G_MOUDLE:
;;;1689   			Global_datas.event = SYS_PLAY_EVENT_TURN_OFF_4G_MOUDLE;
;;;1690   			break;
;;;1691   		case IN_KEY_REBOOT_4G_MOUDLE:
;;;1692   
;;;1693   			Global_datas.event = SYS_PLAY_EVENT_REBOOT_4G_MOUDLE;
;;;1694   			
;;;1695   			break;
;;;1696   
;;;1697   		case IR_KEY_PLAY_PAUSE_CP:
;;;1698   
;;;1699   			if(Global_datas.state == SYS_PLAY_STATE_FM)
;;;1700   			{
;;;1701   				Global_datas.event = SYS_PLAY_EVENT_AUTO_SEARCH;
00000c  2517              MOVS     r5,#0x17
00000e  7e60              LDRB     r0,[r4,#0x19]         ;1518
000010  2701              MOVS     r7,#1                 ;1518
000012  0013              MOVS     r3,r2                 ;1513
000014  f7fffffe          BL       __ARM_common_switch8
000018  3057191d          DCB      0x30,0x57,0x19,0x1d
00001c  57888a57          DCB      0x57,0x88,0x8a,0x57
000020  8f919395          DCB      0x8f,0x91,0x93,0x95
000024  27254b52          DCB      0x27,0x25,0x4b,0x52
000028  57372b31          DCB      0x57,0x37,0x2b,0x31
00002c  a8a4a142          DCB      0xa8,0xa4,0xa1,0x42
000030  39888a97          DCB      0x39,0x88,0x8a,0x97
000034  99291d57          DCB      0x99,0x29,0x1d,0x57
000038  19272725          DCB      0x19,0x27,0x27,0x25
00003c  2531572b          DCB      0x25,0x31,0x57,0x2b
000040  5737a142          DCB      0x57,0x37,0xa1,0x42
000044  394b5257          DCB      0x39,0x4b,0x52,0x57
000048  8c57              DCB      0x8c,0x57
00004a  2801              CMP      r0,#1                 ;1518
00004c  d03b              BEQ      |L17.198|
00004e  2304              MOVS     r3,#4                 ;1520
000050  e032              B        |L17.184|
000052  2801              CMP      r0,#1                 ;1528
000054  d003              BEQ      |L17.94|
000056  2804              CMP      r0,#4                 ;1532
000058  d035              BEQ      |L17.198|
00005a  2302              MOVS     r3,#2                 ;1534
00005c  e02c              B        |L17.184|
                  |L17.94|
00005e  76a7              STRB     r7,[r4,#0x1a]         ;1530
000060  e031              B        |L17.198|
000062  2306              MOVS     r3,#6                 ;1542
000064  e028              B        |L17.184|
000066  2305              MOVS     r3,#5                 ;1549
000068  e026              B        |L17.184|
00006a  2207              MOVS     r2,#7                 ;1553
00006c  e061              B        |L17.306|
00006e  2807              CMP      r0,#7                 ;1559
000070  d001              BEQ      |L17.118|
000072  2308              MOVS     r3,#8                 ;1565
000074  e020              B        |L17.184|
                  |L17.118|
000076  231d              MOVS     r3,#0x1d              ;1561
000078  e01e              B        |L17.184|
00007a  2807              CMP      r0,#7                 ;1574
00007c  d001              BEQ      |L17.130|
00007e  2309              MOVS     r3,#9                 ;1580
000080  e01a              B        |L17.184|
                  |L17.130|
000082  231e              MOVS     r3,#0x1e              ;1576
000084  e018              B        |L17.184|
000086  230a              MOVS     r3,#0xa               ;1588
000088  e016              B        |L17.184|
00008a  2805              CMP      r0,#5                 ;1596
00008c  d002              BEQ      |L17.148|
00008e  2807              CMP      r0,#7                 ;1600
000090  d002              BEQ      |L17.152|
000092  e018              B        |L17.198|
                  |L17.148|
000094  230b              MOVS     r3,#0xb               ;1598
000096  e00f              B        |L17.184|
                  |L17.152|
000098  2319              MOVS     r3,#0x19              ;1602
00009a  e00d              B        |L17.184|
00009c  2805              CMP      r0,#5                 ;1611
00009e  d002              BEQ      |L17.166|
0000a0  2807              CMP      r0,#7                 ;1615
0000a2  d002              BEQ      |L17.170|
0000a4  e00f              B        |L17.198|
                  |L17.166|
0000a6  230c              MOVS     r3,#0xc               ;1613
0000a8  e006              B        |L17.184|
                  |L17.170|
0000aa  231a              MOVS     r3,#0x1a              ;1617
0000ac  e004              B        |L17.184|
0000ae  230d              MOVS     r3,#0xd               ;1626
0000b0  76a3              STRB     r3,[r4,#0x1a]         ;1626
0000b2  2807              CMP      r0,#7                 ;1628
0000b4  d107              BNE      |L17.198|
0000b6  231b              MOVS     r3,#0x1b              ;1628
                  |L17.184|
0000b8  76a3              STRB     r3,[r4,#0x1a]         ;1628
0000ba  e004              B        |L17.198|
0000bc  230e              MOVS     r3,#0xe               ;1636
0000be  76a3              STRB     r3,[r4,#0x1a]         ;1636
0000c0  2807              CMP      r0,#7                 ;1638
0000c2  d100              BNE      |L17.198|
0000c4  76a6              STRB     r6,[r4,#0x1a]         ;1638
                  |L17.198|
;;;1702   			}
;;;1703   			else if(Global_datas.state == SYS_PLAY_STATE_BT)
;;;1704   			{
;;;1705   				Global_datas.event = SYS_PLAY_EVENT_BT_PAIRING;			
;;;1706   			}
;;;1707   			break;
;;;1708   			
;;;1709   
;;;1710   		case IN_KEY_AUTO_SEARCH_S:
;;;1711   
;;;1712   			if(Global_datas.state == SYS_PLAY_STATE_FM)
;;;1713   			{
;;;1714   				Global_datas.event = SYS_PLAY_EVENT_AUTO_SEARCH;
;;;1715   			}
;;;1716   			else if(Global_datas.state == SYS_PLAY_STATE_BT)
;;;1717   			{
;;;1718   				Global_datas.event = SYS_PLAY_EVENT_BT_PAIRING;
;;;1719   			}
;;;1720   			
;;;1721   			break;
;;;1722   
;;;1723   			
;;;1724   
;;;1725   		case IN_KEY_FM_PREV_FREQ_S:
;;;1726   
;;;1727   		    if(Global_datas.state == SYS_PLAY_STATE_FM)	Global_datas.event = SYS_PLAY_EVENT_FM_PREV_STEP; 		
;;;1728   			
;;;1729   			break;
;;;1730   
;;;1731   		case IN_KEY_FM_NEXT_FREQ_S:
;;;1732   
;;;1733   			if(Global_datas.state == SYS_PLAY_STATE_FM) Global_datas.event = SYS_PLAY_EVENT_FM_NEXT_STEP; 		
;;;1734   		
;;;1735   			break;
;;;1736   			
;;;1737   		default:break;
;;;1738   			
;;;1739   	}
;;;1740   
;;;1741   	if(Global_datas.inputmessage)
0000c6  2a00              CMP      r2,#0
0000c8  d002              BEQ      |L17.208|
                  |L17.202|
;;;1742   	{
;;;1743   		Global_datas.inputmessage = 0;
0000ca  2200              MOVS     r2,#0
0000cc  75e2              STRB     r2,[r4,#0x17]
;;;1744   		Global_datas.key_led_blink = 1;
0000ce  7427              STRB     r7,[r4,#0x10]
                  |L17.208|
0000d0  4bca              LDR      r3,|L17.1020|
0000d2  4dca              LDR      r5,|L17.1020|
0000d4  469c              MOV      r12,r3                ;1513
0000d6  3560              ADDS     r5,r5,#0x60           ;1513
;;;1745   	}
;;;1746   
;;;1747   
;;;1748   	switch(Global_datas.event)
0000d8  7ea2              LDRB     r2,[r4,#0x1a]  ; Global_datas
0000da  7c9b              LDRB     r3,[r3,#0x12]         ;1513
;;;1749   	{
;;;1750   	
;;;1751   		case SYS_PLAY_EVENT_POWERING_UP:
;;;1752   
;;;1753   
;;;1754   	//	SYS_UnlockReg();
;;;1755   
;;;1756   		
;;;1757   		/* Set core clock as PLL_CLOCK from PLL and SysTick source to HCLK/2*/
;;;1758       //	CLK_SetCoreClock(PLL_CLOCK);
;;;1759       //	CLK_SetSysTickClockSrc(CLK_CLKSEL0_STCLKSEL_HCLK_DIV2);	
;;;1760   
;;;1761   	//	SYS_LockReg();
;;;1762   
;;;1763   
;;;1764   
;;;1765   
;;;1766   		
;;;1767   		   // SYS_Clock_Enable();
;;;1768   
;;;1769   			TYM_SysPower12V_3V3_onoff(1);
;;;1770   			Global_datas.state = SYS_PLAY_STATE_POWERUP;	
;;;1771   			Global_datas.g_4g_initing = 1;
;;;1772   			Global_datas.eq_mode = EQ_MODE_INDOOR;
;;;1773   			Global_datas.volume = VOLUME_DEFAULT;
;;;1774   			TYM_drv_powerkeepon(1);
;;;1775   			Drv_4GMoudle_PowerUp(1);
;;;1776   			
;;;1777   			AdapterPowerModeCtrl(1);
;;;1778   			
;;;1779   			Global_datas.power_4g = 1;
;;;1780   			drv_FourGmodel_power_key_SetHi();
;;;1781   			TimeOutSet(&ModulePowerUpPinTimer,3000);
;;;1782   			TimeOutSet(&PoweroffLedTimer, 100);
;;;1783   			Drv_audio_init();
;;;1784   			Global_datas.shoutting_down = 0;	
;;;1785   
;;;1786   			drv_Cmd_Send2NCU031(0x70, 0x16,0x00);// power on cmd to LCD board
;;;1787   
;;;1788   			Fm_Rest();
;;;1789   			
;;;1790   			break;
;;;1791   			
;;;1792   		case SYS_PLAY_EVENT_REBOOT_4G_MOUDLE:
;;;1793   
;;;1794   			TYM_SysPower12V_3V3_onoff(1);
;;;1795   			Global_datas.state = SYS_PLAY_STATE_REBOOT;	
;;;1796   			Global_datas.g_4g_initing = 1;
;;;1797   			
;;;1798   			Drv_4GMoudle_PowerUp(1);
;;;1799   			Global_datas.power_4g = 1;
;;;1800   			drv_FourGmodel_power_key_SetHi();
;;;1801   			TimeOutSet(&ModulePowerUpPinTimer,3000);
;;;1802   			TimeOutSet(&PoweroffLedTimer, 100);
;;;1803   			Global_datas.shoutting_down = 0;	
;;;1804   			drv_audio_4G_Channel();
;;;1805   			break;
;;;1806   
;;;1807   			
;;;1808   
;;;1809   		case SYS_PLAY_EVENT_SHUTTING_DOWN:
;;;1810   
;;;1811   			//PowerOff();
;;;1812   			//SysIdle();	
;;;1813   
;;;1814   			drv_Cmd_Send2NCU031(0x70, 0x15,0x00);// power off cmd to LCD board
;;;1815   			Cmd_Send2FourG( 0x03,0x55,0x00); // poweroff cmd to 4G
;;;1816   			//Drv_4GMoudle_PowerUp(0);  // wait for 4g modle ready ,than turn off power, don't off here.
;;;1817   			drv_led_init();// led all off
;;;1818   			Drv_audio_powerdown();
;;;1819   			Global_datas.shoutting_down = 1;
;;;1820   			TimeOutSet(&PoweroffLedTimer, 5000);
;;;1821   
;;;1822   			Global_datas.state = SYS_PLAY_STATE_SHUTTING_DOWN;
;;;1823   			Global_datas.g_4g_initing = 0;
;;;1824   			Global_datas.mode_switching = 0;
;;;1825   			Global_datas.mute = 0;
;;;1826   			drv_FourGmodel_power_key_SetLow();  // when powerup , need to pull hi 3 second then pull down.
;;;1827   			Global_datas.SubBoard.subboard_online = 0;				
;;;1828   			
;;;1829   			break;			
;;;1830   
;;;1831   		case SYS_PLAY_EVENT_INIT_FINISH:
;;;1832   			
;;;1833   			Global_datas.g_4g_initing = 0;
;;;1834   			// send start cmd to sub board
;;;1835   			if(Global_datas.SubBoard.subboard_online && (Global_datas.state != SYS_PLAY_STATE_REBOOT))
;;;1836   			{
;;;1837   				drv_Cmd_Send2NCU031(0x03,0x71,19); // system init finish state send to sub board.
;;;1838   				drv_Cmd_Send2NCU031(0x07, Global_datas.volume,0x00);// send volume
;;;1839   				
;;;1840   				switch(Global_datas.SubBoard.playmode)
;;;1841   				{
;;;1842   					case PLAY_MODE_WIFI:
;;;1843   						Cmd_Send2FourG(0x03,0x15,0);
;;;1844   						drv_Cmd_Send2NCU031(0x70, 0x11,0x00);
;;;1845   					
;;;1846   						Global_datas.state = SYS_PLAY_STATE_MW_RADIO;
;;;1847   					    drv_audio_4G_Channel();
;;;1848   						break;
;;;1849   
;;;1850   					case PLAY_MODE_BT:
;;;1851   						Cmd_Send2FourG(0x03,0x16,0);
;;;1852   						drv_Cmd_Send2NCU031(0x70, 0x10,0x00);
;;;1853   						Global_datas.state = SYS_PLAY_STATE_BT;
;;;1854   					    drv_audio_4G_Channel();
;;;1855   						break;
;;;1856   
;;;1857   					case PLAY_MODE_AUX:
;;;1858   						Cmd_Send2FourG(0x03,0x17,0);
;;;1859   						drv_Cmd_Send2NCU031(0x70, 0x12,0x00);
;;;1860   						Global_datas.state = SYS_PLAY_STATE_AUX;
;;;1861   					    drv_audio_AuxIn_Channel();
;;;1862   						break;
;;;1863   
;;;1864   					case PLAY_MODE_FM:
;;;1865   						Global_datas.state = SYS_PLAY_STATE_FM;
;;;1866   						Global_datas.fm_delay_time = FM_DELAY_TIME;
;;;1867   						Global_datas.FmData.fmstate = FM_STATE_ON;
;;;1868   									
;;;1869   						drv_Cmd_Send2NCU031(0x70, 0x13,0x00);// change to fm mode	
;;;1870   						Cmd_Send2FourG(0x03 ,0x18,0x00);
;;;1871   						//si47xxFMRX_powerup();
;;;1872   						//si47xxFMRX_tune(Global_datas.FmData.Frequency);
;;;1873   						test_FMRXtune();
;;;1874   						drv_audio_FM_Channel(); 
;;;1875   						SendFmFreqToSubBoard();
;;;1876   
;;;1877   						break;
;;;1878   
;;;1879   					default:
;;;1880   						Cmd_Send2FourG(0x03,0x15,0);
;;;1881   						Global_datas.state = SYS_PLAY_STATE_MW_RADIO;	
;;;1882   						drv_audio_4G_Channel();
;;;1883   						break;
;;;1884   				}
;;;1885   
;;;1886   				Drv_Dap_vol_set(Global_datas.volume);
;;;1887   			}
;;;1888   			else
;;;1889   			{
;;;1890   				Cmd_Send2FourG(0x03,0x15,0);
;;;1891   				Global_datas.state = SYS_PLAY_STATE_MW_RADIO;
;;;1892   				drv_audio_4G_Channel();
;;;1893   				Drv_Dap_vol_set(Global_datas.volume);
;;;1894   			}
;;;1895   
;;;1896   			//drv_Cmd_Send2NCU031(0x08,0,0); send start CMD to sub board
;;;1897   			
;;;1898   			break;
;;;1899   
;;;1900   		case SYS_PLAY_EVENT_MODE_SWITCH:
;;;1901   			srv_key_mode_handler();
;;;1902   			Drv_Dap_vol_set(Global_datas.volume);
;;;1903   			break;
;;;1904   
;;;1905   		case SYS_PLAY_EVENT_SW_TO_AUX_MODE:
;;;1906   			
;;;1907   			srv_key_mode_switch_to(SYS_PLAY_STATE_AUX);	
;;;1908   			Drv_Dap_vol_set(Global_datas.volume);
;;;1909   				
;;;1910   			break;
;;;1911   
;;;1912   		case SYS_PLAY_EVENT_SW_TO_FM_MODE:
;;;1913   			
;;;1914   			srv_key_mode_switch_to(SYS_PLAY_STATE_FM);	
;;;1915   			Drv_Dap_vol_set(Global_datas.volume);
;;;1916   			
;;;1917   			break;
;;;1918   			
;;;1919   		case SYS_PLAY_EVENT_SW_TO_BT_MODE:
;;;1920   			
;;;1921   			srv_key_mode_switch_to(SYS_PLAY_STATE_BT);	
;;;1922   			Drv_Dap_vol_set(Global_datas.volume);
;;;1923   			
;;;1924   			break;	
;;;1925   			
;;;1926   		case SYS_PLAY_EVENT_SW_TO_MW_RADIO_MODE:
;;;1927   			
;;;1928   			srv_key_mode_switch_to(SYS_PLAY_STATE_MW_RADIO);
;;;1929   			Drv_Dap_vol_set(Global_datas.volume);
;;;1930   		
;;;1931   			break;		
;;;1932   
;;;1933   
;;;1934   		case SYS_PLAY_EVENT_DEFAULT_VOLUME_SET:
;;;1935   			
;;;1936   				Global_datas.volume = 8;
;;;1937   				Drv_Dap_vol_set(Global_datas.volume);
;;;1938   				Cmd_Send2FourG(0x03,0x04,Global_datas.volume); // send volume  to 4G moudle
;;;1939   				drv_Cmd_Send2NCU031(0x07, Global_datas.volume,0x00);// send volume
;;;1940   
;;;1941   			break;
;;;1942   
;;;1943   			
;;;1944   
;;;1945   		case SYS_PLAY_EVENT_VOL_UP:
;;;1946   			
;;;1947   			Global_datas.mute = 0;
;;;1948   			if (Global_datas.volume < VOLUME_MAX)
;;;1949   			{
;;;1950   				Global_datas.volume++;
;;;1951   				Drv_Dap_vol_set(Global_datas.volume);
;;;1952   				Cmd_Send2FourG(0x03,0x04,Global_datas.volume); // send volume  to 4G moudle
;;;1953   
;;;1954   				drv_Cmd_Send2NCU031(0x07, Global_datas.volume,0x00);// send volume
;;;1955   			}
;;;1956   
;;;1957   			break;
;;;1958   
;;;1959   		case SYS_PLAY_EVENT_VOL_DOWN:
;;;1960   			
;;;1961   			if (Global_datas.volume > VOLUME_MIN)
;;;1962   			{
;;;1963   				Global_datas.volume--;
;;;1964   				Drv_Dap_vol_set(Global_datas.volume);
;;;1965   				if(Global_datas.volume == 0)
;;;1966   				{
;;;1967   					Global_datas.mute = 1;
;;;1968   					drv_5825_mute_pin_set(0); 
;;;1969   				}
;;;1970   				Cmd_Send2FourG(0x03,0x04,Global_datas.volume); // send volume  to 4G moudle
;;;1971   				drv_Cmd_Send2NCU031(0x07, Global_datas.volume,0x00);// send volume
;;;1972   			}
;;;1973   			break;
;;;1974   
;;;1975   		case SYS_PLAY_EVENT_NEXT_SONG:
;;;1976   
;;;1977   			Cmd_Send2FourG(0x03,0x0d,0); // 
;;;1978   			
;;;1979   			break;			
;;;1980   			
;;;1981   		case SYS_PLAY_EVENT_PREV_SONG:
;;;1982   			
;;;1983   			Cmd_Send2FourG(0x03,0x0e,0); // 
;;;1984   			
;;;1985   			break;
;;;1986   		
;;;1987   		case SYS_PLAY_EVENT_PLAY_PAUSE:
;;;1988   			
;;;1989   			Cmd_Send2FourG(0x03,0x56,0); // 
;;;1990   			
;;;1991   			break;	
;;;1992   
;;;1993   		case SYS_PLAY_EVENT_MW_RADIO_NEXT_STATION:
;;;1994   			
;;;1995   			Cmd_Send2FourG(0x03,0x31,0); // 
;;;1996   			
;;;1997   			break;	
;;;1998   		
;;;1999   		case SYS_PLAY_EVENT_MW_RADIO_PREV_STATION:
;;;2000   			
;;;2001   			Cmd_Send2FourG(0x03,0x32,0); // 
;;;2002   			
;;;2003   			break;
;;;2004   
;;;2005   		case SYS_PLAY_EVENT_EQ_OUTDOOR_SET:
;;;2006   			
;;;2007   			if(Global_datas.eq_mode != EQ_MODE_OUTDOOR)
;;;2008   			{
;;;2009   				Global_datas.eq_mode = EQ_MODE_OUTDOOR;
;;;2010   				srv_key_eq_outdoor_switch_handler();
;;;2011   				Drv_audio_channel_switch();
;;;2012   			}
;;;2013   			
;;;2014   			break;	
;;;2015   			
;;;2016   		case SYS_PLAY_EVENT_EQ_INDOOR_SET:
;;;2017   			
;;;2018   			if(Global_datas.eq_mode != EQ_MODE_INDOOR)
;;;2019   			{
;;;2020   				Global_datas.eq_mode = EQ_MODE_INDOOR;
;;;2021   				srv_key_eq_outdoor_switch_handler();
;;;2022   				Drv_audio_channel_switch();
;;;2023   			}
;;;2024   			
;;;2025   			break;
;;;2026   
;;;2027   		case SYS_PLAY_EVENT_RADIO_NET_SWITCH:
;;;2028   			
;;;2029   
;;;2030   			Cmd_Send2FourG(0x03,0x50,0); 
;;;2031   			
;;;2032   			break;			
;;;2033   
;;;2034   		case SYS_PLAY_EVENT_RADIO_NET_PAIRING:
;;;2035   			
;;;2036   
;;;2037   			Cmd_Send2FourG(0x03,0x21,0); 
;;;2038   			
;;;2039   			break;	
;;;2040   
;;;2041   		case SYS_PLAY_EVENT_TURN_OFF_4G_MOUDLE:
;;;2042   
;;;2043   			Global_datas.power_4g = 0;
;;;2044   
;;;2045   		    printf("\nTURN OFF 4G MOUDLE\n");
;;;2046   
;;;2047   			AdapterPowerModeCtrl(0);
;;;2048   
;;;2049   			if(Global_datas.state == SYS_PLAY_STATE_SHUTTING_DOWN)
;;;2050   			{
;;;2051   				Drv_4GMoudle_PowerUp(0);  // wait for 4g modle ready ,than turn off power
;;;2052   				TYM_drv_powerkeepon(0); 
;;;2053   				TYM_SysPower12V_3V3_onoff(0);		
;;;2054   				Global_datas.state = SYS_PLAY_STATE_IDLE;
;;;2055   				drv_all_led_on(0);
;;;2056   
;;;2057   			/* Unlock protected registers */
;;;2058   			//   SYS_UnlockReg();
;;;2059   			/* Disable PLL first to avoid unstable when setting PLL */
;;;2060       		//	CLK_DisablePLL();
;;;2061   			//    SYS_LockReg();
;;;2062   
;;;2063   
;;;2064   				
;;;2065   			}
;;;2066   			else if(Global_datas.state == SYS_PLAY_STATE_FM)
;;;2067   			{
;;;2068   				Drv_4GMoudle_PowerUp(0);  // wait for 4g modle ready ,than turn off power
;;;2069   			}
;;;2070   		
;;;2071   			break;
;;;2072   
;;;2073   		case SYS_PLAY_EVENT_AUTO_SEARCH:
;;;2074   
;;;2075   			if(Global_datas.FmData.fmstate == FM_STATE_ON)
;;;2076   			{
;;;2077   				Global_datas.FmData.fmstate = FM_STATE_AUTO_SEARCH;
;;;2078   				Global_datas.FmData.index_station = 0;
;;;2079   				
;;;2080   				for(temp_fm=0;temp_fm<FM_MAX_STATION_NUM;temp_fm++)
;;;2081   				{
;;;2082   					Global_datas.FmData.station_table[temp_fm] = 0;
;;;2083   				}
;;;2084   				Global_datas.FmData.Frequency = 8750;			
;;;2085   			}
;;;2086   			else if(Global_datas.FmData.fmstate == FM_STATE_AUTO_SEARCH)
;;;2087   			{
;;;2088   				Global_datas.FmData.fmstate = FM_STATE_ON;
;;;2089   			}
;;;2090   				
;;;2091   			break;
;;;2092   
;;;2093   		case SYS_PLAY_EVENT_FM_SEEK_DOWN:
;;;2094   
;;;2095   			if(Global_datas.FmData.fmstate == FM_STATE_ON)
;;;2096   			{
;;;2097   				Global_datas.FmData.fmstate = FM_STATE_SEEK_DOWN;
;;;2098   			}
;;;2099   			else if(Global_datas.FmData.fmstate == FM_STATE_SEEK_DOWN)
;;;2100   			{
;;;2101   				Global_datas.FmData.fmstate = FM_STATE_ON;
;;;2102   				Global_datas.FmData.FmNeedToStore = 1;
;;;2103   			}
;;;2104   			break;
;;;2105   
;;;2106   		
;;;2107   		case SYS_PLAY_EVENT_FM_SEEK_UP:
;;;2108   			
;;;2109   			if(Global_datas.FmData.fmstate == FM_STATE_ON)
;;;2110   			{
;;;2111   				Global_datas.FmData.fmstate = FM_STATE_SEEK_UP;
;;;2112   			}
;;;2113   			else if(Global_datas.FmData.fmstate == FM_STATE_SEEK_UP)
;;;2114   			{
;;;2115   				Global_datas.FmData.fmstate = FM_STATE_ON;
;;;2116   				Global_datas.FmData.FmNeedToStore = 1;
;;;2117   			}
;;;2118   			
;;;2119   			break;
;;;2120   
;;;2121   		case SYS_PLAY_EVENT_FM_NEXT_STEP:
;;;2122   			
;;;2123   			if(Global_datas.state == SYS_PLAY_STATE_FM)
;;;2124   			{
;;;2125   				if(Global_datas.FmData.Frequency <= 10790)	Global_datas.FmData.Frequency += 10;
;;;2126   				else Global_datas.FmData.Frequency = 8750;
;;;2127   				Global_datas.FmData.FmNeedToStore = 1;
;;;2128   				TimeOutSet(&FmStoreTimer, 2000);
;;;2129   				temp_valid = si47xxFMRX_tune(Global_datas.FmData.Frequency);
;;;2130   				SendFmFreqToSubBoard();
;;;2131   				printf("FM UP\n");
;;;2132   
;;;2133   			}
;;;2134   
;;;2135   			break;
;;;2136   
;;;2137   		case SYS_PLAY_EVENT_FM_PREV_STEP:
;;;2138   			
;;;2139   			if(Global_datas.state == SYS_PLAY_STATE_FM)
;;;2140   			{
;;;2141   				if(Global_datas.FmData.Frequency >= 8760)	Global_datas.FmData.Frequency -= 10;
;;;2142   				else Global_datas.FmData.Frequency = 10800;
;;;2143   				Global_datas.FmData.FmNeedToStore = 1;
;;;2144   				TimeOutSet(&FmStoreTimer, 2000);
;;;2145   				temp_valid = si47xxFMRX_tune(Global_datas.FmData.Frequency);
;;;2146   				
;;;2147   				SendFmFreqToSubBoard();
;;;2148   				printf("FM DOWN\n");
;;;2149   
;;;2150   			}
;;;2151   
;;;2152   			break;
;;;2153   
;;;2154   			case SYS_PLAY_EVENT_FM_PREV_STATION:
;;;2155   				
;;;2156   			if(Global_datas.FmData.station_num)
0000dc  9306              STR      r3,[sp,#0x18]
0000de  792b              LDRB     r3,[r5,#4]
0000e0  9305              STR      r3,[sp,#0x14]
0000e2  1e5b              SUBS     r3,r3,#1
0000e4  9301              STR      r3,[sp,#4]            ;1867
0000e6  79eb              LDRB     r3,[r5,#7]            ;1867
;;;2157   			{
;;;2158   				if(Global_datas.FmData.current_station > 0)
0000e8  9302              STR      r3,[sp,#8]
0000ea  79ab              LDRB     r3,[r5,#6]
0000ec  9300              STR      r3,[sp,#0]
0000ee  462b              MOV      r3,r5
0000f0  3b80              SUBS     r3,r3,#0x80
0000f2  6c1b              LDR      r3,[r3,#0x40]         ;1513
0000f4  9304              STR      r3,[sp,#0x10]         ;1513
0000f6  4663              MOV      r3,r12                ;1513
0000f8  7cdb              LDRB     r3,[r3,#0x13]         ;1513
0000fa  462e              MOV      r6,r5
0000fc  9303              STR      r3,[sp,#0xc]          ;1748
0000fe  3e40              SUBS     r6,r6,#0x40
000100  0013              MOVS     r3,r2                 ;1748
000102  f7fffffe          BL       __ARM_common_switch8
000106  1f5d              DCB      0x1f,0x5d
000108  357795f8          DCB      0x35,0x77,0x95,0xf8
00010c  f7f6f5f4          DCB      0xf7,0xf6,0xf5,0xf4
000110  f3f2f1f0          DCB      0xf3,0xf2,0xf1,0xf0
000114  efeeedec          DCB      0xef,0xee,0xed,0xec
000118  ebeae9e8          DCB      0xeb,0xea,0xe9,0xe8
00011c  e75ee6e5          DCB      0xe7,0x5e,0xe6,0xe5
000120  e4e3e2e1          DCB      0xe4,0xe3,0xe2,0xe1
000124  e0df5d00          DCB      0xe0,0xdf,0x5d,0x00
000128  230f              MOVS     r3,#0xf               ;1648
00012a  e7c5              B        |L17.184|
00012c  2310              MOVS     r3,#0x10              ;1656
00012e  e7c3              B        |L17.184|
000130  2203              MOVS     r2,#3                 ;1665
                  |L17.306|
000132  76a2              STRB     r2,[r4,#0x1a]         ;1553
000134  e7c9              B        |L17.202|
000136  2211              MOVS     r2,#0x11              ;1671
000138  e7fb              B        |L17.306|
00013a  2212              MOVS     r2,#0x12              ;1675
00013c  e7f9              B        |L17.306|
00013e  2214              MOVS     r2,#0x14              ;1680
000140  e7f7              B        |L17.306|
000142  2213              MOVS     r2,#0x13              ;1685
000144  e7f5              B        |L17.306|
000146  2215              MOVS     r2,#0x15              ;1689
000148  e7f3              B        |L17.306|
00014a  2216              MOVS     r2,#0x16              ;1693
00014c  e7f1              B        |L17.306|
                  |L17.334|
00014e  76a5              STRB     r5,[r4,#0x1a]         ;1701
000150  e7bb              B        |L17.202|
                  |L17.338|
000152  2806              CMP      r0,#6                 ;1703
000154  d1b9              BNE      |L17.202|
000156  2218              MOVS     r2,#0x18              ;1718
000158  e7eb              B        |L17.306|
00015a  2807              CMP      r0,#7                 ;1712
00015c  d1f9              BNE      |L17.338|
00015e  e7f6              B        |L17.334|
000160  2807              CMP      r0,#7                 ;1727
000162  d1b2              BNE      |L17.202|
000164  221b              MOVS     r2,#0x1b              ;1727
000166  e7e4              B        |L17.306|
000168  2807              CMP      r0,#7                 ;1733
00016a  d1ae              BNE      |L17.202|
00016c  76a6              STRB     r6,[r4,#0x1a]         ;1733
00016e  e7ac              B        |L17.202|
000170  2001              MOVS     r0,#1                 ;1769
000172  f7fffffe          BL       TYM_SysPower12V_3V3_onoff
000176  2002              MOVS     r0,#2                 ;1770
000178  7660              STRB     r0,[r4,#0x19]         ;1770
00017a  7227              STRB     r7,[r4,#8]            ;1771
00017c  74a7              STRB     r7,[r4,#0x12]         ;1772
00017e  2005              MOVS     r0,#5                 ;1773
000180  74e0              STRB     r0,[r4,#0x13]         ;1773
000182  2001              MOVS     r0,#1                 ;1774
000184  f7fffffe          BL       TYM_drv_powerkeepon
000188  2001              MOVS     r0,#1                 ;1775
00018a  f7fffffe          BL       Drv_4GMoudle_PowerUp
00018e  2001              MOVS     r0,#1                 ;1777
000190  f7fffffe          BL       AdapterPowerModeCtrl
000194  7267              STRB     r7,[r4,#9]            ;1779
000196  f7fffffe          BL       drv_FourGmodel_power_key_SetHi
00019a  4999              LDR      r1,|L17.1024|
00019c  4899              LDR      r0,|L17.1028|
00019e  f7fffffe          BL       TimeOutSet
0001a2  2164              MOVS     r1,#0x64              ;1782
0001a4  4898              LDR      r0,|L17.1032|
0001a6  f7fffffe          BL       TimeOutSet
0001aa  f7fffffe          BL       Drv_audio_init
0001ae  2000              MOVS     r0,#0                 ;1784
0001b0  7460              STRB     r0,[r4,#0x11]         ;1784
0001b2  4602              MOV      r2,r0                 ;1786
0001b4  2116              MOVS     r1,#0x16              ;1786
0001b6  2070              MOVS     r0,#0x70              ;1786
0001b8  f7fffffe          BL       drv_Cmd_Send2NCU031
0001bc  f7fffffe          BL       Fm_Rest
0001c0  e1d2              B        |L17.1384|
0001c2  2001              MOVS     r0,#1                 ;1794
0001c4  f7fffffe          BL       TYM_SysPower12V_3V3_onoff
0001c8  2003              MOVS     r0,#3                 ;1795
0001ca  7660              STRB     r0,[r4,#0x19]         ;1795
0001cc  7227              STRB     r7,[r4,#8]            ;1796
0001ce  2001              MOVS     r0,#1                 ;1798
0001d0  f7fffffe          BL       Drv_4GMoudle_PowerUp
0001d4  7267              STRB     r7,[r4,#9]            ;1799
0001d6  f7fffffe          BL       drv_FourGmodel_power_key_SetHi
0001da  4989              LDR      r1,|L17.1024|
0001dc  4889              LDR      r0,|L17.1028|
0001de  f7fffffe          BL       TimeOutSet
0001e2  2164              MOVS     r1,#0x64              ;1802
0001e4  4888              LDR      r0,|L17.1032|
0001e6  f7fffffe          BL       TimeOutSet
0001ea  2000              MOVS     r0,#0                 ;1803
0001ec  7460              STRB     r0,[r4,#0x11]         ;1803
0001ee  f7fffffe          BL       drv_audio_4G_Channel
0001f2  e1b9              B        |L17.1384|
0001f4  2200              MOVS     r2,#0                 ;1814
0001f6  2115              MOVS     r1,#0x15              ;1814
0001f8  2070              MOVS     r0,#0x70              ;1814
0001fa  f7fffffe          BL       drv_Cmd_Send2NCU031
0001fe  2200              MOVS     r2,#0                 ;1815
000200  2155              MOVS     r1,#0x55              ;1815
000202  2003              MOVS     r0,#3                 ;1815
000204  f7fffffe          BL       Cmd_Send2FourG
000208  f7fffffe          BL       drv_led_init
00020c  f7fffffe          BL       Drv_audio_powerdown
000210  7467              STRB     r7,[r4,#0x11]         ;1819
000212  497e              LDR      r1,|L17.1036|
000214  487c              LDR      r0,|L17.1032|
000216  f7fffffe          BL       TimeOutSet
00021a  2004              MOVS     r0,#4                 ;1822
00021c  7660              STRB     r0,[r4,#0x19]         ;1822
00021e  2000              MOVS     r0,#0                 ;1823
000220  7220              STRB     r0,[r4,#8]            ;1823
000222  7520              STRB     r0,[r4,#0x14]         ;1824
000224  7560              STRB     r0,[r4,#0x15]         ;1825
000226  f7fffffe          BL       drv_FourGmodel_power_key_SetLow
00022a  2000              MOVS     r0,#0                 ;1827
00022c  7720              STRB     r0,[r4,#0x1c]         ;1827
00022e  e19b              B        |L17.1384|
000230  2100              MOVS     r1,#0                 ;1833
000232  7221              STRB     r1,[r4,#8]            ;1833
000234  7f21              LDRB     r1,[r4,#0x1c]         ;1835  ; Global_datas
000236  2900              CMP      r1,#0                 ;1835
000238  d014              BEQ      |L17.612|
00023a  2803              CMP      r0,#3                 ;1835
00023c  d012              BEQ      |L17.612|
00023e  2213              MOVS     r2,#0x13              ;1837
000240  2171              MOVS     r1,#0x71              ;1837
000242  2003              MOVS     r0,#3                 ;1837
000244  f7fffffe          BL       drv_Cmd_Send2NCU031
000248  7ce1              LDRB     r1,[r4,#0x13]         ;1838  ; Global_datas
00024a  2200              MOVS     r2,#0                 ;1838
00024c  2007              MOVS     r0,#7                 ;1838
00024e  f7fffffe          BL       drv_Cmd_Send2NCU031
000252  7fa0              LDRB     r0,[r4,#0x1e]         ;1840  ; Global_datas
000254  2801              CMP      r0,#1                 ;1840
000256  d00b              BEQ      |L17.624|
000258  2802              CMP      r0,#2                 ;1840
00025a  d04d              BEQ      |L17.760|
00025c  2803              CMP      r0,#3                 ;1840
00025e  d013              BEQ      |L17.648|
000260  2804              CMP      r0,#4                 ;1840
000262  d020              BEQ      |L17.678|
                  |L17.612|
000264  2200              MOVS     r2,#0                 ;1890
000266  2115              MOVS     r1,#0x15              ;1890
000268  2003              MOVS     r0,#3                 ;1890
00026a  f7fffffe          BL       Cmd_Send2FourG
00026e  e009              B        |L17.644|
                  |L17.624|
000270  2200              MOVS     r2,#0                 ;1843
000272  2115              MOVS     r1,#0x15              ;1843
000274  2003              MOVS     r0,#3                 ;1843
000276  f7fffffe          BL       Cmd_Send2FourG
00027a  2200              MOVS     r2,#0                 ;1844
00027c  2111              MOVS     r1,#0x11              ;1844
00027e  2070              MOVS     r0,#0x70              ;1844
000280  f7fffffe          BL       drv_Cmd_Send2NCU031
                  |L17.644|
000284  2005              MOVS     r0,#5                 ;1881
000286  e00a              B        |L17.670|
                  |L17.648|
000288  2200              MOVS     r2,#0                 ;1851
00028a  2116              MOVS     r1,#0x16              ;1851
00028c  2003              MOVS     r0,#3                 ;1851
00028e  f7fffffe          BL       Cmd_Send2FourG
000292  2200              MOVS     r2,#0                 ;1852
000294  2110              MOVS     r1,#0x10              ;1852
000296  2070              MOVS     r0,#0x70              ;1852
000298  f7fffffe          BL       drv_Cmd_Send2NCU031
00029c  2006              MOVS     r0,#6                 ;1853
                  |L17.670|
00029e  7660              STRB     r0,[r4,#0x19]         ;1846
0002a0  f7fffffe          BL       drv_audio_4G_Channel
0002a4  e03d              B        |L17.802|
                  |L17.678|
0002a6  2200              MOVS     r2,#0                 ;1858
0002a8  2117              MOVS     r1,#0x17              ;1858
0002aa  2003              MOVS     r0,#3                 ;1858
0002ac  f7fffffe          BL       Cmd_Send2FourG
0002b0  2200              MOVS     r2,#0                 ;1859
0002b2  2112              MOVS     r1,#0x12              ;1859
0002b4  2070              MOVS     r0,#0x70              ;1859
0002b6  f7fffffe          BL       drv_Cmd_Send2NCU031
0002ba  2008              MOVS     r0,#8                 ;1860
0002bc  7660              STRB     r0,[r4,#0x19]         ;1860
0002be  f7fffffe          BL       drv_audio_AuxIn_Channel
0002c2  e02e              B        |L17.802|
0002c4  e127              B        |L17.1302|
0002c6  e141              B        |L17.1356|
0002c8  e0eb              B        |L17.1186|
0002ca  e104              B        |L17.1238|
0002cc  e0d5              B        |L17.1146|
0002ce  e0dc              B        |L17.1162|
0002d0  e147              B        |L17.1378|
0002d2  e0bb              B        |L17.1100|
0002d4  e083              B        |L17.990|
0002d6  e031              B        |L17.828|
0002d8  e02e              B        |L17.824|
0002da  e029              B        |L17.816|
0002dc  e02a              B        |L17.820|
0002de  e07b              B        |L17.984|
0002e0  e077              B        |L17.978|
0002e2  e067              B        |L17.948|
0002e4  e06c              B        |L17.960|
0002e6  e062              B        |L17.942|
0002e8  e05e              B        |L17.936|
0002ea  e05a              B        |L17.930|
0002ec  e053              B        |L17.918|
0002ee  e04f              B        |L17.912|
0002f0  e028              B        |L17.836|
0002f2  e034              B        |L17.862|
0002f4  e028              B        |L17.840|
0002f6  e018              B        |L17.810|
                  |L17.760|
0002f8  2007              MOVS     r0,#7                 ;1865
0002fa  7660              STRB     r0,[r4,#0x19]         ;1865
0002fc  200a              MOVS     r0,#0xa               ;1866
0002fe  7620              STRB     r0,[r4,#0x18]         ;1866
000300  71ef              STRB     r7,[r5,#7]            ;1867
000302  2200              MOVS     r2,#0                 ;1869
000304  2113              MOVS     r1,#0x13              ;1869
000306  2070              MOVS     r0,#0x70              ;1869
000308  f7fffffe          BL       drv_Cmd_Send2NCU031
00030c  2200              MOVS     r2,#0                 ;1870
00030e  2118              MOVS     r1,#0x18              ;1870
000310  2003              MOVS     r0,#3                 ;1870
000312  f7fffffe          BL       Cmd_Send2FourG
000316  f7fffffe          BL       test_FMRXtune
00031a  f7fffffe          BL       drv_audio_FM_Channel
00031e  f7fffffe          BL       SendFmFreqToSubBoard
                  |L17.802|
000322  7ce0              LDRB     r0,[r4,#0x13]         ;1886  ; Global_datas
000324  f7fffffe          BL       Drv_Dap_vol_set
                  |L17.808|
000328  e11e              B        |L17.1384|
                  |L17.810|
00032a  f7fffffe          BL       srv_key_mode_handler
00032e  e7f8              B        |L17.802|
                  |L17.816|
000330  2008              MOVS     r0,#8                 ;1907
000332  e004              B        |L17.830|
                  |L17.820|
000334  2007              MOVS     r0,#7                 ;1914
000336  e002              B        |L17.830|
                  |L17.824|
000338  2006              MOVS     r0,#6                 ;1921
00033a  e000              B        |L17.830|
                  |L17.828|
00033c  2005              MOVS     r0,#5                 ;1928
                  |L17.830|
00033e  f7fffffe          BL       srv_key_mode_switch_to
000342  e7ee              B        |L17.802|
                  |L17.836|
000344  2008              MOVS     r0,#8                 ;1936
000346  e006              B        |L17.854|
                  |L17.840|
000348  2000              MOVS     r0,#0                 ;1947
00034a  7560              STRB     r0,[r4,#0x15]         ;1947
00034c  9803              LDR      r0,[sp,#0xc]          ;1948
00034e  2810              CMP      r0,#0x10              ;1948
000350  d2ea              BCS      |L17.808|
000352  1c40              ADDS     r0,r0,#1              ;1948
000354  b2c0              UXTB     r0,r0                 ;1950
                  |L17.854|
000356  74e0              STRB     r0,[r4,#0x13]         ;1936
000358  f7fffffe          BL       Drv_Dap_vol_set
00035c  e00d              B        |L17.890|
                  |L17.862|
00035e  9803              LDR      r0,[sp,#0xc]          ;1961
000360  2800              CMP      r0,#0                 ;1961
000362  d0e1              BEQ      |L17.808|
000364  1e40              SUBS     r0,r0,#1              ;1961
000366  b2c0              UXTB     r0,r0                 ;1963
000368  74e0              STRB     r0,[r4,#0x13]         ;1963
00036a  f7fffffe          BL       Drv_Dap_vol_set
00036e  7ce0              LDRB     r0,[r4,#0x13]         ;1965  ; Global_datas
000370  2800              CMP      r0,#0                 ;1965
000372  d102              BNE      |L17.890|
000374  7567              STRB     r7,[r4,#0x15]         ;1967
000376  f7fffffe          BL       drv_5825_mute_pin_set
                  |L17.890|
00037a  7ce2              LDRB     r2,[r4,#0x13]         ;1970  ; Global_datas
00037c  2104              MOVS     r1,#4                 ;1970
00037e  2003              MOVS     r0,#3                 ;1970
000380  f7fffffe          BL       Cmd_Send2FourG
000384  7ce1              LDRB     r1,[r4,#0x13]         ;1971  ; Global_datas
000386  2200              MOVS     r2,#0                 ;1971
000388  2007              MOVS     r0,#7                 ;1971
00038a  f7fffffe          BL       drv_Cmd_Send2NCU031
00038e  e0eb              B        |L17.1384|
                  |L17.912|
000390  2200              MOVS     r2,#0                 ;1977
000392  210d              MOVS     r1,#0xd               ;1977
000394  e001              B        |L17.922|
                  |L17.918|
000396  2200              MOVS     r2,#0                 ;1983
000398  210e              MOVS     r1,#0xe               ;1983
                  |L17.922|
00039a  2003              MOVS     r0,#3                 ;1977
00039c  f7fffffe          BL       Cmd_Send2FourG
0003a0  e0e2              B        |L17.1384|
                  |L17.930|
0003a2  2200              MOVS     r2,#0                 ;1989
0003a4  2156              MOVS     r1,#0x56              ;1989
0003a6  e7f8              B        |L17.922|
                  |L17.936|
0003a8  2200              MOVS     r2,#0                 ;1995
0003aa  2131              MOVS     r1,#0x31              ;1995
0003ac  e7f5              B        |L17.922|
                  |L17.942|
0003ae  2200              MOVS     r2,#0                 ;2001
0003b0  2132              MOVS     r1,#0x32              ;2001
0003b2  e7f2              B        |L17.922|
                  |L17.948|
0003b4  9806              LDR      r0,[sp,#0x18]         ;2007
0003b6  2802              CMP      r0,#2                 ;2007
0003b8  d00a              BEQ      |L17.976|
0003ba  2002              MOVS     r0,#2                 ;2009
0003bc  74a0              STRB     r0,[r4,#0x12]         ;2009
0003be  e003              B        |L17.968|
                  |L17.960|
0003c0  9806              LDR      r0,[sp,#0x18]         ;2018
0003c2  2801              CMP      r0,#1                 ;2018
0003c4  d004              BEQ      |L17.976|
0003c6  74a7              STRB     r7,[r4,#0x12]         ;2020
                  |L17.968|
0003c8  f7fffffe          BL       srv_key_eq_outdoor_switch_handler
0003cc  f7fffffe          BL       Drv_audio_channel_switch
                  |L17.976|
0003d0  e0ca              B        |L17.1384|
                  |L17.978|
0003d2  2200              MOVS     r2,#0                 ;2030
0003d4  2150              MOVS     r1,#0x50              ;2030
0003d6  e7e0              B        |L17.922|
                  |L17.984|
0003d8  2200              MOVS     r2,#0                 ;2037
0003da  2121              MOVS     r1,#0x21              ;2037
0003dc  e7dd              B        |L17.922|
                  |L17.990|
0003de  2000              MOVS     r0,#0                 ;2043
0003e0  7260              STRB     r0,[r4,#9]            ;2043
0003e2  a00b              ADR      r0,|L17.1040|
0003e4  f7fffffe          BL       __2printf
0003e8  2000              MOVS     r0,#0                 ;2047
0003ea  f7fffffe          BL       AdapterPowerModeCtrl
0003ee  7e60              LDRB     r0,[r4,#0x19]         ;2049  ; Global_datas
0003f0  2804              CMP      r0,#4                 ;2049
0003f2  d019              BEQ      |L17.1064|
0003f4  2807              CMP      r0,#7                 ;2066
0003f6  d025              BEQ      |L17.1092|
0003f8  e0b6              B        |L17.1384|
0003fa  0000              DCW      0x0000
                  |L17.1020|
                          DCD      Global_datas+0x20
                  |L17.1024|
                          DCD      0x00000bb8
                  |L17.1028|
                          DCD      ModulePowerUpPinTimer
                  |L17.1032|
                          DCD      PoweroffLedTimer
                  |L17.1036|
                          DCD      0x00001388
                  |L17.1040|
000410  0a545552          DCB      "\nTURN OFF 4G MOUDLE\n",0
000414  4e204f46
000418  46203447
00041c  204d4f55
000420  444c450a
000424  00      
000425  00                DCB      0
000426  00                DCB      0
000427  00                DCB      0
                  |L17.1064|
000428  2000              MOVS     r0,#0                 ;2051
00042a  f7fffffe          BL       Drv_4GMoudle_PowerUp
00042e  2000              MOVS     r0,#0                 ;2052
000430  f7fffffe          BL       TYM_drv_powerkeepon
000434  2000              MOVS     r0,#0                 ;2053
000436  f7fffffe          BL       TYM_SysPower12V_3V3_onoff
00043a  7667              STRB     r7,[r4,#0x19]         ;2054
00043c  2000              MOVS     r0,#0                 ;2055
00043e  f7fffffe          BL       drv_all_led_on
000442  e091              B        |L17.1384|
                  |L17.1092|
000444  2000              MOVS     r0,#0                 ;2068
000446  f7fffffe          BL       Drv_4GMoudle_PowerUp
00044a  e08d              B        |L17.1384|
                  |L17.1100|
00044c  9802              LDR      r0,[sp,#8]            ;2075
00044e  2801              CMP      r0,#1                 ;2075
000450  d002              BEQ      |L17.1112|
000452  2804              CMP      r0,#4                 ;2086
000454  d00f              BEQ      |L17.1142|
000456  e087              B        |L17.1384|
                  |L17.1112|
000458  2004              MOVS     r0,#4                 ;2077
00045a  71e8              STRB     r0,[r5,#7]            ;2077
00045c  2000              MOVS     r0,#0                 ;2078
00045e  4a95              LDR      r2,|L17.1716|
000460  7168              STRB     r0,[r5,#5]            ;2078
                  |L17.1122|
000462  008b              LSLS     r3,r1,#2              ;2082
000464  189b              ADDS     r3,r3,r2              ;2082
000466  1c49              ADDS     r1,r1,#1              ;2082
000468  b2c9              UXTB     r1,r1                 ;2080
00046a  6498              STR      r0,[r3,#0x48]         ;2080
00046c  290f              CMP      r1,#0xf               ;2080
00046e  d3f8              BCC      |L17.1122|
000470  4891              LDR      r0,|L17.1720|
000472  6410              STR      r0,[r2,#0x40]         ;2084  ; Global_datas
000474  e078              B        |L17.1384|
                  |L17.1142|
000476  71ef              STRB     r7,[r5,#7]            ;2088
000478  e076              B        |L17.1384|
                  |L17.1146|
00047a  9802              LDR      r0,[sp,#8]            ;2095
00047c  2801              CMP      r0,#1                 ;2095
00047e  d002              BEQ      |L17.1158|
000480  2803              CMP      r0,#3                 ;2099
000482  d00b              BEQ      |L17.1180|
000484  e070              B        |L17.1384|
                  |L17.1158|
000486  2003              MOVS     r0,#3                 ;2097
000488  e006              B        |L17.1176|
                  |L17.1162|
00048a  9802              LDR      r0,[sp,#8]            ;2109
00048c  2801              CMP      r0,#1                 ;2109
00048e  d002              BEQ      |L17.1174|
000490  2802              CMP      r0,#2                 ;2113
000492  d003              BEQ      |L17.1180|
000494  e068              B        |L17.1384|
                  |L17.1174|
000496  2002              MOVS     r0,#2                 ;2111
                  |L17.1176|
000498  71e8              STRB     r0,[r5,#7]            ;2111
00049a  e065              B        |L17.1384|
                  |L17.1180|
00049c  71ef              STRB     r7,[r5,#7]            ;2115
00049e  7177              STRB     r7,[r6,#5]            ;2116
0004a0  e062              B        |L17.1384|
                  |L17.1186|
0004a2  2807              CMP      r0,#7                 ;2123
0004a4  d160              BNE      |L17.1384|
0004a6  4985              LDR      r1,|L17.1724|
0004a8  9804              LDR      r0,[sp,#0x10]         ;2125
0004aa  4288              CMP      r0,r1                 ;2125
0004ac  d802              BHI      |L17.1204|
0004ae  4981              LDR      r1,|L17.1716|
0004b0  300a              ADDS     r0,r0,#0xa            ;2125
0004b2  e001              B        |L17.1208|
                  |L17.1204|
0004b4  4880              LDR      r0,|L17.1720|
0004b6  497f              LDR      r1,|L17.1716|
                  |L17.1208|
0004b8  6408              STR      r0,[r1,#0x40]         ;2127  ; Global_datas
0004ba  217d              MOVS     r1,#0x7d              ;2128
0004bc  7177              STRB     r7,[r6,#5]            ;2127
0004be  0109              LSLS     r1,r1,#4              ;2128
0004c0  487f              LDR      r0,|L17.1728|
0004c2  f7fffffe          BL       TimeOutSet
0004c6  487b              LDR      r0,|L17.1716|
0004c8  6c00              LDR      r0,[r0,#0x40]         ;2129  ; Global_datas
0004ca  f7fffffe          BL       si47xxFMRX_tune
0004ce  f7fffffe          BL       SendFmFreqToSubBoard
0004d2  a07c              ADR      r0,|L17.1732|
0004d4  e01c              B        |L17.1296|
                  |L17.1238|
0004d6  2807              CMP      r0,#7                 ;2139
0004d8  d146              BNE      |L17.1384|
0004da  4977              LDR      r1,|L17.1720|
0004dc  9804              LDR      r0,[sp,#0x10]         ;2141
0004de  310a              ADDS     r1,r1,#0xa            ;2141
0004e0  4288              CMP      r0,r1                 ;2141
0004e2  d304              BCC      |L17.1262|
0004e4  9904              LDR      r1,[sp,#0x10]         ;2141
0004e6  4873              LDR      r0,|L17.1716|
0004e8  390a              SUBS     r1,r1,#0xa            ;2141
0004ea  6401              STR      r1,[r0,#0x40]         ;2141  ; Global_datas
0004ec  e003              B        |L17.1270|
                  |L17.1262|
0004ee  4873              LDR      r0,|L17.1724|
0004f0  4970              LDR      r1,|L17.1716|
0004f2  300a              ADDS     r0,r0,#0xa            ;2142
0004f4  6408              STR      r0,[r1,#0x40]         ;2142  ; Global_datas
                  |L17.1270|
0004f6  217d              MOVS     r1,#0x7d              ;2144
0004f8  7177              STRB     r7,[r6,#5]            ;2143
0004fa  0109              LSLS     r1,r1,#4              ;2144
0004fc  4870              LDR      r0,|L17.1728|
0004fe  f7fffffe          BL       TimeOutSet
000502  486c              LDR      r0,|L17.1716|
000504  6c00              LDR      r0,[r0,#0x40]         ;2145  ; Global_datas
000506  f7fffffe          BL       si47xxFMRX_tune
00050a  f7fffffe          BL       SendFmFreqToSubBoard
00050e  a06f              ADR      r0,|L17.1740|
                  |L17.1296|
000510  f7fffffe          BL       __2printf
000514  e028              B        |L17.1384|
                  |L17.1302|
000516  9805              LDR      r0,[sp,#0x14]         ;2156
000518  2800              CMP      r0,#0                 ;2156
00051a  d025              BEQ      |L17.1384|
00051c  9800              LDR      r0,[sp,#0]
00051e  2800              CMP      r0,#0
000520  d001              BEQ      |L17.1318|
000522  1e40              SUBS     r0,r0,#1
;;;2159   				{
;;;2160   					Global_datas.FmData.current_station--;
000524  e000              B        |L17.1320|
                  |L17.1318|
000526  9801              LDR      r0,[sp,#4]
                  |L17.1320|
;;;2161   				}
;;;2162   				else
;;;2163   				{
;;;2164   					Global_datas.FmData.current_station = (Global_datas.FmData.station_num - 1);
000528  71a8              STRB     r0,[r5,#6]
;;;2165   				}
;;;2166   			
;;;2167   				Global_datas.FmData.Frequency = Global_datas.FmData.station_table[Global_datas.FmData.current_station];
;;;2168   				//dis_mic(1);
;;;2169   				si47xxFMRX_tune(Global_datas.FmData.Frequency);
;;;2170   				SendFmFreqToSubBoard();
;;;2171   				//FreqDisplay(Frequency); 	
;;;2172   			
;;;2173   				Global_datas.FmData.FmNeedToStore = 1;
;;;2174   				TimeOutSet(&FmStoreTimer, 2000);
;;;2175   			}
;;;2176   
;;;2177   			break;
;;;2178   
;;;2179   			case SYS_PLAY_EVENT_FM_NEXT_STATION:
;;;2180   				
;;;2181   			if(Global_datas.FmData.station_num)
;;;2182   			{
;;;2183   				if(Global_datas.FmData.current_station < (Global_datas.FmData.station_num-1))
;;;2184   				{
;;;2185   					Global_datas.FmData.current_station++;
;;;2186   				}
;;;2187   				else
;;;2188   				{
;;;2189   					Global_datas.FmData.current_station = 0;
;;;2190   				}
;;;2191   			
;;;2192   				Global_datas.FmData.Frequency = Global_datas.FmData.station_table[Global_datas.FmData.current_station];
00052a  0600              LSLS     r0,r0,#24
00052c  4961              LDR      r1,|L17.1716|
00052e  0d80              LSRS     r0,r0,#22
000530  1840              ADDS     r0,r0,r1
000532  6c80              LDR      r0,[r0,#0x48]
;;;2193   				//dis_mic(1);
;;;2194   				si47xxFMRX_tune(Global_datas.FmData.Frequency);
000534  6408              STR      r0,[r1,#0x40]  ; Global_datas
000536  f7fffffe          BL       si47xxFMRX_tune
;;;2195   				//FreqDisplay(Frequency); 	
;;;2196   				SendFmFreqToSubBoard();
00053a  f7fffffe          BL       SendFmFreqToSubBoard
;;;2197   			
;;;2198   				Global_datas.FmData.FmNeedToStore = 1;
;;;2199   				TimeOutSet(&FmStoreTimer, 2000);
00053e  217d              MOVS     r1,#0x7d
000540  7177              STRB     r7,[r6,#5]            ;2198
000542  0109              LSLS     r1,r1,#4
000544  485e              LDR      r0,|L17.1728|
000546  f7fffffe          BL       TimeOutSet
00054a  e00d              B        |L17.1384|
                  |L17.1356|
00054c  9805              LDR      r0,[sp,#0x14]         ;2181
00054e  2800              CMP      r0,#0                 ;2181
000550  d00a              BEQ      |L17.1384|
000552  9901              LDR      r1,[sp,#4]            ;2183
000554  9800              LDR      r0,[sp,#0]            ;2183
000556  4288              CMP      r0,r1                 ;2183
000558  da01              BGE      |L17.1374|
00055a  1c40              ADDS     r0,r0,#1              ;2183
00055c  e7e4              B        |L17.1320|
                  |L17.1374|
00055e  2000              MOVS     r0,#0                 ;2189
000560  e7e2              B        |L17.1320|
                  |L17.1378|
;;;2200   			
;;;2201   			}
;;;2202   
;;;2203   
;;;2204   			break;			
;;;2205   
;;;2206   		case SYS_PLAY_EVENT_BT_PAIRING:
;;;2207   
;;;2208   			Cmd_Send2FourG(0x03,0x4f,0);  // BT enter pairing mode
000562  2200              MOVS     r2,#0
000564  214f              MOVS     r1,#0x4f
;;;2209   			break;
000566  e718              B        |L17.922|
                  |L17.1384|
;;;2210   
;;;2211   		default:break;
;;;2212   	}
;;;2213   
;;;2214   	Global_datas.event = SYS_PLAY_EVENT_NONE;
000568  2000              MOVS     r0,#0
00056a  76a0              STRB     r0,[r4,#0x1a]
;;;2215   
;;;2216   	switch(Global_datas.state)
00056c  7e60              LDRB     r0,[r4,#0x19]  ; Global_datas
00056e  0003              MOVS     r3,r0
000570  f7fffffe          BL       __ARM_common_switch8
000574  08474747          DCB      0x08,0x47,0x47,0x47
000578  47474747          DCB      0x47,0x47,0x47,0x47
00057c  0547              DCB      0x05,0x47
;;;2217   	{
;;;2218   		case SYS_PLAY_STATE_IDLE:
;;;2219   			break;
;;;2220   
;;;2221   	
;;;2222   		case SYS_PLAY_STATE_POWERUP:
;;;2223   			
;;;2224   			break;
;;;2225   
;;;2226   		case SYS_PLAY_STATE_MW_RADIO:
;;;2227   			
;;;2228   			break;		
;;;2229   
;;;2230   		case SYS_PLAY_STATE_BT:
;;;2231   			
;;;2232   			break;
;;;2233   			
;;;2234   		case SYS_PLAY_STATE_AUX:
;;;2235   			
;;;2236   			break;	
;;;2237   
;;;2238   		case SYS_PLAY_STATE_SHUTTING_DOWN:
;;;2239   			
;;;2240   			break;	
;;;2241   
;;;2242   		case SYS_PLAY_STATE_FM:
;;;2243   
;;;2244   			if(IsTimeOut(&FmLoopTimer))
00057e  4856              LDR      r0,|L17.1752|
000580  f7fffffe          BL       IsTimeOut
000584  2800              CMP      r0,#0
000586  d011              BEQ      |L17.1452|
;;;2245   			{
;;;2246   				TimeOutSet(&FmLoopTimer,1000);
000588  217d              MOVS     r1,#0x7d
00058a  00c9              LSLS     r1,r1,#3
00058c  4852              LDR      r0,|L17.1752|
00058e  f7fffffe          BL       TimeOutSet
;;;2247   
;;;2248   				if(Global_datas.fm_delay_time)
000592  7e20              LDRB     r0,[r4,#0x18]  ; Global_datas
000594  2800              CMP      r0,#0
000596  d009              BEQ      |L17.1452|
000598  1e40              SUBS     r0,r0,#1
;;;2249   				{
;;;2250   
;;;2251   				    
;;;2252   					Global_datas.fm_delay_time--;
00059a  0600              LSLS     r0,r0,#24
00059c  0e00              LSRS     r0,r0,#24
00059e  7620              STRB     r0,[r4,#0x18]
;;;2253   					if(Global_datas.fm_delay_time == 0)
0005a0  d104              BNE      |L17.1452|
;;;2254   					{
;;;2255   						Cmd_Send2FourG( 0x03,0x55,0x00); // poweroff cmd to 4G
0005a2  2200              MOVS     r2,#0
0005a4  2155              MOVS     r1,#0x55
0005a6  2003              MOVS     r0,#3
0005a8  f7fffffe          BL       Cmd_Send2FourG
                  |L17.1452|
;;;2256   						//Drv_4GMoudle_PowerUp(0); 
;;;2257   						//Global_datas.power_4g = 0;
;;;2258   						//TimeOutSet(&PoweroffLedTimer, 5000);
;;;2259   					}
;;;2260   				}
;;;2261   			}
;;;2262   
;;;2263   			if(IsTimeOut(&FmStoreTimer))
0005ac  4844              LDR      r0,|L17.1728|
0005ae  f7fffffe          BL       IsTimeOut
0005b2  2800              CMP      r0,#0
0005b4  d006              BEQ      |L17.1476|
;;;2264   			{
;;;2265   				if(Global_datas.FmData.FmNeedToStore)
0005b6  7970              LDRB     r0,[r6,#5]  ; Global_datas
0005b8  2800              CMP      r0,#0
0005ba  d003              BEQ      |L17.1476|
;;;2266   				{
;;;2267   					Global_datas.FmData.FmNeedToStore = 0;
0005bc  2000              MOVS     r0,#0
0005be  7170              STRB     r0,[r6,#5]
;;;2268   					DataStore();
0005c0  f7fffffe          BL       DataStore
                  |L17.1476|
;;;2269   				}
;;;2270   			}
;;;2271   
;;;2272   			switch(Global_datas.FmData.fmstate)
0005c4  79e8              LDRB     r0,[r5,#7]  ; Global_datas
0005c6  0003              MOVS     r3,r0
0005c8  f7fffffe          BL       __ARM_common_switch8
0005cc  051b1b04          DCB      0x05,0x1b,0x1b,0x04
0005d0  1d281b00          DCB      0x1d,0x28,0x1b,0x00
;;;2273   			{
;;;2274   				case FM_STATE_OFF:
;;;2275   
;;;2276   				break;
;;;2277   
;;;2278   				case FM_STATE_ON:
;;;2279   
;;;2280   				break;
;;;2281   
;;;2282   				case FM_STATE_SEEK_UP:
;;;2283   
;;;2284   					if(Global_datas.FmData.Frequency <= 10790)
0005d4  4c37              LDR      r4,|L17.1716|
0005d6  4939              LDR      r1,|L17.1724|
0005d8  6c20              LDR      r0,[r4,#0x40]  ; Global_datas
0005da  4288              CMP      r0,r1
0005dc  d801              BHI      |L17.1506|
0005de  300a              ADDS     r0,r0,#0xa
;;;2285   					{
;;;2286   						Global_datas.FmData.Frequency += 10;
0005e0  e000              B        |L17.1508|
                  |L17.1506|
;;;2287   					}
;;;2288   					else
;;;2289   					{
;;;2290   						Global_datas.FmData.Frequency = 8750;
0005e2  4835              LDR      r0,|L17.1720|
                  |L17.1508|
;;;2291   					}
;;;2292   
;;;2293   					SendFmFreqToSubBoard();
;;;2294   					temp_valid = si47xxFMRX_tune(Global_datas.FmData.Frequency);
;;;2295   					//FreqDisplay(Frequency);
;;;2296   					
;;;2297   					if(temp_valid)
;;;2298   					{
;;;2299   						//dis_mic(1);
;;;2300   						Global_datas.FmData.fmstate = FM_STATE_ON;		
;;;2301   						
;;;2302   						Global_datas.FmData.FmNeedToStore = 1;
;;;2303   						TimeOutSet(&FmStoreTimer, 2000);
;;;2304   					}
;;;2305   
;;;2306   				
;;;2307   
;;;2308   				break;
;;;2309   
;;;2310   				case FM_STATE_SEEK_DOWN:
;;;2311   
;;;2312   					if(Global_datas.FmData.Frequency >= 8760)  Global_datas.FmData.Frequency -= 10;
;;;2313   					else 
;;;2314   					{
;;;2315   						Global_datas.FmData.Frequency = 10800;
;;;2316   						//Global_datas.FmData.fmstate = FM_STATE_ON;		
;;;2317   					}
;;;2318   
;;;2319   					
;;;2320   					SendFmFreqToSubBoard();
0005e4  6420              STR      r0,[r4,#0x40]  ; Global_datas
0005e6  f7fffffe          BL       SendFmFreqToSubBoard
;;;2321   					temp_valid = si47xxFMRX_tune(Global_datas.FmData.Frequency);
0005ea  6c20              LDR      r0,[r4,#0x40]  ; Global_datas
0005ec  f7fffffe          BL       si47xxFMRX_tune
;;;2322   					
;;;2323   					if(temp_valid)
0005f0  2800              CMP      r0,#0
0005f2  d006              BEQ      |L17.1538|
;;;2324   					{
;;;2325   						//dis_mic(1);
;;;2326   						Global_datas.FmData.fmstate = FM_STATE_ON;		
0005f4  71ef              STRB     r7,[r5,#7]
;;;2327   						Global_datas.FmData.FmNeedToStore = 1;
;;;2328   						TimeOutSet(&FmStoreTimer, 2000);					
0005f6  217d              MOVS     r1,#0x7d
0005f8  7177              STRB     r7,[r6,#5]            ;2327
0005fa  0109              LSLS     r1,r1,#4
0005fc  4830              LDR      r0,|L17.1728|
0005fe  f7fffffe          BL       TimeOutSet
                  |L17.1538|
;;;2329   					}					 
;;;2330   
;;;2331   				break;
;;;2332   
;;;2333   				case FM_STATE_AUTO_SEARCH:
;;;2334   
;;;2335   				
;;;2336   				SendFmFreqToSubBoard();
;;;2337   				temp_valid = si47xxFMRX_tune(Global_datas.FmData.Frequency);
;;;2338   				
;;;2339   				if(temp_valid)
;;;2340   				{
;;;2341   					//dis_mic(1);
;;;2342   					WaitMs(2000);
;;;2343   					
;;;2344   					Global_datas.FmData.station_table[Global_datas.FmData.index_station] = Global_datas.FmData.Frequency;
;;;2345   					if(Global_datas.FmData.index_station < (FM_MAX_STATION_NUM -1)) Global_datas.FmData.index_station++;
;;;2346   					if(Global_datas.FmData.Frequency <= 10790)
;;;2347   					{
;;;2348   						Global_datas.FmData.Frequency += 10;
;;;2349   					}
;;;2350   					else
;;;2351   					{
;;;2352   						Global_datas.FmData.station_num = Global_datas.FmData.index_station;
;;;2353   						if(Global_datas.FmData.station_num)
;;;2354   						{
;;;2355   							Global_datas.FmData.Frequency = Global_datas.FmData.station_table[0];
;;;2356   							//dis_mic(1);		
;;;2357   							Global_datas.FmData.current_station = 0;
;;;2358   						}
;;;2359   						else
;;;2360   						{
;;;2361   							Global_datas.FmData.Frequency = 8750;
;;;2362   							//dis_mic(0);
;;;2363   						}
;;;2364   
;;;2365   
;;;2366   						Global_datas.FmData.FmNeedToStore = 1;
;;;2367   						TimeOutSet(&FmStoreTimer, 1000);
;;;2368   						SendFmFreqToSubBoard();
;;;2369   						si47xxFMRX_tune(Global_datas.FmData.Frequency);	
;;;2370   						Global_datas.FmData.fmstate = FM_STATE_ON;		
;;;2371   					}
;;;2372   				}	
;;;2373   				else
;;;2374   				{
;;;2375   					if(Global_datas.FmData.Frequency <= 10790)	Global_datas.FmData.Frequency += 10;
;;;2376   					else
;;;2377   					{
;;;2378   						Global_datas.FmData.station_num = Global_datas.FmData.index_station;
;;;2379   						if(Global_datas.FmData.station_num)
;;;2380   						{
;;;2381   							Global_datas.FmData.Frequency = Global_datas.FmData.station_table[0];
;;;2382   							//dis_mic(1);		
;;;2383   							Global_datas.FmData.current_station = 0;
;;;2384   						}
;;;2385   						else
;;;2386   						{
;;;2387   							Global_datas.FmData.Frequency = 8750;
;;;2388   							//dis_mic(0);
;;;2389   						}
;;;2390   
;;;2391   						
;;;2392   						SendFmFreqToSubBoard();
;;;2393   						si47xxFMRX_tune(Global_datas.FmData.Frequency);
;;;2394   						//DataStore();
;;;2395   						Global_datas.FmData.FmNeedToStore = 1;
;;;2396   						Global_datas.FmData.fmstate = FM_STATE_ON;		
;;;2397   					}
;;;2398   				}					
;;;2399   
;;;2400   				break;
;;;2401   			}
;;;2402   			
;;;2403   			break;		
;;;2404   			
;;;2405   		default:break;
;;;2406   	}
;;;2407   }
000602  b007              ADD      sp,sp,#0x1c
000604  bdf0              POP      {r4-r7,pc}
000606  4c2b              LDR      r4,|L17.1716|
000608  492b              LDR      r1,|L17.1720|
00060a  6c20              LDR      r0,[r4,#0x40]         ;2312  ; Global_datas
00060c  310a              ADDS     r1,r1,#0xa            ;2312
00060e  4288              CMP      r0,r1                 ;2312
000610  d301              BCC      |L17.1558|
000612  380a              SUBS     r0,r0,#0xa            ;2312
000614  e7e6              B        |L17.1508|
                  |L17.1558|
000616  4829              LDR      r0,|L17.1724|
000618  300a              ADDS     r0,r0,#0xa            ;2315
00061a  e7e3              B        |L17.1508|
00061c  f7fffffe          BL       SendFmFreqToSubBoard
000620  4c24              LDR      r4,|L17.1716|
000622  6c20              LDR      r0,[r4,#0x40]         ;2337  ; Global_datas
000624  f7fffffe          BL       si47xxFMRX_tune
000628  2800              CMP      r0,#0                 ;2339
00062a  d028              BEQ      |L17.1662|
00062c  207d              MOVS     r0,#0x7d              ;2342
00062e  0100              LSLS     r0,r0,#4              ;2342
000630  f7fffffe          BL       WaitMs
000634  7969              LDRB     r1,[r5,#5]            ;2344  ; Global_datas
000636  6c20              LDR      r0,[r4,#0x40]         ;2344  ; Global_datas
000638  0089              LSLS     r1,r1,#2              ;2344
00063a  1909              ADDS     r1,r1,r4              ;2344
00063c  6488              STR      r0,[r1,#0x48]         ;2345
00063e  7968              LDRB     r0,[r5,#5]            ;2345  ; Global_datas
000640  280e              CMP      r0,#0xe               ;2345
000642  d201              BCS      |L17.1608|
000644  1c40              ADDS     r0,r0,#1              ;2345
000646  7168              STRB     r0,[r5,#5]            ;2345
                  |L17.1608|
000648  491c              LDR      r1,|L17.1724|
00064a  6c20              LDR      r0,[r4,#0x40]         ;2346  ; Global_datas
00064c  4288              CMP      r0,r1                 ;2346
00064e  d91a              BLS      |L17.1670|
000650  7968              LDRB     r0,[r5,#5]            ;2352  ; Global_datas
000652  7128              STRB     r0,[r5,#4]            ;2352
000654  2800              CMP      r0,#0                 ;2353
000656  d004              BEQ      |L17.1634|
000658  6ca0              LDR      r0,[r4,#0x48]         ;2355  ; Global_datas
00065a  6420              STR      r0,[r4,#0x40]         ;2357  ; Global_datas
00065c  2000              MOVS     r0,#0                 ;2357
00065e  71a8              STRB     r0,[r5,#6]            ;2357
000660  e001              B        |L17.1638|
                  |L17.1634|
000662  4815              LDR      r0,|L17.1720|
000664  6420              STR      r0,[r4,#0x40]         ;2361  ; Global_datas
                  |L17.1638|
000666  217d              MOVS     r1,#0x7d              ;2367
000668  7177              STRB     r7,[r6,#5]            ;2366
00066a  00c9              LSLS     r1,r1,#3              ;2367
00066c  4814              LDR      r0,|L17.1728|
00066e  f7fffffe          BL       TimeOutSet
000672  f7fffffe          BL       SendFmFreqToSubBoard
000676  6c20              LDR      r0,[r4,#0x40]         ;2369  ; Global_datas
000678  f7fffffe          BL       si47xxFMRX_tune
00067c  e017              B        |L17.1710|
                  |L17.1662|
00067e  490f              LDR      r1,|L17.1724|
000680  6c20              LDR      r0,[r4,#0x40]         ;2375  ; Global_datas
000682  4288              CMP      r0,r1                 ;2375
000684  d802              BHI      |L17.1676|
                  |L17.1670|
000686  300a              ADDS     r0,r0,#0xa            ;2375
000688  6420              STR      r0,[r4,#0x40]         ;2375  ; Global_datas
00068a  e7ba              B        |L17.1538|
                  |L17.1676|
00068c  7968              LDRB     r0,[r5,#5]            ;2378  ; Global_datas
00068e  7128              STRB     r0,[r5,#4]            ;2378
000690  2800              CMP      r0,#0                 ;2379
000692  d004              BEQ      |L17.1694|
000694  6ca0              LDR      r0,[r4,#0x48]         ;2381  ; Global_datas
000696  6420              STR      r0,[r4,#0x40]         ;2383  ; Global_datas
000698  2000              MOVS     r0,#0                 ;2383
00069a  71a8              STRB     r0,[r5,#6]            ;2383
00069c  e001              B        |L17.1698|
                  |L17.1694|
00069e  4806              LDR      r0,|L17.1720|
0006a0  6420              STR      r0,[r4,#0x40]         ;2387  ; Global_datas
                  |L17.1698|
0006a2  f7fffffe          BL       SendFmFreqToSubBoard
0006a6  6c20              LDR      r0,[r4,#0x40]         ;2393  ; Global_datas
0006a8  f7fffffe          BL       si47xxFMRX_tune
0006ac  7177              STRB     r7,[r6,#5]            ;2395
                  |L17.1710|
0006ae  71ef              STRB     r7,[r5,#7]            ;2396
0006b0  e7a7              B        |L17.1538|
;;;2408   
                          ENDP

0006b2  0000              DCW      0x0000
                  |L17.1716|
                          DCD      Global_datas
                  |L17.1720|
                          DCD      0x0000222e
                  |L17.1724|
                          DCD      0x00002a26
                  |L17.1728|
                          DCD      FmStoreTimer
                  |L17.1732|
0006c4  464d2055          DCB      "FM UP\n",0
0006c8  500a00  
0006cb  00                DCB      0
                  |L17.1740|
0006cc  464d2044          DCB      "FM DOWN\n",0
0006d0  4f574e0a
0006d4  00      
0006d5  00                DCB      0
0006d6  00                DCB      0
0006d7  00                DCB      0
                  |L17.1752|
                          DCD      FmLoopTimer

                          AREA ||i.TYM_DriverInit||, CODE, READONLY, ALIGN=1

                  TYM_DriverInit PROC
;;;237    
;;;238    void TYM_DriverInit(void)
000000  b510              PUSH     {r4,lr}
;;;239    {
;;;240    	//Drv_audio_init();
;;;241    	Drv_IrKey_init(); // kim
000002  f7fffffe          BL       Drv_IrKey_init
;;;242    	drv_gipo_key_init();
000006  f7fffffe          BL       drv_gipo_key_init
;;;243    }
00000a  bd10              POP      {r4,pc}
;;;244    
                          ENDP


                          AREA ||i.main||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  main PROC
;;;1246   /*---------------------------------------------------------------------------------------------------------*/
;;;1247   int32_t main(void)
000000  2600              MOVS     r6,#0
;;;1248   {
;;;1249   	uint8_t ledtimecount = 0;
;;;1250   	uint8_t resume_timecount = 0;
;;;1251   	
;;;1252   	/* Init System, peripheral clock and multi-function I/O */
;;;1253   
;;;1254   	SYS_Init();
000002  f7fffffe          BL       SYS_Init
;;;1255    	SysIdle();
000006  f7fffffe          BL       SysIdle
;;;1256   
;;;1257   	//SYS_Clock_Disable();
;;;1258   
;;;1259     	printf("\nmain\n");
00000a  a06e              ADR      r0,|L19.452|
00000c  f7fffffe          BL       __2printf
;;;1260   
;;;1261   	printf("compile time: %s %s\r\n", __DATE__, __TIME__);
000010  a26e              ADR      r2,|L19.460|
000012  a171              ADR      r1,|L19.472|
000014  a073              ADR      r0,|L19.484|
000016  f7fffffe          BL       __2printf
;;;1262   
;;;1263   	
;;;1264   	//Global_datas.inputmessage = IN_KEY_POWER_CP;
;;;1265   	
;;;1266       while(1)
;;;1267       {
;;;1268   
;;;1269   		if(IsTimeOut(&IrLongPressTimer))
;;;1270   		{
;;;1271   			Global_datas.ir_bak_key = IN_KEY_NONE;
00001a  4c78              LDR      r4,|L19.508|
00001c  2700              MOVS     r7,#0
00001e  4625              MOV      r5,r4
000020  3580              ADDS     r5,r5,#0x80
000022  3420              ADDS     r4,r4,#0x20
                  |L19.36|
000024  4876              LDR      r0,|L19.512|
000026  f7fffffe          BL       IsTimeOut
00002a  2800              CMP      r0,#0                 ;1269
00002c  d000              BEQ      |L19.48|
00002e  762f              STRB     r7,[r5,#0x18]
                  |L19.48|
;;;1272   		}
;;;1273       	if(IsTimeOut(&SysTimer_50ms))
000030  4874              LDR      r0,|L19.516|
000032  f7fffffe          BL       IsTimeOut
000036  2800              CMP      r0,#0
000038  d03c              BEQ      |L19.180|
;;;1274       	{
;;;1275       		TimeOutSet(&SysTimer_50ms, 2000);
00003a  217d              MOVS     r1,#0x7d
00003c  0109              LSLS     r1,r1,#4
00003e  4871              LDR      r0,|L19.516|
000040  f7fffffe          BL       TimeOutSet
;;;1276   			ADC_FunctionTest();
000044  f7fffffe          BL       ADC_FunctionTest
;;;1277   			DcInDetect();
000048  f7fffffe          BL       DcInDetect
;;;1278   			BatteryChargeStateChcek();
00004c  f7fffffe          BL       BatteryChargeStateChcek
;;;1279   			
;;;1280   			printf("volume = %d \n",Global_datas.volume);
000050  7ce1              LDRB     r1,[r4,#0x13]  ; Global_datas
000052  a06d              ADR      r0,|L19.520|
000054  f7fffffe          BL       __2printf
;;;1281   
;;;1282   			if(Global_datas.PowerState.AdapterIn)
000058  7ce8              LDRB     r0,[r5,#0x13]  ; Global_datas
00005a  2800              CMP      r0,#0
00005c  d010              BEQ      |L19.128|
;;;1283   			{
;;;1284   				switch(Global_datas.PowerState.charge_state)
00005e  7c68              LDRB     r0,[r5,#0x11]  ; Global_datas
000060  2801              CMP      r0,#1
000062  d002              BEQ      |L19.106|
000064  2802              CMP      r0,#2
000066  d10b              BNE      |L19.128|
000068  e004              B        |L19.116|
                  |L19.106|
;;;1285   				{
;;;1286   					case CHARGE_STATE_ON:
;;;1287   						 drv_led_state1_onoff_red(1);
00006a  2001              MOVS     r0,#1
00006c  f7fffffe          BL       drv_led_state1_onoff_red
;;;1288   						 drv_led_state1_onoff_green(0);
000070  2000              MOVS     r0,#0
;;;1289   						 break;
000072  e003              B        |L19.124|
                  |L19.116|
;;;1290   					case CHARGE_STATE_COMPLETE:
;;;1291   						 drv_led_state1_onoff_red(0);
000074  2000              MOVS     r0,#0
000076  f7fffffe          BL       drv_led_state1_onoff_red
;;;1292   						 drv_led_state1_onoff_green(1);	
00007a  2001              MOVS     r0,#1
                  |L19.124|
00007c  f7fffffe          BL       drv_led_state1_onoff_green
                  |L19.128|
;;;1293   						 break;
;;;1294   
;;;1295   					case CHARGE_STATE_NG:
;;;1296   						break;
;;;1297   					default:break;
;;;1298   				}
;;;1299   			}
;;;1300   			
;;;1301   			if((Global_datas.PowerState.battery_level == 0) && (Global_datas.state > SYS_PLAY_STATE_POWERUP) && (Global_datas.PowerState.AdapterIn == 0))
000080  7c28              LDRB     r0,[r5,#0x10]  ; Global_datas
000082  2800              CMP      r0,#0
000084  d00d              BEQ      |L19.162|
;;;1302   			{
;;;1303   				//Global_datas.inputmessage =  IN_KEY_POWER_CP;
;;;1304   			}
;;;1305   			else if((Global_datas.PowerState.battery_level < BAT_LEVEL_20_PERCENT) && (Global_datas.PowerState.battery_data >  batlevel_table[0])  && (Global_datas.volume > 8) && (Global_datas.PowerState.AdapterIn == 0))
000086  2802              CMP      r0,#2
000088  d214              BCS      |L19.180|
                  |L19.138|
00008a  4963              LDR      r1,|L19.536|
00008c  68a8              LDR      r0,[r5,#8]  ; Global_datas
00008e  6809              LDR      r1,[r1,#0]  ; batlevel_table
000090  4288              CMP      r0,r1
000092  d90f              BLS      |L19.180|
000094  7ce0              LDRB     r0,[r4,#0x13]  ; Global_datas
000096  2808              CMP      r0,#8
000098  d90c              BLS      |L19.180|
00009a  7ce8              LDRB     r0,[r5,#0x13]  ; Global_datas
00009c  2800              CMP      r0,#0
00009e  d007              BEQ      |L19.176|
0000a0  e008              B        |L19.180|
                  |L19.162|
0000a2  7e60              LDRB     r0,[r4,#0x19]         ;1301  ; Global_datas
0000a4  2802              CMP      r0,#2                 ;1301
0000a6  d9f0              BLS      |L19.138|
0000a8  7ce8              LDRB     r0,[r5,#0x13]         ;1301  ; Global_datas
0000aa  2800              CMP      r0,#0                 ;1301
0000ac  d002              BEQ      |L19.180|
0000ae  e7ec              B        |L19.138|
                  |L19.176|
;;;1306   			{
;;;1307   			 	Global_datas.inputmessage =  IN_KEY_DEFAULT_VOLUME_SET;
0000b0  201c              MOVS     r0,#0x1c
0000b2  75e0              STRB     r0,[r4,#0x17]
                  |L19.180|
;;;1308   			}
;;;1309   
;;;1310   		}
;;;1311   
;;;1312   		if(IsTimeOut(&SysTimer_1s))
0000b4  4859              LDR      r0,|L19.540|
0000b6  f7fffffe          BL       IsTimeOut
0000ba  2800              CMP      r0,#0
0000bc  d035              BEQ      |L19.298|
;;;1313   		{
;;;1314   			TimeOutSet(&SysTimer_1s, 500);
0000be  21ff              MOVS     r1,#0xff
0000c0  31f5              ADDS     r1,r1,#0xf5
0000c2  4856              LDR      r0,|L19.540|
0000c4  f7fffffe          BL       TimeOutSet
;;;1315   	        if(Global_datas.g_4g_initing)
0000c8  7a20              LDRB     r0,[r4,#8]  ; Global_datas
0000ca  2800              CMP      r0,#0
0000cc  d002              BEQ      |L19.212|
;;;1316   			{
;;;1317   				srv_led_sys_initing();
0000ce  f7fffffe          BL       srv_led_sys_initing
0000d2  e001              B        |L19.216|
                  |L19.212|
;;;1318   			}
;;;1319   			else
;;;1320   			{
;;;1321   				srv_led_change_handler();
0000d4  f7fffffe          BL       srv_led_change_handler
                  |L19.216|
;;;1322   			}
;;;1323   
;;;1324   			if(IsTimeOut(&ModulePowerUpPinTimer))
0000d8  4851              LDR      r0,|L19.544|
0000da  f7fffffe          BL       IsTimeOut
0000de  2800              CMP      r0,#0
0000e0  d001              BEQ      |L19.230|
;;;1325   			{
;;;1326   				drv_FourGmodel_power_key_SetLow();
0000e2  f7fffffe          BL       drv_FourGmodel_power_key_SetLow
                  |L19.230|
;;;1327   			}
;;;1328   
;;;1329   			if(Global_datas.state == SYS_PLAY_STATE_SHUTTING_DOWN)
0000e6  7e60              LDRB     r0,[r4,#0x19]  ; Global_datas
0000e8  2804              CMP      r0,#4
0000ea  d115              BNE      |L19.280|
;;;1330   			{
;;;1331   				if(!IsTimeOut(&PoweroffLedTimer))
0000ec  484d              LDR      r0,|L19.548|
0000ee  f7fffffe          BL       IsTimeOut
0000f2  2800              CMP      r0,#0
0000f4  d041              BEQ      |L19.378|
;;;1332   				{			
;;;1333   					if(ledtimecount)
;;;1334   					{
;;;1335   						PA12 = 1;
;;;1336   						PA13 = 1;
;;;1337   						PA1 = 1;
;;;1338   						ledtimecount = 0;
;;;1339   					}
;;;1340   					else
;;;1341   					{
;;;1342   						PA12 = 0;
;;;1343   						PA13 = 0;
;;;1344   						PA1 = 0;
;;;1345   						ledtimecount = 1;
;;;1346   					}
;;;1347   				}
;;;1348   				else
;;;1349   				{
;;;1350   					PA12 = 1;
0000f6  484c              LDR      r0,|L19.552|
0000f8  2101              MOVS     r1,#1
0000fa  6301              STR      r1,[r0,#0x30]
;;;1351   					PA13 = 1;
0000fc  6341              STR      r1,[r0,#0x34]
;;;1352   					PA1 = 1;
0000fe  6041              STR      r1,[r0,#4]
;;;1353   					Drv_4GMoudle_PowerUp(0); // if timeout,turn off.
000100  2000              MOVS     r0,#0
000102  f7fffffe          BL       Drv_4GMoudle_PowerUp
;;;1354   					TYM_drv_powerkeepon(0); 
000106  2000              MOVS     r0,#0
000108  f7fffffe          BL       TYM_drv_powerkeepon
;;;1355   					TYM_SysPower12V_3V3_onoff(0);
00010c  2000              MOVS     r0,#0
00010e  f7fffffe          BL       TYM_SysPower12V_3V3_onoff
;;;1356   
;;;1357   					Global_datas.shoutting_down = 0;
000112  7467              STRB     r7,[r4,#0x11]
;;;1358   					Global_datas.state = SYS_PLAY_STATE_IDLE;
000114  2001              MOVS     r0,#1
000116  7660              STRB     r0,[r4,#0x19]
                  |L19.280|
;;;1359   
;;;1360   				    /* Unlock protected registers */
;;;1361   			    //	SYS_UnlockReg();
;;;1362   					/* Disable PLL first to avoid unstable when setting PLL */
;;;1363       			//	CLK_DisablePLL();
;;;1364   			   	// 	SYS_LockReg();
;;;1365   				}
;;;1366   				
;;;1367   			}
;;;1368   
;;;1369   			if(IsTimeOut(&SubBoardHandshakeTimer))
000118  4844              LDR      r0,|L19.556|
00011a  f7fffffe          BL       IsTimeOut
00011e  2800              CMP      r0,#0
000120  d003              BEQ      |L19.298|
;;;1370   			{
;;;1371   				Global_datas.SubBoard.subboard_online = 0;
000122  7727              STRB     r7,[r4,#0x1c]
;;;1372   				printf("SUB BOARD OFF\n");
000124  a042              ADR      r0,|L19.560|
000126  f7fffffe          BL       __2printf
                  |L19.298|
;;;1373   			}			
;;;1374   		}
;;;1375   		
;;;1376   		if(Global_datas.key_led_blink)
00012a  7c20              LDRB     r0,[r4,#0x10]  ; Global_datas
00012c  2800              CMP      r0,#0
00012e  d007              BEQ      |L19.320|
;;;1377   		{
;;;1378   			Global_datas.key_led_blink = 0;
000130  7427              STRB     r7,[r4,#0x10]
;;;1379   			drv_err_led_on(1);
000132  2001              MOVS     r0,#1
000134  f7fffffe          BL       drv_err_led_on
;;;1380   			TimeOutSet(&LedKeyBlinkTimer, 100);
000138  2164              MOVS     r1,#0x64
00013a  4841              LDR      r0,|L19.576|
00013c  f7fffffe          BL       TimeOutSet
                  |L19.320|
;;;1381   		}
;;;1382   
;;;1383   		if(IsTimeOut(&LedKeyBlinkTimer))
000140  483f              LDR      r0,|L19.576|
000142  f7fffffe          BL       IsTimeOut
000146  2800              CMP      r0,#0
000148  d002              BEQ      |L19.336|
;;;1384   		{
;;;1385   			drv_err_led_on(0);
00014a  2000              MOVS     r0,#0
00014c  f7fffffe          BL       drv_err_led_on
                  |L19.336|
;;;1386   		}
;;;1387   
;;;1388   		if(Global_datas.mode_switching)
000150  7d20              LDRB     r0,[r4,#0x14]  ; Global_datas
000152  2800              CMP      r0,#0
000154  d008              BEQ      |L19.360|
;;;1389   		{
;;;1390   			Global_datas.mode_switching = 0;
000156  7527              STRB     r7,[r4,#0x14]
;;;1391   			drv_5825_mute_pin_set(0);  // mute
000158  2000              MOVS     r0,#0
00015a  f7fffffe          BL       drv_5825_mute_pin_set
;;;1392   			TimeOutSet(&ModeSwitchTimer, 1000);
00015e  217d              MOVS     r1,#0x7d
000160  00c9              LSLS     r1,r1,#3
000162  4838              LDR      r0,|L19.580|
000164  f7fffffe          BL       TimeOutSet
                  |L19.360|
;;;1393   		}
;;;1394   
;;;1395   		if(IsTimeOut(&ModeSwitchTimer))
000168  4836              LDR      r0,|L19.580|
00016a  f7fffffe          BL       IsTimeOut
00016e  2800              CMP      r0,#0
000170  d015              BEQ      |L19.414|
;;;1396   		{
;;;1397   			if(Global_datas.mute == 0)
000172  7d60              LDRB     r0,[r4,#0x15]  ; Global_datas
000174  2800              CMP      r0,#0
000176  d00f              BEQ      |L19.408|
000178  e011              B        |L19.414|
                  |L19.378|
00017a  2e00              CMP      r6,#0                 ;1333
00017c  d006              BEQ      |L19.396|
00017e  492a              LDR      r1,|L19.552|
000180  2001              MOVS     r0,#1                 ;1335
000182  6308              STR      r0,[r1,#0x30]         ;1335
000184  6348              STR      r0,[r1,#0x34]         ;1336
000186  6048              STR      r0,[r1,#4]            ;1337
000188  2600              MOVS     r6,#0                 ;1338
00018a  e7c5              B        |L19.280|
                  |L19.396|
00018c  4826              LDR      r0,|L19.552|
00018e  6307              STR      r7,[r0,#0x30]         ;1342
000190  6347              STR      r7,[r0,#0x34]         ;1343
000192  6047              STR      r7,[r0,#4]            ;1344
000194  2601              MOVS     r6,#1                 ;1345
000196  e7bf              B        |L19.280|
                  |L19.408|
;;;1398   			{
;;;1399   				drv_5825_mute_pin_set(1);  // unmute
000198  2001              MOVS     r0,#1
00019a  f7fffffe          BL       drv_5825_mute_pin_set
                  |L19.414|
;;;1400   			}
;;;1401   		}
;;;1402   
;;;1403   		if(Global_datas.inputmessage == IN_KEY_NONE)  // read IR key
00019e  7de0              LDRB     r0,[r4,#0x17]  ; Global_datas
0001a0  2800              CMP      r0,#0
0001a2  d10b              BNE      |L19.444|
;;;1404   		{
;;;1405   			Global_datas.inputmessage = GetIrKey();
0001a4  f7fffffe          BL       GetIrKey
0001a8  75e0              STRB     r0,[r4,#0x17]
;;;1406   		}
;;;1407   		
;;;1408   		if( Global_datas.inputmessage == IN_KEY_NONE)  // read gpio key
0001aa  2800              CMP      r0,#0
0001ac  d106              BNE      |L19.444|
;;;1409   		{
;;;1410   			GetKeyEvent();
0001ae  f7fffffe          BL       GetKeyEvent
;;;1411   			
;;;1412   			if(((Global_datas.state == SYS_PLAY_STATE_IDLE || Global_datas.state == SYS_PLAY_STATE_POWERUP )&&(IN_KEY_POWER_CP != Global_datas.inputmessage)) || \
;;;1413   				(Global_datas.state == SYS_PLAY_STATE_SHUTTING_DOWN))
;;;1414   			{
;;;1415   				//Global_datas.inputmessage = IN_KEY_NONE;
;;;1416   			}
;;;1417   		}
;;;1418   		
;;;1419   		if(Global_datas.inputmessage == IN_KEY_NONE) // message deal
0001b2  7de0              LDRB     r0,[r4,#0x17]  ; Global_datas
0001b4  2800              CMP      r0,#0
0001b6  d101              BNE      |L19.444|
;;;1420   		{
;;;1421   			MessageProcess();
0001b8  f7fffffe          BL       MessageProcess
                  |L19.444|
;;;1422   		}
;;;1423   
;;;1424   		//Pte_ProcessData();
;;;1425   
;;;1426   
;;;1427   		Sysctrl();
0001bc  f7fffffe          BL       Sysctrl
0001c0  e730              B        |L19.36|
;;;1428   
;;;1429   		
;;;1430   	}
;;;1431   
;;;1432   }
;;;1433   
                          ENDP

0001c2  0000              DCW      0x0000
                  |L19.452|
0001c4  0a6d6169          DCB      "\nmain\n",0
0001c8  6e0a00  
0001cb  00                DCB      0
                  |L19.460|
0001cc  31363a35          DCB      "16:59:13",0
0001d0  393a3133
0001d4  00      
0001d5  00                DCB      0
0001d6  00                DCB      0
0001d7  00                DCB      0
                  |L19.472|
0001d8  4a756c20          DCB      "Jul 23 2020",0
0001dc  32332032
0001e0  30323000
                  |L19.484|
0001e4  636f6d70          DCB      "compile time: %s %s\r\n",0
0001e8  696c6520
0001ec  74696d65
0001f0  3a202573
0001f4  2025730d
0001f8  0a00    
0001fa  00                DCB      0
0001fb  00                DCB      0
                  |L19.508|
                          DCD      Global_datas
                  |L19.512|
                          DCD      IrLongPressTimer
                  |L19.516|
                          DCD      SysTimer_50ms
                  |L19.520|
000208  766f6c75          DCB      "volume = %d \n",0
00020c  6d65203d
000210  20256420
000214  0a00    
000216  00                DCB      0
000217  00                DCB      0
                  |L19.536|
                          DCD      batlevel_table
                  |L19.540|
                          DCD      SysTimer_1s
                  |L19.544|
                          DCD      ModulePowerUpPinTimer
                  |L19.548|
                          DCD      PoweroffLedTimer
                  |L19.552|
                          DCD      0x50004200
                  |L19.556|
                          DCD      SubBoardHandshakeTimer
                  |L19.560|
000230  53554220          DCB      "SUB BOARD OFF\n",0
000234  424f4152
000238  44204f46
00023c  460a00  
00023f  00                DCB      0
                  |L19.576|
                          DCD      LedKeyBlinkTimer
                  |L19.580|
                          DCD      ModeSwitchTimer

                          AREA ||.data||, DATA, ALIGN=0

                  sys_err
000000  00                DCB      0x00

                          AREA ||i.__ARM_common_switch8||, COMGROUP=__ARM_common_switch8, CODE, READONLY, ALIGN=1

                  __ARM_common_switch8 PROC
000000  b430              PUSH     {r4,r5}
000002  4674              MOV      r4,lr
000004  1e64              SUBS     r4,r4,#1
000006  7825              LDRB     r5,[r4,#0]
000008  1c64              ADDS     r4,r4,#1
00000a  42ab              CMP      r3,r5
00000c  d200              BCS      |L118.16|
00000e  461d              MOV      r5,r3
                  |L118.16|
000010  5d63              LDRB     r3,[r4,r5]
000012  005b              LSLS     r3,r3,#1
000014  18e3              ADDS     r3,r4,r3
000016  bc30              POP      {r4,r5}
000018  4718              BX       r3
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\main.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_sys_err____REV16|
#line 388 "..\\lib\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___6_main_c_sys_err____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_sys_err____REVSH|
#line 402
|__asm___6_main_c_sys_err____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
