; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\main.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\main.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\lib\CMSIS\Include -I..\lib\Device\Nuvoton\NUC029xGE\Include -I..\lib\StdDriver\inc -I..\src\core\include -I..\src\driver\include -I..\src\io\include -I..\src\global -I..\src\server\include -I..\src\driver\audio -D__UVISION_VERSION=522 --omf_browse=.\obj\main.crf ..\main.c]
                          THUMB

                          AREA ||i.Amplifier_open||, CODE, READONLY, ALIGN=2

                  Amplifier_open PROC
;;;122    
;;;123    void Amplifier_open(void)
000000  b510              PUSH     {r4,lr}
;;;124    {
;;;125    	GPIO_SetMode(PC, BIT1, GPIO_MODE_OUTPUT);	
000002  4c0c              LDR      r4,|L1.52|
000004  2201              MOVS     r2,#1
000006  2102              MOVS     r1,#2
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       GPIO_SetMode
;;;126    	GPIO_SetMode(PC, BIT13, GPIO_MODE_OUTPUT);
00000e  2201              MOVS     r2,#1
000010  0351              LSLS     r1,r2,#13
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       GPIO_SetMode
;;;127    	GPIO_SetMode(PB, BIT14, GPIO_MODE_OUTPUT);
000018  4806              LDR      r0,|L1.52|
00001a  2201              MOVS     r2,#1
00001c  0391              LSLS     r1,r2,#14
00001e  3840              SUBS     r0,r0,#0x40
000020  f7fffffe          BL       GPIO_SetMode
;;;128    	PC1 = 1;
000024  4904              LDR      r1,|L1.56|
000026  2001              MOVS     r0,#1
000028  6048              STR      r0,[r1,#4]
;;;129    	PC13 = 1;
00002a  6348              STR      r0,[r1,#0x34]
;;;130    	PB14 = 1;
00002c  4902              LDR      r1,|L1.56|
00002e  3940              SUBS     r1,r1,#0x40
000030  6388              STR      r0,[r1,#0x38]
;;;131    }
000032  bd10              POP      {r4,pc}
;;;132    
                          ENDP

                  |L1.52|
                          DCD      0x50004080
                  |L1.56|
                          DCD      0x50004280

                          AREA ||i.IoKeyProcess||, CODE, READONLY, ALIGN=2

                  IoKeyProcess PROC
;;;216    
;;;217    void IoKeyProcess(void)
000000  b570              PUSH     {r4-r6,lr}
;;;218    {
;;;219    
;;;220    	if(((Global_datas.g_mode_status == POWER_IDLE_MODE || Global_datas.g_mode_status == POWER_ON_MODE )&&(IN_KEY_POWER_CP != IoKeyInputmessage)) || (Global_datas.shoutting_down))
000002  4c1d              LDR      r4,|L2.120|
000004  4d1d              LDR      r5,|L2.124|
000006  7961              LDRB     r1,[r4,#5]  ; Global_datas
000008  7828              LDRB     r0,[r5,#0]
00000a  290e              CMP      r1,#0xe
00000c  d001              BEQ      |L2.18|
00000e  2900              CMP      r1,#0
000010  d101              BNE      |L2.22|
                  |L2.18|
000012  28f1              CMP      r0,#0xf1
000014  d12b              BNE      |L2.110|
                  |L2.22|
000016  7b61              LDRB     r1,[r4,#0xd]  ; Global_datas
000018  2900              CMP      r1,#0
00001a  d128              BNE      |L2.110|
;;;221        {
;;;222    		return;
;;;223    	}
;;;224    
;;;225    	if(IoKeyInputmessage)
00001c  2800              CMP      r0,#0
00001e  d024              BEQ      |L2.106|
;;;226    	{
;;;227    		switch(IoKeyInputmessage)
000020  28f0              CMP      r0,#0xf0
000022  d012              BEQ      |L2.74|
000024  28f1              CMP      r0,#0xf1
000026  d016              BEQ      |L2.86|
000028  28f3              CMP      r0,#0xf3
00002a  d002              BEQ      |L2.50|
00002c  28f4              CMP      r0,#0xf4
00002e  d11c              BNE      |L2.106|
000030  e005              B        |L2.62|
                  |L2.50|
;;;228    		{
;;;229    			case IN_KEY_PAIR_SP:
;;;230    				printf("pari key sp\n");
000032  a013              ADR      r0,|L2.128|
000034  f7fffffe          BL       __2printf
;;;231    				drv_wifi_4g_switch_cmd_send();
000038  f7fffffe          BL       drv_wifi_4g_switch_cmd_send
;;;232    				break;
00003c  e015              B        |L2.106|
                  |L2.62|
;;;233    			case IN_KEY_PAIR_CP:
;;;234    				printf("pari key cp\n");
00003e  a014              ADR      r0,|L2.144|
000040  f7fffffe          BL       __2printf
;;;235    				drv_pairing_cmd_send();
000044  f7fffffe          BL       drv_pairing_cmd_send
;;;236    				
;;;237    				break;
000048  e00f              B        |L2.106|
                  |L2.74|
;;;238    			case IN_KEY_POWER_SP:
;;;239    				printf("power key sp\n");
00004a  a015              ADR      r0,|L2.160|
00004c  f7fffffe          BL       __2printf
;;;240    				srv_key_mode_handler();
000050  f7fffffe          BL       srv_key_mode_handler
;;;241    				break;
000054  e009              B        |L2.106|
                  |L2.86|
;;;242    			case IN_KEY_POWER_CP:
;;;243    				printf("power key cp\n");	
000056  a016              ADR      r0,|L2.176|
000058  f7fffffe          BL       __2printf
;;;244    				if(Global_datas.g_mode_status == POWER_IDLE_MODE)
00005c  7960              LDRB     r0,[r4,#5]  ; Global_datas
00005e  280e              CMP      r0,#0xe
000060  d006              BEQ      |L2.112|
;;;245    				{
;;;246    					SYS_Status();
;;;247    				}
;;;248    
;;;249    				else
;;;250    				{
;;;251    					PowerOff();
000062  f7fffffe          BL       PowerOff
;;;252    					SysIdle();
000066  f7fffffe          BL       SysIdle
                  |L2.106|
;;;253    				}
;;;254    				break;
;;;255    
;;;256    		  	default:break;
;;;257    		}
;;;258    	}
;;;259    
;;;260    	IoKeyInputmessage = 0;
00006a  2000              MOVS     r0,#0
00006c  7028              STRB     r0,[r5,#0]
                  |L2.110|
;;;261    		
;;;262    }
00006e  bd70              POP      {r4-r6,pc}
                  |L2.112|
000070  f7fffffe          BL       SYS_Status
000074  e7f9              B        |L2.106|
;;;263    
                          ENDP

000076  0000              DCW      0x0000
                  |L2.120|
                          DCD      Global_datas+0x20
                  |L2.124|
                          DCD      IoKeyInputmessage
                  |L2.128|
000080  70617269          DCB      "pari key sp\n",0
000084  206b6579
000088  2073700a
00008c  00      
00008d  00                DCB      0
00008e  00                DCB      0
00008f  00                DCB      0
                  |L2.144|
000090  70617269          DCB      "pari key cp\n",0
000094  206b6579
000098  2063700a
00009c  00      
00009d  00                DCB      0
00009e  00                DCB      0
00009f  00                DCB      0
                  |L2.160|
0000a0  706f7765          DCB      "power key sp\n",0
0000a4  72206b65
0000a8  79207370
0000ac  0a00    
0000ae  00                DCB      0
0000af  00                DCB      0
                  |L2.176|
0000b0  706f7765          DCB      "power key cp\n",0
0000b4  72206b65
0000b8  79206370
0000bc  0a00    
0000be  00                DCB      0
0000bf  00                DCB      0

                          AREA ||i.PowerOff||, CODE, READONLY, ALIGN=2

                  PowerOff PROC
;;;203    
;;;204    void PowerOff(void)
000000  b510              PUSH     {r4,lr}
;;;205    {
;;;206    	drv_Cmd_Send2NCU031(0x70, 0x15,0x00);// power off cmd to LCD board
000002  2200              MOVS     r2,#0
000004  2115              MOVS     r1,#0x15
000006  2070              MOVS     r0,#0x70
000008  f7fffffe          BL       drv_Cmd_Send2NCU031
;;;207    	
;;;208    	Cmd_Send2FourG( 0x03,0x55,0x00); // poweroff cmd to 4G
00000c  2200              MOVS     r2,#0
00000e  2155              MOVS     r1,#0x55
000010  2003              MOVS     r0,#3
000012  f7fffffe          BL       Cmd_Send2FourG
;;;209    	//Drv_4GMoudle_PowerUp(0);  // wait for 4g modle ready ,than turn off power, don't off here.
;;;210    	drv_led_init();// led all off
000016  f7fffffe          BL       drv_led_init
;;;211    	Drv_audio_powerdown();
00001a  f7fffffe          BL       Drv_audio_powerdown
;;;212    	Global_datas.shoutting_down = 1;
00001e  4804              LDR      r0,|L3.48|
000020  2101              MOVS     r1,#1
000022  7341              STRB     r1,[r0,#0xd]
;;;213    	TimeOutSet(&PoweroffLedTimer, 5000);
000024  4903              LDR      r1,|L3.52|
000026  4804              LDR      r0,|L3.56|
000028  f7fffffe          BL       TimeOutSet
;;;214    }
00002c  bd10              POP      {r4,pc}
;;;215    
                          ENDP

00002e  0000              DCW      0x0000
                  |L3.48|
                          DCD      Global_datas+0x20
                  |L3.52|
                          DCD      0x00001388
                  |L3.56|
                          DCD      PoweroffLedTimer

                          AREA ||i.SYS_BusInit||, CODE, READONLY, ALIGN=1

                  SYS_BusInit PROC
;;;110    
;;;111    void SYS_BusInit(void)
000000  b510              PUSH     {r4,lr}
;;;112    {
;;;113    	Debug_Uart_Init();
000002  f7fffffe          BL       Debug_Uart_Init
;;;114    	
;;;115    	Transfer_Uart_Init();
000006  f7fffffe          BL       Transfer_Uart_Init
;;;116    	
;;;117    	USCI_Uart_Init();
00000a  f7fffffe          BL       USCI_Uart_Init
;;;118    	
;;;119    	Hal_I2c_Init();
00000e  f7fffffe          BL       Hal_I2c_Init
;;;120    	
;;;121    }
000012  bd10              POP      {r4,pc}
;;;122    
                          ENDP


                          AREA ||i.SYS_Clock_init||, CODE, READONLY, ALIGN=2

                  SYS_Clock_init PROC
;;;43     
;;;44     void SYS_Clock_init(void)
000000  b5f8              PUSH     {r3-r7,lr}
;;;45     {
;;;46     
;;;47         
;;;48        // SYS->GPF_MFPL = SYS_GPF_MFPL_PF4MFP_XT1_IN | SYS_GPF_MFPL_PF3MFP_XT1_OUT | SYS_GPF_MFPL_PF1MFP_X32_IN | SYS_GPF_MFPL_PF0MFP_X32_OUT;
;;;49     	/* Enable HIRC clock (Internal RC 22.1184MHz) */
;;;50         CLK_EnableXtalRC(CLK_PWRCTL_HIRCEN_Msk);
000002  2004              MOVS     r0,#4
000004  f7fffffe          BL       CLK_EnableXtalRC
;;;51     
;;;52         /* Wait for HIRC clock ready */
;;;53         CLK_WaitClockReady(CLK_STATUS_HIRCSTB_Msk);
000008  2010              MOVS     r0,#0x10
00000a  f7fffffe          BL       CLK_WaitClockReady
;;;54     
;;;55         /* Select HCLK clock source as HIRC and HCLK clock divider as 1 */
;;;56         CLK_SetHCLK(CLK_CLKSEL0_HCLKSEL_HIRC, CLK_CLKDIV0_HCLK(1));
00000e  2100              MOVS     r1,#0
000010  2007              MOVS     r0,#7
000012  f7fffffe          BL       CLK_SetHCLK
;;;57     
;;;58         /* Enable HXT clock (external XTAL 12MHz) */
;;;59         CLK_EnableXtalRC(CLK_PWRCTL_HXTEN_Msk | CLK_PWRCTL_LXTEN_Msk);
000016  2003              MOVS     r0,#3
000018  f7fffffe          BL       CLK_EnableXtalRC
;;;60     //    CLK_EnableXtalRC(CLK_PWRCTL_HXTEN_Msk);
;;;61         /* Wait for HXT clock ready */
;;;62         CLK_WaitClockReady(CLK_STATUS_HXTSTB_Msk | CLK_STATUS_LXTSTB_Msk);
00001c  2003              MOVS     r0,#3
00001e  f7fffffe          BL       CLK_WaitClockReady
;;;63     //    CLK_WaitClockReady(CLK_STATUS_HXTSTB_Msk);
;;;64         /* Set core clock as PLL_CLOCK from PLL and SysTick source to HCLK/2*/
;;;65         CLK_SetCoreClock(PLL_CLOCK);
000022  4822              LDR      r0,|L5.172|
000024  f7fffffe          BL       CLK_SetCoreClock
;;;66         CLK_SetSysTickClockSrc(CLK_CLKSEL0_STCLKSEL_HCLK_DIV2);
000028  2018              MOVS     r0,#0x18
00002a  f7fffffe          BL       CLK_SetSysTickClockSrc
;;;67     
;;;68         /* Enable UART module clock */
;;;69         CLK_EnableModuleClock(UART0_MODULE);
00002e  4c20              LDR      r4,|L5.176|
000030  4620              MOV      r0,r4
000032  f7fffffe          BL       CLK_EnableModuleClock
;;;70     	/* Enable UART module clock */
;;;71         CLK_EnableModuleClock(UART1_MODULE);
000036  1c65              ADDS     r5,r4,#1
000038  4628              MOV      r0,r5
00003a  f7fffffe          BL       CLK_EnableModuleClock
;;;72     	
;;;73         /* Enable USCI module clock */
;;;74         CLK_EnableModuleClock(UART2_MODULE);
00003e  1ca6              ADDS     r6,r4,#2
000040  4630              MOV      r0,r6
000042  f7fffffe          BL       CLK_EnableModuleClock
;;;75     	
;;;76         /* Enable USCI module clock */
;;;77         CLK_EnableModuleClock(USCI0_MODULE);
000046  4f1b              LDR      r7,|L5.180|
000048  4638              MOV      r0,r7
00004a  f7fffffe          BL       CLK_EnableModuleClock
;;;78     	
;;;79     	/* Enable I2C0 module clock */
;;;80         CLK_EnableModuleClock(I2C0_MODULE);
00004e  481a              LDR      r0,|L5.184|
000050  f7fffffe          BL       CLK_EnableModuleClock
;;;81     	
;;;82     	/* Enable I2C1 module clock */
;;;83         CLK_EnableModuleClock(I2C1_MODULE);
000054  4818              LDR      r0,|L5.184|
000056  1c40              ADDS     r0,r0,#1
000058  f7fffffe          BL       CLK_EnableModuleClock
;;;84     
;;;85     	/* Enable ADC module clock */
;;;86         CLK_EnableModuleClock(ADC_MODULE);
00005c  4817              LDR      r0,|L5.188|
00005e  f7fffffe          BL       CLK_EnableModuleClock
;;;87     
;;;88         /* Enable PWM0 module clock */
;;;89         CLK_EnableModuleClock(PWM0_MODULE);
000062  4817              LDR      r0,|L5.192|
000064  f7fffffe          BL       CLK_EnableModuleClock
;;;90     
;;;91     	/* Enable timer clock */
;;;92     	CLK_EnableModuleClock(TMR0_MODULE);
000068  4816              LDR      r0,|L5.196|
00006a  f7fffffe          BL       CLK_EnableModuleClock
;;;93         CLK_EnableModuleClock(RTC_MODULE);
00006e  4816              LDR      r0,|L5.200|
000070  f7fffffe          BL       CLK_EnableModuleClock
;;;94     
;;;95         /* Select UART module clock source as HXT and UART module clock divider as 1 */
;;;96         CLK_SetModuleClock(UART0_MODULE, CLK_CLKSEL1_UARTSEL_HXT, CLK_CLKDIV0_UART(1));
000074  2200              MOVS     r2,#0
000076  4611              MOV      r1,r2
000078  4620              MOV      r0,r4
00007a  f7fffffe          BL       CLK_SetModuleClock
;;;97     	
;;;98     	CLK_SetModuleClock(UART1_MODULE, CLK_CLKSEL1_UARTSEL_HXT, CLK_CLKDIV0_UART(1));
00007e  2200              MOVS     r2,#0
000080  4611              MOV      r1,r2
000082  4628              MOV      r0,r5
000084  f7fffffe          BL       CLK_SetModuleClock
;;;99     
;;;100    	CLK_SetModuleClock(UART2_MODULE, CLK_CLKSEL1_UARTSEL_HXT, CLK_CLKDIV0_UART(1));
000088  2200              MOVS     r2,#0
00008a  4611              MOV      r1,r2
00008c  4630              MOV      r0,r6
00008e  f7fffffe          BL       CLK_SetModuleClock
;;;101    	CLK_SetModuleClock(USCI0_MODULE, CLK_CLKSEL1_UARTSEL_HXT, CLK_CLKDIV0_UART(1));
000092  2200              MOVS     r2,#0
000094  4611              MOV      r1,r2
000096  4638              MOV      r0,r7
000098  f7fffffe          BL       CLK_SetModuleClock
;;;102    
;;;103        /* ADC clock source is 22.1184MHz, set divider to 7, ADC clock is 22.1184/7 MHz */
;;;104        CLK_SetModuleClock(ADC_MODULE, CLK_CLKSEL1_ADCSEL_HIRC, CLK_CLKDIV0_ADC(7));
00009c  2203              MOVS     r2,#3
00009e  0452              LSLS     r2,r2,#17
0000a0  210c              MOVS     r1,#0xc
0000a2  4806              LDR      r0,|L5.188|
0000a4  f7fffffe          BL       CLK_SetModuleClock
;;;105        /* Select PWM01 module clock source */
;;;106       // CLK_SetModuleClock(PWM0_MODULE, CLK_CLKSEL1_PWM0SEL_PCLK0, 0);
;;;107    
;;;108    }
0000a8  bdf8              POP      {r3-r7,pc}
;;;109    
                          ENDP

0000aa  0000              DCW      0x0000
                  |L5.172|
                          DCD      0x044aa200
                  |L5.176|
                          DCD      0x57803d10
                  |L5.180|
                          DCD      0x80000008
                  |L5.184|
                          DCD      0x40000008
                  |L5.188|
                          DCD      0x5623fe1c
                  |L5.192|
                          DCD      0x53c00014
                  |L5.196|
                          DCD      0x5e800002
                  |L5.200|
                          DCD      0x63200001

                          AREA ||i.SYS_Init||, CODE, READONLY, ALIGN=2

                  SYS_Init PROC
;;;142    /*---------------------------------------------------------------------------------------------------------*/
;;;143    void SYS_Init(void)
000000  b510              PUSH     {r4,lr}
000002  2059              MOVS     r0,#0x59
000004  4c0e              LDR      r4,|L6.64|
000006  2216              MOVS     r2,#0x16
000008  2188              MOVS     r1,#0x88
                  |L6.10|
00000a  6020              STR      r0,[r4,#0]
00000c  6022              STR      r2,[r4,#0]
00000e  6021              STR      r1,[r4,#0]
000010  6823              LDR      r3,[r4,#0]
000012  2b00              CMP      r3,#0
000014  d0f9              BEQ      |L6.10|
;;;144    {
;;;145        /* Unlock protected registers */
;;;146        SYS_UnlockReg();
;;;147    	
;;;148    	SYS_Clock_init();
000016  f7fffffe          BL       SYS_Clock_init
;;;149    	TYM_gpio_init();
00001a  f7fffffe          BL       TYM_gpio_init
00001e  2000              MOVS     r0,#0
000020  6020              STR      r0,[r4,#0]
;;;150    
;;;151    	/* Lock protected registers */
;;;152        SYS_LockReg();
;;;153    
;;;154        /* Start Timer1 to measure delay period of TIMER_Delay API is reasonable or not */
;;;155       // TIMER1->CTL = TIMER_PERIODIC_MODE | (12 - 1);
;;;156    	TYM_sys_PowerManger_init();
000022  f7fffffe          BL       TYM_sys_PowerManger_init
;;;157    	drv_led_init();
000026  f7fffffe          BL       drv_led_init
;;;158    
;;;159    	Drv_FourG_Gpio_Init();
00002a  f7fffffe          BL       Drv_FourG_Gpio_Init
;;;160    	//drv_FourGmodel_power_key_down(); // first turn on the power ,and power key set hi(off)
;;;161    	
;;;162    
;;;163    	SYS_BusInit();
00002e  f7fffffe          BL       SYS_BusInit
;;;164    	
;;;165    	Hal_Timer1_Init(); // kim
000032  f7fffffe          BL       Hal_Timer1_Init
;;;166    
;;;167    	TYM_DriverInit();
000036  f7fffffe          BL       TYM_DriverInit
;;;168    	
;;;169    	Core_Msg_Init();
00003a  f7fffffe          BL       Core_Msg_Init
;;;170    
;;;171    	//srv_rtc_init();
;;;172    
;;;173    }
00003e  bd10              POP      {r4,pc}
;;;174    
                          ENDP

                  |L6.64|
                          DCD      0x50000100

                          AREA ||i.SYS_Status||, CODE, READONLY, ALIGN=2

                  SYS_Status PROC
;;;183    
;;;184    void SYS_Status(void)
000000  b570              PUSH     {r4-r6,lr}
;;;185    {
;;;186    	Global_datas.g_mode_status = POWER_ON_MODE;	
000002  4c10              LDR      r4,|L7.68|
000004  2500              MOVS     r5,#0
000006  7165              STRB     r5,[r4,#5]
;;;187    	Global_datas.g_4g_initing = 1;
000008  2001              MOVS     r0,#1
00000a  71a0              STRB     r0,[r4,#6]
;;;188    	Global_datas.eq_mode = EQ_MODE_INDOOR;
00000c  73a0              STRB     r0,[r4,#0xe]
;;;189    	Global_datas.volume = VOLUME_DEFAULT;
00000e  2008              MOVS     r0,#8
000010  73e0              STRB     r0,[r4,#0xf]
;;;190    	TYM_drv_powerkeepon(1);
000012  2001              MOVS     r0,#1
000014  f7fffffe          BL       TYM_drv_powerkeepon
;;;191    	Drv_4GMoudle_PowerUp(1);
000018  2001              MOVS     r0,#1
00001a  f7fffffe          BL       Drv_4GMoudle_PowerUp
;;;192    	drv_FourGmodel_power_key_SetHi();
00001e  f7fffffe          BL       drv_FourGmodel_power_key_SetHi
;;;193    	TimeOutSet(&ModulePowerUpPinTimer,3000);
000022  4909              LDR      r1,|L7.72|
000024  4809              LDR      r0,|L7.76|
000026  f7fffffe          BL       TimeOutSet
;;;194    	TimeOutSet(&PoweroffLedTimer, 100);
00002a  2164              MOVS     r1,#0x64
00002c  4808              LDR      r0,|L7.80|
00002e  f7fffffe          BL       TimeOutSet
;;;195    	Drv_audio_init();
000032  f7fffffe          BL       Drv_audio_init
;;;196    	Global_datas.shoutting_down = 0;
000036  7365              STRB     r5,[r4,#0xd]
;;;197    	
;;;198    
;;;199    	
;;;200    	drv_Cmd_Send2NCU031(0x70, 0x16,0x00);// power on cmd to LCD board
000038  2200              MOVS     r2,#0
00003a  2116              MOVS     r1,#0x16
00003c  2070              MOVS     r0,#0x70
00003e  f7fffffe          BL       drv_Cmd_Send2NCU031
;;;201    	
;;;202    }
000042  bd70              POP      {r4-r6,pc}
;;;203    
                          ENDP

                  |L7.68|
                          DCD      Global_datas+0x20
                  |L7.72|
                          DCD      0x00000bb8
                  |L7.76|
                          DCD      ModulePowerUpPinTimer
                  |L7.80|
                          DCD      PoweroffLedTimer

                          AREA ||i.SysIdle||, CODE, READONLY, ALIGN=2

                  SysIdle PROC
;;;174    
;;;175    void SysIdle(void)
000000  b510              PUSH     {r4,lr}
;;;176    {
;;;177    	Global_datas.g_mode_status = POWER_IDLE_MODE;	
000002  4806              LDR      r0,|L8.28|
000004  210e              MOVS     r1,#0xe
000006  7141              STRB     r1,[r0,#5]
;;;178    	Global_datas.g_4g_initing = 0;
000008  2100              MOVS     r1,#0
00000a  7181              STRB     r1,[r0,#6]
;;;179    	drv_FourGmodel_power_key_SetLow();
00000c  f7fffffe          BL       drv_FourGmodel_power_key_SetLow
;;;180    	TimeOutSet(&SysTimer_1s,1000);
000010  217d              MOVS     r1,#0x7d
000012  00c9              LSLS     r1,r1,#3
000014  4802              LDR      r0,|L8.32|
000016  f7fffffe          BL       TimeOutSet
;;;181    
;;;182    }
00001a  bd10              POP      {r4,pc}
;;;183    
                          ENDP

                  |L8.28|
                          DCD      Global_datas+0x20
                  |L8.32|
                          DCD      SysTimer_1s

                          AREA ||i.TYM_DriverInit||, CODE, READONLY, ALIGN=1

                  TYM_DriverInit PROC
;;;132    
;;;133    void TYM_DriverInit(void)
000000  b510              PUSH     {r4,lr}
;;;134    {
;;;135    	//Drv_audio_init();
;;;136    	Drv_IrKey_init(); // kim
000002  f7fffffe          BL       Drv_IrKey_init
;;;137    	drv_gipo_key_init();
000006  f7fffffe          BL       drv_gipo_key_init
;;;138    }
00000a  bd10              POP      {r4,pc}
;;;139    
                          ENDP


                          AREA ||i.main||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                  main PROC
;;;267    /*---------------------------------------------------------------------------------------------------------*/
;;;268    int32_t main(void)
000000  b086              SUB      sp,sp,#0x18
;;;269    {
;;;270    	sCoreMsg msg;
;;;271    	uint32_t count;
;;;272    	uint8_t refcount0=1;
000002  2601              MOVS     r6,#1
;;;273    	uint8_t refcount1=1;
;;;274    	uint8_t refcount2=1;
;;;275      	uint8_t bat_val[2];
;;;276    	uint8_t ledtimecount = 0;
000004  2000              MOVS     r0,#0
000006  4635              MOV      r5,r6                 ;273
;;;277    	
;;;278    //	uint8_t autoside = 0;
;;;279    //    S_RTC_TIME_DATA_T sReadRTC;
;;;280    
;;;281    	/* Init System, peripheral clock and multi-function I/O */
;;;282    
;;;283    	SYS_Init();
000008  9005              STR      r0,[sp,#0x14]
00000a  f7fffffe          BL       SYS_Init
;;;284    	//SYS_Status();
;;;285    	SysIdle();
00000e  f7fffffe          BL       SysIdle
;;;286    	
;;;287    	
;;;288        printf("\nmain\n");
000012  a0fd              ADR      r0,|L10.1032|
000014  f7fffffe          BL       __2printf
000018  4cfd              LDR      r4,|L10.1040|
                  |L10.26|
;;;289    		
;;;290        while(1)
;;;291        {
;;;292    
;;;293    		if(IsTimeOut(&SysTimer_1s))
00001a  48fe              LDR      r0,|L10.1044|
00001c  f7fffffe          BL       IsTimeOut
000020  2800              CMP      r0,#0
000022  d028              BEQ      |L10.118|
;;;294    		{
;;;295    			TimeOutSet(&SysTimer_1s, 500);
000024  21ff              MOVS     r1,#0xff
000026  31f5              ADDS     r1,r1,#0xf5
000028  48fa              LDR      r0,|L10.1044|
00002a  f7fffffe          BL       TimeOutSet
;;;296    			
;;;297    	        if(Global_datas.g_4g_initing)
00002e  79a0              LDRB     r0,[r4,#6]  ; Global_datas
000030  2800              CMP      r0,#0
000032  d002              BEQ      |L10.58|
;;;298    			{
;;;299    				srv_led_sys_initing();
000034  f7fffffe          BL       srv_led_sys_initing
000038  e001              B        |L10.62|
                  |L10.58|
;;;300    			}
;;;301    			else
;;;302    			{
;;;303    				srv_led_change_handler();
00003a  f7fffffe          BL       srv_led_change_handler
                  |L10.62|
;;;304    			}
;;;305    
;;;306    			if(IsTimeOut(&ModulePowerUpPinTimer))
00003e  48f6              LDR      r0,|L10.1048|
000040  f7fffffe          BL       IsTimeOut
000044  2800              CMP      r0,#0
000046  d001              BEQ      |L10.76|
;;;307    			{
;;;308    				drv_FourGmodel_power_key_SetLow();
000048  f7fffffe          BL       drv_FourGmodel_power_key_SetLow
                  |L10.76|
;;;309    			}
;;;310    
;;;311    			if(Global_datas.g_mode_status == POWER_IDLE_MODE)
00004c  7960              LDRB     r0,[r4,#5]  ; Global_datas
00004e  280e              CMP      r0,#0xe
000050  d111              BNE      |L10.118|
;;;312    			{
;;;313    				if(!IsTimeOut(&PoweroffLedTimer))
000052  48f2              LDR      r0,|L10.1052|
000054  f7fffffe          BL       IsTimeOut
000058  2800              CMP      r0,#0
00005a  d02b              BEQ      |L10.180|
;;;314    				{			
;;;315    					if(ledtimecount)
;;;316    					{
;;;317    						PA12 = 1;
;;;318    						PA13 = 1;
;;;319    						PA1 = 1;
;;;320    						ledtimecount = 0;
;;;321    					}
;;;322    					else
;;;323    					{
;;;324    						PA12 = 0;
;;;325    						PA13 = 0;
;;;326    						PA1 = 0;
;;;327    						ledtimecount = 1;
;;;328    					}
;;;329    				}
;;;330    				else
;;;331    				{
;;;332    					PA12 = 1;
00005c  49f0              LDR      r1,|L10.1056|
00005e  2001              MOVS     r0,#1
000060  6308              STR      r0,[r1,#0x30]
;;;333    					PA13 = 1;
000062  6348              STR      r0,[r1,#0x34]
;;;334    					PA1 = 1;
000064  6048              STR      r0,[r1,#4]
;;;335    					Drv_4GMoudle_PowerUp(0); // if timeout,turn off.
000066  2000              MOVS     r0,#0
000068  f7fffffe          BL       Drv_4GMoudle_PowerUp
;;;336    					TYM_drv_powerkeepon(0); 
00006c  2000              MOVS     r0,#0
00006e  f7fffffe          BL       TYM_drv_powerkeepon
;;;337    
;;;338    					Global_datas.shoutting_down = 0;
000072  2000              MOVS     r0,#0
000074  7360              STRB     r0,[r4,#0xd]
                  |L10.118|
;;;339    				}
;;;340    				
;;;341    			}
;;;342    
;;;343    
;;;344    			
;;;345    		}
;;;346    
;;;347    		
;;;348    		if(Global_datas.key_led_blink)
000076  7b20              LDRB     r0,[r4,#0xc]  ; Global_datas
000078  2800              CMP      r0,#0
00007a  d008              BEQ      |L10.142|
;;;349    		{
;;;350    			Global_datas.key_led_blink = 0;
00007c  2000              MOVS     r0,#0
00007e  7320              STRB     r0,[r4,#0xc]
;;;351    			drv_err_led_on(1);
000080  2001              MOVS     r0,#1
000082  f7fffffe          BL       drv_err_led_on
;;;352    			TimeOutSet(&LedKeyBlinkTimer, 100);
000086  2164              MOVS     r1,#0x64
000088  48e6              LDR      r0,|L10.1060|
00008a  f7fffffe          BL       TimeOutSet
                  |L10.142|
;;;353    		}
;;;354    
;;;355    		if(IsTimeOut(&LedKeyBlinkTimer))
00008e  48e5              LDR      r0,|L10.1060|
000090  f7fffffe          BL       IsTimeOut
000094  2800              CMP      r0,#0
000096  d002              BEQ      |L10.158|
;;;356    		{
;;;357    			drv_err_led_on(0);
000098  2000              MOVS     r0,#0
00009a  f7fffffe          BL       drv_err_led_on
                  |L10.158|
;;;358    		}
;;;359    
;;;360    		if(Core_Msg_Get(&msg))
00009e  a801              ADD      r0,sp,#4
0000a0  f7fffffe          BL       Core_Msg_Get
0000a4  2800              CMP      r0,#0
0000a6  d075              BEQ      |L10.404|
;;;361    		{
;;;362            // deal with message
;;;363            switch(msg.msg)
0000a8  9801              LDR      r0,[sp,#4]
0000aa  2801              CMP      r0,#1
0000ac  d014              BEQ      |L10.216|
0000ae  2802              CMP      r0,#2
                  |L10.176|
0000b0  d170              BNE      |L10.404|
0000b2  e140              B        |L10.822|
                  |L10.180|
0000b4  9805              LDR      r0,[sp,#0x14]         ;315
0000b6  2800              CMP      r0,#0                 ;315
0000b8  d006              BEQ      |L10.200|
0000ba  49d9              LDR      r1,|L10.1056|
0000bc  2001              MOVS     r0,#1                 ;317
0000be  6308              STR      r0,[r1,#0x30]         ;317
0000c0  6348              STR      r0,[r1,#0x34]         ;318
0000c2  6048              STR      r0,[r1,#4]            ;319
0000c4  2000              MOVS     r0,#0                 ;320
0000c6  e005              B        |L10.212|
                  |L10.200|
0000c8  49d5              LDR      r1,|L10.1056|
0000ca  2000              MOVS     r0,#0                 ;324
0000cc  6308              STR      r0,[r1,#0x30]         ;324
0000ce  6348              STR      r0,[r1,#0x34]         ;325
0000d0  6048              STR      r0,[r1,#4]            ;326
0000d2  2001              MOVS     r0,#1                 ;327
                  |L10.212|
0000d4  9005              STR      r0,[sp,#0x14]         ;327
0000d6  e7ce              B        |L10.118|
                  |L10.216|
;;;364    	        {
;;;365    	            case MSG_4G_SYS_STATE_IND:
;;;366    					drv_Cmd_Send2NCU031(msg.param0,msg.param1,msg.param2);
0000d8  9804              LDR      r0,[sp,#0x10]
0000da  b2c2              UXTB     r2,r0
0000dc  9803              LDR      r0,[sp,#0xc]
0000de  b2c1              UXTB     r1,r0
0000e0  9802              LDR      r0,[sp,#8]
0000e2  b2c0              UXTB     r0,r0
0000e4  f7fffffe          BL       drv_Cmd_Send2NCU031
;;;367    					printf("MSG_4G_SYS_STATE_IND:msg.param0 = %x, msg.param1 = %x \n",msg.param0,msg.param1);
0000e8  a0cf              ADR      r0,|L10.1064|
0000ea  9a03              LDR      r2,[sp,#0xc]
0000ec  9902              LDR      r1,[sp,#8]
0000ee  f7fffffe          BL       __2printf
;;;368    	                if((msg.param0 == 0x08) && (msg.param1 == 0x00))
0000f2  9802              LDR      r0,[sp,#8]
0000f4  2808              CMP      r0,#8
0000f6  d114              BNE      |L10.290|
0000f8  9803              LDR      r0,[sp,#0xc]
0000fa  2800              CMP      r0,#0
0000fc  d1d8              BNE      |L10.176|
;;;369    	                {
;;;370    
;;;371    						printf("0x08, msg.param1 = %x \n",msg.param1);
0000fe  4601              MOV      r1,r0
000100  a0d7              ADR      r0,|L10.1120|
000102  f7fffffe          BL       __2printf
;;;372    	                	//Cmd_Send2FourG(0x03,0x16,0x00);
;;;373    						drv_Cmd_Send2NCU031(msg.param0,msg.param1,0);
000106  9803              LDR      r0,[sp,#0xc]
000108  2200              MOVS     r2,#0
00010a  b2c1              UXTB     r1,r0
00010c  9802              LDR      r0,[sp,#8]
00010e  b2c0              UXTB     r0,r0
000110  f7fffffe          BL       drv_Cmd_Send2NCU031
;;;374    						Global_datas.g_4g_initing = 0;
000114  2000              MOVS     r0,#0
000116  71a0              STRB     r0,[r4,#6]
;;;375    						Global_datas.g_mode_status = WIFI_MODE;
000118  2001              MOVS     r0,#1
00011a  7160              STRB     r0,[r4,#5]
;;;376    						printf("\n AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n");
00011c  a0d6              ADR      r0,|L10.1144|
00011e  f7fffffe          BL       __2printf
                  |L10.290|
;;;377    					} 
;;;378    					
;;;379    					if((msg.param0 == 0x09) && (msg.param1 == 0x01))
000122  9802              LDR      r0,[sp,#8]
000124  2809              CMP      r0,#9
000126  d12a              BNE      |L10.382|
000128  9803              LDR      r0,[sp,#0xc]
00012a  2801              CMP      r0,#1
00012c  d1c0              BNE      |L10.176|
;;;380    	                {
;;;381    //						printf("0x09, msg.param1 = %x \n",msg.param1);
;;;382    	                	//in bat val
;;;383    						bat_val[1] = (Global_datas.ADC_ChannelValue[15]>>8) & 0xff;
00012e  48b8              LDR      r0,|L10.1040|
000130  466b              MOV      r3,sp
000132  3820              SUBS     r0,r0,#0x20
000134  8bc0              LDRH     r0,[r0,#0x1e]  ; Global_datas
000136  0401              LSLS     r1,r0,#16
000138  0e09              LSRS     r1,r1,#24
00013a  7059              STRB     r1,[r3,#1]
;;;384    						bat_val[0] = Global_datas.ADC_ChannelValue[15] & 0xff;
00013c  b2c2              UXTB     r2,r0
00013e  701a              STRB     r2,[r3,#0]
;;;385    						if(Global_datas.g_PowerStatus.PowerBatInStatus != POWER_BAT_IN_FALSE)
000140  7820              LDRB     r0,[r4,#0]  ; Global_datas
000142  2801              CMP      r0,#1
000144  d002              BEQ      |L10.332|
;;;386    							bat_val[1] = bat_val[1] & 0x80;  //in bat en
000146  09c8              LSRS     r0,r1,#7
000148  01c0              LSLS     r0,r0,#7
00014a  7058              STRB     r0,[r3,#1]
                  |L10.332|
;;;387    						Cmd_Send2FourG(0x09,bat_val[1],bat_val[0]);
00014c  7859              LDRB     r1,[r3,#1]
00014e  2009              MOVS     r0,#9
000150  f7fffffe          BL       Cmd_Send2FourG
;;;388    						//ex bat val
;;;389    						bat_val[1] = (Global_datas.ADC_ChannelValue[12]>>8) & 0xff;
000154  48ae              LDR      r0,|L10.1040|
000156  3820              SUBS     r0,r0,#0x20
000158  8b02              LDRH     r2,[r0,#0x18]  ; Global_datas
00015a  0410              LSLS     r0,r2,#16
00015c  0e01              LSRS     r1,r0,#24
00015e  4668              MOV      r0,sp
000160  7041              STRB     r1,[r0,#1]
;;;390    						bat_val[0] = Global_datas.ADC_ChannelValue[12] & 0xff;
000162  b2d2              UXTB     r2,r2
000164  7002              STRB     r2,[r0,#0]
;;;391    						if(Global_datas.g_PowerStatus.PowerBatExStatus != POWER_BAT_EX_FALSE)
000166  7860              LDRB     r0,[r4,#1]  ; Global_datas
000168  2803              CMP      r0,#3
00016a  d003              BEQ      |L10.372|
;;;392    							bat_val[1] = bat_val[1] & 0x60;  //ex bat en
00016c  2060              MOVS     r0,#0x60
00016e  4001              ANDS     r1,r1,r0
000170  4668              MOV      r0,sp
000172  7041              STRB     r1,[r0,#1]
                  |L10.372|
;;;393    						Cmd_Send2FourG(0x09,bat_val[1],bat_val[0]);
000174  4668              MOV      r0,sp
000176  7841              LDRB     r1,[r0,#1]
000178  2009              MOVS     r0,#9
00017a  f7fffffe          BL       Cmd_Send2FourG
                  |L10.382|
;;;394    					}
;;;395    					
;;;396    					if(msg.param0 == 0x07)
00017e  9802              LDR      r0,[sp,#8]
000180  2807              CMP      r0,#7
000182  d103              BNE      |L10.396|
;;;397    	        		{
;;;398    	                	// vol
;;;399    	                	//Drv_Dap_vol_set(msg.param1);
;;;400    						printf("0x07, msg.param1 = %x \n",msg.param1);
000184  a0c6              ADR      r0,|L10.1184|
000186  9903              LDR      r1,[sp,#0xc]
000188  f7fffffe          BL       __2printf
                  |L10.396|
;;;401    					}
;;;402    					if(msg.param0 == 0x04 )
00018c  9802              LDR      r0,[sp,#8]
00018e  2804              CMP      r0,#4
000190  d105              BNE      |L10.414|
;;;403    					{
;;;404    	                	//Drv_Dap_vol_mute(msg.param1);
;;;405    	                	// vol
;;;406    	                	
;;;407    					printf("0x04, msg.param1 = %x \n",msg.param1);
000192  e000              B        |L10.406|
                  |L10.404|
000194  e0ce              B        |L10.820|
                  |L10.406|
000196  a0c8              ADR      r0,|L10.1208|
000198  9903              LDR      r1,[sp,#0xc]
00019a  f7fffffe          BL       __2printf
                  |L10.414|
;;;408    					}
;;;409    					
;;;410    					if(msg.param0 == 0x0F)
00019e  9802              LDR      r0,[sp,#8]
0001a0  280f              CMP      r0,#0xf
0001a2  d111              BNE      |L10.456|
;;;411    					{
;;;412    						if(msg.param1 == 0x19)
0001a4  9803              LDR      r0,[sp,#0xc]
0001a6  2819              CMP      r0,#0x19
0001a8  d105              BNE      |L10.438|
;;;413    						{
;;;414    							Global_datas.g_mode_status = LOUD_SPEAKER_MODE;
0001aa  2009              MOVS     r0,#9
0001ac  7160              STRB     r0,[r4,#5]
;;;415    							printf("0x0F, msg.param1 = %x \n",msg.param1);
0001ae  a0c8              ADR      r0,|L10.1232|
0001b0  9903              LDR      r1,[sp,#0xc]
0001b2  f7fffffe          BL       __2printf
                  |L10.438|
;;;416    						}
;;;417    					
;;;418    						if (msg.param1 == 0x17)
0001b6  9803              LDR      r0,[sp,#0xc]
0001b8  2817              CMP      r0,#0x17
0001ba  d105              BNE      |L10.456|
;;;419    						{
;;;420    		                	Global_datas.g_mode_status = AUX_MODE;
0001bc  2008              MOVS     r0,#8
0001be  7160              STRB     r0,[r4,#5]
;;;421    						printf("0x0F, msg.param1 = %x \n",msg.param1);
0001c0  a0c3              ADR      r0,|L10.1232|
0001c2  9903              LDR      r1,[sp,#0xc]
0001c4  f7fffffe          BL       __2printf
                  |L10.456|
;;;422    						}
;;;423    					}
;;;424    
;;;425    					if(msg.param0 == 0x0d)  // 4G GO TO POWER OFF , NEED TO POWER DOWN 4G VCC
0001c8  9802              LDR      r0,[sp,#8]
0001ca  280d              CMP      r0,#0xd
0001cc  d105              BNE      |L10.474|
;;;426    					{
;;;427    						Drv_4GMoudle_PowerUp(0);  // wait for 4g modle ready ,than turn off power
0001ce  2000              MOVS     r0,#0
0001d0  f7fffffe          BL       Drv_4GMoudle_PowerUp
;;;428    						TYM_drv_powerkeepon(0); 
0001d4  2000              MOVS     r0,#0
0001d6  f7fffffe          BL       TYM_drv_powerkeepon
                  |L10.474|
;;;429    					}
;;;430    
;;;431    					if(msg.param0 == 0x06)  // sys status
0001da  9802              LDR      r0,[sp,#8]
0001dc  2806              CMP      r0,#6
0001de  d150              BNE      |L10.642|
;;;432    					{
;;;433    						if(msg.param1 == 0x06)
0001e0  9803              LDR      r0,[sp,#0xc]
0001e2  2806              CMP      r0,#6
0001e4  d104              BNE      |L10.496|
;;;434    						{
;;;435    		                	Global_datas.g_mode_status = BT_MODE;
0001e6  2106              MOVS     r1,#6
0001e8  7161              STRB     r1,[r4,#5]
;;;436    							printf("0x06, msg.param1 = %x \n",msg.param1);
0001ea  a0bf              ADR      r0,|L10.1256|
0001ec  f7fffffe          BL       __2printf
                  |L10.496|
;;;437    						}
;;;438    					
;;;439    						if (msg.param1 == 0x07)
0001f0  9803              LDR      r0,[sp,#0xc]
0001f2  2807              CMP      r0,#7
0001f4  d104              BNE      |L10.512|
;;;440    						{
;;;441    		                	Global_datas.g_mode_status = BT_CONNECTED_MODE;
0001f6  2107              MOVS     r1,#7
0001f8  7161              STRB     r1,[r4,#5]
;;;442    		                	
;;;443    						printf("0x06, msg.param1 = %x \n",msg.param1);
0001fa  a0bb              ADR      r0,|L10.1256|
0001fc  f7fffffe          BL       __2printf
                  |L10.512|
;;;444    						}
;;;445    						if (msg.param1 == 0x02)
000200  9803              LDR      r0,[sp,#0xc]
000202  2802              CMP      r0,#2
000204  d104              BNE      |L10.528|
;;;446    						{
;;;447    		                	Global_datas.g_mode_status = WIFI_CONNECTED_MODE;
000206  2102              MOVS     r1,#2
000208  7161              STRB     r1,[r4,#5]
;;;448    		                	
;;;449    						printf("0x06, msg.param1 = %x \n",msg.param1);
00020a  a0b7              ADR      r0,|L10.1256|
00020c  f7fffffe          BL       __2printf
                  |L10.528|
;;;450    						}
;;;451    						if (msg.param1 == 0x04)
000210  9803              LDR      r0,[sp,#0xc]
000212  2804              CMP      r0,#4
000214  d105              BNE      |L10.546|
;;;452    						{
;;;453    		                	Global_datas.g_mode_status = WIFI_MODE;
000216  2001              MOVS     r0,#1
000218  7160              STRB     r0,[r4,#5]
;;;454    		                	
;;;455    						printf("0x06, msg.param1 = %x \n",msg.param1);
00021a  a0b3              ADR      r0,|L10.1256|
00021c  9903              LDR      r1,[sp,#0xc]
00021e  f7fffffe          BL       __2printf
                  |L10.546|
;;;456    						}
;;;457    						if (msg.param1 == 0x05)
000222  9803              LDR      r0,[sp,#0xc]
000224  2805              CMP      r0,#5
000226  d105              BNE      |L10.564|
;;;458    						{
;;;459    		                	Global_datas.g_mode_status = WIFI_CONNECTING_MODE;
000228  2003              MOVS     r0,#3
00022a  7160              STRB     r0,[r4,#5]
;;;460    		                	
;;;461    						printf("0x06, msg.param1 = %x \n",msg.param1);
00022c  a0ae              ADR      r0,|L10.1256|
00022e  9903              LDR      r1,[sp,#0xc]
000230  f7fffffe          BL       __2printf
                  |L10.564|
;;;462    						}
;;;463    						if (msg.param1 == 0x011)
000234  9803              LDR      r0,[sp,#0xc]
000236  2811              CMP      r0,#0x11
000238  d105              BNE      |L10.582|
;;;464    						{
;;;465    		                	Global_datas.g_mode_status = FOURG_CONNECTED_MODE;
00023a  2005              MOVS     r0,#5
00023c  7160              STRB     r0,[r4,#5]
;;;466    		                	
;;;467    						printf("0x06, msg.param1 = %x \n",msg.param1);
00023e  a0aa              ADR      r0,|L10.1256|
000240  9903              LDR      r1,[sp,#0xc]
000242  f7fffffe          BL       __2printf
                  |L10.582|
;;;468    						}
;;;469    						if (msg.param1 == 0x012)
000246  9803              LDR      r0,[sp,#0xc]
000248  2812              CMP      r0,#0x12
00024a  d105              BNE      |L10.600|
;;;470    						{
;;;471    		                	Global_datas.g_mode_status = FOURG_MODE;
00024c  2004              MOVS     r0,#4
00024e  7160              STRB     r0,[r4,#5]
;;;472    		                	
;;;473    						printf("0x06, msg.param1 = %x \n",msg.param1);
000250  a0a5              ADR      r0,|L10.1256|
000252  9903              LDR      r1,[sp,#0xc]
000254  f7fffffe          BL       __2printf
                  |L10.600|
;;;474    						}
;;;475    						if (msg.param1 == 0x0B)
000258  9803              LDR      r0,[sp,#0xc]
00025a  280b              CMP      r0,#0xb
00025c  d104              BNE      |L10.616|
;;;476    						{
;;;477    		                	Global_datas.g_mode_status = SYSTEM_UPDATING;
00025e  210b              MOVS     r1,#0xb
000260  7161              STRB     r1,[r4,#5]
;;;478    		                	
;;;479    						printf("0x06, msg.param1 = %x \n",msg.param1);
000262  a0a1              ADR      r0,|L10.1256|
000264  f7fffffe          BL       __2printf
                  |L10.616|
;;;480    						}
;;;481    						if ((msg.param1 == 0x09) || (msg.param1 == 0x08) || (msg.param1 == 0x16))
000268  9803              LDR      r0,[sp,#0xc]
00026a  2809              CMP      r0,#9
00026c  d003              BEQ      |L10.630|
00026e  2808              CMP      r0,#8
000270  d001              BEQ      |L10.630|
000272  2816              CMP      r0,#0x16
000274  d105              BNE      |L10.642|
                  |L10.630|
;;;482    						{
;;;483    		                	Global_datas.g_mode_status = SYS_LOW_POWER;
000276  200c              MOVS     r0,#0xc
000278  7160              STRB     r0,[r4,#5]
;;;484    		                	
;;;485    						printf("0x06, msg.param1 = %x \n",msg.param1);
00027a  a09b              ADR      r0,|L10.1256|
00027c  9903              LDR      r1,[sp,#0xc]
00027e  f7fffffe          BL       __2printf
                  |L10.642|
;;;486    						}
;;;487    						
;;;488    					}
;;;489    				//rtc time	
;;;490    					if(msg.param0 == 0x11)
000282  9802              LDR      r0,[sp,#8]
000284  2811              CMP      r0,#0x11
000286  d105              BNE      |L10.660|
;;;491    					{
;;;492    						srv_rtc_set_ym(msg.param1,msg.param2);
000288  9804              LDR      r0,[sp,#0x10]
00028a  b2c1              UXTB     r1,r0
00028c  9803              LDR      r0,[sp,#0xc]
00028e  b2c0              UXTB     r0,r0
000290  f7fffffe          BL       srv_rtc_set_ym
                  |L10.660|
;;;493    					}
;;;494    					
;;;495    					if(msg.param0 == 0x12)
000294  9802              LDR      r0,[sp,#8]
000296  2812              CMP      r0,#0x12
000298  d105              BNE      |L10.678|
;;;496    					{
;;;497    						srv_rtc_set_dw(msg.param1,msg.param2);
00029a  9804              LDR      r0,[sp,#0x10]
00029c  b2c1              UXTB     r1,r0
00029e  9803              LDR      r0,[sp,#0xc]
0002a0  b2c0              UXTB     r0,r0
0002a2  f7fffffe          BL       srv_rtc_set_dw
                  |L10.678|
;;;498    					}
;;;499    					
;;;500    					if(msg.param0 == 0x13)
0002a6  9802              LDR      r0,[sp,#8]
0002a8  2813              CMP      r0,#0x13
0002aa  d105              BNE      |L10.696|
;;;501    					{
;;;502    						srv_rtc_set_hm(msg.param1,msg.param2);
0002ac  9804              LDR      r0,[sp,#0x10]
0002ae  b2c1              UXTB     r1,r0
0002b0  9803              LDR      r0,[sp,#0xc]
0002b2  b2c0              UXTB     r0,r0
0002b4  f7fffffe          BL       srv_rtc_set_hm
                  |L10.696|
;;;503    					}
;;;504    					
;;;505    					if(msg.param0 == 0x14)
0002b8  9802              LDR      r0,[sp,#8]
0002ba  2814              CMP      r0,#0x14
0002bc  d105              BNE      |L10.714|
;;;506    					{
;;;507    						srv_rtc_set_st(msg.param1,msg.param2);
0002be  9804              LDR      r0,[sp,#0x10]
0002c0  b2c1              UXTB     r1,r0
0002c2  9803              LDR      r0,[sp,#0xc]
0002c4  b2c0              UXTB     r0,r0
0002c6  f7fffffe          BL       srv_rtc_set_st
                  |L10.714|
;;;508    					}
;;;509    					//rtc alarm
;;;510    					if(msg.param0 == 0x15)
0002ca  9802              LDR      r0,[sp,#8]
0002cc  2815              CMP      r0,#0x15
0002ce  d105              BNE      |L10.732|
;;;511    					{
;;;512    						srv_rtc_alarm_set_ym(msg.param1,msg.param2);
0002d0  9804              LDR      r0,[sp,#0x10]
0002d2  b2c1              UXTB     r1,r0
0002d4  9803              LDR      r0,[sp,#0xc]
0002d6  b2c0              UXTB     r0,r0
0002d8  f7fffffe          BL       srv_rtc_alarm_set_ym
                  |L10.732|
;;;513    					}
;;;514    					
;;;515    					if(msg.param0 == 0x16)
0002dc  9802              LDR      r0,[sp,#8]
0002de  2816              CMP      r0,#0x16
0002e0  d105              BNE      |L10.750|
;;;516    					{
;;;517    						srv_rtc_alarm_set_dw(msg.param1,msg.param2);
0002e2  9804              LDR      r0,[sp,#0x10]
0002e4  b2c1              UXTB     r1,r0
0002e6  9803              LDR      r0,[sp,#0xc]
0002e8  b2c0              UXTB     r0,r0
0002ea  f7fffffe          BL       srv_rtc_alarm_set_dw
                  |L10.750|
;;;518    					}
;;;519    					
;;;520    					if(msg.param0 == 0x17)
0002ee  9802              LDR      r0,[sp,#8]
0002f0  2817              CMP      r0,#0x17
0002f2  d105              BNE      |L10.768|
;;;521    					{
;;;522    						srv_rtc_alarm_set_hm(msg.param1,msg.param2);
0002f4  9804              LDR      r0,[sp,#0x10]
0002f6  b2c1              UXTB     r1,r0
0002f8  9803              LDR      r0,[sp,#0xc]
0002fa  b2c0              UXTB     r0,r0
0002fc  f7fffffe          BL       srv_rtc_alarm_set_hm
                  |L10.768|
;;;523    					}
;;;524    					
;;;525    					if(msg.param0 == 0x18)
000300  9802              LDR      r0,[sp,#8]
000302  2818              CMP      r0,#0x18
000304  d105              BNE      |L10.786|
;;;526    					{
;;;527    						srv_rtc_alarm_set_st(msg.param1,msg.param2);
000306  9804              LDR      r0,[sp,#0x10]
000308  b2c1              UXTB     r1,r0
00030a  9803              LDR      r0,[sp,#0xc]
00030c  b2c0              UXTB     r0,r0
00030e  f7fffffe          BL       srv_rtc_alarm_set_st
                  |L10.786|
;;;528    					}
;;;529    					if(msg.param0 == 0x19)
000312  9802              LDR      r0,[sp,#8]
000314  2819              CMP      r0,#0x19
000316  d101              BNE      |L10.796|
;;;530    					{
;;;531    						srv_rtc_get();
000318  f7fffffe          BL       srv_rtc_get
                  |L10.796|
;;;532    					}
;;;533    					if(msg.param0 == 0x1a)
00031c  9802              LDR      r0,[sp,#8]
00031e  281a              CMP      r0,#0x1a
000320  d101              BNE      |L10.806|
;;;534    					{
;;;535    						srv_rtc_alarm_get();
000322  f7fffffe          BL       srv_rtc_alarm_get
                  |L10.806|
;;;536    					}
;;;537    					
;;;538    					if(msg.param0 == 0x20)
000326  9802              LDR      r0,[sp,#8]
000328  2820              CMP      r0,#0x20
00032a  d103              BNE      |L10.820|
;;;539    					{
;;;540    						Cmd_Send2FourG(0x20,0x0,0x3);  //version 0.0.3
00032c  2203              MOVS     r2,#3
00032e  2100              MOVS     r1,#0
000330  f7fffffe          BL       Cmd_Send2FourG
                  |L10.820|
000334  e142              B        |L10.1468|
                  |L10.822|
;;;541    					}
;;;542    	            break;
;;;543    
;;;544    			 	case MSG_MCU1_SYS_STATE_IND:
;;;545    
;;;546    				    if((msg.param0 == 0x03) && (msg.param1 == 0x55)) //power off mode
000336  9802              LDR      r0,[sp,#8]
000338  2803              CMP      r0,#3
00033a  d102              BNE      |L10.834|
00033c  9803              LDR      r0,[sp,#0xc]
00033e  2855              CMP      r0,#0x55
000340  d0f8              BEQ      |L10.820|
                  |L10.834|
;;;547    					{
;;;548    						//Global_datas.g_mode_status = POWER_OFF_MODE;
;;;549    					}
;;;550    					else
;;;551    					{
;;;552    						Cmd_Send2FourG( msg.param0,msg.param1,msg.param2);
000342  9804              LDR      r0,[sp,#0x10]
000344  b2c2              UXTB     r2,r0
000346  9803              LDR      r0,[sp,#0xc]
000348  b2c1              UXTB     r1,r0
00034a  9802              LDR      r0,[sp,#8]
00034c  b2c0              UXTB     r0,r0
00034e  f7fffffe          BL       Cmd_Send2FourG
;;;553    					}
;;;554    					
;;;555    					
;;;556    					//printf("MSG_MCU1_SYS_STATE_IND:msg.param0 = %x, msg.param1 = %x \n",msg.param0,msg.param1);
;;;557    					if((msg.param0 == 0x01) && (msg.param1 == 0x00))
000352  9802              LDR      r0,[sp,#8]
000354  2801              CMP      r0,#1
000356  d107              BNE      |L10.872|
000358  9803              LDR      r0,[sp,#0xc]
00035a  2800              CMP      r0,#0
00035c  d1ea              BNE      |L10.820|
;;;558    					{
;;;559    						drv_Cmd_Send2NCU031(0x01,Global_datas.g_PowerStatus.bat_status,Global_datas.g_PowerStatus.bat_value);
00035e  7922              LDRB     r2,[r4,#4]  ; Global_datas
000360  78e1              LDRB     r1,[r4,#3]  ; Global_datas
000362  2001              MOVS     r0,#1
000364  f7fffffe          BL       drv_Cmd_Send2NCU031
                  |L10.872|
;;;560    					}
;;;561    					if(msg.param0 == 0x02) // MIC VOLUNE ,NO USE 
;;;562    					{
;;;563    					
;;;564    					}
;;;565    
;;;566    					if((msg.param0 == 0x03) && (msg.param1 == 0x03))
000368  9802              LDR      r0,[sp,#8]
00036a  2803              CMP      r0,#3
00036c  d149              BNE      |L10.1026|
00036e  9803              LDR      r0,[sp,#0xc]
000370  2803              CMP      r0,#3
000372  d10d              BNE      |L10.912|
;;;567    					{
;;;568    						if (Global_datas.volume > VOLUME_MIN)
000374  7be0              LDRB     r0,[r4,#0xf]  ; Global_datas
000376  2800              CMP      r0,#0
000378  d043              BEQ      |L10.1026|
00037a  1e40              SUBS     r0,r0,#1
;;;569    						{
;;;570    							Global_datas.volume--;
00037c  b2c0              UXTB     r0,r0
00037e  73e0              STRB     r0,[r4,#0xf]
;;;571    							Drv_Dap_vol_set(Global_datas.volume);
000380  f7fffffe          BL       Drv_Dap_vol_set
;;;572    							printf("Hal_Dap_Load_vol_add\n");
000384  a05e              ADR      r0,|L10.1280|
000386  f7fffffe          BL       __2printf
;;;573    						}
;;;574    					}
;;;575    					
;;;576    					if((msg.param0 == 0x03) && (msg.param1 == 0x02))
00038a  9802              LDR      r0,[sp,#8]
00038c  2803              CMP      r0,#3
00038e  d138              BNE      |L10.1026|
                  |L10.912|
000390  9803              LDR      r0,[sp,#0xc]
000392  2802              CMP      r0,#2
000394  d10d              BNE      |L10.946|
;;;577    					{
;;;578    						if (Global_datas.volume < VOLUME_MAX)
000396  7be0              LDRB     r0,[r4,#0xf]  ; Global_datas
000398  2810              CMP      r0,#0x10
00039a  d232              BCS      |L10.1026|
00039c  1c40              ADDS     r0,r0,#1
;;;579    						{
;;;580    							Global_datas.volume++;
00039e  b2c0              UXTB     r0,r0
0003a0  73e0              STRB     r0,[r4,#0xf]
;;;581    							Drv_Dap_vol_set(Global_datas.volume);
0003a2  f7fffffe          BL       Drv_Dap_vol_set
;;;582    							printf("Hal_Dap_Load_vol_reduce\n");
0003a6  a05c              ADR      r0,|L10.1304|
0003a8  f7fffffe          BL       __2printf
;;;583    						}
;;;584    					}
;;;585    
;;;586    					if((msg.param0 == 0x03) && (msg.param1 == 0x15)) //wifi mode
0003ac  9802              LDR      r0,[sp,#8]
0003ae  2803              CMP      r0,#3
0003b0  d127              BNE      |L10.1026|
                  |L10.946|
0003b2  9803              LDR      r0,[sp,#0xc]
0003b4  2815              CMP      r0,#0x15
0003b6  d107              BNE      |L10.968|
;;;587    					{
;;;588    						Global_datas.g_mode_status = WIFI_MODE;
0003b8  2001              MOVS     r0,#1
0003ba  7160              STRB     r0,[r4,#5]
;;;589    						printf("FourG_WIFI_CHANNEL\n");
0003bc  a05d              ADR      r0,|L10.1332|
0003be  f7fffffe          BL       __2printf
;;;590    					}
;;;591    					if((msg.param0 == 0x03) && (msg.param1 == 0x16)) //BT mode
0003c2  9802              LDR      r0,[sp,#8]
0003c4  2803              CMP      r0,#3
0003c6  d11c              BNE      |L10.1026|
                  |L10.968|
0003c8  9803              LDR      r0,[sp,#0xc]
0003ca  2816              CMP      r0,#0x16
0003cc  d107              BNE      |L10.990|
;;;592    					{
;;;593    						Global_datas.g_mode_status = BT_MODE;
0003ce  2006              MOVS     r0,#6
0003d0  7160              STRB     r0,[r4,#5]
;;;594    						printf("FourG_BT_CHANNEL\n");
0003d2  a05d              ADR      r0,|L10.1352|
0003d4  f7fffffe          BL       __2printf
;;;595    					}
;;;596    					if((msg.param0 == 0x03) && (msg.param1 == 0x17)) //AUX mode
0003d8  9802              LDR      r0,[sp,#8]
0003da  2803              CMP      r0,#3
0003dc  d111              BNE      |L10.1026|
                  |L10.990|
0003de  9803              LDR      r0,[sp,#0xc]
0003e0  2817              CMP      r0,#0x17
0003e2  d107              BNE      |L10.1012|
;;;597    					{
;;;598    						Global_datas.g_mode_status = AUX_MODE;
0003e4  2008              MOVS     r0,#8
0003e6  7160              STRB     r0,[r4,#5]
;;;599    						printf("AUXIN_CHANNEL\n");
0003e8  a05c              ADR      r0,|L10.1372|
0003ea  f7fffffe          BL       __2printf
;;;600    					}
;;;601    					if((msg.param0 == 0x03) && (msg.param1 == 0x18)) //FM mode
0003ee  9802              LDR      r0,[sp,#8]
0003f0  2803              CMP      r0,#3
0003f2  d106              BNE      |L10.1026|
                  |L10.1012|
0003f4  9803              LDR      r0,[sp,#0xc]
0003f6  2818              CMP      r0,#0x18
0003f8  d104              BNE      |L10.1028|
;;;602    					{
;;;603    						Global_datas.g_mode_status = FM_MODE;
0003fa  200a              MOVS     r0,#0xa
0003fc  7160              STRB     r0,[r4,#5]
;;;604    						printf("AUXIN_CHANNEL\n");
0003fe  a057              ADR      r0,|L10.1372|
000400  e0b4              B        |L10.1388|
                  |L10.1026|
000402  e0db              B        |L10.1468|
                  |L10.1028|
000404  e0b7              B        |L10.1398|
000406  0000              DCW      0x0000
                  |L10.1032|
000408  0a6d6169          DCB      "\nmain\n",0
00040c  6e0a00  
00040f  00                DCB      0
                  |L10.1040|
                          DCD      Global_datas+0x20
                  |L10.1044|
                          DCD      SysTimer_1s
                  |L10.1048|
                          DCD      ModulePowerUpPinTimer
                  |L10.1052|
                          DCD      PoweroffLedTimer
                  |L10.1056|
                          DCD      0x50004200
                  |L10.1060|
                          DCD      LedKeyBlinkTimer
                  |L10.1064|
000428  4d53475f          DCB      "MSG_4G_SYS_STATE_IND:msg.param0 = %x, msg.param1 = %x \n"
00042c  34475f53
000430  59535f53
000434  54415445
000438  5f494e44
00043c  3a6d7367
000440  2e706172
000444  616d3020
000448  3d202578
00044c  2c206d73
000450  672e7061
000454  72616d31
000458  203d2025
00045c  78200a  
00045f  00                DCB      0
                  |L10.1120|
000460  30783038          DCB      "0x08, msg.param1 = %x \n",0
000464  2c206d73
000468  672e7061
00046c  72616d31
000470  203d2025
000474  78200a00
                  |L10.1144|
000478  0a204141          DCB      "\n AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n",0
00047c  41414141
000480  41414141
000484  41414141
000488  41414141
00048c  41414141
000490  41414141
000494  41414141
000498  41414141
00049c  0a00    
00049e  00                DCB      0
00049f  00                DCB      0
                  |L10.1184|
0004a0  30783037          DCB      "0x07, msg.param1 = %x \n",0
0004a4  2c206d73
0004a8  672e7061
0004ac  72616d31
0004b0  203d2025
0004b4  78200a00
                  |L10.1208|
0004b8  30783034          DCB      "0x04, msg.param1 = %x \n",0
0004bc  2c206d73
0004c0  672e7061
0004c4  72616d31
0004c8  203d2025
0004cc  78200a00
                  |L10.1232|
0004d0  30783046          DCB      "0x0F, msg.param1 = %x \n",0
0004d4  2c206d73
0004d8  672e7061
0004dc  72616d31
0004e0  203d2025
0004e4  78200a00
                  |L10.1256|
0004e8  30783036          DCB      "0x06, msg.param1 = %x \n",0
0004ec  2c206d73
0004f0  672e7061
0004f4  72616d31
0004f8  203d2025
0004fc  78200a00
                  |L10.1280|
000500  48616c5f          DCB      "Hal_Dap_Load_vol_add\n",0
000504  4461705f
000508  4c6f6164
00050c  5f766f6c
000510  5f616464
000514  0a00    
000516  00                DCB      0
000517  00                DCB      0
                  |L10.1304|
000518  48616c5f          DCB      "Hal_Dap_Load_vol_reduce\n",0
00051c  4461705f
000520  4c6f6164
000524  5f766f6c
000528  5f726564
00052c  7563650a
000530  00      
000531  00                DCB      0
000532  00                DCB      0
000533  00                DCB      0
                  |L10.1332|
000534  466f7572          DCB      "FourG_WIFI_CHANNEL\n",0
000538  475f5749
00053c  46495f43
000540  48414e4e
000544  454c0a00
                  |L10.1352|
000548  466f7572          DCB      "FourG_BT_CHANNEL\n",0
00054c  475f4254
000550  5f434841
000554  4e4e454c
000558  0a00    
00055a  00                DCB      0
00055b  00                DCB      0
                  |L10.1372|
00055c  41555849          DCB      "AUXIN_CHANNEL\n",0
000560  4e5f4348
000564  414e4e45
000568  4c0a00  
00056b  00                DCB      0
                  |L10.1388|
00056c  f7fffffe          BL       __2printf
;;;605    					//	drv_fm_led_on();
;;;606    					}
;;;607    					if((msg.param0 == 0x03) && (msg.param1 == 0x31)) // NEXT CHANNEL
;;;608    					{
;;;609    								
;;;610    					}
;;;611    					if((msg.param0 == 0x03) && (msg.param1 == 0x32))// PRE CHANNEL
;;;612    					{
;;;613    					
;;;614    					}
;;;615    					if((msg.param0 == 0x03) && (msg.param1 == 0x56)) // PLAY/PAUSE
;;;616    					{
;;;617    
;;;618    					}
;;;619    					if((msg.param0 == 0x03) && (msg.param1 == 0xC0)) //FM reset
000570  9802              LDR      r0,[sp,#8]
000572  2803              CMP      r0,#3
000574  d122              BNE      |L10.1468|
                  |L10.1398|
000576  9803              LDR      r0,[sp,#0xc]
000578  28c0              CMP      r0,#0xc0
00057a  d107              BNE      |L10.1420|
;;;620    					{
;;;621    						
;;;622    						drv_FM_on_NCU031_reset();
00057c  f7fffffe          BL       drv_FM_on_NCU031_reset
;;;623    						printf("fm reset\n");
000580  a01f              ADR      r0,|L10.1536|
000582  f7fffffe          BL       __2printf
;;;624    						
;;;625    					}
;;;626    					if((msg.param0 == 0x03) && (msg.param1 == 0xC1)) //inside
000586  9802              LDR      r0,[sp,#8]
000588  2803              CMP      r0,#3
00058a  d117              BNE      |L10.1468|
                  |L10.1420|
00058c  9803              LDR      r0,[sp,#0xc]
00058e  28c1              CMP      r0,#0xc1
000590  d105              BNE      |L10.1438|
;;;627    					{
;;;628    						printf("inside\n");
000592  a01e              ADR      r0,|L10.1548|
000594  f7fffffe          BL       __2printf
;;;629    					}
;;;630    					if((msg.param0 == 0x03) && (msg.param1 == 0xC2)) //outside
000598  9802              LDR      r0,[sp,#8]
00059a  2803              CMP      r0,#3
00059c  d10e              BNE      |L10.1468|
                  |L10.1438|
00059e  9803              LDR      r0,[sp,#0xc]
0005a0  28c2              CMP      r0,#0xc2
0005a2  d105              BNE      |L10.1456|
;;;631    					{
;;;632    
;;;633    						printf("outside\n");
0005a4  a01b              ADR      r0,|L10.1556|
0005a6  f7fffffe          BL       __2printf
;;;634    					}
;;;635    					if((msg.param0 == 0x03) && (msg.param1 == 0xC3)) //autoside
0005aa  9802              LDR      r0,[sp,#8]
0005ac  2803              CMP      r0,#3
0005ae  d105              BNE      |L10.1468|
                  |L10.1456|
0005b0  9803              LDR      r0,[sp,#0xc]
0005b2  28c3              CMP      r0,#0xc3
0005b4  d102              BNE      |L10.1468|
;;;636    					{
;;;637    						printf("autoside\n");
0005b6  a01a              ADR      r0,|L10.1568|
0005b8  f7fffffe          BL       __2printf
                  |L10.1468|
;;;638    					}
;;;639    	            break;
;;;640    					
;;;641    	            default:
;;;642    	             break;
;;;643    	        }
;;;644        	}
;;;645    	
;;;646    		srv_key_handler();
0005bc  f7fffffe          BL       srv_key_handler
;;;647    		GetKeyEvent();
0005c0  f7fffffe          BL       GetKeyEvent
;;;648    		IoKeyProcess();
0005c4  f7fffffe          BL       IoKeyProcess
;;;649    
;;;650    
;;;651    		
;;;652    		if (((count>>16)&0xF) == refcount0)	
0005c8  0338              LSLS     r0,r7,#12
0005ca  0f00              LSRS     r0,r0,#28
0005cc  42b0              CMP      r0,r6
0005ce  d107              BNE      |L10.1504|
;;;653    		{
;;;654    			
;;;655    			if(refcount0 <0xF)
0005d0  2e0f              CMP      r6,#0xf
0005d2  d202              BCS      |L10.1498|
0005d4  1c76              ADDS     r6,r6,#1
;;;656    				refcount0++;
0005d6  b2f6              UXTB     r6,r6
0005d8  e000              B        |L10.1500|
                  |L10.1498|
;;;657    			else
;;;658    				refcount0 = 0;
0005da  2600              MOVS     r6,#0
                  |L10.1500|
;;;659    			srv_bat_charge_handler();	
0005dc  f7fffffe          BL       srv_bat_charge_handler
                  |L10.1504|
;;;660    		}
;;;661    
;;;662    		if (((count>>15)&0xF) == refcount1)
0005e0  0378              LSLS     r0,r7,#13
0005e2  0f00              LSRS     r0,r0,#28
0005e4  42a8              CMP      r0,r5
0005e6  d109              BNE      |L10.1532|
;;;663    		{	
;;;664    			
;;;665    			if(refcount1 <0xF)
0005e8  2d0f              CMP      r5,#0xf
0005ea  d202              BCS      |L10.1522|
0005ec  1c6d              ADDS     r5,r5,#1
;;;666    				refcount1++;
0005ee  b2ed              UXTB     r5,r5
0005f0  e000              B        |L10.1524|
                  |L10.1522|
;;;667    			else
;;;668    				refcount1 = 0;
0005f2  2500              MOVS     r5,#0
                  |L10.1524|
;;;669    			
;;;670    			drv_power_status_updata();
0005f4  f7fffffe          BL       drv_power_status_updata
;;;671    			srv_audio_handler();
0005f8  f7fffffe          BL       srv_audio_handler
                  |L10.1532|
0005fc  1c7f              ADDS     r7,r7,#1
0005fe  e50c              B        |L10.26|
;;;672    		}
;;;673    		count++;
;;;674    	}
;;;675    
;;;676    }
;;;677    
                          ENDP

                  |L10.1536|
000600  666d2072          DCB      "fm reset\n",0
000604  65736574
000608  0a00    
00060a  00                DCB      0
00060b  00                DCB      0
                  |L10.1548|
00060c  696e7369          DCB      "inside\n",0
000610  64650a00
                  |L10.1556|
000614  6f757473          DCB      "outside\n",0
000618  6964650a
00061c  00      
00061d  00                DCB      0
00061e  00                DCB      0
00061f  00                DCB      0
                  |L10.1568|
000620  6175746f          DCB      "autoside\n",0
000624  73696465
000628  0a00    
00062a  00                DCB      0
00062b  00                DCB      0

                          AREA ||.data||, DATA, ALIGN=0

                  sys_err
000000  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "..\\main.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_sys_err____REV16|
#line 388 "..\\lib\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___6_main_c_sys_err____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_sys_err____REVSH|
#line 402
|__asm___6_main_c_sys_err____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
