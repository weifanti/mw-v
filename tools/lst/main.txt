; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\main.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\main.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\lib\CMSIS\Include -I..\lib\Device\Nuvoton\NUC029xGE\Include -I..\lib\StdDriver\inc -I..\src\core\include -I..\src\driver\include -I..\src\io\include -I..\src\global -I..\src\server\include -I..\src\driver\audio -D__UVISION_VERSION=522 --omf_browse=.\obj\main.crf ..\main.c]
                          THUMB

                          AREA ||i.Amplifier_open||, CODE, READONLY, ALIGN=2

                  Amplifier_open PROC
;;;123    
;;;124    void Amplifier_open(void)
000000  b510              PUSH     {r4,lr}
;;;125    {
;;;126    	GPIO_SetMode(PC, BIT1, GPIO_MODE_OUTPUT);	
000002  4c0c              LDR      r4,|L1.52|
000004  2201              MOVS     r2,#1
000006  2102              MOVS     r1,#2
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       GPIO_SetMode
;;;127    	GPIO_SetMode(PC, BIT13, GPIO_MODE_OUTPUT);
00000e  2201              MOVS     r2,#1
000010  0351              LSLS     r1,r2,#13
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       GPIO_SetMode
;;;128    	GPIO_SetMode(PB, BIT14, GPIO_MODE_OUTPUT);
000018  4806              LDR      r0,|L1.52|
00001a  2201              MOVS     r2,#1
00001c  0391              LSLS     r1,r2,#14
00001e  3840              SUBS     r0,r0,#0x40
000020  f7fffffe          BL       GPIO_SetMode
;;;129    	PC1 = 1;
000024  4904              LDR      r1,|L1.56|
000026  2001              MOVS     r0,#1
000028  6048              STR      r0,[r1,#4]
;;;130    	PC13 = 1;
00002a  6348              STR      r0,[r1,#0x34]
;;;131    	PB14 = 1;
00002c  4902              LDR      r1,|L1.56|
00002e  3940              SUBS     r1,r1,#0x40
000030  6388              STR      r0,[r1,#0x38]
;;;132    }
000032  bd10              POP      {r4,pc}
;;;133    
                          ENDP

                  |L1.52|
                          DCD      0x50004080
                  |L1.56|
                          DCD      0x50004280

                          AREA ||i.IoKeyProcess||, CODE, READONLY, ALIGN=2

                  IoKeyProcess PROC
;;;268    
;;;269    void IoKeyProcess(void)
000000  b570              PUSH     {r4-r6,lr}
;;;270    {
;;;271    
;;;272    	if(((Global_datas.g_mode_status == POWER_IDLE_MODE || Global_datas.g_mode_status == POWER_ON_MODE )&&(IN_KEY_POWER_CP != IoKeyInputmessage)) || (Global_datas.shoutting_down))
000002  4c1d              LDR      r4,|L2.120|
000004  4d1d              LDR      r5,|L2.124|
000006  7961              LDRB     r1,[r4,#5]  ; Global_datas
000008  7828              LDRB     r0,[r5,#0]
00000a  290e              CMP      r1,#0xe
00000c  d001              BEQ      |L2.18|
00000e  2900              CMP      r1,#0
000010  d101              BNE      |L2.22|
                  |L2.18|
000012  28f1              CMP      r0,#0xf1
000014  d12b              BNE      |L2.110|
                  |L2.22|
000016  7b61              LDRB     r1,[r4,#0xd]  ; Global_datas
000018  2900              CMP      r1,#0
00001a  d128              BNE      |L2.110|
;;;273        {
;;;274    		return;
;;;275    	}
;;;276    
;;;277    	if(IoKeyInputmessage)
00001c  2800              CMP      r0,#0
00001e  d024              BEQ      |L2.106|
;;;278    	{
;;;279    		switch(IoKeyInputmessage)
000020  28f0              CMP      r0,#0xf0
000022  d012              BEQ      |L2.74|
000024  28f1              CMP      r0,#0xf1
000026  d016              BEQ      |L2.86|
000028  28f3              CMP      r0,#0xf3
00002a  d002              BEQ      |L2.50|
00002c  28f4              CMP      r0,#0xf4
00002e  d11c              BNE      |L2.106|
000030  e005              B        |L2.62|
                  |L2.50|
;;;280    		{
;;;281    			case IN_KEY_PAIR_SP:
;;;282    				printf("pari key sp\n");
000032  a013              ADR      r0,|L2.128|
000034  f7fffffe          BL       __2printf
;;;283    				drv_wifi_4g_switch_cmd_send();
000038  f7fffffe          BL       drv_wifi_4g_switch_cmd_send
;;;284    				break;
00003c  e015              B        |L2.106|
                  |L2.62|
;;;285    			case IN_KEY_PAIR_CP:
;;;286    				printf("pari key cp\n");
00003e  a014              ADR      r0,|L2.144|
000040  f7fffffe          BL       __2printf
;;;287    				drv_pairing_cmd_send();
000044  f7fffffe          BL       drv_pairing_cmd_send
;;;288    				
;;;289    				break;
000048  e00f              B        |L2.106|
                  |L2.74|
;;;290    			case IN_KEY_POWER_SP:
;;;291    				printf("power key sp\n");
00004a  a015              ADR      r0,|L2.160|
00004c  f7fffffe          BL       __2printf
;;;292    				srv_key_mode_handler();
000050  f7fffffe          BL       srv_key_mode_handler
;;;293    				break;
000054  e009              B        |L2.106|
                  |L2.86|
;;;294    			case IN_KEY_POWER_CP:
;;;295    				printf("power key cp\n");	
000056  a016              ADR      r0,|L2.176|
000058  f7fffffe          BL       __2printf
;;;296    				if(Global_datas.g_mode_status == POWER_IDLE_MODE)
00005c  7960              LDRB     r0,[r4,#5]  ; Global_datas
00005e  280e              CMP      r0,#0xe
000060  d006              BEQ      |L2.112|
;;;297    				{
;;;298    					SYS_Status();
;;;299    				}
;;;300    
;;;301    				else
;;;302    				{
;;;303    					PowerOff();
000062  f7fffffe          BL       PowerOff
;;;304    					SysIdle();
000066  f7fffffe          BL       SysIdle
                  |L2.106|
;;;305    				}
;;;306    				break;
;;;307    
;;;308    		  	default:break;
;;;309    		}
;;;310    	}
;;;311    
;;;312    	IoKeyInputmessage = 0;
00006a  2000              MOVS     r0,#0
00006c  7028              STRB     r0,[r5,#0]
                  |L2.110|
;;;313    		
;;;314    }
00006e  bd70              POP      {r4-r6,pc}
                  |L2.112|
000070  f7fffffe          BL       SYS_Status
000074  e7f9              B        |L2.106|
;;;315    
                          ENDP

000076  0000              DCW      0x0000
                  |L2.120|
                          DCD      Global_datas+0x20
                  |L2.124|
                          DCD      IoKeyInputmessage
                  |L2.128|
000080  70617269          DCB      "pari key sp\n",0
000084  206b6579
000088  2073700a
00008c  00      
00008d  00                DCB      0
00008e  00                DCB      0
00008f  00                DCB      0
                  |L2.144|
000090  70617269          DCB      "pari key cp\n",0
000094  206b6579
000098  2063700a
00009c  00      
00009d  00                DCB      0
00009e  00                DCB      0
00009f  00                DCB      0
                  |L2.160|
0000a0  706f7765          DCB      "power key sp\n",0
0000a4  72206b65
0000a8  79207370
0000ac  0a00    
0000ae  00                DCB      0
0000af  00                DCB      0
                  |L2.176|
0000b0  706f7765          DCB      "power key cp\n",0
0000b4  72206b65
0000b8  79206370
0000bc  0a00    
0000be  00                DCB      0
0000bf  00                DCB      0

                          AREA ||i.PowerDownFunction||, CODE, READONLY, ALIGN=2

                  PowerDownFunction PROC
;;;225    /*---------------------------------------------------------------------------------------------------------*/
;;;226    void PowerDownFunction(void)
000000  b510              PUSH     {r4,lr}
;;;227    {
;;;228        /* Check if all the debug messages are finished */
;;;229        UART_WAIT_TX_EMPTY(UART0);
000002  4803              LDR      r0,|L3.16|
                  |L3.4|
000004  6981              LDR      r1,[r0,#0x18]
000006  00c9              LSLS     r1,r1,#3
000008  d5fc              BPL      |L3.4|
;;;230    
;;;231        /* Enter to Power-down mode */
;;;232        CLK_PowerDown();
00000a  f7fffffe          BL       CLK_PowerDown
;;;233    }
00000e  bd10              POP      {r4,pc}
;;;234    
                          ENDP

                  |L3.16|
                          DCD      0x40050000

                          AREA ||i.PowerDown_deepsleep||, CODE, READONLY, ALIGN=2

                  PowerDown_deepsleep PROC
;;;236    
;;;237    void PowerDown_deepsleep(void)
000000  b510              PUSH     {r4,lr}
;;;238    {
;;;239    	drv_Cmd_Send2NCU031(0x70, 0x15,0x00);// power off cmd to LCD board
000002  2200              MOVS     r2,#0
000004  2115              MOVS     r1,#0x15
000006  2070              MOVS     r0,#0x70
000008  f7fffffe          BL       drv_Cmd_Send2NCU031
;;;240    	
;;;241    	Cmd_Send2FourG( 0x03,0x55,0x00); // poweroff cmd to 4G
00000c  2200              MOVS     r2,#0
00000e  2155              MOVS     r1,#0x55
000010  2003              MOVS     r0,#3
000012  f7fffffe          BL       Cmd_Send2FourG
;;;242    	//Drv_4GMoudle_PowerUp(0);  // wait for 4g modle ready ,than turn off power, don't off here.
;;;243    	drv_led_init();// led all off
000016  f7fffffe          BL       drv_led_init
;;;244    	Drv_audio_powerdown();
00001a  f7fffffe          BL       Drv_audio_powerdown
;;;245    	Global_datas.shoutting_down = 1;
00001e  480d              LDR      r0,|L4.84|
000020  2101              MOVS     r1,#1
000022  7341              STRB     r1,[r0,#0xd]
;;;246    	TimeOutSet(&PoweroffLedTimer, 5000);
000024  490c              LDR      r1,|L4.88|
000026  480d              LDR      r0,|L4.92|
000028  f7fffffe          BL       TimeOutSet
;;;247    
;;;248    
;;;249    
;;;250    	Drv_4GMoudle_PowerUp(0); // if timeout,turn off.
00002c  2000              MOVS     r0,#0
00002e  f7fffffe          BL       Drv_4GMoudle_PowerUp
;;;251    	TYM_drv_powerkeepon(0); 		
000032  2000              MOVS     r0,#0
000034  f7fffffe          BL       TYM_drv_powerkeepon
;;;252    	TYM_SysPower12V_3V3_onoff(0);
000038  2000              MOVS     r0,#0
00003a  f7fffffe          BL       TYM_SysPower12V_3V3_onoff
;;;253    
;;;254    
;;;255    	//Unlock protected registers before entering Power-down mode 
;;;256        SYS_UnlockReg();
00003e  f7fffffe          BL       SYS_UnlockReg
;;;257    	printf("Enter to Power-Down ......\n");
000042  a007              ADR      r0,|L4.96|
000044  f7fffffe          BL       __2printf
;;;258        /* Enter to Power-down mode */
;;;259    	
;;;260        PowerDownFunction();
000048  f7fffffe          BL       PowerDownFunction
;;;261    	
;;;262        printf("System waken-up done.\n\n");
00004c  a00b              ADR      r0,|L4.124|
00004e  f7fffffe          BL       __2printf
;;;263    
;;;264    	
;;;265    }
000052  bd10              POP      {r4,pc}
;;;266    
                          ENDP

                  |L4.84|
                          DCD      Global_datas+0x20
                  |L4.88|
                          DCD      0x00001388
                  |L4.92|
                          DCD      PoweroffLedTimer
                  |L4.96|
000060  456e7465          DCB      "Enter to Power-Down ......\n",0
000064  7220746f
000068  20506f77
00006c  65722d44
000070  6f776e20
000074  2e2e2e2e
000078  2e2e0a00
                  |L4.124|
00007c  53797374          DCB      "System waken-up done.\n\n",0
000080  656d2077
000084  616b656e
000088  2d757020
00008c  646f6e65
000090  2e0a0a00

                          AREA ||i.PowerOff||, CODE, READONLY, ALIGN=2

                  PowerOff PROC
;;;209    
;;;210    void PowerOff(void)
000000  b510              PUSH     {r4,lr}
;;;211    {
;;;212    	drv_Cmd_Send2NCU031(0x70, 0x15,0x00);// power off cmd to LCD board
000002  2200              MOVS     r2,#0
000004  2115              MOVS     r1,#0x15
000006  2070              MOVS     r0,#0x70
000008  f7fffffe          BL       drv_Cmd_Send2NCU031
;;;213    	
;;;214    	Cmd_Send2FourG( 0x03,0x55,0x00); // poweroff cmd to 4G
00000c  2200              MOVS     r2,#0
00000e  2155              MOVS     r1,#0x55
000010  2003              MOVS     r0,#3
000012  f7fffffe          BL       Cmd_Send2FourG
;;;215    	//Drv_4GMoudle_PowerUp(0);  // wait for 4g modle ready ,than turn off power, don't off here.
;;;216    	drv_led_init();// led all off
000016  f7fffffe          BL       drv_led_init
;;;217    	Drv_audio_powerdown();
00001a  f7fffffe          BL       Drv_audio_powerdown
;;;218    	Global_datas.shoutting_down = 1;
00001e  4804              LDR      r0,|L5.48|
000020  2101              MOVS     r1,#1
000022  7341              STRB     r1,[r0,#0xd]
;;;219    	TimeOutSet(&PoweroffLedTimer, 5000);
000024  4903              LDR      r1,|L5.52|
000026  4804              LDR      r0,|L5.56|
000028  f7fffffe          BL       TimeOutSet
;;;220    }
00002c  bd10              POP      {r4,pc}
;;;221    
                          ENDP

00002e  0000              DCW      0x0000
                  |L5.48|
                          DCD      Global_datas+0x20
                  |L5.52|
                          DCD      0x00001388
                  |L5.56|
                          DCD      PoweroffLedTimer

                          AREA ||i.SYS_BusInit||, CODE, READONLY, ALIGN=1

                  SYS_BusInit PROC
;;;111    
;;;112    void SYS_BusInit(void)
000000  b510              PUSH     {r4,lr}
;;;113    {
;;;114    	Debug_Uart_Init();
000002  f7fffffe          BL       Debug_Uart_Init
;;;115    	
;;;116    	Transfer_Uart_Init();
000006  f7fffffe          BL       Transfer_Uart_Init
;;;117    	
;;;118    	USCI_Uart_Init();
00000a  f7fffffe          BL       USCI_Uart_Init
;;;119    	
;;;120    	Hal_I2c_Init();
00000e  f7fffffe          BL       Hal_I2c_Init
;;;121    	
;;;122    }
000012  bd10              POP      {r4,pc}
;;;123    
                          ENDP


                          AREA ||i.SYS_Clock_init||, CODE, READONLY, ALIGN=2

                  SYS_Clock_init PROC
;;;44     
;;;45     void SYS_Clock_init(void)
000000  b5f8              PUSH     {r3-r7,lr}
;;;46     {
;;;47     
;;;48         
;;;49        // SYS->GPF_MFPL = SYS_GPF_MFPL_PF4MFP_XT1_IN | SYS_GPF_MFPL_PF3MFP_XT1_OUT | SYS_GPF_MFPL_PF1MFP_X32_IN | SYS_GPF_MFPL_PF0MFP_X32_OUT;
;;;50     	/* Enable HIRC clock (Internal RC 22.1184MHz) */
;;;51         CLK_EnableXtalRC(CLK_PWRCTL_HIRCEN_Msk);
000002  2004              MOVS     r0,#4
000004  f7fffffe          BL       CLK_EnableXtalRC
;;;52     
;;;53         /* Wait for HIRC clock ready */
;;;54         CLK_WaitClockReady(CLK_STATUS_HIRCSTB_Msk);
000008  2010              MOVS     r0,#0x10
00000a  f7fffffe          BL       CLK_WaitClockReady
;;;55     
;;;56         /* Select HCLK clock source as HIRC and HCLK clock divider as 1 */
;;;57         CLK_SetHCLK(CLK_CLKSEL0_HCLKSEL_HIRC, CLK_CLKDIV0_HCLK(1));
00000e  2100              MOVS     r1,#0
000010  2007              MOVS     r0,#7
000012  f7fffffe          BL       CLK_SetHCLK
;;;58     
;;;59         /* Enable HXT clock (external XTAL 12MHz) */
;;;60         CLK_EnableXtalRC(CLK_PWRCTL_HXTEN_Msk | CLK_PWRCTL_LXTEN_Msk);
000016  2003              MOVS     r0,#3
000018  f7fffffe          BL       CLK_EnableXtalRC
;;;61     //    CLK_EnableXtalRC(CLK_PWRCTL_HXTEN_Msk);
;;;62         /* Wait for HXT clock ready */
;;;63         CLK_WaitClockReady(CLK_STATUS_HXTSTB_Msk | CLK_STATUS_LXTSTB_Msk);
00001c  2003              MOVS     r0,#3
00001e  f7fffffe          BL       CLK_WaitClockReady
;;;64     //    CLK_WaitClockReady(CLK_STATUS_HXTSTB_Msk);
;;;65         /* Set core clock as PLL_CLOCK from PLL and SysTick source to HCLK/2*/
;;;66         CLK_SetCoreClock(PLL_CLOCK);
000022  4822              LDR      r0,|L7.172|
000024  f7fffffe          BL       CLK_SetCoreClock
;;;67         CLK_SetSysTickClockSrc(CLK_CLKSEL0_STCLKSEL_HCLK_DIV2);
000028  2018              MOVS     r0,#0x18
00002a  f7fffffe          BL       CLK_SetSysTickClockSrc
;;;68     
;;;69         /* Enable UART module clock */
;;;70         CLK_EnableModuleClock(UART0_MODULE);
00002e  4c20              LDR      r4,|L7.176|
000030  4620              MOV      r0,r4
000032  f7fffffe          BL       CLK_EnableModuleClock
;;;71     	/* Enable UART module clock */
;;;72         CLK_EnableModuleClock(UART1_MODULE);
000036  1c65              ADDS     r5,r4,#1
000038  4628              MOV      r0,r5
00003a  f7fffffe          BL       CLK_EnableModuleClock
;;;73     	
;;;74         /* Enable USCI module clock */
;;;75         CLK_EnableModuleClock(UART2_MODULE);
00003e  1ca6              ADDS     r6,r4,#2
000040  4630              MOV      r0,r6
000042  f7fffffe          BL       CLK_EnableModuleClock
;;;76     	
;;;77         /* Enable USCI module clock */
;;;78         CLK_EnableModuleClock(USCI0_MODULE);
000046  4f1b              LDR      r7,|L7.180|
000048  4638              MOV      r0,r7
00004a  f7fffffe          BL       CLK_EnableModuleClock
;;;79     	
;;;80     	/* Enable I2C0 module clock */
;;;81         CLK_EnableModuleClock(I2C0_MODULE);
00004e  481a              LDR      r0,|L7.184|
000050  f7fffffe          BL       CLK_EnableModuleClock
;;;82     	
;;;83     	/* Enable I2C1 module clock */
;;;84         CLK_EnableModuleClock(I2C1_MODULE);
000054  4818              LDR      r0,|L7.184|
000056  1c40              ADDS     r0,r0,#1
000058  f7fffffe          BL       CLK_EnableModuleClock
;;;85     
;;;86     	/* Enable ADC module clock */
;;;87         CLK_EnableModuleClock(ADC_MODULE);
00005c  4817              LDR      r0,|L7.188|
00005e  f7fffffe          BL       CLK_EnableModuleClock
;;;88     
;;;89         /* Enable PWM0 module clock */
;;;90         CLK_EnableModuleClock(PWM0_MODULE);
000062  4817              LDR      r0,|L7.192|
000064  f7fffffe          BL       CLK_EnableModuleClock
;;;91     
;;;92     	/* Enable timer clock */
;;;93     	CLK_EnableModuleClock(TMR0_MODULE);
000068  4816              LDR      r0,|L7.196|
00006a  f7fffffe          BL       CLK_EnableModuleClock
;;;94         CLK_EnableModuleClock(RTC_MODULE);
00006e  4816              LDR      r0,|L7.200|
000070  f7fffffe          BL       CLK_EnableModuleClock
;;;95     
;;;96         /* Select UART module clock source as HXT and UART module clock divider as 1 */
;;;97         CLK_SetModuleClock(UART0_MODULE, CLK_CLKSEL1_UARTSEL_HXT, CLK_CLKDIV0_UART(1));
000074  2200              MOVS     r2,#0
000076  4611              MOV      r1,r2
000078  4620              MOV      r0,r4
00007a  f7fffffe          BL       CLK_SetModuleClock
;;;98     	
;;;99     	CLK_SetModuleClock(UART1_MODULE, CLK_CLKSEL1_UARTSEL_HXT, CLK_CLKDIV0_UART(1));
00007e  2200              MOVS     r2,#0
000080  4611              MOV      r1,r2
000082  4628              MOV      r0,r5
000084  f7fffffe          BL       CLK_SetModuleClock
;;;100    
;;;101    	CLK_SetModuleClock(UART2_MODULE, CLK_CLKSEL1_UARTSEL_HXT, CLK_CLKDIV0_UART(1));
000088  2200              MOVS     r2,#0
00008a  4611              MOV      r1,r2
00008c  4630              MOV      r0,r6
00008e  f7fffffe          BL       CLK_SetModuleClock
;;;102    	CLK_SetModuleClock(USCI0_MODULE, CLK_CLKSEL1_UARTSEL_HXT, CLK_CLKDIV0_UART(1));
000092  2200              MOVS     r2,#0
000094  4611              MOV      r1,r2
000096  4638              MOV      r0,r7
000098  f7fffffe          BL       CLK_SetModuleClock
;;;103    
;;;104        /* ADC clock source is 22.1184MHz, set divider to 7, ADC clock is 22.1184/7 MHz */
;;;105        CLK_SetModuleClock(ADC_MODULE, CLK_CLKSEL1_ADCSEL_HIRC, CLK_CLKDIV0_ADC(7));
00009c  2203              MOVS     r2,#3
00009e  0452              LSLS     r2,r2,#17
0000a0  210c              MOVS     r1,#0xc
0000a2  4806              LDR      r0,|L7.188|
0000a4  f7fffffe          BL       CLK_SetModuleClock
;;;106        /* Select PWM01 module clock source */
;;;107       // CLK_SetModuleClock(PWM0_MODULE, CLK_CLKSEL1_PWM0SEL_PCLK0, 0);
;;;108    
;;;109    }
0000a8  bdf8              POP      {r3-r7,pc}
;;;110    
                          ENDP

0000aa  0000              DCW      0x0000
                  |L7.172|
                          DCD      0x044aa200
                  |L7.176|
                          DCD      0x57803d10
                  |L7.180|
                          DCD      0x80000008
                  |L7.184|
                          DCD      0x40000008
                  |L7.188|
                          DCD      0x5623fe1c
                  |L7.192|
                          DCD      0x53c00014
                  |L7.196|
                          DCD      0x5e800002
                  |L7.200|
                          DCD      0x63200001

                          AREA ||i.SYS_Init||, CODE, READONLY, ALIGN=2

                  SYS_Init PROC
;;;143    /*---------------------------------------------------------------------------------------------------------*/
;;;144    void SYS_Init(void)
000000  b510              PUSH     {r4,lr}
;;;145    {
;;;146        /* Unlock protected registers */
;;;147        SYS_UnlockReg();
000002  f7fffffe          BL       SYS_UnlockReg
;;;148    	
;;;149    	SYS_Clock_init();
000006  f7fffffe          BL       SYS_Clock_init
;;;150    	TYM_gpio_init();
00000a  f7fffffe          BL       TYM_gpio_init
00000e  4909              LDR      r1,|L8.52|
000010  2000              MOVS     r0,#0
000012  6008              STR      r0,[r1,#0]
;;;151    
;;;152    	/* Lock protected registers */
;;;153        SYS_LockReg();
;;;154    
;;;155        /* Start Timer1 to measure delay period of TIMER_Delay API is reasonable or not */
;;;156       // TIMER1->CTL = TIMER_PERIODIC_MODE | (12 - 1);
;;;157    	TYM_sys_PowerManger_init();
000014  f7fffffe          BL       TYM_sys_PowerManger_init
;;;158    	drv_led_init();
000018  f7fffffe          BL       drv_led_init
;;;159    
;;;160    	Drv_FourG_Gpio_Init();
00001c  f7fffffe          BL       Drv_FourG_Gpio_Init
;;;161    	
;;;162    
;;;163    	SYS_BusInit();
000020  f7fffffe          BL       SYS_BusInit
;;;164    	
;;;165    	Hal_Timer1_Init(); // kim
000024  f7fffffe          BL       Hal_Timer1_Init
;;;166    
;;;167    	TYM_DriverInit();
000028  f7fffffe          BL       TYM_DriverInit
;;;168    	
;;;169    	Core_Msg_Init();
00002c  f7fffffe          BL       Core_Msg_Init
;;;170    
;;;171    	//srv_rtc_init();
;;;172    
;;;173    }
000030  bd10              POP      {r4,pc}
;;;174    
                          ENDP

000032  0000              DCW      0x0000
                  |L8.52|
                          DCD      0x50000100

                          AREA ||i.SYS_Status||, CODE, READONLY, ALIGN=2

                  SYS_Status PROC
;;;188    
;;;189    void SYS_Status(void)
000000  b570              PUSH     {r4-r6,lr}
;;;190    {
;;;191    	TYM_SysPower12V_3V3_onoff(1);
000002  2001              MOVS     r0,#1
000004  f7fffffe          BL       TYM_SysPower12V_3V3_onoff
;;;192    	Global_datas.g_mode_status = POWER_ON_MODE;	
000008  4c10              LDR      r4,|L9.76|
00000a  2500              MOVS     r5,#0
00000c  7165              STRB     r5,[r4,#5]
;;;193    	Global_datas.g_4g_initing = 1;
00000e  2001              MOVS     r0,#1
000010  71a0              STRB     r0,[r4,#6]
;;;194    	Global_datas.eq_mode = EQ_MODE_INDOOR;
000012  73a0              STRB     r0,[r4,#0xe]
;;;195    	Global_datas.volume = VOLUME_DEFAULT;
000014  2008              MOVS     r0,#8
000016  73e0              STRB     r0,[r4,#0xf]
;;;196    	TYM_drv_powerkeepon(1);
000018  2001              MOVS     r0,#1
00001a  f7fffffe          BL       TYM_drv_powerkeepon
;;;197    	Drv_4GMoudle_PowerUp(1);
00001e  2001              MOVS     r0,#1
000020  f7fffffe          BL       Drv_4GMoudle_PowerUp
;;;198    	drv_FourGmodel_power_key_SetHi();
000024  f7fffffe          BL       drv_FourGmodel_power_key_SetHi
;;;199    	TimeOutSet(&ModulePowerUpPinTimer,3000);
000028  4909              LDR      r1,|L9.80|
00002a  480a              LDR      r0,|L9.84|
00002c  f7fffffe          BL       TimeOutSet
;;;200    	TimeOutSet(&PoweroffLedTimer, 100);
000030  2164              MOVS     r1,#0x64
000032  4809              LDR      r0,|L9.88|
000034  f7fffffe          BL       TimeOutSet
;;;201    	Drv_audio_init();
000038  f7fffffe          BL       Drv_audio_init
;;;202    	Global_datas.shoutting_down = 0;
00003c  7365              STRB     r5,[r4,#0xd]
;;;203    	
;;;204    
;;;205    	
;;;206    	drv_Cmd_Send2NCU031(0x70, 0x16,0x00);// power on cmd to LCD board
00003e  2200              MOVS     r2,#0
000040  2116              MOVS     r1,#0x16
000042  2070              MOVS     r0,#0x70
000044  f7fffffe          BL       drv_Cmd_Send2NCU031
;;;207    	
;;;208    }
000048  bd70              POP      {r4-r6,pc}
;;;209    
                          ENDP

00004a  0000              DCW      0x0000
                  |L9.76|
                          DCD      Global_datas+0x20
                  |L9.80|
                          DCD      0x00000bb8
                  |L9.84|
                          DCD      ModulePowerUpPinTimer
                  |L9.88|
                          DCD      PoweroffLedTimer

                          AREA ||i.SYS_UnlockReg||, CODE, READONLY, ALIGN=2

                  SYS_UnlockReg PROC
;;;1786     */
;;;1787   __STATIC_INLINE void SYS_UnlockReg(void)
000000  b510              PUSH     {r4,lr}
;;;1788   {
;;;1789       do
;;;1790       {
;;;1791           SYS->REGLCTL = 0x59;
000002  2159              MOVS     r1,#0x59
000004  4804              LDR      r0,|L10.24|
;;;1792           SYS->REGLCTL = 0x16;
000006  2216              MOVS     r2,#0x16
;;;1793           SYS->REGLCTL = 0x88;
000008  2388              MOVS     r3,#0x88
                  |L10.10|
00000a  6001              STR      r1,[r0,#0]            ;1791
00000c  6002              STR      r2,[r0,#0]            ;1792
00000e  6003              STR      r3,[r0,#0]
;;;1794       }
;;;1795       while(SYS->REGLCTL == 0);
000010  6804              LDR      r4,[r0,#0]
000012  2c00              CMP      r4,#0
000014  d0f9              BEQ      |L10.10|
;;;1796   }
000016  bd10              POP      {r4,pc}
;;;1797   
                          ENDP

                  |L10.24|
                          DCD      0x50000100

                          AREA ||i.SysIdle||, CODE, READONLY, ALIGN=2

                  SysIdle PROC
;;;174    
;;;175    void SysIdle(void)
000000  b570              PUSH     {r4-r6,lr}
;;;176    {
;;;177    	Global_datas.g_mode_status = POWER_IDLE_MODE;	
000002  4c08              LDR      r4,|L11.36|
000004  200e              MOVS     r0,#0xe
000006  7160              STRB     r0,[r4,#5]
;;;178    	Global_datas.g_4g_initing = 0;
000008  2500              MOVS     r5,#0
00000a  71a5              STRB     r5,[r4,#6]
;;;179    	Global_datas.mode_switching = 0;
00000c  7465              STRB     r5,[r4,#0x11]
;;;180    	Global_datas.mute = 0;
00000e  74a5              STRB     r5,[r4,#0x12]
;;;181    	Global_datas.volume_resume = 0;
000010  74e5              STRB     r5,[r4,#0x13]
;;;182    	
;;;183    	drv_FourGmodel_power_key_SetLow();
000012  f7fffffe          BL       drv_FourGmodel_power_key_SetLow
;;;184    	TimeOutSet(&SysTimer_1s,1000);
000016  217d              MOVS     r1,#0x7d
000018  00c9              LSLS     r1,r1,#3
00001a  4803              LDR      r0,|L11.40|
00001c  f7fffffe          BL       TimeOutSet
;;;185    	Global_datas.subboard_online = 0;	
000020  7425              STRB     r5,[r4,#0x10]
;;;186    	
;;;187    }
000022  bd70              POP      {r4-r6,pc}
;;;188    
                          ENDP

                  |L11.36|
                          DCD      Global_datas+0x20
                  |L11.40|
                          DCD      SysTimer_1s

                          AREA ||i.TYM_DriverInit||, CODE, READONLY, ALIGN=1

                  TYM_DriverInit PROC
;;;133    
;;;134    void TYM_DriverInit(void)
000000  b510              PUSH     {r4,lr}
;;;135    {
;;;136    	//Drv_audio_init();
;;;137    	Drv_IrKey_init(); // kim
000002  f7fffffe          BL       Drv_IrKey_init
;;;138    	drv_gipo_key_init();
000006  f7fffffe          BL       drv_gipo_key_init
;;;139    }
00000a  bd10              POP      {r4,pc}
;;;140    
                          ENDP


                          AREA ||i.main||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                  main PROC
;;;319    /*---------------------------------------------------------------------------------------------------------*/
;;;320    int32_t main(void)
000000  b088              SUB      sp,sp,#0x20
;;;321    {
;;;322    	sCoreMsg msg;
;;;323    	uint32_t count;
;;;324    	uint8_t refcount0=1;
;;;325    	uint8_t refcount1=1;
;;;326    	uint8_t refcount2=1;
;;;327      	uint8_t bat_val[2];
;;;328    	uint8_t ledtimecount = 0;
000002  2000              MOVS     r0,#0
000004  2601              MOVS     r6,#1                 ;324
000006  4635              MOV      r5,r6                 ;325
;;;329    	uint8_t resume_timecount = 0;
000008  9006              STR      r0,[sp,#0x18]
;;;330    	
;;;331    //	uint8_t autoside = 0;
;;;332    //    S_RTC_TIME_DATA_T sReadRTC;
;;;333    
;;;334    	/* Init System, peripheral clock and multi-function I/O */
;;;335    
;;;336    	SYS_Init();
00000a  9005              STR      r0,[sp,#0x14]
00000c  f7fffffe          BL       SYS_Init
;;;337    	//SYS_Status();
;;;338    	SysIdle();
000010  f7fffffe          BL       SysIdle
;;;339    	
;;;340    	
;;;341        printf("\nmain\n");
000014  a0fd              ADR      r0,|L13.1036|
000016  f7fffffe          BL       __2printf
00001a  4cfe              LDR      r4,|L13.1044|
00001c  2701              MOVS     r7,#1                 ;324
                  |L13.30|
;;;342    		
;;;343        while(1)
;;;344        {
;;;345    
;;;346    		if(IsTimeOut(&SysTimer_1s))
00001e  48fe              LDR      r0,|L13.1048|
000020  f7fffffe          BL       IsTimeOut
000024  2800              CMP      r0,#0
000026  d040              BEQ      |L13.170|
;;;347    		{
;;;348    			TimeOutSet(&SysTimer_1s, 500);
000028  21ff              MOVS     r1,#0xff
00002a  31f5              ADDS     r1,r1,#0xf5
00002c  48fa              LDR      r0,|L13.1048|
00002e  f7fffffe          BL       TimeOutSet
;;;349    
;;;350    			if(Global_datas.volume_resume)
000032  7ce0              LDRB     r0,[r4,#0x13]  ; Global_datas
000034  2800              CMP      r0,#0
000036  d00b              BEQ      |L13.80|
;;;351    			{
;;;352    				resume_timecount++;
000038  9805              LDR      r0,[sp,#0x14]
00003a  1c40              ADDS     r0,r0,#1
00003c  b2c0              UXTB     r0,r0
;;;353    				if(resume_timecount >8)
00003e  9005              STR      r0,[sp,#0x14]
000040  2808              CMP      r0,#8
000042  d905              BLS      |L13.80|
;;;354    				{
;;;355    					Global_datas.volume_resume = 0;
000044  2000              MOVS     r0,#0
000046  74e0              STRB     r0,[r4,#0x13]
;;;356    					resume_timecount = 0;
;;;357    					Drv_Dap_vol_set(Global_datas.volume);
000048  9005              STR      r0,[sp,#0x14]
00004a  7be0              LDRB     r0,[r4,#0xf]  ; Global_datas
00004c  f7fffffe          BL       Drv_Dap_vol_set
                  |L13.80|
;;;358    					
;;;359    				}
;;;360    			}
;;;361    			
;;;362    	        if(Global_datas.g_4g_initing)
000050  79a0              LDRB     r0,[r4,#6]  ; Global_datas
000052  2800              CMP      r0,#0
000054  d002              BEQ      |L13.92|
;;;363    			{
;;;364    				srv_led_sys_initing();
000056  f7fffffe          BL       srv_led_sys_initing
00005a  e001              B        |L13.96|
                  |L13.92|
;;;365    			}
;;;366    			else
;;;367    			{
;;;368    				srv_led_change_handler();
00005c  f7fffffe          BL       srv_led_change_handler
                  |L13.96|
;;;369    			}
;;;370    
;;;371    			if(IsTimeOut(&ModulePowerUpPinTimer))
000060  48ee              LDR      r0,|L13.1052|
000062  f7fffffe          BL       IsTimeOut
000066  2800              CMP      r0,#0
000068  d001              BEQ      |L13.110|
;;;372    			{
;;;373    				drv_FourGmodel_power_key_SetLow();
00006a  f7fffffe          BL       drv_FourGmodel_power_key_SetLow
                  |L13.110|
;;;374    			}
;;;375    
;;;376    			if(Global_datas.g_mode_status == POWER_IDLE_MODE)
00006e  7960              LDRB     r0,[r4,#5]  ; Global_datas
000070  280e              CMP      r0,#0xe
000072  d113              BNE      |L13.156|
;;;377    			{
;;;378    				if(!IsTimeOut(&PoweroffLedTimer))
000074  48ea              LDR      r0,|L13.1056|
000076  f7fffffe          BL       IsTimeOut
00007a  2800              CMP      r0,#0
00007c  d03e              BEQ      |L13.252|
;;;379    				{			
;;;380    					if(ledtimecount)
;;;381    					{
;;;382    						PA12 = 1;
;;;383    						PA13 = 1;
;;;384    						PA1 = 1;
;;;385    						ledtimecount = 0;
;;;386    					}
;;;387    					else
;;;388    					{
;;;389    						PA12 = 0;
;;;390    						PA13 = 0;
;;;391    						PA1 = 0;
;;;392    						ledtimecount = 1;
;;;393    					}
;;;394    				}
;;;395    				else
;;;396    				{
;;;397    					PA12 = 1;
00007e  48e9              LDR      r0,|L13.1060|
000080  6307              STR      r7,[r0,#0x30]
;;;398    					PA13 = 1;
000082  6347              STR      r7,[r0,#0x34]
;;;399    					PA1 = 1;
000084  6047              STR      r7,[r0,#4]
;;;400    					Drv_4GMoudle_PowerUp(0); // if timeout,turn off.
000086  2000              MOVS     r0,#0
000088  f7fffffe          BL       Drv_4GMoudle_PowerUp
;;;401    					TYM_drv_powerkeepon(0); 
00008c  2000              MOVS     r0,#0
00008e  f7fffffe          BL       TYM_drv_powerkeepon
;;;402    					TYM_SysPower12V_3V3_onoff(0);
000092  2000              MOVS     r0,#0
000094  f7fffffe          BL       TYM_SysPower12V_3V3_onoff
;;;403    
;;;404    					Global_datas.shoutting_down = 0;
000098  2000              MOVS     r0,#0
00009a  7360              STRB     r0,[r4,#0xd]
                  |L13.156|
;;;405    				}
;;;406    				
;;;407    			}
;;;408    
;;;409    
;;;410    			if(IsTimeOut(&SubBoardHandshakeTimer))
00009c  48e2              LDR      r0,|L13.1064|
00009e  f7fffffe          BL       IsTimeOut
0000a2  2800              CMP      r0,#0
0000a4  d001              BEQ      |L13.170|
;;;411    			{
;;;412    				Global_datas.subboard_online = 0;
0000a6  2000              MOVS     r0,#0
0000a8  7420              STRB     r0,[r4,#0x10]
                  |L13.170|
;;;413    			}			
;;;414    		}
;;;415    		
;;;416    		if(Global_datas.key_led_blink)
0000aa  7b20              LDRB     r0,[r4,#0xc]  ; Global_datas
0000ac  2800              CMP      r0,#0
0000ae  d008              BEQ      |L13.194|
;;;417    		{
;;;418    			Global_datas.key_led_blink = 0;
0000b0  2000              MOVS     r0,#0
0000b2  7320              STRB     r0,[r4,#0xc]
;;;419    			drv_err_led_on(1);
0000b4  2001              MOVS     r0,#1
0000b6  f7fffffe          BL       drv_err_led_on
;;;420    			TimeOutSet(&LedKeyBlinkTimer, 100);
0000ba  2164              MOVS     r1,#0x64
0000bc  48db              LDR      r0,|L13.1068|
0000be  f7fffffe          BL       TimeOutSet
                  |L13.194|
;;;421    		}
;;;422    
;;;423    		if(IsTimeOut(&LedKeyBlinkTimer))
0000c2  48da              LDR      r0,|L13.1068|
0000c4  f7fffffe          BL       IsTimeOut
0000c8  2800              CMP      r0,#0
0000ca  d002              BEQ      |L13.210|
;;;424    		{
;;;425    			drv_err_led_on(0);
0000cc  2000              MOVS     r0,#0
0000ce  f7fffffe          BL       drv_err_led_on
                  |L13.210|
;;;426    		}
;;;427    
;;;428    		if(Global_datas.mode_switching)
0000d2  7c60              LDRB     r0,[r4,#0x11]  ; Global_datas
0000d4  2800              CMP      r0,#0
0000d6  d008              BEQ      |L13.234|
;;;429    		{
;;;430    			Global_datas.mode_switching = 0;
0000d8  2000              MOVS     r0,#0
0000da  7460              STRB     r0,[r4,#0x11]
;;;431    			drv_5825_mute_pin_set(0);  // mute
0000dc  f7fffffe          BL       drv_5825_mute_pin_set
;;;432    			TimeOutSet(&ModeSwitchTimer, 1000);
0000e0  217d              MOVS     r1,#0x7d
0000e2  00c9              LSLS     r1,r1,#3
0000e4  48d2              LDR      r0,|L13.1072|
0000e6  f7fffffe          BL       TimeOutSet
                  |L13.234|
;;;433    		}
;;;434    
;;;435    		if(IsTimeOut(&ModeSwitchTimer))
0000ea  48d1              LDR      r0,|L13.1072|
0000ec  f7fffffe          BL       IsTimeOut
0000f0  2800              CMP      r0,#0
0000f2  d017              BEQ      |L13.292|
;;;436    		{
;;;437    			if(Global_datas.mute == 0)
0000f4  7ca0              LDRB     r0,[r4,#0x12]  ; Global_datas
0000f6  2800              CMP      r0,#0
0000f8  d011              BEQ      |L13.286|
0000fa  e013              B        |L13.292|
                  |L13.252|
0000fc  9806              LDR      r0,[sp,#0x18]         ;380
0000fe  2800              CMP      r0,#0                 ;380
000100  d005              BEQ      |L13.270|
000102  48c8              LDR      r0,|L13.1060|
000104  6307              STR      r7,[r0,#0x30]         ;382
000106  6347              STR      r7,[r0,#0x34]         ;383
000108  6047              STR      r7,[r0,#4]            ;384
00010a  2000              MOVS     r0,#0                 ;385
00010c  e005              B        |L13.282|
                  |L13.270|
00010e  49c5              LDR      r1,|L13.1060|
000110  2000              MOVS     r0,#0                 ;389
000112  6308              STR      r0,[r1,#0x30]         ;389
000114  6348              STR      r0,[r1,#0x34]         ;390
000116  6048              STR      r0,[r1,#4]            ;391
000118  2001              MOVS     r0,#1                 ;392
                  |L13.282|
00011a  9006              STR      r0,[sp,#0x18]         ;392
00011c  e7be              B        |L13.156|
                  |L13.286|
;;;438    			{
;;;439    				drv_5825_mute_pin_set(1);  // unmute
00011e  2001              MOVS     r0,#1
000120  f7fffffe          BL       drv_5825_mute_pin_set
                  |L13.292|
;;;440    			}
;;;441    		}
;;;442    
;;;443    		
;;;444    
;;;445    		if(Core_Msg_Get(&msg))
000124  a801              ADD      r0,sp,#4
000126  f7fffffe          BL       Core_Msg_Get
00012a  2800              CMP      r0,#0
00012c  d07e              BEQ      |L13.556|
;;;446    		{
;;;447            // deal with message
;;;448            switch(msg.msg)
00012e  9801              LDR      r0,[sp,#4]
000130  2801              CMP      r0,#1
000132  d002              BEQ      |L13.314|
000134  2802              CMP      r0,#2
                  |L13.310|
000136  d179              BNE      |L13.556|
000138  e142              B        |L13.960|
                  |L13.314|
;;;449    	        {
;;;450    	            case MSG_4G_SYS_STATE_IND:
;;;451    					drv_Cmd_Send2NCU031(msg.param0,msg.param1,msg.param2);
00013a  9804              LDR      r0,[sp,#0x10]
00013c  b2c2              UXTB     r2,r0
00013e  9803              LDR      r0,[sp,#0xc]
000140  b2c1              UXTB     r1,r0
000142  9802              LDR      r0,[sp,#8]
000144  b2c0              UXTB     r0,r0
000146  f7fffffe          BL       drv_Cmd_Send2NCU031
;;;452    					printf("MSG_4G_SYS_STATE_IND:msg.param0 = %x, msg.param1 = %x \n",msg.param0,msg.param1);
00014a  a0ba              ADR      r0,|L13.1076|
00014c  9a03              LDR      r2,[sp,#0xc]
00014e  9902              LDR      r1,[sp,#8]
000150  f7fffffe          BL       __2printf
;;;453    	                if((msg.param0 == 0x08) && (msg.param1 == 0x00))
000154  9802              LDR      r0,[sp,#8]
000156  2808              CMP      r0,#8
000158  d113              BNE      |L13.386|
00015a  9803              LDR      r0,[sp,#0xc]
00015c  2800              CMP      r0,#0
00015e  d1ea              BNE      |L13.310|
;;;454    	                {
;;;455    
;;;456    						printf("0x08, msg.param1 = %x \n",msg.param1);
000160  4601              MOV      r1,r0
000162  a0c2              ADR      r0,|L13.1132|
000164  f7fffffe          BL       __2printf
;;;457    	                	//Cmd_Send2FourG(0x03,0x16,0x00);
;;;458    						drv_Cmd_Send2NCU031(msg.param0,msg.param1,0);
000168  9803              LDR      r0,[sp,#0xc]
00016a  2200              MOVS     r2,#0
00016c  b2c1              UXTB     r1,r0
00016e  9802              LDR      r0,[sp,#8]
000170  b2c0              UXTB     r0,r0
000172  f7fffffe          BL       drv_Cmd_Send2NCU031
;;;459    						Global_datas.g_4g_initing = 0;
000176  2000              MOVS     r0,#0
000178  71a0              STRB     r0,[r4,#6]
;;;460    						Global_datas.g_mode_status = WIFI_MODE;
00017a  7167              STRB     r7,[r4,#5]
;;;461    						printf("\n AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n");
00017c  a0c1              ADR      r0,|L13.1156|
00017e  f7fffffe          BL       __2printf
                  |L13.386|
;;;462    					} 
;;;463    					
;;;464    					if((msg.param0 == 0x09) && (msg.param1 == 0x01))
000182  9802              LDR      r0,[sp,#8]
000184  2809              CMP      r0,#9
000186  d12a              BNE      |L13.478|
000188  9803              LDR      r0,[sp,#0xc]
00018a  2801              CMP      r0,#1
00018c  d1d3              BNE      |L13.310|
;;;465    	                {
;;;466    //						printf("0x09, msg.param1 = %x \n",msg.param1);
;;;467    	                	//in bat val
;;;468    						bat_val[1] = (Global_datas.ADC_ChannelValue[15]>>8) & 0xff;
00018e  48a1              LDR      r0,|L13.1044|
000190  466b              MOV      r3,sp
000192  3820              SUBS     r0,r0,#0x20
000194  8bc0              LDRH     r0,[r0,#0x1e]  ; Global_datas
000196  0401              LSLS     r1,r0,#16
000198  0e09              LSRS     r1,r1,#24
00019a  7059              STRB     r1,[r3,#1]
;;;469    						bat_val[0] = Global_datas.ADC_ChannelValue[15] & 0xff;
00019c  b2c2              UXTB     r2,r0
00019e  701a              STRB     r2,[r3,#0]
;;;470    						if(Global_datas.g_PowerStatus.PowerBatInStatus != POWER_BAT_IN_FALSE)
0001a0  7820              LDRB     r0,[r4,#0]  ; Global_datas
0001a2  2801              CMP      r0,#1
0001a4  d002              BEQ      |L13.428|
;;;471    							bat_val[1] = bat_val[1] & 0x80;  //in bat en
0001a6  09c8              LSRS     r0,r1,#7
0001a8  01c0              LSLS     r0,r0,#7
0001aa  7058              STRB     r0,[r3,#1]
                  |L13.428|
;;;472    						Cmd_Send2FourG(0x09,bat_val[1],bat_val[0]);
0001ac  7859              LDRB     r1,[r3,#1]
0001ae  2009              MOVS     r0,#9
0001b0  f7fffffe          BL       Cmd_Send2FourG
;;;473    						//ex bat val
;;;474    						bat_val[1] = (Global_datas.ADC_ChannelValue[12]>>8) & 0xff;
0001b4  4897              LDR      r0,|L13.1044|
0001b6  3820              SUBS     r0,r0,#0x20
0001b8  8b02              LDRH     r2,[r0,#0x18]  ; Global_datas
0001ba  0410              LSLS     r0,r2,#16
0001bc  0e01              LSRS     r1,r0,#24
0001be  4668              MOV      r0,sp
0001c0  7041              STRB     r1,[r0,#1]
;;;475    						bat_val[0] = Global_datas.ADC_ChannelValue[12] & 0xff;
0001c2  b2d2              UXTB     r2,r2
0001c4  7002              STRB     r2,[r0,#0]
;;;476    						if(Global_datas.g_PowerStatus.PowerBatExStatus != POWER_BAT_EX_FALSE)
0001c6  7860              LDRB     r0,[r4,#1]  ; Global_datas
0001c8  2803              CMP      r0,#3
0001ca  d003              BEQ      |L13.468|
;;;477    							bat_val[1] = bat_val[1] & 0x60;  //ex bat en
0001cc  2060              MOVS     r0,#0x60
0001ce  4001              ANDS     r1,r1,r0
0001d0  4668              MOV      r0,sp
0001d2  7041              STRB     r1,[r0,#1]
                  |L13.468|
;;;478    						Cmd_Send2FourG(0x09,bat_val[1],bat_val[0]);
0001d4  4668              MOV      r0,sp
0001d6  7841              LDRB     r1,[r0,#1]
0001d8  2009              MOVS     r0,#9
0001da  f7fffffe          BL       Cmd_Send2FourG
                  |L13.478|
;;;479    					}
;;;480    					
;;;481    					if(msg.param0 == 0x07)
0001de  9802              LDR      r0,[sp,#8]
0001e0  2807              CMP      r0,#7
0001e2  d116              BNE      |L13.530|
;;;482    	        		{
;;;483    	                	// vol
;;;484    	                	
;;;485    						printf("0x07, msg.param1 = %x \n",msg.param1);
0001e4  a0b1              ADR      r0,|L13.1196|
0001e6  9903              LDR      r1,[sp,#0xc]
0001e8  f7fffffe          BL       __2printf
;;;486    						
;;;487    						if(msg.param1)
0001ec  9803              LDR      r0,[sp,#0xc]
0001ee  2800              CMP      r0,#0
0001f0  d007              BEQ      |L13.514|
;;;488    						{
;;;489    							Global_datas.volume = msg.param1;
0001f2  b2c0              UXTB     r0,r0
0001f4  73e0              STRB     r0,[r4,#0xf]
;;;490    							Drv_Dap_vol_set(Global_datas.volume);
0001f6  f7fffffe          BL       Drv_Dap_vol_set
;;;491    							Global_datas.mute = 0;
0001fa  2000              MOVS     r0,#0
0001fc  74a0              STRB     r0,[r4,#0x12]
;;;492    							drv_5825_mute_pin_set(1);
0001fe  2001              MOVS     r0,#1
000200  e005              B        |L13.526|
                  |L13.514|
;;;493    						}
;;;494    						else
;;;495    						{
;;;496    							Global_datas.volume = 0;
000202  2000              MOVS     r0,#0
000204  73e0              STRB     r0,[r4,#0xf]
;;;497    							Drv_Dap_vol_set(Global_datas.volume);
000206  f7fffffe          BL       Drv_Dap_vol_set
;;;498    							Global_datas.mute = 1;
00020a  74a7              STRB     r7,[r4,#0x12]
;;;499    							drv_5825_mute_pin_set(0);
00020c  2000              MOVS     r0,#0
                  |L13.526|
00020e  f7fffffe          BL       drv_5825_mute_pin_set
                  |L13.530|
;;;500    						}
;;;501    						
;;;502    					}
;;;503    					if(msg.param0 == 0x04 )
000212  9802              LDR      r0,[sp,#8]
000214  2804              CMP      r0,#4
000216  d103              BNE      |L13.544|
;;;504    					{
;;;505    	                	//Drv_Dap_vol_mute(msg.param1);
;;;506    	                	// vol
;;;507    	                	
;;;508    					printf("0x04, msg.param1 = %x \n",msg.param1);
000218  a0aa              ADR      r0,|L13.1220|
00021a  9903              LDR      r1,[sp,#0xc]
00021c  f7fffffe          BL       __2printf
                  |L13.544|
;;;509    					}
;;;510    					
;;;511    					if(msg.param0 == 0x0F)
000220  9802              LDR      r0,[sp,#8]
000222  280f              CMP      r0,#0xf
000224  d113              BNE      |L13.590|
;;;512    					{
;;;513    						if(msg.param1 == 0x19)
000226  9803              LDR      r0,[sp,#0xc]
000228  2819              CMP      r0,#0x19
00022a  e000              B        |L13.558|
                  |L13.556|
00022c  e0c7              B        |L13.958|
                  |L13.558|
00022e  d105              BNE      |L13.572|
;;;514    						{
;;;515    							Global_datas.g_mode_status = LOUD_SPEAKER_MODE;
000230  2009              MOVS     r0,#9
000232  7160              STRB     r0,[r4,#5]
;;;516    							printf("0x0F, msg.param1 = %x \n",msg.param1);
000234  a0a9              ADR      r0,|L13.1244|
000236  9903              LDR      r1,[sp,#0xc]
000238  f7fffffe          BL       __2printf
                  |L13.572|
;;;517    						}
;;;518    					
;;;519    						if (msg.param1 == 0x17)
00023c  9803              LDR      r0,[sp,#0xc]
00023e  2817              CMP      r0,#0x17
000240  d105              BNE      |L13.590|
;;;520    						{
;;;521    		                	Global_datas.g_mode_status = AUX_MODE;
000242  2008              MOVS     r0,#8
000244  7160              STRB     r0,[r4,#5]
;;;522    						printf("0x0F, msg.param1 = %x \n",msg.param1);
000246  a0a5              ADR      r0,|L13.1244|
000248  9903              LDR      r1,[sp,#0xc]
00024a  f7fffffe          BL       __2printf
                  |L13.590|
;;;523    						}
;;;524    					}
;;;525    
;;;526    					if(msg.param0 == 0x0d)  // 4G GO TO POWER OFF , NEED TO POWER DOWN 4G VCC
00024e  9802              LDR      r0,[sp,#8]
000250  280d              CMP      r0,#0xd
000252  d108              BNE      |L13.614|
;;;527    					{
;;;528    						Drv_4GMoudle_PowerUp(0);  // wait for 4g modle ready ,than turn off power
000254  2000              MOVS     r0,#0
000256  f7fffffe          BL       Drv_4GMoudle_PowerUp
;;;529    						TYM_drv_powerkeepon(0); 
00025a  2000              MOVS     r0,#0
00025c  f7fffffe          BL       TYM_drv_powerkeepon
;;;530    						TYM_SysPower12V_3V3_onoff(0);
000260  2000              MOVS     r0,#0
000262  f7fffffe          BL       TYM_SysPower12V_3V3_onoff
                  |L13.614|
;;;531    					}
;;;532    
;;;533    					if(msg.param0 == 0x06)  // sys status
000266  9802              LDR      r0,[sp,#8]
000268  2806              CMP      r0,#6
00026a  d14f              BNE      |L13.780|
;;;534    					{
;;;535    						if(msg.param1 == 0x06)
00026c  9803              LDR      r0,[sp,#0xc]
00026e  2806              CMP      r0,#6
000270  d104              BNE      |L13.636|
;;;536    						{
;;;537    		                	Global_datas.g_mode_status = BT_MODE;
000272  2106              MOVS     r1,#6
000274  7161              STRB     r1,[r4,#5]
;;;538    							printf("0x06, msg.param1 = %x \n",msg.param1);
000276  a09f              ADR      r0,|L13.1268|
000278  f7fffffe          BL       __2printf
                  |L13.636|
;;;539    							//Drv_Dap_vol_set(VOLUME_DEFAULT);
;;;540    							
;;;541    						}
;;;542    					
;;;543    						if (msg.param1 == 0x07)
00027c  9803              LDR      r0,[sp,#0xc]
00027e  2807              CMP      r0,#7
000280  d104              BNE      |L13.652|
;;;544    						{
;;;545    		                	Global_datas.g_mode_status = BT_CONNECTED_MODE;
000282  2107              MOVS     r1,#7
000284  7161              STRB     r1,[r4,#5]
;;;546    							//Global_datas.volume_resume = 1;
;;;547    							printf("0x06, msg.param1 = %x \n",msg.param1);
000286  a09b              ADR      r0,|L13.1268|
000288  f7fffffe          BL       __2printf
                  |L13.652|
;;;548    						}
;;;549    						if (msg.param1 == 0x02)
00028c  9803              LDR      r0,[sp,#0xc]
00028e  2802              CMP      r0,#2
000290  d104              BNE      |L13.668|
;;;550    						{
;;;551    		                	Global_datas.g_mode_status = WIFI_CONNECTED_MODE;
000292  2102              MOVS     r1,#2
000294  7161              STRB     r1,[r4,#5]
;;;552    		                	
;;;553    						printf("0x06, msg.param1 = %x \n",msg.param1);
000296  a097              ADR      r0,|L13.1268|
000298  f7fffffe          BL       __2printf
                  |L13.668|
;;;554    						}
;;;555    						if (msg.param1 == 0x04)
00029c  9803              LDR      r0,[sp,#0xc]
00029e  2804              CMP      r0,#4
0002a0  d104              BNE      |L13.684|
;;;556    						{
;;;557    		                	Global_datas.g_mode_status = WIFI_MODE;
;;;558    		                	
;;;559    						printf("0x06, msg.param1 = %x \n",msg.param1);
0002a2  4601              MOV      r1,r0
0002a4  7167              STRB     r7,[r4,#5]            ;557
0002a6  a093              ADR      r0,|L13.1268|
0002a8  f7fffffe          BL       __2printf
                  |L13.684|
;;;560    						}
;;;561    						if (msg.param1 == 0x05)
0002ac  9803              LDR      r0,[sp,#0xc]
0002ae  2805              CMP      r0,#5
0002b0  d105              BNE      |L13.702|
;;;562    						{
;;;563    		                	Global_datas.g_mode_status = WIFI_CONNECTING_MODE;
0002b2  2003              MOVS     r0,#3
0002b4  7160              STRB     r0,[r4,#5]
;;;564    		                	
;;;565    						printf("0x06, msg.param1 = %x \n",msg.param1);
0002b6  a08f              ADR      r0,|L13.1268|
0002b8  9903              LDR      r1,[sp,#0xc]
0002ba  f7fffffe          BL       __2printf
                  |L13.702|
;;;566    						}
;;;567    						if (msg.param1 == 0x011)
0002be  9803              LDR      r0,[sp,#0xc]
0002c0  2811              CMP      r0,#0x11
0002c2  d105              BNE      |L13.720|
;;;568    						{
;;;569    		                	Global_datas.g_mode_status = FOURG_CONNECTED_MODE;
0002c4  2005              MOVS     r0,#5
0002c6  7160              STRB     r0,[r4,#5]
;;;570    		                	
;;;571    						printf("0x06, msg.param1 = %x \n",msg.param1);
0002c8  a08a              ADR      r0,|L13.1268|
0002ca  9903              LDR      r1,[sp,#0xc]
0002cc  f7fffffe          BL       __2printf
                  |L13.720|
;;;572    						}
;;;573    						if (msg.param1 == 0x012)
0002d0  9803              LDR      r0,[sp,#0xc]
0002d2  2812              CMP      r0,#0x12
0002d4  d105              BNE      |L13.738|
;;;574    						{
;;;575    		                	Global_datas.g_mode_status = FOURG_MODE;
0002d6  2004              MOVS     r0,#4
0002d8  7160              STRB     r0,[r4,#5]
;;;576    		                	
;;;577    						printf("0x06, msg.param1 = %x \n",msg.param1);
0002da  a086              ADR      r0,|L13.1268|
0002dc  9903              LDR      r1,[sp,#0xc]
0002de  f7fffffe          BL       __2printf
                  |L13.738|
;;;578    						}
;;;579    						if (msg.param1 == 0x0B)
0002e2  9803              LDR      r0,[sp,#0xc]
0002e4  280b              CMP      r0,#0xb
0002e6  d104              BNE      |L13.754|
;;;580    						{
;;;581    		                	Global_datas.g_mode_status = SYSTEM_UPDATING;
0002e8  210b              MOVS     r1,#0xb
0002ea  7161              STRB     r1,[r4,#5]
;;;582    		                	
;;;583    						printf("0x06, msg.param1 = %x \n",msg.param1);
0002ec  a081              ADR      r0,|L13.1268|
0002ee  f7fffffe          BL       __2printf
                  |L13.754|
;;;584    						}
;;;585    						if ((msg.param1 == 0x09) || (msg.param1 == 0x08) || (msg.param1 == 0x16))
0002f2  9803              LDR      r0,[sp,#0xc]
0002f4  2809              CMP      r0,#9
0002f6  d003              BEQ      |L13.768|
0002f8  2808              CMP      r0,#8
0002fa  d001              BEQ      |L13.768|
0002fc  2816              CMP      r0,#0x16
0002fe  d105              BNE      |L13.780|
                  |L13.768|
;;;586    						{
;;;587    		                	Global_datas.g_mode_status = SYS_LOW_POWER;
000300  200c              MOVS     r0,#0xc
000302  7160              STRB     r0,[r4,#5]
;;;588    		                	
;;;589    						printf("0x06, msg.param1 = %x \n",msg.param1);
000304  a07b              ADR      r0,|L13.1268|
000306  9903              LDR      r1,[sp,#0xc]
000308  f7fffffe          BL       __2printf
                  |L13.780|
;;;590    						}
;;;591    						
;;;592    					}
;;;593    				//rtc time	
;;;594    					if(msg.param0 == 0x11)
00030c  9802              LDR      r0,[sp,#8]
00030e  2811              CMP      r0,#0x11
000310  d105              BNE      |L13.798|
;;;595    					{
;;;596    						srv_rtc_set_ym(msg.param1,msg.param2);
000312  9804              LDR      r0,[sp,#0x10]
000314  b2c1              UXTB     r1,r0
000316  9803              LDR      r0,[sp,#0xc]
000318  b2c0              UXTB     r0,r0
00031a  f7fffffe          BL       srv_rtc_set_ym
                  |L13.798|
;;;597    					}
;;;598    					
;;;599    					if(msg.param0 == 0x12)
00031e  9802              LDR      r0,[sp,#8]
000320  2812              CMP      r0,#0x12
000322  d105              BNE      |L13.816|
;;;600    					{
;;;601    						srv_rtc_set_dw(msg.param1,msg.param2);
000324  9804              LDR      r0,[sp,#0x10]
000326  b2c1              UXTB     r1,r0
000328  9803              LDR      r0,[sp,#0xc]
00032a  b2c0              UXTB     r0,r0
00032c  f7fffffe          BL       srv_rtc_set_dw
                  |L13.816|
;;;602    					}
;;;603    					
;;;604    					if(msg.param0 == 0x13)
000330  9802              LDR      r0,[sp,#8]
000332  2813              CMP      r0,#0x13
000334  d105              BNE      |L13.834|
;;;605    					{
;;;606    						srv_rtc_set_hm(msg.param1,msg.param2);
000336  9804              LDR      r0,[sp,#0x10]
000338  b2c1              UXTB     r1,r0
00033a  9803              LDR      r0,[sp,#0xc]
00033c  b2c0              UXTB     r0,r0
00033e  f7fffffe          BL       srv_rtc_set_hm
                  |L13.834|
;;;607    					}
;;;608    					
;;;609    					if(msg.param0 == 0x14)
000342  9802              LDR      r0,[sp,#8]
000344  2814              CMP      r0,#0x14
000346  d105              BNE      |L13.852|
;;;610    					{
;;;611    						srv_rtc_set_st(msg.param1,msg.param2);
000348  9804              LDR      r0,[sp,#0x10]
00034a  b2c1              UXTB     r1,r0
00034c  9803              LDR      r0,[sp,#0xc]
00034e  b2c0              UXTB     r0,r0
000350  f7fffffe          BL       srv_rtc_set_st
                  |L13.852|
;;;612    					}
;;;613    					//rtc alarm
;;;614    					if(msg.param0 == 0x15)
000354  9802              LDR      r0,[sp,#8]
000356  2815              CMP      r0,#0x15
000358  d105              BNE      |L13.870|
;;;615    					{
;;;616    						srv_rtc_alarm_set_ym(msg.param1,msg.param2);
00035a  9804              LDR      r0,[sp,#0x10]
00035c  b2c1              UXTB     r1,r0
00035e  9803              LDR      r0,[sp,#0xc]
000360  b2c0              UXTB     r0,r0
000362  f7fffffe          BL       srv_rtc_alarm_set_ym
                  |L13.870|
;;;617    					}
;;;618    					
;;;619    					if(msg.param0 == 0x16)
000366  9802              LDR      r0,[sp,#8]
000368  2816              CMP      r0,#0x16
00036a  d105              BNE      |L13.888|
;;;620    					{
;;;621    						srv_rtc_alarm_set_dw(msg.param1,msg.param2);
00036c  9804              LDR      r0,[sp,#0x10]
00036e  b2c1              UXTB     r1,r0
000370  9803              LDR      r0,[sp,#0xc]
000372  b2c0              UXTB     r0,r0
000374  f7fffffe          BL       srv_rtc_alarm_set_dw
                  |L13.888|
;;;622    					}
;;;623    					
;;;624    					if(msg.param0 == 0x17)
000378  9802              LDR      r0,[sp,#8]
00037a  2817              CMP      r0,#0x17
00037c  d105              BNE      |L13.906|
;;;625    					{
;;;626    						srv_rtc_alarm_set_hm(msg.param1,msg.param2);
00037e  9804              LDR      r0,[sp,#0x10]
000380  b2c1              UXTB     r1,r0
000382  9803              LDR      r0,[sp,#0xc]
000384  b2c0              UXTB     r0,r0
000386  f7fffffe          BL       srv_rtc_alarm_set_hm
                  |L13.906|
;;;627    					}
;;;628    					
;;;629    					if(msg.param0 == 0x18)
00038a  9802              LDR      r0,[sp,#8]
00038c  2818              CMP      r0,#0x18
00038e  d105              BNE      |L13.924|
;;;630    					{
;;;631    						srv_rtc_alarm_set_st(msg.param1,msg.param2);
000390  9804              LDR      r0,[sp,#0x10]
000392  b2c1              UXTB     r1,r0
000394  9803              LDR      r0,[sp,#0xc]
000396  b2c0              UXTB     r0,r0
000398  f7fffffe          BL       srv_rtc_alarm_set_st
                  |L13.924|
;;;632    					}
;;;633    					if(msg.param0 == 0x19)
00039c  9802              LDR      r0,[sp,#8]
00039e  2819              CMP      r0,#0x19
0003a0  d101              BNE      |L13.934|
;;;634    					{
;;;635    						srv_rtc_get();
0003a2  f7fffffe          BL       srv_rtc_get
                  |L13.934|
;;;636    					}
;;;637    					if(msg.param0 == 0x1a)
0003a6  9802              LDR      r0,[sp,#8]
0003a8  281a              CMP      r0,#0x1a
0003aa  d101              BNE      |L13.944|
;;;638    					{
;;;639    						srv_rtc_alarm_get();
0003ac  f7fffffe          BL       srv_rtc_alarm_get
                  |L13.944|
;;;640    					}
;;;641    					
;;;642    					if(msg.param0 == 0x20)
0003b0  9802              LDR      r0,[sp,#8]
0003b2  2820              CMP      r0,#0x20
0003b4  d103              BNE      |L13.958|
;;;643    					{
;;;644    						Cmd_Send2FourG(0x20,0x0,0x4);  //version 0.0.4
0003b6  2204              MOVS     r2,#4
0003b8  2100              MOVS     r1,#0
0003ba  f7fffffe          BL       Cmd_Send2FourG
                  |L13.958|
0003be  e14a              B        |L13.1622|
                  |L13.960|
;;;645    					}
;;;646    	            break;
;;;647    
;;;648    			 	case MSG_MCU1_SYS_STATE_IND:
;;;649    
;;;650    				    if((msg.param0 == 0x03) && ((msg.param1 == 0x55) || (msg.param1 == 0x02) || (msg.param1 == 0x03))) //power off mode  , v+ v- do not send to 4G
0003c0  9802              LDR      r0,[sp,#8]
0003c2  2803              CMP      r0,#3
0003c4  d106              BNE      |L13.980|
0003c6  9803              LDR      r0,[sp,#0xc]
0003c8  2855              CMP      r0,#0x55
0003ca  d0f8              BEQ      |L13.958|
0003cc  2802              CMP      r0,#2
0003ce  d01a              BEQ      |L13.1030|
0003d0  2803              CMP      r0,#3
0003d2  d019              BEQ      |L13.1032|
                  |L13.980|
;;;651    					{
;;;652    						//Global_datas.g_mode_status = POWER_OFF_MODE;
;;;653    					}
;;;654    					else
;;;655    					{
;;;656    						Cmd_Send2FourG( msg.param0,msg.param1,msg.param2);
0003d4  9804              LDR      r0,[sp,#0x10]
0003d6  b2c2              UXTB     r2,r0
0003d8  9803              LDR      r0,[sp,#0xc]
0003da  b2c1              UXTB     r1,r0
0003dc  9802              LDR      r0,[sp,#8]
0003de  b2c0              UXTB     r0,r0
0003e0  f7fffffe          BL       Cmd_Send2FourG
;;;657    					}
;;;658    					
;;;659    					
;;;660    					//printf("MSG_MCU1_SYS_STATE_IND:msg.param0 = %x, msg.param1 = %x \n",msg.param0,msg.param1);
;;;661    					if((msg.param0 == 0x01) && (msg.param1 == 0x00))
0003e4  9802              LDR      r0,[sp,#8]
0003e6  2801              CMP      r0,#1
0003e8  d107              BNE      |L13.1018|
0003ea  9803              LDR      r0,[sp,#0xc]
0003ec  2800              CMP      r0,#0
0003ee  d1e6              BNE      |L13.958|
;;;662    					{
;;;663    						drv_Cmd_Send2NCU031(0x01,Global_datas.g_PowerStatus.bat_status,Global_datas.g_PowerStatus.bat_value);
0003f0  7922              LDRB     r2,[r4,#4]  ; Global_datas
0003f2  78e1              LDRB     r1,[r4,#3]  ; Global_datas
0003f4  2001              MOVS     r0,#1
0003f6  f7fffffe          BL       drv_Cmd_Send2NCU031
                  |L13.1018|
;;;664    					}
;;;665    					if(msg.param0 == 0x02) // MIC VOLUNE ,NO USE 
;;;666    					{
;;;667    					
;;;668    					}
;;;669    
;;;670    					if((msg.param0 == 0x03) && (msg.param1 == 0x03))
0003fa  9802              LDR      r0,[sp,#8]
0003fc  2803              CMP      r0,#3
0003fe  d1de              BNE      |L13.958|
000400  9803              LDR      r0,[sp,#0xc]
000402  2803              CMP      r0,#3
000404  e082              B        |L13.1292|
                  |L13.1030|
000406  e09b              B        |L13.1344|
                  |L13.1032|
000408  e081              B        |L13.1294|
00040a  0000              DCW      0x0000
                  |L13.1036|
00040c  0a6d6169          DCB      "\nmain\n",0
000410  6e0a00  
000413  00                DCB      0
                  |L13.1044|
                          DCD      Global_datas+0x20
                  |L13.1048|
                          DCD      SysTimer_1s
                  |L13.1052|
                          DCD      ModulePowerUpPinTimer
                  |L13.1056|
                          DCD      PoweroffLedTimer
                  |L13.1060|
                          DCD      0x50004200
                  |L13.1064|
                          DCD      SubBoardHandshakeTimer
                  |L13.1068|
                          DCD      LedKeyBlinkTimer
                  |L13.1072|
                          DCD      ModeSwitchTimer
                  |L13.1076|
000434  4d53475f          DCB      "MSG_4G_SYS_STATE_IND:msg.param0 = %x, msg.param1 = %x \n"
000438  34475f53
00043c  59535f53
000440  54415445
000444  5f494e44
000448  3a6d7367
00044c  2e706172
000450  616d3020
000454  3d202578
000458  2c206d73
00045c  672e7061
000460  72616d31
000464  203d2025
000468  78200a  
00046b  00                DCB      0
                  |L13.1132|
00046c  30783038          DCB      "0x08, msg.param1 = %x \n",0
000470  2c206d73
000474  672e7061
000478  72616d31
00047c  203d2025
000480  78200a00
                  |L13.1156|
000484  0a204141          DCB      "\n AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n",0
000488  41414141
00048c  41414141
000490  41414141
000494  41414141
000498  41414141
00049c  41414141
0004a0  41414141
0004a4  41414141
0004a8  0a00    
0004aa  00                DCB      0
0004ab  00                DCB      0
                  |L13.1196|
0004ac  30783037          DCB      "0x07, msg.param1 = %x \n",0
0004b0  2c206d73
0004b4  672e7061
0004b8  72616d31
0004bc  203d2025
0004c0  78200a00
                  |L13.1220|
0004c4  30783034          DCB      "0x04, msg.param1 = %x \n",0
0004c8  2c206d73
0004cc  672e7061
0004d0  72616d31
0004d4  203d2025
0004d8  78200a00
                  |L13.1244|
0004dc  30783046          DCB      "0x0F, msg.param1 = %x \n",0
0004e0  2c206d73
0004e4  672e7061
0004e8  72616d31
0004ec  203d2025
0004f0  78200a00
                  |L13.1268|
0004f4  30783036          DCB      "0x06, msg.param1 = %x \n",0
0004f8  2c206d73
0004fc  672e7061
000500  72616d31
000504  203d2025
000508  78200a00
                  |L13.1292|
00050c  d115              BNE      |L13.1338|
                  |L13.1294|
;;;671    					{
;;;672    						
;;;673    						if (Global_datas.volume > VOLUME_MIN)
00050e  7be0              LDRB     r0,[r4,#0xf]  ; Global_datas
000510  2800              CMP      r0,#0
000512  d07d              BEQ      |L13.1552|
000514  1e40              SUBS     r0,r0,#1
;;;674    						{
;;;675    							Global_datas.volume--;
000516  b2c0              UXTB     r0,r0
000518  73e0              STRB     r0,[r4,#0xf]
;;;676    							Drv_Dap_vol_set(Global_datas.volume);
00051a  f7fffffe          BL       Drv_Dap_vol_set
;;;677    							if(Global_datas.volume == 0)
00051e  7be0              LDRB     r0,[r4,#0xf]  ; Global_datas
000520  2800              CMP      r0,#0
000522  d102              BNE      |L13.1322|
;;;678    							{
;;;679    								Global_datas.mute = 1;
000524  74a7              STRB     r7,[r4,#0x12]
;;;680    								drv_5825_mute_pin_set(0); 
000526  f7fffffe          BL       drv_5825_mute_pin_set
                  |L13.1322|
;;;681    							}
;;;682    							Cmd_Send2FourG(0x03,0x04,Global_datas.volume); // send volume  to 4G moudle
00052a  7be2              LDRB     r2,[r4,#0xf]  ; Global_datas
00052c  2104              MOVS     r1,#4
00052e  2003              MOVS     r0,#3
000530  f7fffffe          BL       Cmd_Send2FourG
;;;683    							//printf("Hal_Dap_Load_vol_reduce\n");
;;;684    						}
;;;685    					}
;;;686    					
;;;687    					if((msg.param0 == 0x03) && (msg.param1 == 0x02))
000534  9802              LDR      r0,[sp,#8]
000536  2803              CMP      r0,#3
000538  d16a              BNE      |L13.1552|
                  |L13.1338|
00053a  9803              LDR      r0,[sp,#0xc]
00053c  2802              CMP      r0,#2
00053e  d111              BNE      |L13.1380|
                  |L13.1344|
;;;688    					{
;;;689    						
;;;690    						Global_datas.mute = 0;
000540  2000              MOVS     r0,#0
000542  74a0              STRB     r0,[r4,#0x12]
;;;691    						if (Global_datas.volume < VOLUME_MAX)
000544  7be0              LDRB     r0,[r4,#0xf]  ; Global_datas
000546  2810              CMP      r0,#0x10
000548  d262              BCS      |L13.1552|
00054a  1c40              ADDS     r0,r0,#1
;;;692    						{
;;;693    							Global_datas.volume++;
00054c  b2c0              UXTB     r0,r0
00054e  73e0              STRB     r0,[r4,#0xf]
;;;694    							Drv_Dap_vol_set(Global_datas.volume);
000550  f7fffffe          BL       Drv_Dap_vol_set
;;;695    							Cmd_Send2FourG(0x03,0x04,Global_datas.volume); // send volume  to 4G moudle
000554  7be2              LDRB     r2,[r4,#0xf]  ; Global_datas
000556  2104              MOVS     r1,#4
000558  2003              MOVS     r0,#3
00055a  f7fffffe          BL       Cmd_Send2FourG
;;;696    							//printf("Hal_Dap_Load_vol_add\n");
;;;697    						}
;;;698    					}
;;;699    
;;;700    					if((msg.param0 == 0x03) && (msg.param1 == 0x15)) //wifi mode
00055e  9802              LDR      r0,[sp,#8]
000560  2803              CMP      r0,#3
000562  d178              BNE      |L13.1622|
                  |L13.1380|
000564  9803              LDR      r0,[sp,#0xc]
000566  2815              CMP      r0,#0x15
000568  d10c              BNE      |L13.1412|
;;;701    					{
;;;702    
;;;703    						drv_5825_mute_pin_set(0); 
00056a  2000              MOVS     r0,#0
00056c  f7fffffe          BL       drv_5825_mute_pin_set
;;;704    						Global_datas.mode_switching = 1;
000570  7467              STRB     r7,[r4,#0x11]
;;;705    						Global_datas.g_mode_status = WIFI_MODE;
000572  7167              STRB     r7,[r4,#5]
;;;706    						drv_audio_4G_Channel();
000574  f7fffffe          BL       drv_audio_4G_Channel
;;;707    						
;;;708    						printf("FourG_WIFI_CHANNEL\n");
000578  a049              ADR      r0,|L13.1696|
00057a  f7fffffe          BL       __2printf
;;;709    					}
;;;710    					if((msg.param0 == 0x03) && (msg.param1 == 0x16)) //BT mode
00057e  9802              LDR      r0,[sp,#8]
000580  2803              CMP      r0,#3
000582  d168              BNE      |L13.1622|
                  |L13.1412|
000584  9803              LDR      r0,[sp,#0xc]
000586  2816              CMP      r0,#0x16
000588  d10d              BNE      |L13.1446|
;;;711    					{
;;;712    						drv_5825_mute_pin_set(0); 
00058a  2000              MOVS     r0,#0
00058c  f7fffffe          BL       drv_5825_mute_pin_set
;;;713    						Global_datas.mode_switching = 1;
000590  7467              STRB     r7,[r4,#0x11]
;;;714    						Global_datas.g_mode_status = BT_MODE;
000592  2006              MOVS     r0,#6
000594  7160              STRB     r0,[r4,#5]
;;;715    						drv_audio_4G_Channel();  	// bt wifi use the same mode
000596  f7fffffe          BL       drv_audio_4G_Channel
;;;716    						printf("BT_CHANNEL\n");
00059a  a046              ADR      r0,|L13.1716|
00059c  f7fffffe          BL       __2printf
;;;717    					}
;;;718    					if((msg.param0 == 0x03) && (msg.param1 == 0x17)) //AUX mode
0005a0  9802              LDR      r0,[sp,#8]
0005a2  2803              CMP      r0,#3
0005a4  d157              BNE      |L13.1622|
                  |L13.1446|
0005a6  9803              LDR      r0,[sp,#0xc]
0005a8  2817              CMP      r0,#0x17
0005aa  d10d              BNE      |L13.1480|
;;;719    					{
;;;720    						drv_5825_mute_pin_set(0); 
0005ac  2000              MOVS     r0,#0
0005ae  f7fffffe          BL       drv_5825_mute_pin_set
;;;721    						Global_datas.mode_switching = 1;
0005b2  7467              STRB     r7,[r4,#0x11]
;;;722    						Global_datas.g_mode_status = AUX_MODE;
0005b4  2008              MOVS     r0,#8
0005b6  7160              STRB     r0,[r4,#5]
;;;723    						drv_audio_AuxIn_Channel(); 
0005b8  f7fffffe          BL       drv_audio_AuxIn_Channel
;;;724    						printf("AUXIN_CHANNEL\n");
0005bc  a040              ADR      r0,|L13.1728|
0005be  f7fffffe          BL       __2printf
;;;725    					}
;;;726    					if((msg.param0 == 0x03) && (msg.param1 == 0x18)) //FM mode
0005c2  9802              LDR      r0,[sp,#8]
0005c4  2803              CMP      r0,#3
0005c6  d146              BNE      |L13.1622|
                  |L13.1480|
0005c8  9803              LDR      r0,[sp,#0xc]
0005ca  2818              CMP      r0,#0x18
0005cc  d10d              BNE      |L13.1514|
;;;727    					{
;;;728    						drv_5825_mute_pin_set(0); 
0005ce  2000              MOVS     r0,#0
0005d0  f7fffffe          BL       drv_5825_mute_pin_set
;;;729    						Global_datas.mode_switching = 1;
0005d4  7467              STRB     r7,[r4,#0x11]
;;;730    						Global_datas.g_mode_status = FM_MODE;
0005d6  200a              MOVS     r0,#0xa
0005d8  7160              STRB     r0,[r4,#5]
;;;731    						drv_audio_FM_Channel(); 
0005da  f7fffffe          BL       drv_audio_FM_Channel
;;;732    
;;;733    						//Drv_4GMoudle_PowerUp(0); // if timeout,turn off.
;;;734    						
;;;735    						printf("FM_CHANNEL\n");
0005de  a03c              ADR      r0,|L13.1744|
0005e0  f7fffffe          BL       __2printf
;;;736    					}
;;;737    					if((msg.param0 == 0x03) && (msg.param1 == 0x31)) // NEXT CHANNEL
;;;738    					{
;;;739    								
;;;740    					}
;;;741    					if((msg.param0 == 0x03) && (msg.param1 == 0x32))// PRE CHANNEL
;;;742    					{
;;;743    					
;;;744    					}
;;;745    					if((msg.param0 == 0x03) && (msg.param1 == 0x56)) // PLAY/PAUSE
;;;746    					{
;;;747    
;;;748    					}
;;;749    					if((msg.param0 == 0x03) && (msg.param1 == 0xC0)) //FM reset
0005e4  9802              LDR      r0,[sp,#8]
0005e6  2803              CMP      r0,#3
0005e8  d135              BNE      |L13.1622|
                  |L13.1514|
0005ea  9803              LDR      r0,[sp,#0xc]
0005ec  28c0              CMP      r0,#0xc0
0005ee  d107              BNE      |L13.1536|
;;;750    					{
;;;751    						
;;;752    						drv_FM_on_NCU031_reset();
0005f0  f7fffffe          BL       drv_FM_on_NCU031_reset
;;;753    						printf("fm reset\n");
0005f4  a039              ADR      r0,|L13.1756|
0005f6  f7fffffe          BL       __2printf
;;;754    						
;;;755    					}
;;;756    					if((msg.param0 == 0x03) && (msg.param1 == 0xC1)) //inside
0005fa  9802              LDR      r0,[sp,#8]
0005fc  2803              CMP      r0,#3
0005fe  d12a              BNE      |L13.1622|
                  |L13.1536|
000600  9803              LDR      r0,[sp,#0xc]
000602  28c1              CMP      r0,#0xc1
000604  d107              BNE      |L13.1558|
;;;757    					{
;;;758    						printf("inside\n");
000606  a038              ADR      r0,|L13.1768|
000608  f7fffffe          BL       __2printf
;;;759    					}
;;;760    					if((msg.param0 == 0x03) && (msg.param1 == 0xC2)) //outside
00060c  9802              LDR      r0,[sp,#8]
00060e  e000              B        |L13.1554|
                  |L13.1552|
000610  e021              B        |L13.1622|
                  |L13.1554|
000612  2803              CMP      r0,#3
000614  d11f              BNE      |L13.1622|
                  |L13.1558|
000616  9803              LDR      r0,[sp,#0xc]
000618  28c2              CMP      r0,#0xc2
00061a  d105              BNE      |L13.1576|
;;;761    					{
;;;762    
;;;763    						printf("outside\n");
00061c  a034              ADR      r0,|L13.1776|
00061e  f7fffffe          BL       __2printf
;;;764    					}
;;;765    					if((msg.param0 == 0x03) && (msg.param1 == 0xC3)) //autoside
000622  9802              LDR      r0,[sp,#8]
000624  2803              CMP      r0,#3
000626  d116              BNE      |L13.1622|
                  |L13.1576|
000628  9803              LDR      r0,[sp,#0xc]
00062a  28c3              CMP      r0,#0xc3
00062c  d105              BNE      |L13.1594|
;;;766    					{
;;;767    						printf("autoside\n");
00062e  a033              ADR      r0,|L13.1788|
000630  f7fffffe          BL       __2printf
;;;768    					}
;;;769    
;;;770    					if((msg.param0 == 0x03) && (msg.param1 == 0xCA)) // handshake
000634  9802              LDR      r0,[sp,#8]
000636  2803              CMP      r0,#3
000638  d10d              BNE      |L13.1622|
                  |L13.1594|
00063a  9803              LDR      r0,[sp,#0xc]
00063c  28ca              CMP      r0,#0xca
00063e  d10a              BNE      |L13.1622|
;;;771    					{
;;;772    						if(Global_datas.subboard_online == 0)  // first in
000640  7c20              LDRB     r0,[r4,#0x10]  ; Global_datas
000642  2800              CMP      r0,#0
000644  d101              BNE      |L13.1610|
;;;773    						{
;;;774    						 	drv_SendAllstateToSubboard();
000646  f7fffffe          BL       drv_SendAllstateToSubboard
                  |L13.1610|
;;;775    						}
;;;776    						Global_datas.subboard_online = 1;
;;;777    						TimeOutSet(&SubBoardHandshakeTimer, 4000);
00064a  217d              MOVS     r1,#0x7d
00064c  7427              STRB     r7,[r4,#0x10]         ;776
00064e  0149              LSLS     r1,r1,#5
000650  482d              LDR      r0,|L13.1800|
000652  f7fffffe          BL       TimeOutSet
                  |L13.1622|
;;;778    						//drv_Cmd_Send2NCU031(msg.param0,msg.param1,msg.param2);//
;;;779    					}					
;;;780    					
;;;781    	            break;
;;;782    					
;;;783    	            default:
;;;784    	             break;
;;;785    	        }
;;;786        	}
;;;787    	
;;;788    		srv_key_handler();
000656  f7fffffe          BL       srv_key_handler
;;;789    		GetKeyEvent();
00065a  f7fffffe          BL       GetKeyEvent
;;;790    		IoKeyProcess();
00065e  f7fffffe          BL       IoKeyProcess
;;;791    
;;;792    
;;;793    		
;;;794    		if (((count>>16)&0xF) == refcount0)	
000662  9807              LDR      r0,[sp,#0x1c]
000664  0300              LSLS     r0,r0,#12
000666  0f00              LSRS     r0,r0,#28
000668  42b0              CMP      r0,r6
00066a  d107              BNE      |L13.1660|
;;;795    		{
;;;796    			
;;;797    			if(refcount0 <0xF)
00066c  2e0f              CMP      r6,#0xf
00066e  d202              BCS      |L13.1654|
000670  1c76              ADDS     r6,r6,#1
;;;798    				refcount0++;
000672  b2f6              UXTB     r6,r6
000674  e000              B        |L13.1656|
                  |L13.1654|
;;;799    			else
;;;800    				refcount0 = 0;
000676  2600              MOVS     r6,#0
                  |L13.1656|
;;;801    			srv_bat_charge_handler();	
000678  f7fffffe          BL       srv_bat_charge_handler
                  |L13.1660|
;;;802    		}
;;;803    
;;;804    		if (((count>>15)&0xF) == refcount1)
00067c  9807              LDR      r0,[sp,#0x1c]
00067e  0340              LSLS     r0,r0,#13
000680  0f00              LSRS     r0,r0,#28
000682  42a8              CMP      r0,r5
000684  d107              BNE      |L13.1686|
;;;805    		{	
;;;806    			
;;;807    			if(refcount1 <0xF)
000686  2d0f              CMP      r5,#0xf
000688  d202              BCS      |L13.1680|
00068a  1c6d              ADDS     r5,r5,#1
;;;808    				refcount1++;
00068c  b2ed              UXTB     r5,r5
00068e  e000              B        |L13.1682|
                  |L13.1680|
;;;809    			else
;;;810    				refcount1 = 0;
000690  2500              MOVS     r5,#0
                  |L13.1682|
;;;811    			
;;;812    			drv_power_status_updata();
000692  f7fffffe          BL       drv_power_status_updata
                  |L13.1686|
;;;813    		}
;;;814    		count++;
000696  9807              LDR      r0,[sp,#0x1c]
000698  1c40              ADDS     r0,r0,#1
00069a  9007              STR      r0,[sp,#0x1c]         ;343
00069c  e4bf              B        |L13.30|
;;;815    	}
;;;816    
;;;817    }
;;;818    
                          ENDP

00069e  0000              DCW      0x0000
                  |L13.1696|
0006a0  466f7572          DCB      "FourG_WIFI_CHANNEL\n",0
0006a4  475f5749
0006a8  46495f43
0006ac  48414e4e
0006b0  454c0a00
                  |L13.1716|
0006b4  42545f43          DCB      "BT_CHANNEL\n",0
0006b8  48414e4e
0006bc  454c0a00
                  |L13.1728|
0006c0  41555849          DCB      "AUXIN_CHANNEL\n",0
0006c4  4e5f4348
0006c8  414e4e45
0006cc  4c0a00  
0006cf  00                DCB      0
                  |L13.1744|
0006d0  464d5f43          DCB      "FM_CHANNEL\n",0
0006d4  48414e4e
0006d8  454c0a00
                  |L13.1756|
0006dc  666d2072          DCB      "fm reset\n",0
0006e0  65736574
0006e4  0a00    
0006e6  00                DCB      0
0006e7  00                DCB      0
                  |L13.1768|
0006e8  696e7369          DCB      "inside\n",0
0006ec  64650a00
                  |L13.1776|
0006f0  6f757473          DCB      "outside\n",0
0006f4  6964650a
0006f8  00      
0006f9  00                DCB      0
0006fa  00                DCB      0
0006fb  00                DCB      0
                  |L13.1788|
0006fc  6175746f          DCB      "autoside\n",0
000700  73696465
000704  0a00    
000706  00                DCB      0
000707  00                DCB      0
                  |L13.1800|
                          DCD      SubBoardHandshakeTimer

                          AREA ||.data||, DATA, ALIGN=0

                  sys_err
000000  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "..\\main.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_sys_err____REV16|
#line 388 "..\\lib\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___6_main_c_sys_err____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_sys_err____REVSH|
#line 402
|__asm___6_main_c_sys_err____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
