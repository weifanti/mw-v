; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\adc.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\adc.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\lib\CMSIS\Include -I..\lib\Device\Nuvoton\NUC029xGE\Include -I..\lib\StdDriver\inc -I..\src\core\include -I..\src\driver\include -I..\src\io\include -I..\src\global -I..\src\server\include -I..\src\driver\audio -D__UVISION_VERSION=522 --omf_browse=.\obj\adc.crf ..\lib\StdDriver\src\adc.c]
                          THUMB

                          AREA ||i.ADC_Close||, CODE, READONLY, ALIGN=1

                  ADC_Close PROC
;;;61       */
;;;62     void ADC_Close(ADC_T *adc)
000000  2005              MOVS     r0,#5
;;;63     {
;;;64         SYS->IPRST1 |= SYS_IPRST1_ADCRST_Msk;
000002  0700              LSLS     r0,r0,#28
000004  68c2              LDR      r2,[r0,#0xc]
000006  2101              MOVS     r1,#1
000008  0709              LSLS     r1,r1,#28
00000a  430a              ORRS     r2,r2,r1
00000c  60c2              STR      r2,[r0,#0xc]
;;;65         SYS->IPRST1 &= ~SYS_IPRST1_ADCRST_Msk;
00000e  68c2              LDR      r2,[r0,#0xc]
000010  438a              BICS     r2,r2,r1
000012  60c2              STR      r2,[r0,#0xc]
;;;66         return;
;;;67     
;;;68     }
000014  4770              BX       lr
;;;69     
                          ENDP


                          AREA ||i.ADC_DisableHWTrigger||, CODE, READONLY, ALIGN=2

                  ADC_DisableHWTrigger PROC
;;;113      */
;;;114    void ADC_DisableHWTrigger(ADC_T *adc)
000000  4803              LDR      r0,|L2.16|
;;;115    {
;;;116        ADC->ADCR &= ~(ADC_ADCR_TRGS_Msk | ADC_ADCR_TRGCOND_Msk | ADC_ADCR_TRGEN_Msk);
000002  6801              LDR      r1,[r0,#0]
000004  22ff              MOVS     r2,#0xff
000006  32f1              ADDS     r2,r2,#0xf1
000008  4391              BICS     r1,r1,r2
00000a  6001              STR      r1,[r0,#0]
;;;117        return;
;;;118    }
00000c  4770              BX       lr
;;;119    
                          ENDP

00000e  0000              DCW      0x0000
                  |L2.16|
                          DCD      0x400e0080

                          AREA ||i.ADC_DisableInt||, CODE, READONLY, ALIGN=2

                  ADC_DisableInt PROC
;;;153      */
;;;154    void ADC_DisableInt(ADC_T *adc, uint32_t u32Mask)
000000  07cb              LSLS     r3,r1,#31
;;;155    {
;;;156        if((u32Mask) & ADC_ADF_INT)
;;;157            ADC->ADCR &= ~ADC_ADCR_ADIE_Msk;
000002  4809              LDR      r0,|L3.40|
000004  2202              MOVS     r2,#2
000006  2b00              CMP      r3,#0                 ;156
000008  d002              BEQ      |L3.16|
00000a  6803              LDR      r3,[r0,#0]
00000c  4393              BICS     r3,r3,r2
00000e  6003              STR      r3,[r0,#0]
                  |L3.16|
;;;158        if((u32Mask) & ADC_CMP0_INT)
000010  078b              LSLS     r3,r1,#30
000012  d502              BPL      |L3.26|
;;;159            ADC->ADCMPR[0] &= ~ADC_ADCMPR_CMPIE_Msk;
000014  6883              LDR      r3,[r0,#8]
000016  4393              BICS     r3,r3,r2
000018  6083              STR      r3,[r0,#8]
                  |L3.26|
;;;160        if((u32Mask) & ADC_CMP1_INT)
00001a  0749              LSLS     r1,r1,#29
00001c  d502              BPL      |L3.36|
;;;161            ADC->ADCMPR[1] &= ~ADC_ADCMPR_CMPIE_Msk;
00001e  68c1              LDR      r1,[r0,#0xc]
000020  4391              BICS     r1,r1,r2
000022  60c1              STR      r1,[r0,#0xc]
                  |L3.36|
;;;162    
;;;163        return;
;;;164    }
000024  4770              BX       lr
;;;165    
                          ENDP

000026  0000              DCW      0x0000
                  |L3.40|
                          DCD      0x400e0080

                          AREA ||i.ADC_EnableHWTrigger||, CODE, READONLY, ALIGN=2

                  ADC_EnableHWTrigger PROC
;;;88       */
;;;89     void ADC_EnableHWTrigger(ADC_T *adc,
000000  b530              PUSH     {r4,r5,lr}
;;;90                              uint32_t u32Source,
;;;91                              uint32_t u32Param)
;;;92     {
;;;93         if(u32Source == ADC_ADCR_TRGS_STADC)
;;;94         {
;;;95             ADC->ADCR = (ADC->ADCR & ~(ADC_ADCR_TRGS_Msk | ADC_ADCR_TRGCOND_Msk | ADC_ADCR_TRGEN_Msk)) | (u32Source) | (u32Param) | ADC_ADCR_TRGEN_Msk;
000002  480c              LDR      r0,|L4.52|
000004  23ff              MOVS     r3,#0xff
000006  33f1              ADDS     r3,r3,#0xf1
000008  1584              ASRS     r4,r0,#22
00000a  2900              CMP      r1,#0                 ;93
00000c  d00c              BEQ      |L4.40|
;;;96         }
;;;97         else if(u32Source == ADC_ADCR_TRGS_TIMER)
00000e  2910              CMP      r1,#0x10
000010  d004              BEQ      |L4.28|
;;;98         {
;;;99             ADC->ADCR = (ADC->ADCR & ~(ADC_ADCR_TRGS_Msk | ADC_ADCR_TRGCOND_Msk | ADC_ADCR_TRGEN_Msk)) | (u32Source) | ADC_ADCR_TRGEN_Msk;
;;;100        }
;;;101        else
;;;102        {
;;;103            ADC->ADTDCR = (ADC->ADTDCR & ~ADC_ADTDCR_PTDT_Msk) | (u32Param);
000012  69c5              LDR      r5,[r0,#0x1c]
000014  0a2d              LSRS     r5,r5,#8
000016  022d              LSLS     r5,r5,#8
000018  4315              ORRS     r5,r5,r2
00001a  61c5              STR      r5,[r0,#0x1c]
                  |L4.28|
00001c  6802              LDR      r2,[r0,#0]            ;99
00001e  439a              BICS     r2,r2,r3              ;99
000020  430a              ORRS     r2,r2,r1              ;99
000022  4322              ORRS     r2,r2,r4              ;99
000024  6002              STR      r2,[r0,#0]            ;99
;;;104            ADC->ADCR = (ADC->ADCR & ~(ADC_ADCR_TRGS_Msk | ADC_ADCR_TRGCOND_Msk | ADC_ADCR_TRGEN_Msk)) | (u32Source) | ADC_ADCR_TRGEN_Msk;
;;;105        }
;;;106        return;
;;;107    }
000026  bd30              POP      {r4,r5,pc}
                  |L4.40|
000028  6801              LDR      r1,[r0,#0]            ;95
00002a  4399              BICS     r1,r1,r3              ;95
00002c  4311              ORRS     r1,r1,r2              ;95
00002e  4321              ORRS     r1,r1,r4              ;95
000030  6001              STR      r1,[r0,#0]            ;95
000032  bd30              POP      {r4,r5,pc}
;;;108    
                          ENDP

                  |L4.52|
                          DCD      0x400e0080

                          AREA ||i.ADC_EnableInt||, CODE, READONLY, ALIGN=2

                  ADC_EnableInt PROC
;;;130      */
;;;131    void ADC_EnableInt(ADC_T *adc, uint32_t u32Mask)
000000  07cb              LSLS     r3,r1,#31
;;;132    {
;;;133        if((u32Mask) & ADC_ADF_INT)
;;;134            ADC->ADCR |= ADC_ADCR_ADIE_Msk;
000002  4809              LDR      r0,|L5.40|
000004  2202              MOVS     r2,#2
000006  2b00              CMP      r3,#0                 ;133
000008  d002              BEQ      |L5.16|
00000a  6803              LDR      r3,[r0,#0]
00000c  4313              ORRS     r3,r3,r2
00000e  6003              STR      r3,[r0,#0]
                  |L5.16|
;;;135        if((u32Mask) & ADC_CMP0_INT)
000010  078b              LSLS     r3,r1,#30
000012  d502              BPL      |L5.26|
;;;136            ADC->ADCMPR[0] |= ADC_ADCMPR_CMPIE_Msk;
000014  6883              LDR      r3,[r0,#8]
000016  4313              ORRS     r3,r3,r2
000018  6083              STR      r3,[r0,#8]
                  |L5.26|
;;;137        if((u32Mask) & ADC_CMP1_INT)
00001a  0749              LSLS     r1,r1,#29
00001c  d502              BPL      |L5.36|
;;;138            ADC->ADCMPR[1] |= ADC_ADCMPR_CMPIE_Msk;
00001e  68c1              LDR      r1,[r0,#0xc]
000020  4311              ORRS     r1,r1,r2
000022  60c1              STR      r1,[r0,#0xc]
                  |L5.36|
;;;139    
;;;140        return;
;;;141    }
000024  4770              BX       lr
;;;142    
                          ENDP

000026  0000              DCW      0x0000
                  |L5.40|
                          DCD      0x400e0080

                          AREA ||i.ADC_Open||, CODE, READONLY, ALIGN=2

                  ADC_Open PROC
;;;41       */
;;;42     void ADC_Open(ADC_T *adc,
000000  b530              PUSH     {r4,r5,lr}
;;;43                   uint32_t u32InputMode,
;;;44                   uint32_t u32OpMode,
;;;45                   uint32_t u32ChMask)
;;;46     {
;;;47     
;;;48         ADC->ADCR = (ADC->ADCR & (~(ADC_ADCR_DIFFEN_Msk | ADC_ADCR_ADMD_Msk))) | \
000002  4805              LDR      r0,|L6.24|
000004  6804              LDR      r4,[r0,#0]
000006  4d05              LDR      r5,|L6.28|
000008  402c              ANDS     r4,r4,r5
00000a  430c              ORRS     r4,r4,r1
00000c  4314              ORRS     r4,r4,r2
00000e  6004              STR      r4,[r0,#0]
;;;49                     (u32InputMode) | \
;;;50                     (u32OpMode);
;;;51     
;;;52         ADC->ADCHER = (ADC->ADCHER & ~ADC_ADCHER_CHEN_Msk) | (u32ChMask);
000010  6841              LDR      r1,[r0,#4]
000012  6043              STR      r3,[r0,#4]
;;;53     
;;;54         return;
;;;55     }
000014  bd30              POP      {r4,r5,pc}
;;;56     
                          ENDP

000016  0000              DCW      0x0000
                  |L6.24|
                          DCD      0x400e0080
                  |L6.28|
                          DCD      0xfffffbf3

;*** Start embedded assembler ***

#line 1 "..\\lib\\StdDriver\\src\\adc.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___5_adc_c_ADC_Open____REV16|
#line 388 "..\\lib\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___5_adc_c_ADC_Open____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___5_adc_c_ADC_Open____REVSH|
#line 402
|__asm___5_adc_c_ADC_Open____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
