; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\drv_pga460.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\drv_pga460.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\lib\CMSIS\Include -I..\lib\Device\Nuvoton\NUC029xGE\Include -I..\lib\StdDriver\inc -I..\src\core\include -I..\src\driver\include -I..\src\io\include -I..\src\global -I..\src\server\include -D__UVISION_VERSION=522 --omf_browse=.\obj\drv_pga460.crf ..\src\driver\drv_pga460.c]
                          THUMB

                          AREA ||i.drv_Pga460_Default_Set||, CODE, READONLY, ALIGN=2

                  drv_Pga460_Default_Set PROC
;;;458    
;;;459    void drv_Pga460_Default_Set(void)
000000  b510              PUSH     {r4,lr}
;;;460    {
000002  b08c              SUB      sp,sp,#0x30
;;;461        uint16_t buff_len = CMD_DATA_LEN_EEBW + 3;
000004  242e              MOVS     r4,#0x2e
;;;462        uint8_t  crc_val  = 0;
;;;463    
;;;464        uint8_t tmp_buf[CMD_DATA_LEN_EEBW + 3] =
000006  2230              MOVS     r2,#0x30
000008  a109              ADR      r1,|L1.48|
00000a  4668              MOV      r0,sp
00000c  f7fffffe          BL       __aeabi_memcpy4
;;;465        {
;;;466            SYNC_BYTE,
;;;467            EEBW,
;;;468            USER_DATA1,
;;;469            USER_DATA2,
;;;470            USER_DATA3,
;;;471            USER_DATA4,
;;;472            USER_DATA5,
;;;473            USER_DATA6,
;;;474            USER_DATA7,
;;;475            USER_DATA8,
;;;476            USER_DATA9,
;;;477            USER_DATA10,
;;;478            USER_DATA11,
;;;479            USER_DATA12,
;;;480            USER_DATA13,
;;;481            USER_DATA14,
;;;482            USER_DATA15,
;;;483            USER_DATA16,
;;;484            USER_DATA17,
;;;485            USER_DATA18,
;;;486            USER_DATA19,
;;;487            USER_DATA20,
;;;488            TVGAIN0,
;;;489            TVGAIN1,
;;;490            TVGAIN2,
;;;491            TVGAIN3,
;;;492            TVGAIN4,
;;;493            TVGAIN5,
;;;494            TVGAIN6,
;;;495            INIT_GAIN,
;;;496            FREQUENCY,     //40kHz
;;;497            DEADTIME,
;;;498            PULSE_P1,
;;;499            PULSE_P2,
;;;500            CURR_LIM_P1,
;;;501            CURR_LIM_P2,
;;;502            REC_LENGTH,
;;;503            FREQ_DIAG,
;;;504            SAT_FDIAG_TH,
;;;505            FVOLT_DEC,
;;;506            DECPL_TEMP,
;;;507            DSP_SCALE,
;;;508            TEMP_TRIM,
;;;509            P1_GAIN_CTRL,
;;;510            P2_GAIN_CTRL,
;;;511            0
;;;512        };
;;;513    
;;;514        /* cal crc */
;;;515        crc_val = pga460_calcChecksum(EEBW);
000010  200c              MOVS     r0,#0xc
000012  f7fffffe          BL       pga460_calcChecksum
;;;516        tmp_buf[buff_len - 1] = crc_val;
000016  a908              ADD      r1,sp,#0x20
000018  7348              STRB     r0,[r1,#0xd]
;;;517    
;;;518        Hal_Uart2_Write(tmp_buf, buff_len);
00001a  4621              MOV      r1,r4
00001c  4668              MOV      r0,sp
00001e  f7fffffe          BL       Hal_Uart2_Write
;;;519       TIMER_Delay(TIMER0, DELAY_50MS);
000022  490f              LDR      r1,|L1.96|
000024  480f              LDR      r0,|L1.100|
000026  f7fffffe          BL       TIMER_Delay
;;;520    }
00002a  b00c              ADD      sp,sp,#0x30
00002c  bd10              POP      {r4,pc}
;;;521    
                          ENDP

00002e  0000              DCW      0x0000
                  |L1.48|
000030  550c00            DCB      "U\f",0
000033  00                DCB      0
000034  00                DCB      0
000035  00                DCB      0
000036  00                DCB      0
000037  00                DCB      0
000038  00                DCB      0
000039  00                DCB      0
00003a  00                DCB      0
00003b  00                DCB      0
00003c  00                DCB      0
00003d  00                DCB      0
00003e  00                DCB      0
00003f  00                DCB      0
000040  00                DCB      0
000041  00                DCB      0
000042  00                DCB      0
000043  00                DCB      0
000044  00                DCB      0
000045  00                DCB      0
000046  4444cd08          DCB      "DD",205,"\bd",191,252,"@2",0
00004a  64bffc40
00004e  3200    
000050  07107f10          DCB      "\a",16,127,16,23,"3",238,"|O",0
000054  1733ee7c
000058  4f00    
00005a  00                DCB      0
00005b  00                DCB      0
00005c  00                DCB      0
00005d  00                DCB      0
00005e  00                DCB      0
00005f  00                DCB      0
                  |L1.96|
                          DCD      0x0000c350
                  |L1.100|
                          DCD      0x40010000

                          AREA ||i.drv_Pga460_Dump_Init||, CODE, READONLY, ALIGN=2

                  drv_Pga460_Dump_Init PROC
;;;566    
;;;567    void drv_Pga460_Dump_Init(void)
000000  b51c              PUSH     {r2-r4,lr}
;;;568    {
;;;569        uint16_t buff_len = CMD_DATA_LEN_SRW + 3;
;;;570        uint8_t  crc_val  = 0;
;;;571    
;;;572        uint8_t tmp_buf[CMD_DATA_LEN_SRW + 3] =
000002  a009              ADR      r0,|L2.40|
000004  c803              LDM      r0,{r0,r1}
;;;573        {
;;;574            SYNC_BYTE,
;;;575            THRBW,
;;;576            ADDR_EE_CNTRL,
;;;577            EE_CNTRL,
;;;578            0
;;;579        };
;;;580    
;;;581        /* cal crc */
;;;582        crc_val = pga460_calcChecksum(THRBW);
000006  9000              STR      r0,[sp,#0]
000008  2405              MOVS     r4,#5                 ;569
00000a  9101              STR      r1,[sp,#4]
00000c  2010              MOVS     r0,#0x10
00000e  f7fffffe          BL       pga460_calcChecksum
;;;583        tmp_buf[buff_len - 1] = crc_val;
000012  4669              MOV      r1,sp
000014  7108              STRB     r0,[r1,#4]
;;;584    
;;;585        Hal_Uart2_Write(tmp_buf, buff_len);
000016  4621              MOV      r1,r4
000018  4668              MOV      r0,sp
00001a  f7fffffe          BL       Hal_Uart2_Write
;;;586       TIMER_Delay(TIMER0, DELAY_50MS);
00001e  4904              LDR      r1,|L2.48|
000020  4804              LDR      r0,|L2.52|
000022  f7fffffe          BL       TIMER_Delay
;;;587    }
000026  bd1c              POP      {r2-r4,pc}
;;;588    
                          ENDP

                  |L2.40|
000028  55104080          DCB      "U",16,"@",128,0
00002c  00      
00002d  00                DCB      0
00002e  00                DCB      0
00002f  00                DCB      0
                  |L2.48|
                          DCD      0x0000c350
                  |L2.52|
                          DCD      0x40010000

                          AREA ||i.drv_Pga460_Dump_end||, CODE, READONLY, ALIGN=2

                  drv_Pga460_Dump_end PROC
;;;611    
;;;612    void drv_Pga460_Dump_end(void)
000000  b51c              PUSH     {r2-r4,lr}
;;;613    {
;;;614        uint16_t buff_len = CMD_DATA_LEN_SRW + 3;
;;;615        uint8_t  crc_val  = 0;
;;;616    
;;;617        uint8_t tmp_buf[CMD_DATA_LEN_SRW + 3] =
000002  a008              ADR      r0,|L3.36|
000004  c805              LDM      r0,{r0,r2}
;;;618        {
;;;619            SYNC_BYTE,
;;;620            SRW,
;;;621            ADDR_EE_CNTRL,
;;;622            0x00,
;;;623            0
;;;624        };
;;;625    
;;;626        /* cal crc */
;;;627        crc_val = 0xff - SRW - ADDR_EE_CNTRL - 0x00;
000006  9201              STR      r2,[sp,#4]
000008  9000              STR      r0,[sp,#0]
00000a  20b5              MOVS     r0,#0xb5
;;;628        tmp_buf[buff_len - 1] = crc_val;
00000c  466a              MOV      r2,sp
00000e  7110              STRB     r0,[r2,#4]
000010  2105              MOVS     r1,#5                 ;614
;;;629    
;;;630        Hal_Uart2_Write(tmp_buf, buff_len);
000012  4668              MOV      r0,sp
000014  f7fffffe          BL       Hal_Uart2_Write
;;;631       TIMER_Delay(TIMER0, DELAY_50MS);
000018  4904              LDR      r1,|L3.44|
00001a  4805              LDR      r0,|L3.48|
00001c  f7fffffe          BL       TIMER_Delay
;;;632    }
000020  bd1c              POP      {r2-r4,pc}
;;;633    
                          ENDP

000022  0000              DCW      0x0000
                  |L3.36|
000024  550a4000          DCB      "U\n@",0
000028  00                DCB      0
000029  00                DCB      0
00002a  00                DCB      0
00002b  00                DCB      0
                  |L3.44|
                          DCD      0x0000c350
                  |L3.48|
                          DCD      0x40010000

                          AREA ||i.drv_Pga460_Dump_start||, CODE, READONLY, ALIGN=2

                  drv_Pga460_Dump_start PROC
;;;588    
;;;589    void drv_Pga460_Dump_start(void)
000000  b51c              PUSH     {r2-r4,lr}
;;;590    {
;;;591        uint16_t buff_len = CMD_DATA_LEN_SRW + 3;
;;;592        uint8_t  crc_val  = 0;
;;;593    
;;;594        uint8_t tmp_buf[CMD_DATA_LEN_SRW + 3] =
000002  a008              ADR      r0,|L4.36|
000004  c805              LDM      r0,{r0,r2}
;;;595        {
;;;596            SYNC_BYTE,
;;;597            SRW,
;;;598            ADDR_EE_CNTRL,
;;;599            EE_CNTRL,
;;;600            0
;;;601        };
;;;602    
;;;603        /* cal crc */
;;;604        crc_val = 0xff - SRW - ADDR_EE_CNTRL - EE_CNTRL;
000006  9201              STR      r2,[sp,#4]
000008  9000              STR      r0,[sp,#0]
00000a  2035              MOVS     r0,#0x35
;;;605        tmp_buf[buff_len - 1] = crc_val;
00000c  466a              MOV      r2,sp
00000e  7110              STRB     r0,[r2,#4]
000010  2105              MOVS     r1,#5                 ;591
;;;606    
;;;607        Hal_Uart2_Write(tmp_buf, buff_len);
000012  4668              MOV      r0,sp
000014  f7fffffe          BL       Hal_Uart2_Write
;;;608       TIMER_Delay(TIMER0, DELAY_50MS);
000018  4904              LDR      r1,|L4.44|
00001a  4805              LDR      r0,|L4.48|
00001c  f7fffffe          BL       TIMER_Delay
;;;609    }
000020  bd1c              POP      {r2-r4,pc}
;;;610    
                          ENDP

000022  0000              DCW      0x0000
                  |L4.36|
000024  550a4080          DCB      "U\n@",128,0
000028  00      
000029  00                DCB      0
00002a  00                DCB      0
00002b  00                DCB      0
                  |L4.44|
                          DCD      0x0000c350
                  |L4.48|
                          DCD      0x40010000

                          AREA ||i.drv_Pga460_Init||, CODE, READONLY, ALIGN=1

                  drv_Pga460_Init PROC
;;;396     */
;;;397    void drv_Pga460_Init(void)
000000  b510              PUSH     {r4,lr}
;;;398    {
;;;399        drv_Pga460_Thresholds_Init();
000002  f7fffffe          BL       drv_Pga460_Thresholds_Init
;;;400        drv_Pga460_Default_Set();
000006  f7fffffe          BL       drv_Pga460_Default_Set
;;;401        drv_Pga460_Tvg_Init();
00000a  f7fffffe          BL       drv_Pga460_Tvg_Init
;;;402        drv_Pga460_Dump_Init();
00000e  f7fffffe          BL       drv_Pga460_Dump_Init
;;;403    
;;;404        drv_Pga460_Obj_P2_Det();
000012  f7fffffe          BL       drv_Pga460_Obj_P2_Det
;;;405    }
000016  bd10              POP      {r4,pc}
;;;406    
                          ENDP


                          AREA ||i.drv_Pga460_Obj_P1_Det||, CODE, READONLY, ALIGN=2

                  drv_Pga460_Obj_P1_Det PROC
;;;680     */
;;;681    void drv_Pga460_Obj_P1_Det(void)
000000  b57c              PUSH     {r2-r6,lr}
;;;682    {
;;;683        uint16_t buff_len = CMD_DATA_LEN_BC_P1BL + 3;
;;;684        uint8_t  crc_val  = 0;
;;;685        uint8_t tmp_buf_0[CMD_DATA_LEN_BC_P1BL + 3] =
000002  a014              ADR      r0,|L6.84|
000004  6800              LDR      r0,[r0,#0]
;;;686        {
;;;687            SYNC_BYTE,
;;;688            P1BL,
;;;689            OBJ_NUM,
;;;690            0
;;;691        };
;;;692    
;;;693        uint8_t tmp_buf_1[CMD_DATA_LEN_TEDD + 3] =
000006  9000              STR      r0,[sp,#0]
000008  a013              ADR      r0,|L6.88|
00000a  6800              LDR      r0,[r0,#0]
;;;694        {
;;;695            SYNC_BYTE,
;;;696            TEDD,
;;;697            0
;;;698        };
;;;699    
;;;700        /* cal crc */
;;;701        crc_val = pga460_calcChecksum(P1BL);
00000c  9001              STR      r0,[sp,#4]
00000e  2404              MOVS     r4,#4                 ;683
000010  2000              MOVS     r0,#0
000012  f7fffffe          BL       pga460_calcChecksum
;;;702    	
;;;703        tmp_buf_0[buff_len - 1] = crc_val;
000016  4669              MOV      r1,sp
000018  70c8              STRB     r0,[r1,#3]
;;;704        Hal_Uart2_Write(tmp_buf_0, buff_len);
00001a  4621              MOV      r1,r4
00001c  4668              MOV      r0,sp
00001e  f7fffffe          BL       Hal_Uart2_Write
;;;705    	TIMER_Delay(TIMER0, DELAY_50MS);
000022  4d0f              LDR      r5,|L6.96|
000024  490d              LDR      r1,|L6.92|
000026  4628              MOV      r0,r5
000028  f7fffffe          BL       TIMER_Delay
;;;706    
;;;707        /* read back */
;;;708        buff_len = CMD_DATA_LEN_TEDD + 3;
00002c  2403              MOVS     r4,#3
;;;709        crc_val  = pga460_calcChecksum(TEDD);
00002e  2007              MOVS     r0,#7
000030  f7fffffe          BL       pga460_calcChecksum
;;;710    	
;;;711        tmp_buf_1[buff_len - 1] = crc_val;
000034  4669              MOV      r1,sp
000036  7188              STRB     r0,[r1,#6]
;;;712        Hal_Uart2_Write(tmp_buf_1, buff_len);
000038  4621              MOV      r1,r4
00003a  a801              ADD      r0,sp,#4
00003c  f7fffffe          BL       Hal_Uart2_Write
;;;713    
;;;714        /* read back data */
;;;715    	TIMER_Delay(TIMER0, DELAY_25MS);
000040  4908              LDR      r1,|L6.100|
000042  4628              MOV      r0,r5
000044  f7fffffe          BL       TIMER_Delay
;;;716    	buff_len = RESP_DATA_LEN_TEDD + 2;
000048  2182              MOVS     r1,#0x82
;;;717        Hal_Uart2_Read(pga460_data_buf, buff_len);
00004a  4807              LDR      r0,|L6.104|
00004c  f7fffffe          BL       Hal_Uart2_Read
;;;718    	
;;;719    
;;;720    }
000050  bd7c              POP      {r2-r6,pc}
;;;721    
                          ENDP

000052  0000              DCW      0x0000
                  |L6.84|
000054  5500              DCB      "U",0
000056  0100              DCB      1,0
                  |L6.88|
000058  550700            DCB      "U\a",0
00005b  00                DCB      0
                  |L6.92|
                          DCD      0x0000c350
                  |L6.96|
                          DCD      0x40010000
                  |L6.100|
                          DCD      0x000061a8
                  |L6.104|
                          DCD      ||.bss||

                          AREA ||i.drv_Pga460_Obj_P2_Det||, CODE, READONLY, ALIGN=2

                  drv_Pga460_Obj_P2_Det PROC
;;;727     */
;;;728    void drv_Pga460_Obj_P2_Det(void)
000000  b57c              PUSH     {r2-r6,lr}
;;;729    {
;;;730        uint16_t buff_len = CMD_DATA_LEN_BC_P2BL + 3;
;;;731        uint8_t  crc_val  = 0;
;;;732    //	int i;
;;;733        uint8_t tmp_buf_0[CMD_DATA_LEN_BC_P2BL + 3] =
000002  a016              ADR      r0,|L7.92|
000004  6800              LDR      r0,[r0,#0]
;;;734        {
;;;735            SYNC_BYTE,
;;;736            P2BL,
;;;737            OBJ_NUM,
;;;738            0
;;;739        };
;;;740    
;;;741        uint8_t tmp_buf_1[CMD_DATA_LEN_TEDD + 3] =
000006  9000              STR      r0,[sp,#0]
000008  a015              ADR      r0,|L7.96|
00000a  6800              LDR      r0,[r0,#0]
;;;742        {
;;;743            SYNC_BYTE,
;;;744            TEDD,
;;;745            0
;;;746        };
;;;747    
;;;748        /* cal crc */
;;;749        crc_val = pga460_calcChecksum(P2BL);
00000c  9001              STR      r0,[sp,#4]
00000e  2404              MOVS     r4,#4                 ;730
000010  2001              MOVS     r0,#1
000012  f7fffffe          BL       pga460_calcChecksum
;;;750    	
;;;751        tmp_buf_0[buff_len - 1] = crc_val;
000016  4669              MOV      r1,sp
000018  70c8              STRB     r0,[r1,#3]
;;;752    		Hal_Uart2_Write(tmp_buf_0, buff_len);
00001a  4621              MOV      r1,r4
00001c  4668              MOV      r0,sp
00001e  f7fffffe          BL       Hal_Uart2_Write
;;;753    	TIMER_Delay(TIMER0, DELAY_50MS);
000022  4d10              LDR      r5,|L7.100|
000024  4e10              LDR      r6,|L7.104|
000026  4629              MOV      r1,r5
000028  4630              MOV      r0,r6
00002a  f7fffffe          BL       TIMER_Delay
;;;754    
;;;755        /* read back */
;;;756        buff_len = CMD_DATA_LEN_TEDD + 3;
00002e  2403              MOVS     r4,#3
;;;757        crc_val  = pga460_calcChecksum(TEDD);
000030  2007              MOVS     r0,#7
000032  f7fffffe          BL       pga460_calcChecksum
;;;758    	
;;;759        tmp_buf_1[buff_len - 1] = crc_val;
000036  4669              MOV      r1,sp
000038  7188              STRB     r0,[r1,#6]
;;;760        Hal_Uart2_Write(tmp_buf_1, buff_len);
00003a  4621              MOV      r1,r4
00003c  a801              ADD      r0,sp,#4
00003e  f7fffffe          BL       Hal_Uart2_Write
;;;761    	
;;;762    	TIMER_Delay(TIMER0, DELAY_25MS);
000042  1069              ASRS     r1,r5,#1
000044  4630              MOV      r0,r6
000046  f7fffffe          BL       TIMER_Delay
;;;763    
;;;764        /* read back data */
;;;765    	buff_len = RESP_DATA_LEN_TEDD + 2;
00004a  2182              MOVS     r1,#0x82
;;;766        Hal_Uart2_Read(pga460_data_buf, buff_len);
00004c  4807              LDR      r0,|L7.108|
00004e  f7fffffe          BL       Hal_Uart2_Read
;;;767    
;;;768    	TIMER_Delay(TIMER0, DELAY_50MS);
000052  4629              MOV      r1,r5
000054  4630              MOV      r0,r6
000056  f7fffffe          BL       TIMER_Delay
;;;769    	
;;;770    #if 0	
;;;771    	for(i=0;i<130;i++)
;;;772    	{
;;;773    		printf("pga460_data_buf[i] = %x\n",pga460_data_buf[i]);
;;;774    	}
;;;775    #endif
;;;776    }
00005a  bd7c              POP      {r2-r6,pc}
;;;777    
                          ENDP

                  |L7.92|
00005c  55010100          DCB      "U",1,1,0
                  |L7.96|
000060  550700            DCB      "U\a",0
000063  00                DCB      0
                  |L7.100|
                          DCD      0x0000c350
                  |L7.104|
                          DCD      0x40010000
                  |L7.108|
                          DCD      ||.bss||

                          AREA ||i.drv_Pga460_P1_dump_data||, CODE, READONLY, ALIGN=2

                  drv_Pga460_P1_dump_data PROC
;;;777    
;;;778    void drv_Pga460_P1_dump_data(void)
000000  b570              PUSH     {r4-r6,lr}
;;;779    {
;;;780    	drv_Pga460_Dump_start();
000002  f7fffffe          BL       drv_Pga460_Dump_start
;;;781    	TIMER_Delay(TIMER0, DELAY_50MS);
000006  4c07              LDR      r4,|L8.36|
000008  4d07              LDR      r5,|L8.40|
00000a  4621              MOV      r1,r4
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       TIMER_Delay
;;;782    	drv_Pga460_Obj_P1_Det();
000012  f7fffffe          BL       drv_Pga460_Obj_P1_Det
;;;783    	
;;;784    	TIMER_Delay(TIMER0, DELAY_50MS);
000016  4621              MOV      r1,r4
000018  4628              MOV      r0,r5
00001a  f7fffffe          BL       TIMER_Delay
;;;785    	drv_Pga460_Dump_end();
00001e  f7fffffe          BL       drv_Pga460_Dump_end
;;;786    }
000022  bd70              POP      {r4-r6,pc}
;;;787    
                          ENDP

                  |L8.36|
                          DCD      0x0000c350
                  |L8.40|
                          DCD      0x40010000

                          AREA ||i.drv_Pga460_P2_dump_data||, CODE, READONLY, ALIGN=2

                  drv_Pga460_P2_dump_data PROC
;;;787    
;;;788    void drv_Pga460_P2_dump_data(void)
000000  b570              PUSH     {r4-r6,lr}
;;;789    {
;;;790    	drv_Pga460_Dump_start();
000002  f7fffffe          BL       drv_Pga460_Dump_start
;;;791    	TIMER_Delay(TIMER0, DELAY_50MS);
000006  4c07              LDR      r4,|L9.36|
000008  4d07              LDR      r5,|L9.40|
00000a  4621              MOV      r1,r4
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       TIMER_Delay
;;;792    	drv_Pga460_Obj_P2_Det();
000012  f7fffffe          BL       drv_Pga460_Obj_P2_Det
;;;793    	
;;;794    	TIMER_Delay(TIMER0, DELAY_50MS);
000016  4621              MOV      r1,r4
000018  4628              MOV      r0,r5
00001a  f7fffffe          BL       TIMER_Delay
;;;795    	drv_Pga460_Dump_end();
00001e  f7fffffe          BL       drv_Pga460_Dump_end
;;;796    }
000022  bd70              POP      {r4-r6,pc}
;;;797    
                          ENDP

                  |L9.36|
                          DCD      0x0000c350
                  |L9.40|
                          DCD      0x40010000

                          AREA ||i.drv_Pga460_Thresholds_Init||, CODE, READONLY, ALIGN=2

                  drv_Pga460_Thresholds_Init PROC
;;;406    
;;;407    void drv_Pga460_Thresholds_Init(void)
000000  b510              PUSH     {r4,lr}
;;;408    {
000002  b08a              SUB      sp,sp,#0x28
;;;409        uint16_t buff_len = CMD_DATA_LEN_THRBW + 3;
000004  2423              MOVS     r4,#0x23
;;;410        uint8_t  crc_val  = 0;
;;;411    
;;;412        uint8_t tmp_buf[CMD_DATA_LEN_THRBW + 3] =
000006  2224              MOVS     r2,#0x24
000008  a109              ADR      r1,|L10.48|
00000a  4668              MOV      r0,sp
00000c  f7fffffe          BL       __aeabi_memcpy4
;;;413        {
;;;414            SYNC_BYTE,
;;;415            THRBW,
;;;416            P1_THR_0,
;;;417            P1_THR_1,
;;;418            P1_THR_2,
;;;419            P1_THR_3,
;;;420            P1_THR_4,
;;;421            P1_THR_5,
;;;422            P1_THR_6,
;;;423            P1_THR_7,
;;;424            P1_THR_8,
;;;425            P1_THR_9,
;;;426            P1_THR_10,
;;;427            P1_THR_11,
;;;428            P1_THR_12,
;;;429            P1_THR_13,
;;;430            P1_THR_14,
;;;431            P1_THR_15,
;;;432            P2_THR_0,
;;;433            P2_THR_1,
;;;434            P2_THR_2,
;;;435            P2_THR_3,
;;;436            P2_THR_4,
;;;437            P2_THR_5,
;;;438            P2_THR_6,
;;;439            P2_THR_7,
;;;440            P2_THR_8,
;;;441            P2_THR_9,
;;;442            P2_THR_10,
;;;443            P2_THR_11,
;;;444            P2_THR_12,
;;;445            P2_THR_13,
;;;446            P2_THR_14,
;;;447            P2_THR_15,
;;;448            0
;;;449        };
;;;450    
;;;451        /* cal crc */
;;;452        crc_val = pga460_calcChecksum(THRBW);
000010  2010              MOVS     r0,#0x10
000012  f7fffffe          BL       pga460_calcChecksum
;;;453        tmp_buf[buff_len - 1] = crc_val;
000016  a908              ADD      r1,sp,#0x20
000018  7088              STRB     r0,[r1,#2]
;;;454    
;;;455        Hal_Uart2_Write(tmp_buf, buff_len);
00001a  4621              MOV      r1,r4
00001c  4668              MOV      r0,sp
00001e  f7fffffe          BL       Hal_Uart2_Write
;;;456       TIMER_Delay(TIMER0, DELAY_50MS);
000022  490c              LDR      r1,|L10.84|
000024  480c              LDR      r0,|L10.88|
000026  f7fffffe          BL       TIMER_Delay
;;;457    }
00002a  b00a              ADD      sp,sp,#0x28
00002c  bd10              POP      {r4,pc}
;;;458    
                          ENDP

00002e  0000              DCW      0x0000
                  |L10.48|
000030  551088a9          DCB      "U",16,136,169,160,136,136,136,255,206,"s",255,255,255,255
000034  a0888888
000038  ffce73ff
00003c  ffffff  
00003f  ffff07b0          DCB      255,255,"\a",176,136,136,136,136,136,251,222,247,189,239
000043  88888888
000047  88fbdef7
00004b  bdef    
00004d  7f7f7f7f          DCB      127,127,127,127,"\a",0
000051  0700    
000053  00                DCB      0
                  |L10.84|
                          DCD      0x0000c350
                  |L10.88|
                          DCD      0x40010000

                          AREA ||i.drv_Pga460_Tvg_Init||, CODE, READONLY, ALIGN=2

                  drv_Pga460_Tvg_Init PROC
;;;521    
;;;522    void drv_Pga460_Tvg_Init(void)
000000  b510              PUSH     {r4,lr}
;;;523    {
;;;524        uint16_t buff_len = CMD_DATA_LEN_SRW + 3;
;;;525        uint8_t  crc_val  = 0;
;;;526    
;;;527        uint8_t tmp_buf_0[CMD_DATA_LEN_SRW + 3] =
000002  a011              ADR      r0,|L11.72|
000004  b086              SUB      sp,sp,#0x18           ;523
000006  c803              LDM      r0,{r0,r1}
;;;528        {
;;;529            SYNC_BYTE,
;;;530            SRW,
;;;531            ADDR_DECPL_TEMP,
;;;532            DECPL_TEMP,
;;;533            0
;;;534        };
;;;535    
;;;536        uint8_t tmp_buf_1[CMD_DATA_LEN_TVGBW + 3] =
000008  9003              STR      r0,[sp,#0xc]
00000a  9104              STR      r1,[sp,#0x10]
00000c  a010              ADR      r0,|L11.80|
00000e  c807              LDM      r0,{r0-r2}
000010  466b              MOV      r3,sp
000012  c307              STM      r3!,{r0-r2}
000014  2405              MOVS     r4,#5                 ;524
;;;537        {
;;;538            SYNC_BYTE,
;;;539            TVGBW,
;;;540            TVGAIN0,
;;;541            TVGAIN1,
;;;542            TVGAIN2,
;;;543            TVGAIN3,
;;;544            TVGAIN4,
;;;545            TVGAIN5,
;;;546            TVGAIN6,
;;;547            0
;;;548        };
;;;549    
;;;550        /* cal crc */
;;;551        crc_val = pga460_calcChecksum(SRW);
000016  200a              MOVS     r0,#0xa
000018  f7fffffe          BL       pga460_calcChecksum
;;;552        tmp_buf_0[buff_len - 1] = crc_val;
00001c  4669              MOV      r1,sp
00001e  7408              STRB     r0,[r1,#0x10]
;;;553    
;;;554        Hal_Uart2_Write(tmp_buf_0, buff_len);
000020  4621              MOV      r1,r4
000022  a803              ADD      r0,sp,#0xc
000024  f7fffffe          BL       Hal_Uart2_Write
;;;555    
;;;556        buff_len = CMD_DATA_LEN_TVGBW + 3;
000028  240a              MOVS     r4,#0xa
;;;557        crc_val  = 0;
;;;558    
;;;559        /* cal crc */
;;;560        crc_val = pga460_calcChecksum(TVGBW);
00002a  200e              MOVS     r0,#0xe
00002c  f7fffffe          BL       pga460_calcChecksum
;;;561        tmp_buf_1[buff_len - 1] = crc_val;
000030  4669              MOV      r1,sp
000032  7248              STRB     r0,[r1,#9]
;;;562    
;;;563        Hal_Uart2_Write(tmp_buf_1, buff_len);
000034  4621              MOV      r1,r4
000036  4668              MOV      r0,sp
000038  f7fffffe          BL       Hal_Uart2_Write
;;;564       TIMER_Delay(TIMER0, DELAY_50MS);
00003c  4907              LDR      r1,|L11.92|
00003e  4808              LDR      r0,|L11.96|
000040  f7fffffe          BL       TIMER_Delay
;;;565    }
000044  b006              ADD      sp,sp,#0x18
000046  bd10              POP      {r4,pc}
;;;566    
                          ENDP

                  |L11.72|
000048  550a264f          DCB      "U\n&O",0
00004c  00      
00004d  00                DCB      0
00004e  00                DCB      0
00004f  00                DCB      0
                  |L11.80|
000050  550e4444          DCB      "U",14,"DD",205,"\bd",191,252,0
000054  cd0864bf
000058  fc00    
00005a  00                DCB      0
00005b  00                DCB      0
                  |L11.92|
                          DCD      0x0000c350
                  |L11.96|
                          DCD      0x40010000

                          AREA ||i.drv_Pga460_read_data||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_x
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_longlong_hex
                  drv_Pga460_read_data PROC
;;;797    
;;;798    void drv_Pga460_read_data(void)
000000  b5f8              PUSH     {r3-r7,lr}
;;;799    {
;;;800        uint8_t  crc_val  = 0;
;;;801    	int i;
;;;802    	uint16_t buff_len;
;;;803        uint8_t tmp_buf_0[CMD_DATA_LEN_BC_P2BL + 3] =
000002  4810              LDR      r0,|L12.68|
000004  6800              LDR      r0,[r0,#0]  ; <Data2>
;;;804        {
;;;805            SYNC_BYTE,
;;;806            EEBR,
;;;807            0
;;;808        };
;;;809    	
;;;810        crc_val = pga460_calcChecksum(EEBR);
000006  9000              STR      r0,[sp,#0]
000008  200b              MOVS     r0,#0xb
00000a  f7fffffe          BL       pga460_calcChecksum
;;;811    	tmp_buf_0[2]=	crc_val;
00000e  4669              MOV      r1,sp
000010  7088              STRB     r0,[r1,#2]
;;;812    	Hal_Uart2_Write(tmp_buf_0, 3);
000012  2103              MOVS     r1,#3
000014  4668              MOV      r0,sp
000016  f7fffffe          BL       Hal_Uart2_Write
;;;813    	TIMER_Delay(TIMER0, DELAY_25MS);
00001a  490b              LDR      r1,|L12.72|
00001c  480b              LDR      r0,|L12.76|
00001e  f7fffffe          BL       TIMER_Delay
;;;814    	
;;;815    	buff_len = 50;
000022  2532              MOVS     r5,#0x32
;;;816        Hal_Uart2_Read(pga460_data_buf, buff_len);
000024  4629              MOV      r1,r5
000026  480a              LDR      r0,|L12.80|
000028  f7fffffe          BL       Hal_Uart2_Read
00002c  4e08              LDR      r6,|L12.80|
;;;817    	
;;;818    	for(i = 0; i <= buff_len; i++)
00002e  2400              MOVS     r4,#0
                  |L12.48|
;;;819    	{
;;;820    		printf("buff_num2 %d, buff_data2 %x \n",i,pga460_data_buf[i]);
000030  5d32              LDRB     r2,[r6,r4]
000032  4621              MOV      r1,r4
000034  a007              ADR      r0,|L12.84|
000036  f7fffffe          BL       __2printf
00003a  1c64              ADDS     r4,r4,#1
00003c  42ac              CMP      r4,r5                 ;818
00003e  ddf7              BLE      |L12.48|
;;;821    	}
;;;822    }
000040  bdf8              POP      {r3-r7,pc}
;;;823    
                          ENDP

000042  0000              DCW      0x0000
                  |L12.68|
                          DCD      ||.constdata||
                  |L12.72|
                          DCD      0x000061a8
                  |L12.76|
                          DCD      0x40010000
                  |L12.80|
                          DCD      ||.bss||
                  |L12.84|
000054  62756666          DCB      "buff_num2 %d, buff_data2 %x \n",0
000058  5f6e756d
00005c  32202564
000060  2c206275
000064  66665f64
000068  61746132
00006c  20257820
000070  0a00    
000072  00                DCB      0
000073  00                DCB      0

                          AREA ||i.drv_pga460_in_room||, CODE, READONLY, ALIGN=2

                  drv_pga460_in_room PROC
;;;827    uint8_t detect_onoff = 0;
;;;828    void drv_pga460_in_room(void)
000000  b510              PUSH     {r4,lr}
;;;829    {
;;;830    	back_status = 1;
000002  4907              LDR      r1,|L13.32|
000004  2001              MOVS     r0,#1
000006  7048              STRB     r0,[r1,#1]
;;;831    	Cmd_Send2FourG(0x03, 0x03, 0x00);
000008  2103              MOVS     r1,#3
00000a  2200              MOVS     r2,#0
00000c  4608              MOV      r0,r1
00000e  f7fffffe          BL       Cmd_Send2FourG
;;;832    	Cmd_Send2FourG(0x03, 0x03, 0x00);
000012  2103              MOVS     r1,#3
000014  2200              MOVS     r2,#0
000016  4608              MOV      r0,r1
000018  f7fffffe          BL       Cmd_Send2FourG
;;;833    	//drv_Dap_Load_in_Param();
;;;834    }
00001c  bd10              POP      {r4,pc}
;;;835    
                          ENDP

00001e  0000              DCW      0x0000
                  |L13.32|
                          DCD      ||.data||

                          AREA ||i.drv_pga460_out_room||, CODE, READONLY, ALIGN=2

                  drv_pga460_out_room PROC
;;;835    
;;;836    void drv_pga460_out_room(void)
000000  b510              PUSH     {r4,lr}
;;;837    {
;;;838    	back_status = 0;
000002  2000              MOVS     r0,#0
000004  4906              LDR      r1,|L14.32|
;;;839    	Cmd_Send2FourG(0x03, 0x02, 0x00);
000006  4602              MOV      r2,r0
000008  7048              STRB     r0,[r1,#1]            ;838
00000a  2102              MOVS     r1,#2
00000c  2003              MOVS     r0,#3
00000e  f7fffffe          BL       Cmd_Send2FourG
;;;840    	Cmd_Send2FourG(0x03, 0x02, 0x00);
000012  2200              MOVS     r2,#0
000014  2102              MOVS     r1,#2
000016  2003              MOVS     r0,#3
000018  f7fffffe          BL       Cmd_Send2FourG
;;;841    	//drv_Dap_Load_out_Param();
;;;842    }
00001c  bd10              POP      {r4,pc}
;;;843    
                          ENDP

00001e  0000              DCW      0x0000
                  |L14.32|
                          DCD      ||.data||

                          AREA ||i.drv_pga460_room_detect||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                  drv_pga460_room_detect PROC
;;;843    
;;;844    uint8_t drv_pga460_room_detect(void)
000000  b510              PUSH     {r4,lr}
;;;845    {
;;;846    	int i;
;;;847    	drv_Pga460_P2_dump_data();
000002  f7fffffe          BL       drv_Pga460_P2_dump_data
;;;848    	detect_status = 0;
000006  2200              MOVS     r2,#0
000008  4c1b              LDR      r4,|L15.120|
;;;849    	for(i = 10; i <= 50; i++)
;;;850    	{
;;;851    		if(pga460_data_buf[i] > 0x0F)
00000a  491c              LDR      r1,|L15.124|
00000c  7022              STRB     r2,[r4,#0]            ;848
00000e  200a              MOVS     r0,#0xa               ;849
                  |L15.16|
000010  5c0b              LDRB     r3,[r1,r0]
000012  2b0f              CMP      r3,#0xf
000014  d902              BLS      |L15.28|
;;;852    		{
;;;853    //			printf("pga460_data_buf[i] > 0x0F\n");
;;;854    			detect_status = 1;
000016  2001              MOVS     r0,#1
000018  7020              STRB     r0,[r4,#0]
;;;855    			break;
00001a  e002              B        |L15.34|
                  |L15.28|
00001c  1c40              ADDS     r0,r0,#1
00001e  2832              CMP      r0,#0x32              ;849
000020  ddf6              BLE      |L15.16|
                  |L15.34|
;;;856    		}
;;;857    	}
;;;858    
;;;859    //	printf("detect_status  %x\n",detect_status);
;;;860    	if(back_status != detect_status)
000022  7860              LDRB     r0,[r4,#1]  ; back_status
000024  7821              LDRB     r1,[r4,#0]  ; detect_status
000026  4288              CMP      r0,r1
000028  d018              BEQ      |L15.92|
;;;861    		detect_count++;
00002a  6860              LDR      r0,[r4,#4]  ; detect_count
00002c  1c40              ADDS     r0,r0,#1
;;;862    	else
;;;863    	{
;;;864    		detect_count = 0;
;;;865    	}
;;;866    	
;;;867    	if(detect_count > 4)
00002e  6060              STR      r0,[r4,#4]  ; detect_count
000030  2804              CMP      r0,#4
000032  dd1f              BLE      |L15.116|
;;;868    	{
;;;869    	printf("Cmd_Send  %x\n",detect_status);
000034  a012              ADR      r0,|L15.128|
000036  f7fffffe          BL       __2printf
;;;870    		back_status = detect_status;
00003a  7821              LDRB     r1,[r4,#0]  ; detect_status
00003c  7061              STRB     r1,[r4,#1]
;;;871    		drv_Cmd_Send2NCU031(0x07, back_status, 0x00);
00003e  2200              MOVS     r2,#0
000040  2007              MOVS     r0,#7
000042  f7fffffe          BL       drv_Cmd_Send2NCU031
;;;872    		if(back_status)
000046  7860              LDRB     r0,[r4,#1]  ; back_status
000048  2800              CMP      r0,#0
00004a  d009              BEQ      |L15.96|
;;;873    		{
;;;874    			Cmd_Send2FourG(0x03, 0x03, 0x00);
00004c  2103              MOVS     r1,#3
00004e  2200              MOVS     r2,#0
000050  4608              MOV      r0,r1
000052  f7fffffe          BL       Cmd_Send2FourG
;;;875    			Cmd_Send2FourG(0x03, 0x03, 0x00);
000056  2200              MOVS     r2,#0
000058  2103              MOVS     r1,#3
00005a  e008              B        |L15.110|
                  |L15.92|
00005c  6062              STR      r2,[r4,#4]            ;864  ; detect_count
00005e  e009              B        |L15.116|
                  |L15.96|
;;;876    			//drv_Dap_Load_in_Param();
;;;877    		}
;;;878    		else
;;;879    		{
;;;880    			
;;;881    			Cmd_Send2FourG(0x03, 0x02, 0x00);
000060  2200              MOVS     r2,#0
000062  2102              MOVS     r1,#2
000064  2003              MOVS     r0,#3
000066  f7fffffe          BL       Cmd_Send2FourG
;;;882    			Cmd_Send2FourG(0x03, 0x02, 0x00);
00006a  2200              MOVS     r2,#0
00006c  2102              MOVS     r1,#2
                  |L15.110|
00006e  2003              MOVS     r0,#3                 ;875
000070  f7fffffe          BL       Cmd_Send2FourG
                  |L15.116|
;;;883    			//drv_Dap_Load_out_Param();
;;;884    		}
;;;885    	}
;;;886    	return back_status;
000074  7860              LDRB     r0,[r4,#1]  ; back_status
;;;887    }
000076  bd10              POP      {r4,pc}
;;;888    
                          ENDP

                  |L15.120|
                          DCD      ||.data||
                  |L15.124|
                          DCD      ||.bss||
                  |L15.128|
000080  436d645f          DCB      "Cmd_Send  %x\n",0
000084  53656e64
000088  20202578
00008c  0a00    
00008e  00                DCB      0
00008f  00                DCB      0

                          AREA ||i.pga460_calcChecksum||, CODE, READONLY, ALIGN=2

                  pga460_calcChecksum PROC
;;;213    */
;;;214    static uint8_t pga460_calcChecksum(uint8_t cmd)
000000  b5f0              PUSH     {r4-r7,lr}
;;;215    {
;;;216        static uint8_t ChecksumInput[44]; // data byte array for checksum calculator
;;;217    
;;;218        int checksumLoops = 0;
;;;219    	
;;;220        uint16_t carry = 0;
;;;221    	int i;
;;;222    
;;;223        cmd = cmd & 0x001F;
000002  06c5              LSLS     r5,r0,#27
;;;224        switch(cmd)
;;;225        {
;;;226            case 0 : //P1BL
;;;227            case 1 : //P2BL
;;;228            case 2 : //P1LO
;;;229            case 3 : //P2LO
;;;230            case 17 : //BC_P1BL
;;;231            case 18 : //BC_P2BL
;;;232            case 19 : //BC_P1LO
;;;233            case 20 : //BC_P2LO
;;;234                ChecksumInput[0] = cmd;
000004  4858              LDR      r0,|L16.360|
000006  2400              MOVS     r4,#0                 ;218
000008  0eed              LSRS     r5,r5,#27             ;223
;;;235                ChecksumInput[1] = OBJ_NUM;
;;;236                checksumLoops = 2;
;;;237            break;
;;;238    		/*
;;;239            case 4 : //TNLM
;;;240            case 21 : //TNLM
;;;241                ChecksumInput[0] = cmd;
;;;242                ChecksumInput[1] = TEMP_OR_NOISE;
;;;243                checksumLoops = 2;
;;;244            break;
;;;245            */
;;;246            case 5 : //UMR
;;;247            case 6 : //TNLR
;;;248            case 7 : //TEDD
;;;249            case 8 : //SD
;;;250            case 11 : //EEBR
;;;251            case 13 : //TVGBR
;;;252            case 15 : //THRBR
;;;253                ChecksumInput[0] = cmd;
;;;254                checksumLoops = 1;
;;;255            break;
;;;256    		/*
;;;257            case 9 : //RR
;;;258                ChecksumInput[0] = cmd;
;;;259                ChecksumInput[1] = regAddr;
;;;260                checksumLoops = 2;
;;;261            break;
;;;262            case 10 : //RW
;;;263            case 22 : //BC_RW
;;;264                ChecksumInput[0] = cmd;
;;;265                ChecksumInput[1] = regAddr;
;;;266                ChecksumInput[2] = regData;
;;;267                checksumLoops = 3;
;;;268            break;
;;;269            */
;;;270            case 14 : //TVGBW
;;;271            case 24 : //BC_TVGBW
;;;272                ChecksumInput[0] = cmd;
;;;273                ChecksumInput[1] = TVGAIN0;
;;;274                ChecksumInput[2] = TVGAIN1;
;;;275                ChecksumInput[3] = TVGAIN2;
;;;276                ChecksumInput[4] = TVGAIN3;
;;;277                ChecksumInput[5] = TVGAIN4;
;;;278                ChecksumInput[6] = TVGAIN5;
;;;279                ChecksumInput[7] = TVGAIN6;
;;;280                checksumLoops = 8;
;;;281            break;
;;;282            case 16 : //THRBW
;;;283            case 25 : //BC_THRBW
;;;284                ChecksumInput[0]  = cmd;
;;;285                ChecksumInput[1]  = P1_THR_0;
;;;286                ChecksumInput[2]  = P1_THR_1;
;;;287                ChecksumInput[3]  = P1_THR_2;
;;;288                ChecksumInput[4]  = P1_THR_3;
;;;289                ChecksumInput[5]  = P1_THR_4;
;;;290                ChecksumInput[6]  = P1_THR_5;
;;;291                ChecksumInput[7]  = P1_THR_6;
;;;292                ChecksumInput[8]  = P1_THR_7;
;;;293                ChecksumInput[9]  = P1_THR_8;
;;;294                ChecksumInput[10] = P1_THR_9;
;;;295                ChecksumInput[11] = P1_THR_10;
;;;296                ChecksumInput[12] = P1_THR_11;
;;;297                ChecksumInput[13] = P1_THR_12;
;;;298                ChecksumInput[14] = P1_THR_13;
;;;299                ChecksumInput[15] = P1_THR_14;
;;;300                ChecksumInput[16] = P1_THR_15;
;;;301                ChecksumInput[17] = P2_THR_0;
;;;302                ChecksumInput[18] = P2_THR_1;
;;;303                ChecksumInput[19] = P2_THR_2;
;;;304                ChecksumInput[20] = P2_THR_3;
;;;305                ChecksumInput[21] = P2_THR_4;
;;;306                ChecksumInput[22] = P2_THR_5;
;;;307                ChecksumInput[23] = P2_THR_6;
;;;308                ChecksumInput[24] = P2_THR_7;
;;;309                ChecksumInput[25] = P2_THR_8;
;;;310                ChecksumInput[26] = P2_THR_9;
;;;311                ChecksumInput[27] = P2_THR_10;
;;;312                ChecksumInput[28] = P2_THR_11;
;;;313                ChecksumInput[29] = P2_THR_12;
;;;314                ChecksumInput[30] = P2_THR_13;
;;;315                ChecksumInput[31] = P2_THR_14;
;;;316                ChecksumInput[32] = P2_THR_15;
00000a  4602              MOV      r2,r0
00000c  4621              MOV      r1,r4                 ;220
00000e  2644              MOVS     r6,#0x44              ;273
000010  2708              MOVS     r7,#8                 ;276
000012  3220              ADDS     r2,r2,#0x20
000014  002b              MOVS     r3,r5                 ;224
000016  f7fffffe          BL       __ARM_common_switch8
00001a  1a0e              DCB      0x1a,0x0e
00001c  0e0e0e91          DCB      0x0e,0x0e,0x0e,0x91
000020  13131313          DCB      0x13,0x13,0x13,0x13
000024  91911355          DCB      0x91,0x91,0x13,0x55
000028  13161324          DCB      0x13,0x16,0x13,0x24
00002c  0e0e0e0e          DCB      0x0e,0x0e,0x0e,0x0e
000030  91915516          DCB      0x91,0x91,0x55,0x16
000034  2491              DCB      0x24,0x91
000036  2201              MOVS     r2,#1                 ;235
000038  7005              STRB     r5,[r0,#0]            ;234
00003a  7042              STRB     r2,[r0,#1]            ;235
00003c  2402              MOVS     r4,#2                 ;236
00003e  e07d              B        |L16.316|
000040  7005              STRB     r5,[r0,#0]            ;253
000042  2401              MOVS     r4,#1                 ;254
000044  e07a              B        |L16.316|
000046  7005              STRB     r5,[r0,#0]            ;272
000048  7046              STRB     r6,[r0,#1]            ;273
00004a  7086              STRB     r6,[r0,#2]            ;274
00004c  22cd              MOVS     r2,#0xcd              ;275
00004e  70c2              STRB     r2,[r0,#3]            ;275
000050  7107              STRB     r7,[r0,#4]            ;276
000052  2264              MOVS     r2,#0x64              ;277
000054  7142              STRB     r2,[r0,#5]            ;277
000056  22bf              MOVS     r2,#0xbf              ;278
000058  7182              STRB     r2,[r0,#6]            ;278
00005a  22fc              MOVS     r2,#0xfc              ;279
00005c  71c2              STRB     r2,[r0,#7]            ;279
00005e  2408              MOVS     r4,#8                 ;280
000060  e06c              B        |L16.316|
000062  7005              STRB     r5,[r0,#0]            ;284
000064  2388              MOVS     r3,#0x88              ;285
000066  7043              STRB     r3,[r0,#1]            ;285
000068  24a9              MOVS     r4,#0xa9              ;286
00006a  7084              STRB     r4,[r0,#2]            ;286
00006c  24a0              MOVS     r4,#0xa0              ;287
00006e  70c4              STRB     r4,[r0,#3]            ;287
000070  7103              STRB     r3,[r0,#4]            ;288
000072  7143              STRB     r3,[r0,#5]            ;289
000074  7183              STRB     r3,[r0,#6]            ;290
000076  24ff              MOVS     r4,#0xff              ;291
000078  71c4              STRB     r4,[r0,#7]            ;291
00007a  25ce              MOVS     r5,#0xce              ;292
00007c  7205              STRB     r5,[r0,#8]            ;292
00007e  2573              MOVS     r5,#0x73              ;293
000080  7245              STRB     r5,[r0,#9]            ;293
000082  7284              STRB     r4,[r0,#0xa]          ;294
000084  72c4              STRB     r4,[r0,#0xb]          ;295
000086  7304              STRB     r4,[r0,#0xc]          ;296
000088  7344              STRB     r4,[r0,#0xd]          ;297
00008a  7384              STRB     r4,[r0,#0xe]          ;298
00008c  73c4              STRB     r4,[r0,#0xf]          ;299
00008e  2407              MOVS     r4,#7                 ;300
000090  7404              STRB     r4,[r0,#0x10]         ;300
000092  25b0              MOVS     r5,#0xb0              ;301
000094  7445              STRB     r5,[r0,#0x11]         ;301
000096  7483              STRB     r3,[r0,#0x12]         ;302
000098  74c3              STRB     r3,[r0,#0x13]         ;303
00009a  7503              STRB     r3,[r0,#0x14]         ;304
00009c  7543              STRB     r3,[r0,#0x15]         ;305
00009e  7583              STRB     r3,[r0,#0x16]         ;306
0000a0  23fb              MOVS     r3,#0xfb              ;307
0000a2  75c3              STRB     r3,[r0,#0x17]         ;307
0000a4  23de              MOVS     r3,#0xde              ;308
0000a6  7603              STRB     r3,[r0,#0x18]         ;308
0000a8  23f7              MOVS     r3,#0xf7              ;309
0000aa  7643              STRB     r3,[r0,#0x19]         ;309
0000ac  23bd              MOVS     r3,#0xbd              ;310
0000ae  7683              STRB     r3,[r0,#0x1a]         ;310
0000b0  23ef              MOVS     r3,#0xef              ;311
0000b2  76c3              STRB     r3,[r0,#0x1b]         ;311
0000b4  237f              MOVS     r3,#0x7f              ;312
0000b6  7703              STRB     r3,[r0,#0x1c]         ;312
0000b8  7743              STRB     r3,[r0,#0x1d]         ;313
0000ba  7783              STRB     r3,[r0,#0x1e]         ;314
0000bc  77c3              STRB     r3,[r0,#0x1f]         ;315
0000be  7014              STRB     r4,[r2,#0]
;;;317                checksumLoops = 33;
0000c0  2421              MOVS     r4,#0x21
;;;318            break;
0000c2  e03b              B        |L16.316|
;;;319            case 12 : //EEBW
;;;320            case 23 : //BC_EEBW
;;;321                ChecksumInput[0] = cmd;
0000c4  7005              STRB     r5,[r0,#0]
;;;322                ChecksumInput[1] = USER_DATA1;
0000c6  2300              MOVS     r3,#0
0000c8  7043              STRB     r3,[r0,#1]
;;;323                ChecksumInput[2] = USER_DATA2;
0000ca  7083              STRB     r3,[r0,#2]
;;;324                ChecksumInput[3] = USER_DATA3;
0000cc  70c3              STRB     r3,[r0,#3]
;;;325                ChecksumInput[4] = USER_DATA4;
0000ce  7103              STRB     r3,[r0,#4]
;;;326                ChecksumInput[5] = USER_DATA5;
0000d0  7143              STRB     r3,[r0,#5]
;;;327                ChecksumInput[6] = USER_DATA6;
0000d2  7183              STRB     r3,[r0,#6]
;;;328                ChecksumInput[7] = USER_DATA7;
0000d4  71c3              STRB     r3,[r0,#7]
;;;329                ChecksumInput[8] = USER_DATA8;
0000d6  7203              STRB     r3,[r0,#8]
;;;330                ChecksumInput[9] = USER_DATA9;
0000d8  7243              STRB     r3,[r0,#9]
;;;331                ChecksumInput[10] = USER_DATA10;
0000da  7283              STRB     r3,[r0,#0xa]
;;;332                ChecksumInput[11] = USER_DATA11;
0000dc  72c3              STRB     r3,[r0,#0xb]
;;;333                ChecksumInput[12] = USER_DATA12;
0000de  7303              STRB     r3,[r0,#0xc]
;;;334                ChecksumInput[13] = USER_DATA13;
0000e0  7343              STRB     r3,[r0,#0xd]
;;;335                ChecksumInput[14] = USER_DATA14;
0000e2  7383              STRB     r3,[r0,#0xe]
;;;336                ChecksumInput[15] = USER_DATA15;
0000e4  73c3              STRB     r3,[r0,#0xf]
;;;337                ChecksumInput[16] = USER_DATA16;
0000e6  7403              STRB     r3,[r0,#0x10]
;;;338                ChecksumInput[17] = USER_DATA17;
0000e8  7443              STRB     r3,[r0,#0x11]
;;;339                ChecksumInput[18] = USER_DATA18;
0000ea  7483              STRB     r3,[r0,#0x12]
;;;340                ChecksumInput[19] = USER_DATA19;
0000ec  74c3              STRB     r3,[r0,#0x13]
;;;341                ChecksumInput[20] = USER_DATA20;
0000ee  7503              STRB     r3,[r0,#0x14]
;;;342                ChecksumInput[21] = TVGAIN0;
0000f0  7546              STRB     r6,[r0,#0x15]
;;;343                ChecksumInput[22] = TVGAIN1;
0000f2  7586              STRB     r6,[r0,#0x16]
;;;344                ChecksumInput[23] = TVGAIN2;
0000f4  24cd              MOVS     r4,#0xcd
0000f6  75c4              STRB     r4,[r0,#0x17]
;;;345                ChecksumInput[24] = TVGAIN3;
0000f8  7607              STRB     r7,[r0,#0x18]
;;;346                ChecksumInput[25] = TVGAIN4;
0000fa  2464              MOVS     r4,#0x64
0000fc  7644              STRB     r4,[r0,#0x19]
;;;347                ChecksumInput[26] = TVGAIN5;
0000fe  24bf              MOVS     r4,#0xbf
000100  7684              STRB     r4,[r0,#0x1a]
;;;348                ChecksumInput[27] = TVGAIN6;
000102  24fc              MOVS     r4,#0xfc
000104  76c4              STRB     r4,[r0,#0x1b]
;;;349                ChecksumInput[28] = INIT_GAIN;
000106  2440              MOVS     r4,#0x40
000108  7704              STRB     r4,[r0,#0x1c]
;;;350                ChecksumInput[29] = FREQUENCY;
00010a  2432              MOVS     r4,#0x32
00010c  7744              STRB     r4,[r0,#0x1d]
;;;351                ChecksumInput[30] = DEADTIME;
00010e  7783              STRB     r3,[r0,#0x1e]
;;;352                ChecksumInput[31] = PULSE_P1;
000110  2407              MOVS     r4,#7
000112  77c4              STRB     r4,[r0,#0x1f]
;;;353                ChecksumInput[32] = PULSE_P2;
000114  2410              MOVS     r4,#0x10
000116  7014              STRB     r4,[r2,#0]
;;;354                ChecksumInput[33] = CURR_LIM_P1;
000118  257f              MOVS     r5,#0x7f
00011a  7055              STRB     r5,[r2,#1]
;;;355                ChecksumInput[34] = CURR_LIM_P2;
00011c  7094              STRB     r4,[r2,#2]
;;;356                ChecksumInput[35] = REC_LENGTH;
00011e  2417              MOVS     r4,#0x17
000120  70d4              STRB     r4,[r2,#3]
;;;357                ChecksumInput[36] = FREQ_DIAG;
000122  2433              MOVS     r4,#0x33
000124  7114              STRB     r4,[r2,#4]
;;;358                ChecksumInput[37] = SAT_FDIAG_TH;
000126  24ee              MOVS     r4,#0xee
000128  7154              STRB     r4,[r2,#5]
;;;359                ChecksumInput[38] = FVOLT_DEC;
00012a  247c              MOVS     r4,#0x7c
00012c  7194              STRB     r4,[r2,#6]
;;;360                ChecksumInput[39] = DECPL_TEMP;
00012e  244f              MOVS     r4,#0x4f
000130  71d4              STRB     r4,[r2,#7]
;;;361                ChecksumInput[40] = DSP_SCALE;
000132  7213              STRB     r3,[r2,#8]
;;;362                ChecksumInput[41] = TEMP_TRIM;
000134  7253              STRB     r3,[r2,#9]
;;;363                ChecksumInput[42] = P1_GAIN_CTRL;
000136  7293              STRB     r3,[r2,#0xa]
;;;364                ChecksumInput[43] = P2_GAIN_CTRL;
000138  72d3              STRB     r3,[r2,#0xb]
;;;365                checksumLoops = 44;
00013a  242c              MOVS     r4,#0x2c
                  |L16.316|
;;;366            break;
;;;367            default:
;;;368            break;
;;;369        }
;;;370    
;;;371    
;;;372        for ( i = 0; i < checksumLoops; i++)
00013c  2200              MOVS     r2,#0
00013e  e00d              B        |L16.348|
                  |L16.320|
;;;373        {
;;;374            if ((ChecksumInput[i] + carry) < carry)
000140  5c83              LDRB     r3,[r0,r2]
000142  185d              ADDS     r5,r3,r1
000144  428d              CMP      r5,r1
000146  d203              BCS      |L16.336|
000148  1c49              ADDS     r1,r1,#1
;;;375            {
;;;376                 carry = carry + ChecksumInput[i] + 1;
00014a  1859              ADDS     r1,r3,r1
00014c  b289              UXTH     r1,r1
00014e  e000              B        |L16.338|
                  |L16.336|
;;;377            }
;;;378            else
;;;379            {
;;;380                carry = carry + ChecksumInput[i];
000150  b2a9              UXTH     r1,r5
                  |L16.338|
;;;381            }
;;;382            if (carry > 0xFF)
000152  29ff              CMP      r1,#0xff
000154  d901              BLS      |L16.346|
000156  39ff              SUBS     r1,r1,#0xff
;;;383            {
;;;384                carry = carry - 255;
000158  b289              UXTH     r1,r1
                  |L16.346|
00015a  1c52              ADDS     r2,r2,#1
                  |L16.348|
00015c  42a2              CMP      r2,r4                 ;372
00015e  dbef              BLT      |L16.320|
;;;385            }
;;;386        }
;;;387        carry = (~carry & 0x00FF);
000160  43c8              MVNS     r0,r1
000162  b2c0              UXTB     r0,r0
;;;388        return carry;
;;;389    }
000164  bdf0              POP      {r4-r7,pc}
;;;390    
                          ENDP

000166  0000              DCW      0x0000
                  |L16.360|
                          DCD      ||.bss||+0x82

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  pga460_data_buf
                          %        130
                  ChecksumInput
                          %        44

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

000000  550b0000          DCB      0x55,0x0b,0x00,0x00

                          AREA ||.data||, DATA, ALIGN=2

                  detect_status
000000  00                DCB      0x00
                  back_status
000001  000000            DCB      0x00,0x00,0x00
                  detect_count
                          DCD      0x00000000

                          AREA ||area_number.22||, DATA, ALIGN=0

                          EXPORTAS ||area_number.22||, ||.data||
                  detect_onoff
000000  00                DCB      0x00

                          AREA ||i.__ARM_common_switch8||, COMGROUP=__ARM_common_switch8, CODE, READONLY, ALIGN=1

                  __ARM_common_switch8 PROC
000000  b430              PUSH     {r4,r5}
000002  4674              MOV      r4,lr
000004  1e64              SUBS     r4,r4,#1
000006  7825              LDRB     r5,[r4,#0]
000008  1c64              ADDS     r4,r4,#1
00000a  42ab              CMP      r3,r5
00000c  d200              BCS      |L107.16|
00000e  461d              MOV      r5,r3
                  |L107.16|
000010  5d63              LDRB     r3,[r4,r5]
000012  005b              LSLS     r3,r3,#1
000014  18e3              ADDS     r3,r4,r3
000016  bc30              POP      {r4,r5}
000018  4718              BX       r3
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\src\\driver\\drv_pga460.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___12_drv_pga460_c_9a37ce9c____REV16|
#line 388 "..\\lib\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___12_drv_pga460_c_9a37ce9c____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___12_drv_pga460_c_9a37ce9c____REVSH|
#line 402
|__asm___12_drv_pga460_c_9a37ce9c____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
