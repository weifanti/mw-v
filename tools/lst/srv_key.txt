; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\srv_key.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\srv_key.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\lib\CMSIS\Include -I..\lib\Device\Nuvoton\NUC029xGE\Include -I..\lib\StdDriver\inc -I..\src\core\include -I..\src\driver\include -I..\src\io\include -I..\src\global -I..\src\server\include -I..\src\driver\audio -D__UVISION_VERSION=522 --omf_browse=.\obj\srv_key.crf ..\src\server\key\srv_key.c]
                          THUMB

                          AREA ||i.srv_key_eq_indoor_switch_handler||, CODE, READONLY, ALIGN=1

                  srv_key_eq_indoor_switch_handler PROC
;;;159    
;;;160     void srv_key_eq_indoor_switch_handler(void)
000000  b510              PUSH     {r4,lr}
;;;161    {
;;;162    	Core_Msg_Send(MSG_MCU1_SYS_STATE_IND, 0xc1,0x00,0x00); //indoor
000002  2300              MOVS     r3,#0
000004  461a              MOV      r2,r3
000006  21c1              MOVS     r1,#0xc1
000008  2002              MOVS     r0,#2
00000a  f7fffffe          BL       Core_Msg_Send
;;;163    }
00000e  bd10              POP      {r4,pc}
;;;164    
                          ENDP


                          AREA ||i.srv_key_eq_outdoor_switch_handler||, CODE, READONLY, ALIGN=1

                  srv_key_eq_outdoor_switch_handler PROC
;;;164    
;;;165    void srv_key_eq_outdoor_switch_handler(void)
000000  b510              PUSH     {r4,lr}
;;;166    {
;;;167    	Core_Msg_Send(MSG_MCU1_SYS_STATE_IND, 0xc2,0x00,0x00); //outdoor
000002  2300              MOVS     r3,#0
000004  461a              MOV      r2,r3
000006  21c2              MOVS     r1,#0xc2
000008  2002              MOVS     r0,#2
00000a  f7fffffe          BL       Core_Msg_Send
;;;168    }
00000e  bd10              POP      {r4,pc}
;;;169    
                          ENDP


                          AREA ||i.srv_key_handler||, CODE, READONLY, ALIGN=2

                  srv_key_handler PROC
;;;175    
;;;176    void srv_key_handler(void)
000000  b510              PUSH     {r4,lr}
;;;177    {	
;;;178    	//static uint8_t i = 0;
;;;179    	switch(GetIrKey())
000002  f7fffffe          BL       GetIrKey
;;;180    	{
;;;181    		case IR_KEY_POWER:
;;;182    			
;;;183    		Global_datas.key_led_blink = 1;
000006  2201              MOVS     r2,#1
000008  4927              LDR      r1,|L3.168|
00000a  0003              MOVS     r3,r0                 ;179
00000c  f7fffffe          BL       __ARM_common_switch8
000010  0e100814          DCB      0x0e,0x10,0x08,0x14
000014  181c2420          DCB      0x18,0x1c,0x24,0x20
000018  282c3010          DCB      0x28,0x2c,0x30,0x10
00001c  343c4710          DCB      0x34,0x3c,0x47,0x10
000020  730a              STRB     r2,[r1,#0xc]
;;;184    		if(Global_datas.g_mode_status == POWER_IDLE_MODE)
000022  7948              LDRB     r0,[r1,#5]  ; Global_datas
000024  280e              CMP      r0,#0xe
000026  d004              BEQ      |L3.50|
;;;185    		{
;;;186    			SYS_Status();
;;;187    		}
;;;188    		
;;;189    		else
;;;190    		{
;;;191    			PowerOff();
000028  f7fffffe          BL       PowerOff
;;;192    			SysIdle();
00002c  f7fffffe          BL       SysIdle
;;;193    		}
;;;194    		break;
;;;195    
;;;196    		case IR_KEY_MODE:
;;;197    			
;;;198    			Global_datas.key_led_blink = 1;
;;;199    			srv_key_mode_handler();
;;;200    		break;
;;;201    		case IR_KEY_VOLUME_UP:
;;;202    			
;;;203    			Global_datas.key_led_blink = 1;
;;;204    			srv_key_volume_up_handler();
;;;205    		break;
;;;206    		case IR_KEY_VOLUME_DOWN:
;;;207    			
;;;208    			Global_datas.key_led_blink = 1;
;;;209    			srv_key_volume_down_handler();
;;;210    		break;
;;;211    		case IR_KEY_NEXT_SONG:
;;;212    			Global_datas.key_led_blink = 1;
;;;213    			
;;;214    			srv_key_next_song_handler();
;;;215    		break;
;;;216    		case IR_KEY_PREV_SONG:
;;;217    			Global_datas.key_led_blink = 1;
;;;218    			
;;;219    			srv_key_prev_song_handler();
;;;220    		break;
;;;221    
;;;222    		case IR_KEY_PLAY_PAUSE:
;;;223    			Global_datas.key_led_blink = 1;
;;;224    
;;;225    		/*	if(i == 0)
;;;226    			{
;;;227    				i = 1;
;;;228    				drv_5825_mute_pin_set(1);  // unmute
;;;229    			}
;;;230    			else 
;;;231    			{
;;;232    				i = 0;
;;;233    				drv_5825_mute_pin_set(0);  // mute
;;;234    			}*/
;;;235    			srv_key_play_pause_handler();
;;;236    		break;
;;;237    
;;;238    
;;;239    		
;;;240    		case IR_KEY_PREV_STATION:
;;;241    			
;;;242    			Global_datas.key_led_blink = 1;
;;;243    			srv_key_prev_station_handler();
;;;244    		break;
;;;245    		case IR_KEY_NEXT_STATION:
;;;246    			
;;;247    			Global_datas.key_led_blink = 1;
;;;248    			srv_key_next_station_handler();
;;;249    		break;
;;;250    		case IR_KEY_EQ_INDOOR:
;;;251    			
;;;252    			Global_datas.key_led_blink = 1;
;;;253    
;;;254    			if(Global_datas.eq_mode != EQ_MODE_INDOOR)
;;;255    			{
;;;256    				Global_datas.eq_mode = EQ_MODE_INDOOR;
;;;257    				srv_key_eq_indoor_switch_handler();
;;;258    				Drv_audio_channel_switch();
;;;259    			}
;;;260    		break;
;;;261    		
;;;262    		case IR_KEY_EQ_OUTDOOR:
;;;263    			
;;;264    			Global_datas.key_led_blink = 1;
;;;265    
;;;266    			if(Global_datas.eq_mode != EQ_MODE_OUTDOOR)
;;;267    			{
;;;268    				Global_datas.eq_mode = EQ_MODE_OUTDOOR;
;;;269    				srv_key_eq_outdoor_switch_handler();
;;;270    				Drv_audio_channel_switch();
;;;271    			}		
;;;272    			
;;;273    		break;
;;;274    
;;;275    		
;;;276    		case IR_KEY_NET_SET:
;;;277    			
;;;278    			Global_datas.key_led_blink = 1;
;;;279    			srv_key_net_config_handler();
;;;280    		break;
;;;281    		
;;;282    		default:
;;;283    		break;
;;;284    	}
;;;285    }
000030  bd10              POP      {r4,pc}
                  |L3.50|
000032  f7fffffe          BL       SYS_Status
000036  bd10              POP      {r4,pc}
000038  730a              STRB     r2,[r1,#0xc]          ;198
00003a  f7fffffe          BL       srv_key_mode_handler
00003e  bd10              POP      {r4,pc}
000040  730a              STRB     r2,[r1,#0xc]          ;203
000042  f7fffffe          BL       srv_key_volume_up_handler
000046  bd10              POP      {r4,pc}
000048  730a              STRB     r2,[r1,#0xc]          ;208
00004a  f7fffffe          BL       srv_key_volume_down_handler
00004e  bd10              POP      {r4,pc}
000050  730a              STRB     r2,[r1,#0xc]          ;212
000052  f7fffffe          BL       srv_key_next_song_handler
000056  bd10              POP      {r4,pc}
000058  730a              STRB     r2,[r1,#0xc]          ;217
00005a  f7fffffe          BL       srv_key_prev_song_handler
00005e  bd10              POP      {r4,pc}
000060  730a              STRB     r2,[r1,#0xc]          ;223
000062  f7fffffe          BL       srv_key_play_pause_handler
000066  bd10              POP      {r4,pc}
000068  730a              STRB     r2,[r1,#0xc]          ;242
00006a  f7fffffe          BL       srv_key_prev_station_handler
00006e  bd10              POP      {r4,pc}
000070  730a              STRB     r2,[r1,#0xc]          ;247
000072  f7fffffe          BL       srv_key_next_station_handler
                  |L3.118|
000076  bd10              POP      {r4,pc}
000078  730a              STRB     r2,[r1,#0xc]          ;252
00007a  7b88              LDRB     r0,[r1,#0xe]          ;254  ; Global_datas
00007c  2801              CMP      r0,#1                 ;254
00007e  d0fa              BEQ      |L3.118|
000080  738a              STRB     r2,[r1,#0xe]          ;256
000082  f7fffffe          BL       srv_key_eq_indoor_switch_handler
000086  e007              B        |L3.152|
000088  730a              STRB     r2,[r1,#0xc]          ;264
00008a  7b88              LDRB     r0,[r1,#0xe]          ;266  ; Global_datas
00008c  2802              CMP      r0,#2                 ;266
00008e  d0f2              BEQ      |L3.118|
000090  2002              MOVS     r0,#2                 ;268
000092  7388              STRB     r0,[r1,#0xe]          ;268
000094  f7fffffe          BL       srv_key_eq_outdoor_switch_handler
                  |L3.152|
000098  f7fffffe          BL       Drv_audio_channel_switch
00009c  bd10              POP      {r4,pc}
00009e  730a              STRB     r2,[r1,#0xc]          ;278
0000a0  f7fffffe          BL       srv_key_net_config_handler
0000a4  bd10              POP      {r4,pc}
;;;286    
                          ENDP

0000a6  0000              DCW      0x0000
                  |L3.168|
                          DCD      Global_datas+0x20

                          AREA ||i.srv_key_mode_handler||, CODE, READONLY, ALIGN=2

                  srv_key_mode_handler PROC
;;;23     
;;;24     void srv_key_mode_handler(void)
000000  b510              PUSH     {r4,lr}
;;;25     {
;;;26     
;;;27     switch(Global_datas.g_mode_status)
000002  4c22              LDR      r4,|L4.140|
000004  7960              LDRB     r0,[r4,#5]  ; Global_datas
000006  0003              MOVS     r3,r0
000008  f7fffffe          BL       __ARM_common_switch8
00000c  0b311c1c          DCB      0x0b,0x31,0x1c,0x1c
000010  1c1c1c25          DCB      0x1c,0x1c,0x1c,0x25
000014  25073113          DCB      0x25,0x07,0x31,0x13
000018  3100              DCB      0x31,0x00
;;;28     {
;;;29     	case AUX_MODE:
;;;30     
;;;31     		if(Global_datas.subboard_online) // if subboard online ,turn on fm
00001a  7c20              LDRB     r0,[r4,#0x10]  ; Global_datas
00001c  2800              CMP      r0,#0
00001e  d008              BEQ      |L4.50|
;;;32     		{
;;;33     			Core_Msg_Send(MSG_MCU1_SYS_STATE_IND, 0x03 ,0x18,0x00); //fm
000020  2300              MOVS     r3,#0
000022  2218              MOVS     r2,#0x18
000024  2103              MOVS     r1,#3
000026  2002              MOVS     r0,#2
000028  f7fffffe          BL       Core_Msg_Send
;;;34     			drv_Cmd_Send2NCU031(0x70, 0x13,0x00);// change to fm mode				
00002c  2200              MOVS     r2,#0
00002e  2113              MOVS     r1,#0x13
000030  e019              B        |L4.102|
                  |L4.50|
;;;35     		}
;;;36     		else
;;;37     		{
;;;38     			Core_Msg_Send(MSG_MCU1_SYS_STATE_IND, 0x03 ,0x15,0x00); //wifi
000032  2300              MOVS     r3,#0
000034  2215              MOVS     r2,#0x15
000036  2103              MOVS     r1,#3
000038  2002              MOVS     r0,#2
00003a  f7fffffe          BL       Core_Msg_Send
;;;39     			drv_Cmd_Send2NCU031(0x70, 0x11,0x00);// change to wifi mode	
00003e  2200              MOVS     r2,#0
000040  2111              MOVS     r1,#0x11
000042  e010              B        |L4.102|
;;;40     		}
;;;41     
;;;42     
;;;43     	break;
;;;44     	
;;;45     	case WIFI_MODE:
;;;46     	case WIFI_CONNECTED_MODE:
;;;47     	case WIFI_CONNECTING_MODE:
;;;48     	case FOURG_MODE:
;;;49     	case FOURG_CONNECTED_MODE:
;;;50     		
;;;51     		Core_Msg_Send(MSG_MCU1_SYS_STATE_IND, 0x03,0x16,0x00); //bt
000044  2300              MOVS     r3,#0
000046  2216              MOVS     r2,#0x16
000048  2103              MOVS     r1,#3
00004a  2002              MOVS     r0,#2
00004c  f7fffffe          BL       Core_Msg_Send
;;;52     		drv_Cmd_Send2NCU031(0x70, 0x10,0x00);// change to bt mode
000050  2200              MOVS     r2,#0
000052  2110              MOVS     r1,#0x10
;;;53     		
;;;54     	break;
000054  e007              B        |L4.102|
;;;55     	
;;;56     	case BT_MODE:
;;;57     	case BT_CONNECTED_MODE:
;;;58     
;;;59     
;;;60     		Core_Msg_Send(MSG_MCU1_SYS_STATE_IND, 0x03 ,0x17,0x00); //aux
000056  2300              MOVS     r3,#0
000058  2217              MOVS     r2,#0x17
00005a  2103              MOVS     r1,#3
00005c  2002              MOVS     r0,#2
00005e  f7fffffe          BL       Core_Msg_Send
;;;61     		drv_Cmd_Send2NCU031(0x70, 0x12,0x00);// change to aux mode
000062  2200              MOVS     r2,#0
000064  2112              MOVS     r1,#0x12
                  |L4.102|
;;;62     	break;
;;;63     	
;;;64     	case FM_MODE:
;;;65     		Core_Msg_Send(MSG_MCU1_SYS_STATE_IND, 0x03 ,0x15,0x00); //wifi
;;;66     		drv_Cmd_Send2NCU031(0x70, 0x11,0x00);// change to wifi/4g mode
000066  2070              MOVS     r0,#0x70
000068  f7fffffe          BL       drv_Cmd_Send2NCU031
;;;67     	break;
;;;68     	
;;;69     	default:
;;;70     		Core_Msg_Send(MSG_MCU1_SYS_STATE_IND, 0x03 ,0x17,0x00); //aux
;;;71     		drv_Cmd_Send2NCU031(0x70, 0x12,0x00);// change to aux mode	
;;;72     		Global_datas.g_mode_status = AUX_MODE;
;;;73     	break;
;;;74     }
;;;75     
;;;76     
;;;77     
;;;78     /*
;;;79     	switch(Global_datas.g_mode_status)
;;;80     	{
;;;81     		case AUX_MODE:
;;;82     		case LOUD_SPEAKER_MODE:
;;;83     			Core_Msg_Send(MSG_MCU1_SYS_STATE_IND, 0x03,0x16,0x00); //bt
;;;84     			drv_Cmd_Send2NCU031(0x70, 0x10,0x00);// change to bt mode
;;;85     		break;
;;;86     		
;;;87     		case WIFI_MODE:
;;;88     		case WIFI_CONNECTED_MODE:
;;;89     		case WIFI_CONNECTING_MODE:
;;;90     		case FOURG_MODE:
;;;91     		case FOURG_CONNECTED_MODE:
;;;92     			Core_Msg_Send(MSG_MCU1_SYS_STATE_IND, 0x03 ,0x17,0x00); //aux
;;;93     			drv_Cmd_Send2NCU031(0x70, 0x12,0x00);// change to aux mode
;;;94     			
;;;95     		break;
;;;96     		
;;;97     	    case BT_MODE:
;;;98     	    case BT_CONNECTED_MODE:
;;;99     			Core_Msg_Send(MSG_MCU1_SYS_STATE_IND, 0x03 ,0x15,0x00); //wifi
;;;100    			drv_Cmd_Send2NCU031(0x70, 0x11,0x00);// change to wifi mode
;;;101    		break;
;;;102    		
;;;103    		case FM_MODE:
;;;104    			Core_Msg_Send(MSG_MCU1_SYS_STATE_IND, 0x03 ,0x15,0x00); //wifi
;;;105    			drv_Cmd_Send2NCU031(0x70, 0x11,0x00);// change to wifi/4g mode
;;;106    		break;
;;;107    		
;;;108    		default:
;;;109    			Core_Msg_Send(MSG_MCU1_SYS_STATE_IND, 0x03 ,0x17,0x00); //aux
;;;110    			drv_Cmd_Send2NCU031(0x70, 0x12,0x00);// change to aux mode	
;;;111    			Global_datas.g_mode_status = AUX_MODE;
;;;112    		break;
;;;113    	}
;;;114    
;;;115    	*/
;;;116    }
00006c  bd10              POP      {r4,pc}
00006e  2300              MOVS     r3,#0                 ;70
000070  2217              MOVS     r2,#0x17              ;70
000072  2103              MOVS     r1,#3                 ;70
000074  2002              MOVS     r0,#2                 ;70
000076  f7fffffe          BL       Core_Msg_Send
00007a  2200              MOVS     r2,#0                 ;71
00007c  2112              MOVS     r1,#0x12              ;71
00007e  2070              MOVS     r0,#0x70              ;71
000080  f7fffffe          BL       drv_Cmd_Send2NCU031
000084  2008              MOVS     r0,#8                 ;72
000086  7160              STRB     r0,[r4,#5]            ;72
000088  bd10              POP      {r4,pc}
;;;117    
                          ENDP

00008a  0000              DCW      0x0000
                  |L4.140|
                          DCD      Global_datas+0x20

                          AREA ||i.srv_key_net_config_handler||, CODE, READONLY, ALIGN=1

                  srv_key_net_config_handler PROC
;;;170    
;;;171    void srv_key_net_config_handler(void)
000000  b510              PUSH     {r4,lr}
;;;172    {
;;;173    	Core_Msg_Send(MSG_MCU1_SYS_STATE_IND, 0x03,0x21,0x00); //net config
000002  2300              MOVS     r3,#0
000004  2221              MOVS     r2,#0x21
000006  2103              MOVS     r1,#3
000008  2002              MOVS     r0,#2
00000a  f7fffffe          BL       Core_Msg_Send
;;;174    }
00000e  bd10              POP      {r4,pc}
;;;175    
                          ENDP


                          AREA ||i.srv_key_next_song_handler||, CODE, READONLY, ALIGN=1

                  srv_key_next_song_handler PROC
;;;127    
;;;128    void srv_key_next_song_handler(void)
000000  b510              PUSH     {r4,lr}
;;;129    {
;;;130    	Core_Msg_Send(MSG_MCU1_SYS_STATE_IND, 0x03,0x0d,0x00); //
000002  2300              MOVS     r3,#0
000004  220d              MOVS     r2,#0xd
000006  2103              MOVS     r1,#3
000008  2002              MOVS     r0,#2
00000a  f7fffffe          BL       Core_Msg_Send
;;;131    	drv_Cmd_Send2NCU031(0x70, 0x19,0x00);
00000e  2200              MOVS     r2,#0
000010  2119              MOVS     r1,#0x19
000012  2070              MOVS     r0,#0x70
000014  f7fffffe          BL       drv_Cmd_Send2NCU031
;;;132    }
000018  bd10              POP      {r4,pc}
;;;133    
                          ENDP


                          AREA ||i.srv_key_next_station_handler||, CODE, READONLY, ALIGN=1

                  srv_key_next_station_handler PROC
;;;153    
;;;154    void srv_key_next_station_handler(void)
000000  b510              PUSH     {r4,lr}
;;;155    {
;;;156    	Core_Msg_Send(MSG_MCU1_SYS_STATE_IND, 0x03,0x31,0x00); //next piece
000002  2300              MOVS     r3,#0
000004  2231              MOVS     r2,#0x31
000006  2103              MOVS     r1,#3
000008  2002              MOVS     r0,#2
00000a  f7fffffe          BL       Core_Msg_Send
;;;157    	drv_Cmd_Send2NCU031(0x70, 0x1b,0x00);
00000e  2200              MOVS     r2,#0
000010  211b              MOVS     r1,#0x1b
000012  2070              MOVS     r0,#0x70
000014  f7fffffe          BL       drv_Cmd_Send2NCU031
;;;158    }
000018  bd10              POP      {r4,pc}
;;;159    
                          ENDP


                          AREA ||i.srv_key_play_pause_handler||, CODE, READONLY, ALIGN=1

                  srv_key_play_pause_handler PROC
;;;140    
;;;141    void srv_key_play_pause_handler(void)
000000  b510              PUSH     {r4,lr}
;;;142    {
;;;143    	Core_Msg_Send(MSG_MCU1_SYS_STATE_IND, 0x03,0x56,0x00); //
000002  2300              MOVS     r3,#0
000004  2256              MOVS     r2,#0x56
000006  2103              MOVS     r1,#3
000008  2002              MOVS     r0,#2
00000a  f7fffffe          BL       Core_Msg_Send
;;;144    	drv_Cmd_Send2NCU031(0x70, 0x17,0x00);
00000e  2200              MOVS     r2,#0
000010  2117              MOVS     r1,#0x17
000012  2070              MOVS     r0,#0x70
000014  f7fffffe          BL       drv_Cmd_Send2NCU031
;;;145    }
000018  bd10              POP      {r4,pc}
;;;146    
                          ENDP


                          AREA ||i.srv_key_prev_song_handler||, CODE, READONLY, ALIGN=1

                  srv_key_prev_song_handler PROC
;;;133    
;;;134    void srv_key_prev_song_handler(void)
000000  b510              PUSH     {r4,lr}
;;;135    {
;;;136    	Core_Msg_Send(MSG_MCU1_SYS_STATE_IND, 0x03,0x0e,0x00); //
000002  2300              MOVS     r3,#0
000004  220e              MOVS     r2,#0xe
000006  2103              MOVS     r1,#3
000008  2002              MOVS     r0,#2
00000a  f7fffffe          BL       Core_Msg_Send
;;;137    	drv_Cmd_Send2NCU031(0x70, 0x18,0x00);
00000e  2200              MOVS     r2,#0
000010  2118              MOVS     r1,#0x18
000012  2070              MOVS     r0,#0x70
000014  f7fffffe          BL       drv_Cmd_Send2NCU031
;;;138    }
000018  bd10              POP      {r4,pc}
;;;139    
                          ENDP


                          AREA ||i.srv_key_prev_station_handler||, CODE, READONLY, ALIGN=1

                  srv_key_prev_station_handler PROC
;;;147    
;;;148    void srv_key_prev_station_handler(void)
000000  b510              PUSH     {r4,lr}
;;;149    {
;;;150    	Core_Msg_Send(MSG_MCU1_SYS_STATE_IND, 0x03,0x32,0x00); //last piece
000002  2300              MOVS     r3,#0
000004  2232              MOVS     r2,#0x32
000006  2103              MOVS     r1,#3
000008  2002              MOVS     r0,#2
00000a  f7fffffe          BL       Core_Msg_Send
;;;151    	drv_Cmd_Send2NCU031(0x70, 0x1a,0x00);
00000e  2200              MOVS     r2,#0
000010  211a              MOVS     r1,#0x1a
000012  2070              MOVS     r0,#0x70
000014  f7fffffe          BL       drv_Cmd_Send2NCU031
;;;152    }
000018  bd10              POP      {r4,pc}
;;;153    
                          ENDP


                          AREA ||i.srv_key_volume_down_handler||, CODE, READONLY, ALIGN=1

                  srv_key_volume_down_handler PROC
;;;122    
;;;123    void srv_key_volume_down_handler(void)
000000  b510              PUSH     {r4,lr}
;;;124    {
;;;125    	Core_Msg_Send(MSG_MCU1_SYS_STATE_IND, 0x03,0x03,0x00); //vol-
000002  2203              MOVS     r2,#3
000004  2300              MOVS     r3,#0
000006  4611              MOV      r1,r2
000008  2002              MOVS     r0,#2
00000a  f7fffffe          BL       Core_Msg_Send
;;;126    }
00000e  bd10              POP      {r4,pc}
;;;127    
                          ENDP


                          AREA ||i.srv_key_volume_up_handler||, CODE, READONLY, ALIGN=1

                  srv_key_volume_up_handler PROC
;;;117    
;;;118    void srv_key_volume_up_handler(void)
000000  b510              PUSH     {r4,lr}
;;;119    {
;;;120    	Core_Msg_Send(MSG_MCU1_SYS_STATE_IND, 0x03,0x02,0x00); //vol+
000002  2202              MOVS     r2,#2
000004  2300              MOVS     r3,#0
000006  2103              MOVS     r1,#3
000008  4610              MOV      r0,r2
00000a  f7fffffe          BL       Core_Msg_Send
;;;121    }
00000e  bd10              POP      {r4,pc}
;;;122    
                          ENDP


                          AREA ||i.__ARM_common_switch8||, COMGROUP=__ARM_common_switch8, CODE, READONLY, ALIGN=1

                  __ARM_common_switch8 PROC
000000  b430              PUSH     {r4,r5}
000002  4674              MOV      r4,lr
000004  1e64              SUBS     r4,r4,#1
000006  7825              LDRB     r5,[r4,#0]
000008  1c64              ADDS     r4,r4,#1
00000a  42ab              CMP      r3,r5
00000c  d200              BCS      |L69.16|
00000e  461d              MOV      r5,r3
                  |L69.16|
000010  5d63              LDRB     r3,[r4,r5]
000012  005b              LSLS     r3,r3,#1
000014  18e3              ADDS     r3,r4,r3
000016  bc30              POP      {r4,r5}
000018  4718              BX       r3
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\src\\server\\key\\srv_key.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___9_srv_key_c_69717a1a____REV16|
#line 388 "..\\lib\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___9_srv_key_c_69717a1a____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___9_srv_key_c_69717a1a____REVSH|
#line 402
|__asm___9_srv_key_c_69717a1a____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
