; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\srv_key.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\srv_key.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\lib\CMSIS\Include -I..\lib\Device\Nuvoton\NUC029xGE\Include -I..\lib\StdDriver\inc -I..\src\core\include -I..\src\driver\include -I..\src\io\include -I..\src\global -I..\src\server\include -I..\src\driver\audio -D__UVISION_VERSION=522 --omf_browse=.\obj\srv_key.crf ..\src\server\key\srv_key.c]
                          THUMB

                          AREA ||i.srv_key_eq_indoor_switch_handler||, CODE, READONLY, ALIGN=1

                  srv_key_eq_indoor_switch_handler PROC
;;;178    
;;;179     void srv_key_eq_indoor_switch_handler(void)
000000  b510              PUSH     {r4,lr}
;;;180    {
;;;181    	Core_Msg_Send(MSG_MCU1_SYS_STATE_IND, 0xc1,0x00,0x00); //indoor
000002  2300              MOVS     r3,#0
000004  461a              MOV      r2,r3
000006  21c1              MOVS     r1,#0xc1
000008  2002              MOVS     r0,#2
00000a  f7fffffe          BL       Core_Msg_Send
;;;182    }
00000e  bd10              POP      {r4,pc}
;;;183    
                          ENDP


                          AREA ||i.srv_key_eq_outdoor_switch_handler||, CODE, READONLY, ALIGN=1

                  srv_key_eq_outdoor_switch_handler PROC
;;;183    
;;;184    void srv_key_eq_outdoor_switch_handler(void)
000000  b510              PUSH     {r4,lr}
;;;185    {
;;;186    	Core_Msg_Send(MSG_MCU1_SYS_STATE_IND, 0xc2,0x00,0x00); //outdoor
000002  2300              MOVS     r3,#0
000004  461a              MOV      r2,r3
000006  21c2              MOVS     r1,#0xc2
000008  2002              MOVS     r0,#2
00000a  f7fffffe          BL       Core_Msg_Send
;;;187    }
00000e  bd10              POP      {r4,pc}
;;;188    
                          ENDP


                          AREA ||i.srv_key_handler||, CODE, READONLY, ALIGN=2

                  srv_key_handler PROC
;;;194    
;;;195    void srv_key_handler(void)
000000  b510              PUSH     {r4,lr}
;;;196    {	
;;;197    	//static uint8_t i = 0;
;;;198    	switch(GetIrKey())
000002  f7fffffe          BL       GetIrKey
;;;199    	{
;;;200    		case IR_KEY_POWER:
;;;201    			
;;;202    		Global_datas.key_led_blink = 1;
000006  2201              MOVS     r2,#1
000008  492a              LDR      r1,|L3.180|
00000a  0003              MOVS     r3,r0                 ;198
00000c  f7fffffe          BL       __ARM_common_switch8
000010  13130b17          DCB      0x13,0x13,0x0b,0x17
000014  1f1f2323          DCB      0x1f,0x1f,0x23,0x23
000018  2b132713          DCB      0x2b,0x13,0x27,0x13
00001c  2f133337          DCB      0x2f,0x13,0x33,0x37
000020  133b434e          DCB      0x13,0x3b,0x43,0x4e
000024  1300              DCB      0x13,0x00
000026  730a              STRB     r2,[r1,#0xc]
;;;203    		if(Global_datas.g_mode_status == POWER_IDLE_MODE)
000028  7948              LDRB     r0,[r1,#5]  ; Global_datas
00002a  280e              CMP      r0,#0xe
00002c  d004              BEQ      |L3.56|
;;;204    		{
;;;205    			SYS_Status();
;;;206    		}
;;;207    		
;;;208    		else
;;;209    		{
;;;210    			PowerOff();
00002e  f7fffffe          BL       PowerOff
;;;211    			SysIdle();
000032  f7fffffe          BL       SysIdle
;;;212    		}
;;;213    		break;
;;;214    
;;;215    		case IR_KEY_MODE:
;;;216    			
;;;217    			Global_datas.key_led_blink = 1;
;;;218    			Global_datas.mode_switching = 1;
;;;219    			drv_5825_mute_pin_set(0);  // mute
;;;220    			srv_key_mode_handler();
;;;221    		break;
;;;222    		case IR_KEY_VOLUME_UP:
;;;223    		case IR_KEY_VOLUME_UP_CP:
;;;224    			Global_datas.key_led_blink = 1;
;;;225    			srv_key_volume_up_handler();
;;;226    		break;
;;;227    		case IR_KEY_VOLUME_DOWN:
;;;228    		case IR_KEY_VOLUME_DOWN_CP:
;;;229    			
;;;230    			Global_datas.key_led_blink = 1;
;;;231    			srv_key_volume_down_handler();
;;;232    		break;
;;;233    		case IR_KEY_NEXT_SONG:
;;;234    			Global_datas.key_led_blink = 1;
;;;235    			
;;;236    			srv_key_next_song_handler();
;;;237    		break;
;;;238    		case IR_KEY_PREV_SONG:
;;;239    			Global_datas.key_led_blink = 1;
;;;240    			
;;;241    			srv_key_prev_song_handler();
;;;242    		break;
;;;243    
;;;244    		case IR_KEY_PLAY_PAUSE:
;;;245    			Global_datas.key_led_blink = 1;
;;;246    
;;;247    		/*	if(i == 0)
;;;248    			{
;;;249    				i = 1;
;;;250    				drv_5825_mute_pin_set(1);  // unmute
;;;251    			}
;;;252    			else 
;;;253    			{
;;;254    				i = 0;
;;;255    				drv_5825_mute_pin_set(0);  // mute
;;;256    			}*/
;;;257    			srv_key_play_pause_handler();
;;;258    		break;
;;;259    
;;;260    
;;;261    		
;;;262    		case IR_KEY_PREV_STATION:
;;;263    			
;;;264    			Global_datas.key_led_blink = 1;
;;;265    			srv_key_prev_station_handler();
;;;266    		break;
;;;267    		case IR_KEY_NEXT_STATION:
;;;268    			
;;;269    			Global_datas.key_led_blink = 1;
;;;270    			srv_key_next_station_handler();
;;;271    		break;
;;;272    		case IR_KEY_EQ_INDOOR:
;;;273    			
;;;274    			Global_datas.key_led_blink = 1;
;;;275    
;;;276    			if(Global_datas.eq_mode != EQ_MODE_INDOOR)
;;;277    			{
;;;278    				Global_datas.eq_mode = EQ_MODE_INDOOR;
;;;279    				srv_key_eq_indoor_switch_handler();
;;;280    				Drv_audio_channel_switch();
;;;281    			}
;;;282    		break;
;;;283    		
;;;284    		case IR_KEY_EQ_OUTDOOR:
;;;285    			
;;;286    			Global_datas.key_led_blink = 1;
;;;287    
;;;288    			if(Global_datas.eq_mode != EQ_MODE_OUTDOOR)
;;;289    			{
;;;290    				Global_datas.eq_mode = EQ_MODE_OUTDOOR;
;;;291    				srv_key_eq_outdoor_switch_handler();
;;;292    				Drv_audio_channel_switch();
;;;293    			}		
;;;294    			
;;;295    		break;
;;;296    
;;;297    		
;;;298    		case IR_KEY_NET_SET:
;;;299    			
;;;300    			Global_datas.key_led_blink = 1;
;;;301    			srv_key_net_config_handler();
;;;302    		break;
;;;303    		
;;;304    		default:
;;;305    		break;
;;;306    	}
;;;307    }
000036  bd10              POP      {r4,pc}
                  |L3.56|
000038  f7fffffe          BL       SYS_Status
00003c  bd10              POP      {r4,pc}
00003e  730a              STRB     r2,[r1,#0xc]          ;217
000040  744a              STRB     r2,[r1,#0x11]         ;218
000042  2000              MOVS     r0,#0                 ;219
000044  f7fffffe          BL       drv_5825_mute_pin_set
000048  f7fffffe          BL       srv_key_mode_handler
00004c  bd10              POP      {r4,pc}
00004e  730a              STRB     r2,[r1,#0xc]          ;224
000050  f7fffffe          BL       srv_key_volume_up_handler
000054  bd10              POP      {r4,pc}
000056  730a              STRB     r2,[r1,#0xc]          ;230
000058  f7fffffe          BL       srv_key_volume_down_handler
00005c  bd10              POP      {r4,pc}
00005e  730a              STRB     r2,[r1,#0xc]          ;234
000060  f7fffffe          BL       srv_key_next_song_handler
000064  bd10              POP      {r4,pc}
000066  730a              STRB     r2,[r1,#0xc]          ;239
000068  f7fffffe          BL       srv_key_prev_song_handler
00006c  bd10              POP      {r4,pc}
00006e  730a              STRB     r2,[r1,#0xc]          ;245
000070  f7fffffe          BL       srv_key_play_pause_handler
000074  bd10              POP      {r4,pc}
000076  730a              STRB     r2,[r1,#0xc]          ;264
000078  f7fffffe          BL       srv_key_prev_station_handler
00007c  bd10              POP      {r4,pc}
00007e  730a              STRB     r2,[r1,#0xc]          ;269
000080  f7fffffe          BL       srv_key_next_station_handler
                  |L3.132|
000084  bd10              POP      {r4,pc}
000086  730a              STRB     r2,[r1,#0xc]          ;274
000088  7b88              LDRB     r0,[r1,#0xe]          ;276  ; Global_datas
00008a  2801              CMP      r0,#1                 ;276
00008c  d0fa              BEQ      |L3.132|
00008e  738a              STRB     r2,[r1,#0xe]          ;278
000090  f7fffffe          BL       srv_key_eq_indoor_switch_handler
000094  e007              B        |L3.166|
000096  730a              STRB     r2,[r1,#0xc]          ;286
000098  7b88              LDRB     r0,[r1,#0xe]          ;288  ; Global_datas
00009a  2802              CMP      r0,#2                 ;288
00009c  d0f2              BEQ      |L3.132|
00009e  2002              MOVS     r0,#2                 ;290
0000a0  7388              STRB     r0,[r1,#0xe]          ;290
0000a2  f7fffffe          BL       srv_key_eq_outdoor_switch_handler
                  |L3.166|
0000a6  f7fffffe          BL       Drv_audio_channel_switch
0000aa  bd10              POP      {r4,pc}
0000ac  730a              STRB     r2,[r1,#0xc]          ;300
0000ae  f7fffffe          BL       srv_key_net_config_handler
0000b2  bd10              POP      {r4,pc}
;;;308    
                          ENDP

                  |L3.180|
                          DCD      Global_datas+0x20

                          AREA ||i.srv_key_mode_handler||, CODE, READONLY, ALIGN=2

                  srv_key_mode_handler PROC
;;;23     
;;;24     void srv_key_mode_handler(void)
000000  b570              PUSH     {r4-r6,lr}
;;;25     {
;;;26     
;;;27     switch(Global_datas.g_mode_status)
000002  4c2b              LDR      r4,|L4.176|
000004  2508              MOVS     r5,#8
000006  7960              LDRB     r0,[r4,#5]  ; Global_datas
;;;28     {
;;;29     	case AUX_MODE:
;;;30     
;;;31     		if(Global_datas.subboard_online) // if subboard online ,turn on fm
;;;32     		{
;;;33     			Core_Msg_Send(MSG_MCU1_SYS_STATE_IND, 0x03 ,0x18,0x00); //fm
;;;34     			
;;;35     			Global_datas.g_mode_status = FM_MODE;
;;;36     			drv_Cmd_Send2NCU031(0x70, 0x13,0x00);// change to fm mode		
;;;37     			drv_audio_FM_Channel(); 
;;;38     		}
;;;39     		else
;;;40     		{
;;;41     			Core_Msg_Send(MSG_MCU1_SYS_STATE_IND, 0x03 ,0x15,0x00); //wifi
;;;42     			
;;;43     			Global_datas.g_mode_status = WIFI_MODE;
000008  2601              MOVS     r6,#1
00000a  0003              MOVS     r3,r0                 ;27
00000c  f7fffffe          BL       __ARM_common_switch8
000010  0b432424          DCB      0x0b,0x43,0x24,0x24
000014  24242434          DCB      0x24,0x24,0x24,0x34
000018  3407431a          DCB      0x34,0x07,0x43,0x1a
00001c  4300              DCB      0x43,0x00
00001e  7c20              LDRB     r0,[r4,#0x10]         ;31  ; Global_datas
000020  2800              CMP      r0,#0                 ;31
000022  d00f              BEQ      |L4.68|
000024  2300              MOVS     r3,#0                 ;33
000026  2218              MOVS     r2,#0x18              ;33
000028  2103              MOVS     r1,#3                 ;33
00002a  2002              MOVS     r0,#2                 ;33
00002c  f7fffffe          BL       Core_Msg_Send
000030  200a              MOVS     r0,#0xa               ;35
000032  7160              STRB     r0,[r4,#5]            ;35
000034  2200              MOVS     r2,#0                 ;36
000036  2113              MOVS     r1,#0x13              ;36
000038  2070              MOVS     r0,#0x70              ;36
00003a  f7fffffe          BL       drv_Cmd_Send2NCU031
00003e  f7fffffe          BL       drv_audio_FM_Channel
;;;44     			drv_Cmd_Send2NCU031(0x70, 0x11,0x00);// change to wifi mode	
;;;45     			drv_audio_4G_Channel(); 
;;;46     		}
;;;47     
;;;48     
;;;49     	break;
;;;50     	
;;;51     	case WIFI_MODE:
;;;52     	case WIFI_CONNECTED_MODE:
;;;53     	case WIFI_CONNECTING_MODE:
;;;54     	case FOURG_MODE:
;;;55     	case FOURG_CONNECTED_MODE:
;;;56     		
;;;57     		Core_Msg_Send(MSG_MCU1_SYS_STATE_IND, 0x03,0x16,0x00); //bt
;;;58     		
;;;59     		Global_datas.g_mode_status = BT_MODE;
;;;60     		drv_Cmd_Send2NCU031(0x70, 0x10,0x00);// change to bt mode
;;;61     		drv_audio_4G_Channel();   // BT and 4G wifi use the same channel
;;;62     		
;;;63     	break;
;;;64     	
;;;65     	case BT_MODE:
;;;66     	case BT_CONNECTED_MODE:
;;;67     
;;;68     
;;;69     		Core_Msg_Send(MSG_MCU1_SYS_STATE_IND, 0x03 ,0x17,0x00); //aux
;;;70     		
;;;71     		Global_datas.g_mode_status = AUX_MODE;
;;;72     		drv_Cmd_Send2NCU031(0x70, 0x12,0x00);// change to aux mode
;;;73     		drv_audio_AuxIn_Channel(); 
;;;74     		
;;;75     	break;
;;;76     	
;;;77     	case FM_MODE:
;;;78     		
;;;79     		Core_Msg_Send(MSG_MCU1_SYS_STATE_IND, 0x03 ,0x15,0x00); //wifi
;;;80     		
;;;81     		Global_datas.g_mode_status = WIFI_MODE;
;;;82     		drv_Cmd_Send2NCU031(0x70, 0x11,0x00);// change to wifi/4g mode
;;;83     		drv_audio_4G_Channel(); 
;;;84     	break;
;;;85     	
;;;86     	default:
;;;87     		Core_Msg_Send(MSG_MCU1_SYS_STATE_IND, 0x03 ,0x17,0x00); //aux
;;;88     		
;;;89     		drv_Cmd_Send2NCU031(0x70, 0x12,0x00);// change to aux mode	
;;;90     		Global_datas.g_mode_status = AUX_MODE;
;;;91     		drv_audio_AuxIn_Channel(); 
;;;92     	break;
;;;93     }
;;;94     
;;;95     
;;;96     
;;;97     /*
;;;98     	switch(Global_datas.g_mode_status)
;;;99     	{
;;;100    		case AUX_MODE:
;;;101    		case LOUD_SPEAKER_MODE:
;;;102    			Core_Msg_Send(MSG_MCU1_SYS_STATE_IND, 0x03,0x16,0x00); //bt
;;;103    			drv_Cmd_Send2NCU031(0x70, 0x10,0x00);// change to bt mode
;;;104    		break;
;;;105    		
;;;106    		case WIFI_MODE:
;;;107    		case WIFI_CONNECTED_MODE:
;;;108    		case WIFI_CONNECTING_MODE:
;;;109    		case FOURG_MODE:
;;;110    		case FOURG_CONNECTED_MODE:
;;;111    			Core_Msg_Send(MSG_MCU1_SYS_STATE_IND, 0x03 ,0x17,0x00); //aux
;;;112    			drv_Cmd_Send2NCU031(0x70, 0x12,0x00);// change to aux mode
;;;113    			
;;;114    		break;
;;;115    		
;;;116    	    case BT_MODE:
;;;117    	    case BT_CONNECTED_MODE:
;;;118    			Core_Msg_Send(MSG_MCU1_SYS_STATE_IND, 0x03 ,0x15,0x00); //wifi
;;;119    			drv_Cmd_Send2NCU031(0x70, 0x11,0x00);// change to wifi mode
;;;120    		break;
;;;121    		
;;;122    		case FM_MODE:
;;;123    			Core_Msg_Send(MSG_MCU1_SYS_STATE_IND, 0x03 ,0x15,0x00); //wifi
;;;124    			drv_Cmd_Send2NCU031(0x70, 0x11,0x00);// change to wifi/4g mode
;;;125    		break;
;;;126    		
;;;127    		default:
;;;128    			Core_Msg_Send(MSG_MCU1_SYS_STATE_IND, 0x03 ,0x17,0x00); //aux
;;;129    			drv_Cmd_Send2NCU031(0x70, 0x12,0x00);// change to aux mode	
;;;130    			Global_datas.g_mode_status = AUX_MODE;
;;;131    		break;
;;;132    	}
;;;133    
;;;134    	*/
;;;135    }
000042  bd70              POP      {r4-r6,pc}
                  |L4.68|
000044  2300              MOVS     r3,#0                 ;41
000046  2215              MOVS     r2,#0x15              ;41
000048  2103              MOVS     r1,#3                 ;41
00004a  2002              MOVS     r0,#2                 ;41
00004c  f7fffffe          BL       Core_Msg_Send
000050  2200              MOVS     r2,#0                 ;44
000052  7166              STRB     r6,[r4,#5]            ;43
000054  2111              MOVS     r1,#0x11              ;44
000056  e009              B        |L4.108|
000058  2300              MOVS     r3,#0                 ;57
00005a  2216              MOVS     r2,#0x16              ;57
00005c  2103              MOVS     r1,#3                 ;57
00005e  2002              MOVS     r0,#2                 ;57
000060  f7fffffe          BL       Core_Msg_Send
000064  2006              MOVS     r0,#6                 ;59
000066  2200              MOVS     r2,#0                 ;60
000068  7160              STRB     r0,[r4,#5]            ;59
00006a  2110              MOVS     r1,#0x10              ;60
                  |L4.108|
00006c  2070              MOVS     r0,#0x70              ;82
00006e  f7fffffe          BL       drv_Cmd_Send2NCU031
000072  f7fffffe          BL       drv_audio_4G_Channel
000076  bd70              POP      {r4-r6,pc}
000078  2300              MOVS     r3,#0                 ;69
00007a  2217              MOVS     r2,#0x17              ;69
00007c  2103              MOVS     r1,#3                 ;69
00007e  2002              MOVS     r0,#2                 ;69
000080  f7fffffe          BL       Core_Msg_Send
000084  7165              STRB     r5,[r4,#5]            ;71
000086  2200              MOVS     r2,#0                 ;72
000088  2112              MOVS     r1,#0x12              ;72
00008a  2070              MOVS     r0,#0x70              ;72
00008c  f7fffffe          BL       drv_Cmd_Send2NCU031
                  |L4.144|
000090  f7fffffe          BL       drv_audio_AuxIn_Channel
000094  bd70              POP      {r4-r6,pc}
000096  2300              MOVS     r3,#0                 ;87
000098  2217              MOVS     r2,#0x17              ;87
00009a  2103              MOVS     r1,#3                 ;87
00009c  2002              MOVS     r0,#2                 ;87
00009e  f7fffffe          BL       Core_Msg_Send
0000a2  2200              MOVS     r2,#0                 ;89
0000a4  2112              MOVS     r1,#0x12              ;89
0000a6  2070              MOVS     r0,#0x70              ;89
0000a8  f7fffffe          BL       drv_Cmd_Send2NCU031
0000ac  7165              STRB     r5,[r4,#5]            ;90
0000ae  e7ef              B        |L4.144|
;;;136    
                          ENDP

                  |L4.176|
                          DCD      Global_datas+0x20

                          AREA ||i.srv_key_net_config_handler||, CODE, READONLY, ALIGN=1

                  srv_key_net_config_handler PROC
;;;189    
;;;190    void srv_key_net_config_handler(void)
000000  b510              PUSH     {r4,lr}
;;;191    {
;;;192    	Core_Msg_Send(MSG_MCU1_SYS_STATE_IND, 0x03,0x21,0x00); //net config
000002  2300              MOVS     r3,#0
000004  2221              MOVS     r2,#0x21
000006  2103              MOVS     r1,#3
000008  2002              MOVS     r0,#2
00000a  f7fffffe          BL       Core_Msg_Send
;;;193    }
00000e  bd10              POP      {r4,pc}
;;;194    
                          ENDP


                          AREA ||i.srv_key_next_song_handler||, CODE, READONLY, ALIGN=1

                  srv_key_next_song_handler PROC
;;;146    
;;;147    void srv_key_next_song_handler(void)
000000  b510              PUSH     {r4,lr}
;;;148    {
;;;149    	Core_Msg_Send(MSG_MCU1_SYS_STATE_IND, 0x03,0x0d,0x00); //
000002  2300              MOVS     r3,#0
000004  220d              MOVS     r2,#0xd
000006  2103              MOVS     r1,#3
000008  2002              MOVS     r0,#2
00000a  f7fffffe          BL       Core_Msg_Send
;;;150    	drv_Cmd_Send2NCU031(0x70, 0x19,0x00);
00000e  2200              MOVS     r2,#0
000010  2119              MOVS     r1,#0x19
000012  2070              MOVS     r0,#0x70
000014  f7fffffe          BL       drv_Cmd_Send2NCU031
;;;151    }
000018  bd10              POP      {r4,pc}
;;;152    
                          ENDP


                          AREA ||i.srv_key_next_station_handler||, CODE, READONLY, ALIGN=1

                  srv_key_next_station_handler PROC
;;;172    
;;;173    void srv_key_next_station_handler(void)
000000  b510              PUSH     {r4,lr}
;;;174    {
;;;175    	Core_Msg_Send(MSG_MCU1_SYS_STATE_IND, 0x03,0x31,0x00); //next piece
000002  2300              MOVS     r3,#0
000004  2231              MOVS     r2,#0x31
000006  2103              MOVS     r1,#3
000008  2002              MOVS     r0,#2
00000a  f7fffffe          BL       Core_Msg_Send
;;;176    	drv_Cmd_Send2NCU031(0x70, 0x1b,0x00);
00000e  2200              MOVS     r2,#0
000010  211b              MOVS     r1,#0x1b
000012  2070              MOVS     r0,#0x70
000014  f7fffffe          BL       drv_Cmd_Send2NCU031
;;;177    }
000018  bd10              POP      {r4,pc}
;;;178    
                          ENDP


                          AREA ||i.srv_key_play_pause_handler||, CODE, READONLY, ALIGN=1

                  srv_key_play_pause_handler PROC
;;;159    
;;;160    void srv_key_play_pause_handler(void)
000000  b510              PUSH     {r4,lr}
;;;161    {
;;;162    	Core_Msg_Send(MSG_MCU1_SYS_STATE_IND, 0x03,0x56,0x00); //
000002  2300              MOVS     r3,#0
000004  2256              MOVS     r2,#0x56
000006  2103              MOVS     r1,#3
000008  2002              MOVS     r0,#2
00000a  f7fffffe          BL       Core_Msg_Send
;;;163    	drv_Cmd_Send2NCU031(0x70, 0x17,0x00);
00000e  2200              MOVS     r2,#0
000010  2117              MOVS     r1,#0x17
000012  2070              MOVS     r0,#0x70
000014  f7fffffe          BL       drv_Cmd_Send2NCU031
;;;164    }
000018  bd10              POP      {r4,pc}
;;;165    
                          ENDP


                          AREA ||i.srv_key_prev_song_handler||, CODE, READONLY, ALIGN=1

                  srv_key_prev_song_handler PROC
;;;152    
;;;153    void srv_key_prev_song_handler(void)
000000  b510              PUSH     {r4,lr}
;;;154    {
;;;155    	Core_Msg_Send(MSG_MCU1_SYS_STATE_IND, 0x03,0x0e,0x00); //
000002  2300              MOVS     r3,#0
000004  220e              MOVS     r2,#0xe
000006  2103              MOVS     r1,#3
000008  2002              MOVS     r0,#2
00000a  f7fffffe          BL       Core_Msg_Send
;;;156    	drv_Cmd_Send2NCU031(0x70, 0x18,0x00);
00000e  2200              MOVS     r2,#0
000010  2118              MOVS     r1,#0x18
000012  2070              MOVS     r0,#0x70
000014  f7fffffe          BL       drv_Cmd_Send2NCU031
;;;157    }
000018  bd10              POP      {r4,pc}
;;;158    
                          ENDP


                          AREA ||i.srv_key_prev_station_handler||, CODE, READONLY, ALIGN=1

                  srv_key_prev_station_handler PROC
;;;166    
;;;167    void srv_key_prev_station_handler(void)
000000  b510              PUSH     {r4,lr}
;;;168    {
;;;169    	Core_Msg_Send(MSG_MCU1_SYS_STATE_IND, 0x03,0x32,0x00); //last piece
000002  2300              MOVS     r3,#0
000004  2232              MOVS     r2,#0x32
000006  2103              MOVS     r1,#3
000008  2002              MOVS     r0,#2
00000a  f7fffffe          BL       Core_Msg_Send
;;;170    	drv_Cmd_Send2NCU031(0x70, 0x1a,0x00);
00000e  2200              MOVS     r2,#0
000010  211a              MOVS     r1,#0x1a
000012  2070              MOVS     r0,#0x70
000014  f7fffffe          BL       drv_Cmd_Send2NCU031
;;;171    }
000018  bd10              POP      {r4,pc}
;;;172    
                          ENDP


                          AREA ||i.srv_key_volume_down_handler||, CODE, READONLY, ALIGN=1

                  srv_key_volume_down_handler PROC
;;;141    
;;;142    void srv_key_volume_down_handler(void)
000000  b510              PUSH     {r4,lr}
;;;143    {
;;;144    	Core_Msg_Send(MSG_MCU1_SYS_STATE_IND, 0x03,0x03,0x00); //vol-
000002  2203              MOVS     r2,#3
000004  2300              MOVS     r3,#0
000006  4611              MOV      r1,r2
000008  2002              MOVS     r0,#2
00000a  f7fffffe          BL       Core_Msg_Send
;;;145    }
00000e  bd10              POP      {r4,pc}
;;;146    
                          ENDP


                          AREA ||i.srv_key_volume_up_handler||, CODE, READONLY, ALIGN=1

                  srv_key_volume_up_handler PROC
;;;136    
;;;137    void srv_key_volume_up_handler(void)
000000  b510              PUSH     {r4,lr}
;;;138    {
;;;139    	Core_Msg_Send(MSG_MCU1_SYS_STATE_IND, 0x03,0x02,0x00); //vol+
000002  2202              MOVS     r2,#2
000004  2300              MOVS     r3,#0
000006  2103              MOVS     r1,#3
000008  4610              MOV      r0,r2
00000a  f7fffffe          BL       Core_Msg_Send
;;;140    }
00000e  bd10              POP      {r4,pc}
;;;141    
                          ENDP


                          AREA ||i.__ARM_common_switch8||, COMGROUP=__ARM_common_switch8, CODE, READONLY, ALIGN=1

                  __ARM_common_switch8 PROC
000000  b430              PUSH     {r4,r5}
000002  4674              MOV      r4,lr
000004  1e64              SUBS     r4,r4,#1
000006  7825              LDRB     r5,[r4,#0]
000008  1c64              ADDS     r4,r4,#1
00000a  42ab              CMP      r3,r5
00000c  d200              BCS      |L69.16|
00000e  461d              MOV      r5,r3
                  |L69.16|
000010  5d63              LDRB     r3,[r4,r5]
000012  005b              LSLS     r3,r3,#1
000014  18e3              ADDS     r3,r4,r3
000016  bc30              POP      {r4,r5}
000018  4718              BX       r3
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\src\\server\\key\\srv_key.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___9_srv_key_c_69717a1a____REV16|
#line 388 "..\\lib\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___9_srv_key_c_69717a1a____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___9_srv_key_c_69717a1a____REVSH|
#line 402
|__asm___9_srv_key_c_69717a1a____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
