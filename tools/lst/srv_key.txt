; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\srv_key.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\srv_key.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\lib\CMSIS\Include -I..\lib\Device\Nuvoton\NUC029xGE\Include -I..\lib\StdDriver\inc -I..\src\core\include -I..\src\driver\include -I..\src\io\include -I..\src\global -I..\src\server\include -I..\src\driver\audio -D__UVISION_VERSION=522 --omf_browse=.\obj\srv_key.crf ..\src\server\key\srv_key.c]
                          THUMB

                          AREA ||i.srv_key_eq_indoor_switch_handler||, CODE, READONLY, ALIGN=1

                  srv_key_eq_indoor_switch_handler PROC
;;;147    
;;;148     void srv_key_eq_indoor_switch_handler(void)
000000  b510              PUSH     {r4,lr}
;;;149    {
;;;150    	Core_Msg_Send(MSG_MCU1_SYS_STATE_IND, 0xc1,0x00,0x00); //indoor
000002  2300              MOVS     r3,#0
000004  461a              MOV      r2,r3
000006  21c1              MOVS     r1,#0xc1
000008  2002              MOVS     r0,#2
00000a  f7fffffe          BL       Core_Msg_Send
;;;151    }
00000e  bd10              POP      {r4,pc}
;;;152    
                          ENDP


                          AREA ||i.srv_key_eq_outdoor_switch_handler||, CODE, READONLY, ALIGN=1

                  srv_key_eq_outdoor_switch_handler PROC
;;;152    
;;;153    void srv_key_eq_outdoor_switch_handler(void)
000000  b510              PUSH     {r4,lr}
;;;154    {
;;;155    	Core_Msg_Send(MSG_MCU1_SYS_STATE_IND, 0xc2,0x00,0x00); //outdoor
000002  2300              MOVS     r3,#0
000004  461a              MOV      r2,r3
000006  21c2              MOVS     r1,#0xc2
000008  2002              MOVS     r0,#2
00000a  f7fffffe          BL       Core_Msg_Send
;;;156    }
00000e  bd10              POP      {r4,pc}
;;;157    
                          ENDP


                          AREA ||i.srv_key_handler||, CODE, READONLY, ALIGN=2

                  srv_key_handler PROC
;;;163    
;;;164    void srv_key_handler(void)
000000  b510              PUSH     {r4,lr}
;;;165    {	
;;;166    	switch(GetIrKey())
000002  f7fffffe          BL       GetIrKey
;;;167    	{
;;;168    		case IR_KEY_POWER:
;;;169    			
;;;170    		Global_datas.key_led_blink = 1;
000006  2201              MOVS     r2,#1
000008  4927              LDR      r1,|L3.168|
00000a  0003              MOVS     r3,r0                 ;166
00000c  f7fffffe          BL       __ARM_common_switch8
000010  0e100814          DCB      0x0e,0x10,0x08,0x14
000014  181c2420          DCB      0x18,0x1c,0x24,0x20
000018  282c3010          DCB      0x28,0x2c,0x30,0x10
00001c  343c4710          DCB      0x34,0x3c,0x47,0x10
000020  730a              STRB     r2,[r1,#0xc]
;;;171    		if(Global_datas.g_mode_status == POWER_IDLE_MODE)
000022  7948              LDRB     r0,[r1,#5]  ; Global_datas
000024  280e              CMP      r0,#0xe
000026  d004              BEQ      |L3.50|
;;;172    		{
;;;173    			SYS_Status();
;;;174    		}
;;;175    		
;;;176    		else
;;;177    		{
;;;178    			PowerOff();
000028  f7fffffe          BL       PowerOff
;;;179    			SysIdle();
00002c  f7fffffe          BL       SysIdle
;;;180    		}
;;;181    		break;
;;;182    
;;;183    		case IR_KEY_MODE:
;;;184    			
;;;185    			Global_datas.key_led_blink = 1;
;;;186    			srv_key_mode_handler();
;;;187    		break;
;;;188    		case IR_KEY_VOLUME_UP:
;;;189    			
;;;190    			Global_datas.key_led_blink = 1;
;;;191    			srv_key_volume_up_handler();
;;;192    		break;
;;;193    		case IR_KEY_VOLUME_DOWN:
;;;194    			
;;;195    			Global_datas.key_led_blink = 1;
;;;196    			srv_key_volume_down_handler();
;;;197    		break;
;;;198    		case IR_KEY_NEXT_SONG:
;;;199    			Global_datas.key_led_blink = 1;
;;;200    			
;;;201    			srv_key_next_song_handler();
;;;202    		break;
;;;203    		case IR_KEY_PREV_SONG:
;;;204    			Global_datas.key_led_blink = 1;
;;;205    			
;;;206    			srv_key_prev_song_handler();
;;;207    		break;
;;;208    
;;;209    		case IR_KEY_PLAY_PAUSE:
;;;210    			Global_datas.key_led_blink = 1;
;;;211    			
;;;212    			srv_key_play_pause_handler();
;;;213    		break;
;;;214    
;;;215    
;;;216    		
;;;217    		case IR_KEY_PREV_STATION:
;;;218    			
;;;219    			Global_datas.key_led_blink = 1;
;;;220    			srv_key_prev_station_handler();
;;;221    		break;
;;;222    		case IR_KEY_NEXT_STATION:
;;;223    			
;;;224    			Global_datas.key_led_blink = 1;
;;;225    			srv_key_next_station_handler();
;;;226    		break;
;;;227    		case IR_KEY_EQ_INDOOR:
;;;228    			
;;;229    			Global_datas.key_led_blink = 1;
;;;230    
;;;231    			if(Global_datas.eq_mode != EQ_MODE_INDOOR)
;;;232    			{
;;;233    				Global_datas.eq_mode = EQ_MODE_INDOOR;
;;;234    				srv_key_eq_indoor_switch_handler();
;;;235    				Drv_audio_channel_switch();
;;;236    			}
;;;237    		break;
;;;238    		
;;;239    		case IR_KEY_EQ_OUTDOOR:
;;;240    			
;;;241    			Global_datas.key_led_blink = 1;
;;;242    
;;;243    			if(Global_datas.eq_mode != EQ_MODE_OUTDOOR)
;;;244    			{
;;;245    				Global_datas.eq_mode = EQ_MODE_OUTDOOR;
;;;246    				srv_key_eq_outdoor_switch_handler();
;;;247    				Drv_audio_channel_switch();
;;;248    			}		
;;;249    			
;;;250    		break;
;;;251    
;;;252    		
;;;253    		case IR_KEY_NET_SET:
;;;254    			
;;;255    			Global_datas.key_led_blink = 1;
;;;256    			srv_key_net_config_handler();
;;;257    		break;
;;;258    		
;;;259    		default:
;;;260    		break;
;;;261    	}
;;;262    }
000030  bd10              POP      {r4,pc}
                  |L3.50|
000032  f7fffffe          BL       SYS_Status
000036  bd10              POP      {r4,pc}
000038  730a              STRB     r2,[r1,#0xc]          ;185
00003a  f7fffffe          BL       srv_key_mode_handler
00003e  bd10              POP      {r4,pc}
000040  730a              STRB     r2,[r1,#0xc]          ;190
000042  f7fffffe          BL       srv_key_volume_up_handler
000046  bd10              POP      {r4,pc}
000048  730a              STRB     r2,[r1,#0xc]          ;195
00004a  f7fffffe          BL       srv_key_volume_down_handler
00004e  bd10              POP      {r4,pc}
000050  730a              STRB     r2,[r1,#0xc]          ;199
000052  f7fffffe          BL       srv_key_next_song_handler
000056  bd10              POP      {r4,pc}
000058  730a              STRB     r2,[r1,#0xc]          ;204
00005a  f7fffffe          BL       srv_key_prev_song_handler
00005e  bd10              POP      {r4,pc}
000060  730a              STRB     r2,[r1,#0xc]          ;210
000062  f7fffffe          BL       srv_key_play_pause_handler
000066  bd10              POP      {r4,pc}
000068  730a              STRB     r2,[r1,#0xc]          ;219
00006a  f7fffffe          BL       srv_key_prev_station_handler
00006e  bd10              POP      {r4,pc}
000070  730a              STRB     r2,[r1,#0xc]          ;224
000072  f7fffffe          BL       srv_key_next_station_handler
                  |L3.118|
000076  bd10              POP      {r4,pc}
000078  730a              STRB     r2,[r1,#0xc]          ;229
00007a  7b88              LDRB     r0,[r1,#0xe]          ;231  ; Global_datas
00007c  2801              CMP      r0,#1                 ;231
00007e  d0fa              BEQ      |L3.118|
000080  738a              STRB     r2,[r1,#0xe]          ;233
000082  f7fffffe          BL       srv_key_eq_indoor_switch_handler
000086  e007              B        |L3.152|
000088  730a              STRB     r2,[r1,#0xc]          ;241
00008a  7b88              LDRB     r0,[r1,#0xe]          ;243  ; Global_datas
00008c  2802              CMP      r0,#2                 ;243
00008e  d0f2              BEQ      |L3.118|
000090  2002              MOVS     r0,#2                 ;245
000092  7388              STRB     r0,[r1,#0xe]          ;245
000094  f7fffffe          BL       srv_key_eq_outdoor_switch_handler
                  |L3.152|
000098  f7fffffe          BL       Drv_audio_channel_switch
00009c  bd10              POP      {r4,pc}
00009e  730a              STRB     r2,[r1,#0xc]          ;255
0000a0  f7fffffe          BL       srv_key_net_config_handler
0000a4  bd10              POP      {r4,pc}
;;;263    
                          ENDP

0000a6  0000              DCW      0x0000
                  |L3.168|
                          DCD      Global_datas+0x20

                          AREA ||i.srv_key_mode_handler||, CODE, READONLY, ALIGN=2

                  srv_key_mode_handler PROC
;;;23     
;;;24     void srv_key_mode_handler(void)
000000  b510              PUSH     {r4,lr}
;;;25     {
;;;26     
;;;27     switch(Global_datas.g_mode_status)
000002  4c1c              LDR      r4,|L4.116|
000004  7960              LDRB     r0,[r4,#5]  ; Global_datas
000006  0003              MOVS     r3,r0
000008  f7fffffe          BL       __ARM_common_switch8
00000c  0b251010          DCB      0x0b,0x25,0x10,0x10
000010  10101019          DCB      0x10,0x10,0x10,0x19
000014  19072507          DCB      0x19,0x07,0x25,0x07
000018  2500              DCB      0x25,0x00
;;;28     {
;;;29     	case AUX_MODE:
;;;30     
;;;31     		Core_Msg_Send(MSG_MCU1_SYS_STATE_IND, 0x03 ,0x15,0x00); //wifi
00001a  2300              MOVS     r3,#0
00001c  2215              MOVS     r2,#0x15
00001e  2103              MOVS     r1,#3
000020  2002              MOVS     r0,#2
000022  f7fffffe          BL       Core_Msg_Send
;;;32     		drv_Cmd_Send2NCU031(0x70, 0x11,0x00);// change to wifi mode	
000026  2200              MOVS     r2,#0
000028  2111              MOVS     r1,#0x11
;;;33     
;;;34     	break;
00002a  e010              B        |L4.78|
;;;35     	
;;;36     	case WIFI_MODE:
;;;37     	case WIFI_CONNECTED_MODE:
;;;38     	case WIFI_CONNECTING_MODE:
;;;39     	case FOURG_MODE:
;;;40     	case FOURG_CONNECTED_MODE:
;;;41     		
;;;42     		Core_Msg_Send(MSG_MCU1_SYS_STATE_IND, 0x03,0x16,0x00); //bt
00002c  2300              MOVS     r3,#0
00002e  2216              MOVS     r2,#0x16
000030  2103              MOVS     r1,#3
000032  2002              MOVS     r0,#2
000034  f7fffffe          BL       Core_Msg_Send
;;;43     		drv_Cmd_Send2NCU031(0x70, 0x10,0x00);// change to bt mode
000038  2200              MOVS     r2,#0
00003a  2110              MOVS     r1,#0x10
;;;44     		
;;;45     	break;
00003c  e007              B        |L4.78|
;;;46     	
;;;47     	case BT_MODE:
;;;48     	case BT_CONNECTED_MODE:
;;;49     
;;;50     
;;;51     		Core_Msg_Send(MSG_MCU1_SYS_STATE_IND, 0x03 ,0x17,0x00); //aux
00003e  2300              MOVS     r3,#0
000040  2217              MOVS     r2,#0x17
000042  2103              MOVS     r1,#3
000044  2002              MOVS     r0,#2
000046  f7fffffe          BL       Core_Msg_Send
;;;52     		drv_Cmd_Send2NCU031(0x70, 0x12,0x00);// change to aux mode
00004a  2200              MOVS     r2,#0
00004c  2112              MOVS     r1,#0x12
                  |L4.78|
;;;53     	break;
;;;54     	
;;;55     	case FM_MODE:
;;;56     		Core_Msg_Send(MSG_MCU1_SYS_STATE_IND, 0x03 ,0x15,0x00); //wifi
;;;57     		drv_Cmd_Send2NCU031(0x70, 0x11,0x00);// change to wifi/4g mode
00004e  2070              MOVS     r0,#0x70
000050  f7fffffe          BL       drv_Cmd_Send2NCU031
;;;58     	break;
;;;59     	
;;;60     	default:
;;;61     		Core_Msg_Send(MSG_MCU1_SYS_STATE_IND, 0x03 ,0x17,0x00); //aux
;;;62     		drv_Cmd_Send2NCU031(0x70, 0x12,0x00);// change to aux mode	
;;;63     		Global_datas.g_mode_status = AUX_MODE;
;;;64     	break;
;;;65     }
;;;66     
;;;67     
;;;68     
;;;69     /*
;;;70     	switch(Global_datas.g_mode_status)
;;;71     	{
;;;72     		case AUX_MODE:
;;;73     		case LOUD_SPEAKER_MODE:
;;;74     			Core_Msg_Send(MSG_MCU1_SYS_STATE_IND, 0x03,0x16,0x00); //bt
;;;75     			drv_Cmd_Send2NCU031(0x70, 0x10,0x00);// change to bt mode
;;;76     		break;
;;;77     		
;;;78     		case WIFI_MODE:
;;;79     		case WIFI_CONNECTED_MODE:
;;;80     		case WIFI_CONNECTING_MODE:
;;;81     		case FOURG_MODE:
;;;82     		case FOURG_CONNECTED_MODE:
;;;83     			Core_Msg_Send(MSG_MCU1_SYS_STATE_IND, 0x03 ,0x17,0x00); //aux
;;;84     			drv_Cmd_Send2NCU031(0x70, 0x12,0x00);// change to aux mode
;;;85     			
;;;86     		break;
;;;87     		
;;;88     	    case BT_MODE:
;;;89     	    case BT_CONNECTED_MODE:
;;;90     			Core_Msg_Send(MSG_MCU1_SYS_STATE_IND, 0x03 ,0x15,0x00); //wifi
;;;91     			drv_Cmd_Send2NCU031(0x70, 0x11,0x00);// change to wifi mode
;;;92     		break;
;;;93     		
;;;94     		case FM_MODE:
;;;95     			Core_Msg_Send(MSG_MCU1_SYS_STATE_IND, 0x03 ,0x15,0x00); //wifi
;;;96     			drv_Cmd_Send2NCU031(0x70, 0x11,0x00);// change to wifi/4g mode
;;;97     		break;
;;;98     		
;;;99     		default:
;;;100    			Core_Msg_Send(MSG_MCU1_SYS_STATE_IND, 0x03 ,0x17,0x00); //aux
;;;101    			drv_Cmd_Send2NCU031(0x70, 0x12,0x00);// change to aux mode	
;;;102    			Global_datas.g_mode_status = AUX_MODE;
;;;103    		break;
;;;104    	}
;;;105    
;;;106    	*/
;;;107    }
000054  bd10              POP      {r4,pc}
000056  2300              MOVS     r3,#0                 ;61
000058  2217              MOVS     r2,#0x17              ;61
00005a  2103              MOVS     r1,#3                 ;61
00005c  2002              MOVS     r0,#2                 ;61
00005e  f7fffffe          BL       Core_Msg_Send
000062  2200              MOVS     r2,#0                 ;62
000064  2112              MOVS     r1,#0x12              ;62
000066  2070              MOVS     r0,#0x70              ;62
000068  f7fffffe          BL       drv_Cmd_Send2NCU031
00006c  2008              MOVS     r0,#8                 ;63
00006e  7160              STRB     r0,[r4,#5]            ;63
000070  bd10              POP      {r4,pc}
;;;108    
                          ENDP

000072  0000              DCW      0x0000
                  |L4.116|
                          DCD      Global_datas+0x20

                          AREA ||i.srv_key_net_config_handler||, CODE, READONLY, ALIGN=1

                  srv_key_net_config_handler PROC
;;;158    
;;;159    void srv_key_net_config_handler(void)
000000  b510              PUSH     {r4,lr}
;;;160    {
;;;161    	Core_Msg_Send(MSG_MCU1_SYS_STATE_IND, 0x03,0x21,0x00); //net config
000002  2300              MOVS     r3,#0
000004  2221              MOVS     r2,#0x21
000006  2103              MOVS     r1,#3
000008  2002              MOVS     r0,#2
00000a  f7fffffe          BL       Core_Msg_Send
;;;162    }
00000e  bd10              POP      {r4,pc}
;;;163    
                          ENDP


                          AREA ||i.srv_key_next_song_handler||, CODE, READONLY, ALIGN=1

                  srv_key_next_song_handler PROC
;;;118    
;;;119    void srv_key_next_song_handler(void)
000000  b510              PUSH     {r4,lr}
;;;120    {
;;;121    	Core_Msg_Send(MSG_MCU1_SYS_STATE_IND, 0x03,0x0d,0x00); //
000002  2300              MOVS     r3,#0
000004  220d              MOVS     r2,#0xd
000006  2103              MOVS     r1,#3
000008  2002              MOVS     r0,#2
00000a  f7fffffe          BL       Core_Msg_Send
;;;122    }
00000e  bd10              POP      {r4,pc}
;;;123    
                          ENDP


                          AREA ||i.srv_key_next_station_handler||, CODE, READONLY, ALIGN=1

                  srv_key_next_station_handler PROC
;;;141    
;;;142    void srv_key_next_station_handler(void)
000000  b510              PUSH     {r4,lr}
;;;143    {
;;;144    	//Core_Msg_Send(MSG_MCU1_SYS_STATE_IND, 0x03,0x0d,0x00); //next piece
;;;145    	Core_Msg_Send(MSG_MCU1_SYS_STATE_IND, 0x03,0x31,0x00); //next piece
000002  2300              MOVS     r3,#0
000004  2231              MOVS     r2,#0x31
000006  2103              MOVS     r1,#3
000008  2002              MOVS     r0,#2
00000a  f7fffffe          BL       Core_Msg_Send
;;;146    }
00000e  bd10              POP      {r4,pc}
;;;147    
                          ENDP


                          AREA ||i.srv_key_play_pause_handler||, CODE, READONLY, ALIGN=1

                  srv_key_play_pause_handler PROC
;;;129    
;;;130    void srv_key_play_pause_handler(void)
000000  b510              PUSH     {r4,lr}
;;;131    {
;;;132    	Core_Msg_Send(MSG_MCU1_SYS_STATE_IND, 0x03,0x56,0x00); //
000002  2300              MOVS     r3,#0
000004  2256              MOVS     r2,#0x56
000006  2103              MOVS     r1,#3
000008  2002              MOVS     r0,#2
00000a  f7fffffe          BL       Core_Msg_Send
;;;133    }
00000e  bd10              POP      {r4,pc}
;;;134    
                          ENDP


                          AREA ||i.srv_key_prev_song_handler||, CODE, READONLY, ALIGN=1

                  srv_key_prev_song_handler PROC
;;;123    
;;;124    void srv_key_prev_song_handler(void)
000000  b510              PUSH     {r4,lr}
;;;125    {
;;;126    	Core_Msg_Send(MSG_MCU1_SYS_STATE_IND, 0x03,0x0e,0x00); //
000002  2300              MOVS     r3,#0
000004  220e              MOVS     r2,#0xe
000006  2103              MOVS     r1,#3
000008  2002              MOVS     r0,#2
00000a  f7fffffe          BL       Core_Msg_Send
;;;127    }
00000e  bd10              POP      {r4,pc}
;;;128    
                          ENDP


                          AREA ||i.srv_key_prev_station_handler||, CODE, READONLY, ALIGN=1

                  srv_key_prev_station_handler PROC
;;;135    
;;;136    void srv_key_prev_station_handler(void)
000000  b510              PUSH     {r4,lr}
;;;137    {
;;;138    	//Core_Msg_Send(MSG_MCU1_SYS_STATE_IND, 0x03,0x0e,0x00); //last piece
;;;139    	Core_Msg_Send(MSG_MCU1_SYS_STATE_IND, 0x03,0x32,0x00); //last piece
000002  2300              MOVS     r3,#0
000004  2232              MOVS     r2,#0x32
000006  2103              MOVS     r1,#3
000008  2002              MOVS     r0,#2
00000a  f7fffffe          BL       Core_Msg_Send
;;;140    }
00000e  bd10              POP      {r4,pc}
;;;141    
                          ENDP


                          AREA ||i.srv_key_volume_down_handler||, CODE, READONLY, ALIGN=1

                  srv_key_volume_down_handler PROC
;;;113    
;;;114    void srv_key_volume_down_handler(void)
000000  b510              PUSH     {r4,lr}
;;;115    {
;;;116    	Core_Msg_Send(MSG_MCU1_SYS_STATE_IND, 0x03,0x03,0x00); //vol-
000002  2203              MOVS     r2,#3
000004  2300              MOVS     r3,#0
000006  4611              MOV      r1,r2
000008  2002              MOVS     r0,#2
00000a  f7fffffe          BL       Core_Msg_Send
;;;117    }
00000e  bd10              POP      {r4,pc}
;;;118    
                          ENDP


                          AREA ||i.srv_key_volume_up_handler||, CODE, READONLY, ALIGN=1

                  srv_key_volume_up_handler PROC
;;;108    
;;;109    void srv_key_volume_up_handler(void)
000000  b510              PUSH     {r4,lr}
;;;110    {
;;;111    	Core_Msg_Send(MSG_MCU1_SYS_STATE_IND, 0x03,0x02,0x00); //vol+
000002  2202              MOVS     r2,#2
000004  2300              MOVS     r3,#0
000006  2103              MOVS     r1,#3
000008  4610              MOV      r0,r2
00000a  f7fffffe          BL       Core_Msg_Send
;;;112    }
00000e  bd10              POP      {r4,pc}
;;;113    
                          ENDP


                          AREA ||i.__ARM_common_switch8||, COMGROUP=__ARM_common_switch8, CODE, READONLY, ALIGN=1

                  __ARM_common_switch8 PROC
000000  b430              PUSH     {r4,r5}
000002  4674              MOV      r4,lr
000004  1e64              SUBS     r4,r4,#1
000006  7825              LDRB     r5,[r4,#0]
000008  1c64              ADDS     r4,r4,#1
00000a  42ab              CMP      r3,r5
00000c  d200              BCS      |L69.16|
00000e  461d              MOV      r5,r3
                  |L69.16|
000010  5d63              LDRB     r3,[r4,r5]
000012  005b              LSLS     r3,r3,#1
000014  18e3              ADDS     r3,r4,r3
000016  bc30              POP      {r4,r5}
000018  4718              BX       r3
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\src\\server\\key\\srv_key.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___9_srv_key_c_69717a1a____REV16|
#line 388 "..\\lib\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___9_srv_key_c_69717a1a____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___9_srv_key_c_69717a1a____REVSH|
#line 402
|__asm___9_srv_key_c_69717a1a____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
