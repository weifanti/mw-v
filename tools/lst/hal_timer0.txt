; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\hal_timer0.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\hal_timer0.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\lib\CMSIS\Include -I..\lib\Device\Nuvoton\NUC029xGE\Include -I..\lib\StdDriver\inc -I..\src\core\include -I..\src\driver\include -I..\src\io\include -I..\src\global -I..\src\server\include -I..\src\driver\audio -D__UVISION_VERSION=522 --omf_browse=.\obj\hal_timer0.crf ..\src\global\hal_timer0.c]
                          THUMB

                          AREA ||i.Hal_Timer0_Init||, CODE, READONLY, ALIGN=2

                  Hal_Timer0_Init PROC
;;;76      */
;;;77     void Hal_Timer0_Init(void)
000000  b510              PUSH     {r4,lr}
;;;78     {
;;;79         /* Enable IP clock */
;;;80         CLK_EnableModuleClock(TMR0_MODULE);
000002  4c10              LDR      r4,|L1.68|
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       CLK_EnableModuleClock
;;;81     
;;;82         /* Select IP clock source */
;;;83         CLK_SetModuleClock(TMR0_MODULE, CLK_CLKSEL1_TMR0SEL_HIRC, 0);
00000a  2107              MOVS     r1,#7
00000c  2200              MOVS     r2,#0
00000e  0209              LSLS     r1,r1,#8
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       CLK_SetModuleClock
;;;84     	//CLK_SetModuleClock(TMR0_MODULE, CLK_CLKSEL1_TMR0SEL_HXT, 0);
;;;85     
;;;86         TIMER_Open(TIMER0, TIMER_PERIODIC_MODE, 10000); // 100uS
000016  06a1              LSLS     r1,r4,#26
000018  4c0c              LDR      r4,|L1.76|
00001a  4a0b              LDR      r2,|L1.72|
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       TIMER_Open
000022  6820              LDR      r0,[r4,#0]
000024  0361              LSLS     r1,r4,#13
000026  4308              ORRS     r0,r0,r1
000028  6020              STR      r0,[r4,#0]
00002a  1548              ASRS     r0,r1,#21
00002c  4908              LDR      r1,|L1.80|
00002e  6008              STR      r0,[r1,#0]
;;;87     
;;;88          //Enable timer interrupt
;;;89         TIMER_EnableInt(TIMER0);
;;;90         NVIC_EnableIRQ(TMR0_IRQn);
;;;91         NVIC_SetPriority(TMR0_IRQn, 1);
000030  2101              MOVS     r1,#1
000032  2008              MOVS     r0,#8
000034  f7fffffe          BL       NVIC_SetPriority
000038  6820              LDR      r0,[r4,#0]
00003a  03a1              LSLS     r1,r4,#14
00003c  4308              ORRS     r0,r0,r1
00003e  6020              STR      r0,[r4,#0]
;;;92     
;;;93     
;;;94         // Start Timer 
;;;95         TIMER_Start(TIMER0);
;;;96     
;;;97     //	TimeOutSet(&TestTimer, 100);
;;;98     //	TimeOutSet(&KeyScanTimer, 10);
;;;99     //	TimeOutSet(&ModCheckTimer, 10);
;;;100    //	TimeOutSet(&BatDisplayTimer, 10);	
;;;101    //	TimeOutSet(&FmStoreTimer, 10);	
;;;102    	
;;;103    }
000040  bd10              POP      {r4,pc}
;;;104    
                          ENDP

000042  0000              DCW      0x0000
                  |L1.68|
                          DCD      0x5e800002
                  |L1.72|
                          DCD      0x00002710
                  |L1.76|
                          DCD      0x40010000
                  |L1.80|
                          DCD      0xe000e100

                          AREA ||i.Hal_Timer1_Init||, CODE, READONLY, ALIGN=2

                  Hal_Timer1_Init PROC
;;;107    
;;;108    void Hal_Timer1_Init(void)
000000  b510              PUSH     {r4,lr}
;;;109    {
;;;110        /* Enable IP clock */
;;;111        CLK_EnableModuleClock(TMR1_MODULE);
000002  4c1f              LDR      r4,|L2.128|
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       CLK_EnableModuleClock
;;;112    
;;;113        /* Select IP clock source */
;;;114        CLK_SetModuleClock(TMR1_MODULE, CLK_CLKSEL1_TMR0SEL_HIRC, 0);
00000a  2107              MOVS     r1,#7
00000c  2200              MOVS     r2,#0
00000e  0209              LSLS     r1,r1,#8
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       CLK_SetModuleClock
;;;115    	//CLK_SetModuleClock(TMR0_MODULE, CLK_CLKSEL1_TMR0SEL_HXT, 0);
;;;116    
;;;117        TIMER_Open(TIMER1, TIMER_PERIODIC_MODE, 10000); // 100uS
000016  4c1c              LDR      r4,|L2.136|
000018  2101              MOVS     r1,#1
00001a  4a1a              LDR      r2,|L2.132|
00001c  06c9              LSLS     r1,r1,#27
00001e  4620              MOV      r0,r4
000020  f7fffffe          BL       TIMER_Open
000024  6820              LDR      r0,[r4,#0]
000026  0561              LSLS     r1,r4,#21
000028  4308              ORRS     r0,r0,r1
00002a  6020              STR      r0,[r4,#0]
00002c  1508              ASRS     r0,r1,#20
00002e  4917              LDR      r1,|L2.140|
000030  6008              STR      r0,[r1,#0]
;;;118    
;;;119         //Enable timer interrupt
;;;120        TIMER_EnableInt(TIMER1);
;;;121        NVIC_EnableIRQ(TMR1_IRQn);
;;;122        NVIC_SetPriority(TMR1_IRQn, 1);
000032  2101              MOVS     r1,#1
000034  2009              MOVS     r0,#9
000036  f7fffffe          BL       NVIC_SetPriority
00003a  6820              LDR      r0,[r4,#0]
00003c  05a1              LSLS     r1,r4,#22
00003e  4308              ORRS     r0,r0,r1
000040  6020              STR      r0,[r4,#0]
;;;123    
;;;124    
;;;125        // Start Timer 
;;;126        TIMER_Start(TIMER1);
;;;127    
;;;128    	TimeOutSet(&TestTimer, 100);
000042  2164              MOVS     r1,#0x64
000044  4812              LDR      r0,|L2.144|
000046  f7fffffe          BL       TimeOutSet
;;;129    	TimeOutSet(&SysTimer_1s, 100);
00004a  4811              LDR      r0,|L2.144|
00004c  2164              MOVS     r1,#0x64
00004e  3008              ADDS     r0,r0,#8
000050  f7fffffe          BL       TimeOutSet
;;;130    	TimeOutSet(&ModulePowerUpPinTimer, 100);
000054  480e              LDR      r0,|L2.144|
000056  2164              MOVS     r1,#0x64
000058  3010              ADDS     r0,r0,#0x10
00005a  f7fffffe          BL       TimeOutSet
;;;131    	
;;;132    	TimeOutSet(&PoweroffLedTimer, 100);
00005e  480c              LDR      r0,|L2.144|
000060  2164              MOVS     r1,#0x64
000062  3018              ADDS     r0,r0,#0x18
000064  f7fffffe          BL       TimeOutSet
;;;133    	TimeOutSet(&SubBoardHandshakeTimer, 100);
000068  4809              LDR      r0,|L2.144|
00006a  2164              MOVS     r1,#0x64
00006c  3028              ADDS     r0,r0,#0x28
00006e  f7fffffe          BL       TimeOutSet
;;;134    	TimeOutSet(&ModeSwitchTimer, 100);
000072  4807              LDR      r0,|L2.144|
000074  2164              MOVS     r1,#0x64
000076  3020              ADDS     r0,r0,#0x20
000078  f7fffffe          BL       TimeOutSet
;;;135    
;;;136    
;;;137    //	TimeOutSet(&KeyScanTimer, 10);
;;;138    //	TimeOutSet(&ModCheckTimer, 10);
;;;139    //	TimeOutSet(&BatDisplayTimer, 10);	
;;;140    //	TimeOutSet(&FmStoreTimer, 10);	
;;;141    	
;;;142    }
00007c  bd10              POP      {r4,pc}
;;;143    
                          ENDP

00007e  0000              DCW      0x0000
                  |L2.128|
                          DCD      0x5ec00003
                  |L2.132|
                          DCD      0x00002710
                  |L2.136|
                          DCD      0x40010100
                  |L2.140|
                          DCD      0xe000e100
                  |L2.144|
                          DCD      ||.data||+0x4

                          AREA ||i.IsTimeOut||, CODE, READONLY, ALIGN=2

                  IsTimeOut PROC
;;;47     uint8_t
;;;48     IsTimeOut(
000000  4904              LDR      r1,|L3.20|
;;;49     	TIMER 	*timer
;;;50     	)
;;;51     {
;;;52     	//uint8_t	isTimeOut;
;;;53     	//isTimeOut = gSysControl.systick>= timer->TimeOutVal;
;;;54     	//return isTimeOut;
;;;55     
;;;56         if(Global_datas.systick >= timer->TimeOutVal)
000002  6800              LDR      r0,[r0,#0]
000004  6a89              LDR      r1,[r1,#0x28]  ; Global_datas
000006  4281              CMP      r1,r0
000008  d301              BCC      |L3.14|
;;;57         {
;;;58             return 1;
00000a  2001              MOVS     r0,#1
;;;59         }
;;;60         else
;;;61         {
;;;62             return 0;
;;;63         }
;;;64     }
00000c  4770              BX       lr
                  |L3.14|
00000e  2000              MOVS     r0,#0                 ;62
000010  4770              BX       lr
;;;65     
                          ENDP

000012  0000              DCW      0x0000
                  |L3.20|
                          DCD      Global_datas

                          AREA ||i.NVIC_SetPriority||, CODE, READONLY, ALIGN=2

                  NVIC_SetPriority PROC
;;;687     */
;;;688    __STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
000000  0783              LSLS     r3,r0,#30
;;;689    {
;;;690        if((int32_t)(IRQn) < 0)
;;;691        {
;;;692            SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
000002  22ff              MOVS     r2,#0xff
000004  0edb              LSRS     r3,r3,#27
000006  409a              LSLS     r2,r2,r3
000008  0789              LSLS     r1,r1,#30
00000a  0e09              LSRS     r1,r1,#24
00000c  4099              LSLS     r1,r1,r3
00000e  2800              CMP      r0,#0                 ;690
000010  da0b              BGE      |L4.42|
000012  0700              LSLS     r0,r0,#28
000014  0f00              LSRS     r0,r0,#28
000016  3808              SUBS     r0,r0,#8
000018  0883              LSRS     r3,r0,#2
00001a  4808              LDR      r0,|L4.60|
00001c  009b              LSLS     r3,r3,#2
00001e  1818              ADDS     r0,r3,r0
000020  69c3              LDR      r3,[r0,#0x1c]
000022  4393              BICS     r3,r3,r2
000024  430b              ORRS     r3,r3,r1
000026  61c3              STR      r3,[r0,#0x1c]
;;;693                                        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
;;;694        }
;;;695        else
;;;696        {
;;;697            NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
;;;698                                        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
;;;699        }
;;;700    }
000028  4770              BX       lr
                  |L4.42|
00002a  0883              LSRS     r3,r0,#2              ;697
00002c  4804              LDR      r0,|L4.64|
00002e  009b              LSLS     r3,r3,#2              ;697
000030  1818              ADDS     r0,r3,r0              ;697
000032  6803              LDR      r3,[r0,#0]            ;697
000034  4393              BICS     r3,r3,r2              ;697
000036  430b              ORRS     r3,r3,r1              ;697
000038  6003              STR      r3,[r0,#0]            ;697
00003a  4770              BX       lr
;;;701    
                          ENDP

                  |L4.60|
                          DCD      0xe000ed00
                  |L4.64|
                          DCD      0xe000e400

                          AREA ||i.TMR1_IRQHandler||, CODE, READONLY, ALIGN=2

                  TMR1_IRQHandler PROC
;;;152     */
;;;153    void TMR1_IRQHandler(void)
000000  490a              LDR      r1,|L5.44|
;;;154    {
;;;155     //   static _Bool on = 0;
;;;156        // NVIC_ClearPendingIRQ(ADC_IRQn);
;;;157        // clear timer interrupt flag
;;;158        static uint8_t temp_count = 0;
;;;159    
;;;160    	temp_count++;
000002  7808              LDRB     r0,[r1,#0]  ; temp_count
000004  1c40              ADDS     r0,r0,#1
000006  b2c0              UXTB     r0,r0
000008  7008              STRB     r0,[r1,#0]
;;;161    	if(temp_count >= 10)  
00000a  280a              CMP      r0,#0xa
00000c  d305              BCC      |L5.26|
;;;162    	{
;;;163    		temp_count = 0;
00000e  2000              MOVS     r0,#0
000010  7008              STRB     r0,[r1,#0]
;;;164        	Global_datas.systick++;
000012  4807              LDR      r0,|L5.48|
000014  6a81              LDR      r1,[r0,#0x28]  ; Global_datas
000016  1c49              ADDS     r1,r1,#1
000018  6281              STR      r1,[r0,#0x28]  ; Global_datas
                  |L5.26|
;;;165    
;;;166    	}
;;;167    
;;;168    	IrTimerCount++;
00001a  4906              LDR      r1,|L5.52|
00001c  6808              LDR      r0,[r1,#0]  ; IrTimerCount
00001e  1c40              ADDS     r0,r0,#1
000020  6008              STR      r0,[r1,#0]  ; IrTimerCount
000022  4905              LDR      r1,|L5.56|
000024  2001              MOVS     r0,#1
000026  6088              STR      r0,[r1,#8]
;;;169    
;;;170        TIMER_ClearIntFlag(TIMER1);
;;;171    
;;;172    }
000028  4770              BX       lr
;;;173    
                          ENDP

00002a  0000              DCW      0x0000
                  |L5.44|
                          DCD      ||.data||
                  |L5.48|
                          DCD      Global_datas
                  |L5.52|
                          DCD      IrTimerCount
                  |L5.56|
                          DCD      0x40010100

                          AREA ||i.TimeOutSet||, CODE, READONLY, ALIGN=2

                  TimeOutSet PROC
;;;34     void
;;;35     TimeOutSet(
000000  4a03              LDR      r2,|L6.16|
;;;36     	TIMER	*timer,
;;;37     	uint32_t 	timeout
;;;38     	)
;;;39     {
;;;40     	timer->RecTickVal = Global_datas.systick;
000002  6a93              LDR      r3,[r2,#0x28]  ; Global_datas
;;;41     	timer->TimeOutVal = Global_datas.systick + timeout;
000004  6043              STR      r3,[r0,#4]
000006  6a92              LDR      r2,[r2,#0x28]  ; Global_datas
000008  1851              ADDS     r1,r2,r1
00000a  6001              STR      r1,[r0,#0]
;;;42     }
00000c  4770              BX       lr
;;;43     
                          ENDP

00000e  0000              DCW      0x0000
                  |L6.16|
                          DCD      Global_datas

                          AREA ||.data||, DATA, ALIGN=2

                  temp_count
000000  00000000          DCB      0x00,0x00,0x00,0x00
                  TestTimer
                          %        8
                  SysTimer_1s
                          %        8
                  ModulePowerUpPinTimer
                          %        8
                  PoweroffLedTimer
                          %        8
                  ModeSwitchTimer
                          %        8
                  SubBoardHandshakeTimer
                          %        8

                          AREA ||area_number.10||, DATA, ALIGN=2

                          EXPORTAS ||area_number.10||, ||.data||
                  LedKeyBlinkTimer
                          %        8

                          AREA ||area_number.11||, DATA, ALIGN=2

                          EXPORTAS ||area_number.11||, ||.data||
                  AdcTimer
                          %        8

                          AREA ||area_number.12||, DATA, ALIGN=2

                          EXPORTAS ||area_number.12||, ||.data||
                  PaTimer
                          %        8

;*** Start embedded assembler ***

#line 1 "..\\src\\global\\hal_timer0.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___12_hal_timer0_c_3bacf570____REV16|
#line 388 "..\\lib\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___12_hal_timer0_c_3bacf570____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___12_hal_timer0_c_3bacf570____REVSH|
#line 402
|__asm___12_hal_timer0_c_3bacf570____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
